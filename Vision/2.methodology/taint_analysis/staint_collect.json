{
    "CVE-2022-26336": {
        "source": {
            "old": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "63": "public static List<MAPIAttribute> create(TNEFAttribute parent) throws IOException {"
                }
            },
            "new": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "63": "public static List<MAPIAttribute> create(TNEFAttribute parent) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "28": "return MAX_RECORD_LENGTH;",
                    "38": "return property;",
                    "42": "return type;",
                    "46": "return data;",
                    "60": "return property + \" \" + hex;",
                    "71": "throw new IllegalArgumentException( \"Can only create from a MAPIProperty attribute, \" + \"instead received a \" + parent.getProperty() + \" one\" );",
                    "129": "throw new IOException(\"Placeholder/NULL arrays aren't supported.\");",
                    "156": "return attrs;",
                    "161": "return type.getLength();",
                    "165": "return LittleEndian.readInt(inp);",
                    "168": "throw new IllegalArgumentException(\"Unknown type \" + type);",
                    "178": "throw new IOException(\"tried to skip \"+toSkip +\" but only skipped:\"+skipped);"
                }
            },
            "new": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "28": "return MAX_RECORD_LENGTH;",
                    "38": "return property;",
                    "42": "return type;",
                    "46": "return data;",
                    "60": "return property + \" \" + hex;",
                    "71": "throw new IllegalArgumentException( \"Can only create from a MAPIProperty attribute, \" + \"instead received a \" + parent.getProperty() + \" one\" );",
                    "101": "throw new IOException(\"Not enough data to read guid\");",
                    "135": "throw new IOException(\"Placeholder/NULL arrays aren't supported.\");",
                    "142": "throw new IOException(\"Not enough data to read \" + len + \" bytes of attribute value\");",
                    "165": "return attrs;",
                    "170": "return type.getLength();",
                    "174": "return LittleEndian.readInt(inp);",
                    "177": "throw new IllegalArgumentException(\"Unknown type \" + type);",
                    "187": "throw new IOException(\"tried to skip \"+toSkip +\" but only skipped:\"+skipped);"
                }
            }
        },
        "undefined": {
            "old": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "51": "if(data.length <= 16) {",
                    "54": "else {",
                    "64": "if(parent.getProperty() == TNEFProperty.ID_MAPIPROPERTIES) {",
                    "67": "else if(parent.getProperty() == TNEFProperty.ID_ATTACHMENT) {",
                    "70": "else {",
                    "77": "for(int i=0; i<count; i++) {",
                    "83": "if( (typeAndMV & Types.MULTIVALUED_FLAG) != 0 ) {",
                    "88": "if(typeId == Types.ASCII_STRING.getId() || typeId == Types.UNICODE_STRING.getId() || typeId == Types.BINARY.getId() || typeId == Types.DIRECTORY.getId()) {",
                    "93": "if (type == null) {",
                    "98": "if(id >= 0x8000 && id <= 0xFFFF) {",
                    "103": "if(mptype == 0) {",
                    "108": "else {",
                    "119": "if(prop == MAPIProperty.UNKNOWN) {",
                    "124": "if(isMV || isVL) {",
                    "128": "if (type == Types.NULL && values > 1) {",
                    "132": "for(int j=0; j<values; j++) {",
                    "138": "if(type == Types.UNICODE_STRING || type == Types.ASCII_STRING) {",
                    "141": "else if(type == Types.APP_TIME || type == Types.TIME) {",
                    "144": "else if(id == MAPIProperty.RTF_COMPRESSED.id) {",
                    "147": "else {",
                    "160": "if (type.isFixedLength()) {",
                    "164": "if (type == Types.ASCII_STRING || type == Types.UNICODE_STRING || type == Types.DIRECTORY || type == Types.BINARY) {",
                    "167": "else {",
                    "174": "if(length % 4 != 0) {",
                    "177": "if (skipped != toSkip) {"
                }
            },
            "new": {
                "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java": {
                    "51": "if(data.length <= 16) {",
                    "54": "else {",
                    "64": "if(parent.getProperty() == TNEFProperty.ID_MAPIPROPERTIES) {",
                    "67": "else if(parent.getProperty() == TNEFProperty.ID_ATTACHMENT) {",
                    "70": "else {",
                    "77": "for(int i=0; i<count; i++) {",
                    "83": "if( (typeAndMV & Types.MULTIVALUED_FLAG) != 0 ) {",
                    "88": "if(typeId == Types.ASCII_STRING.getId() || typeId == Types.UNICODE_STRING.getId() || typeId == Types.BINARY.getId() || typeId == Types.DIRECTORY.getId()) {",
                    "93": "if (type == null) {",
                    "98": "if(id >= 0x8000 && id <= 0xFFFF) {",
                    "100": "if (IOUtils.readFully(inp, guid) < 0) {",
                    "106": "if(mptype == 0) {",
                    "111": "else {",
                    "114": "if (IOUtils.readFully(inp, mpdata) < 0) {",
                    "115": "throw new IOException(\"Not enough data to read \" + mplen + \" bytes for attribute name\");",
                    "125": "if(prop == MAPIProperty.UNKNOWN) {",
                    "130": "if(isMV || isVL) {",
                    "134": "if (type == Types.NULL && values > 1) {",
                    "138": "for(int j=0; j<values; j++) {",
                    "141": "if (IOUtils.readFully(inp, data) < 0) {",
                    "147": "if(type == Types.UNICODE_STRING || type == Types.ASCII_STRING) {",
                    "150": "else if(type == Types.APP_TIME || type == Types.TIME) {",
                    "153": "else if(id == MAPIProperty.RTF_COMPRESSED.id) {",
                    "156": "else {",
                    "169": "if (type.isFixedLength()) {",
                    "173": "if (type == Types.ASCII_STRING || type == Types.UNICODE_STRING || type == Types.DIRECTORY || type == Types.BINARY) {",
                    "176": "else {",
                    "183": "if(length % 4 != 0) {",
                    "186": "if (skipped != toSkip) {"
                }
            }
        }
    },
    "CVE-2014-0050": {
        "source": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {},
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "69": "public MultipartStream(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier) {"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {
                    "446": "private int makeAvailable() throws IOException {",
                    "477": "public boolean isClosed() {"
                },
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "69": "public MultipartStream(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {
                    "93": "return headerEncoding;",
                    "105": "throw new IOException(\"No more data is available\");",
                    "114": "return buffer[head++];",
                    "121": "try {",
                    "124": "return true;",
                    "135": "throw new MalformedStreamException( \"Unexpected characters follow a boundary\");",
                    "139": "catch (FileUploadIOException e) {",
                    "140": "throw e;",
                    "142": "catch (IOException e) {",
                    "143": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "146": "return nextChunk;",
                    "151": "throw new IllegalBoundaryException( \"The length of a boundary token can not be changed\");",
                    "163": "try {",
                    "166": "catch (FileUploadIOException e) {",
                    "167": "throw e;",
                    "169": "catch (IOException e) {",
                    "170": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "174": "throw new MalformedStreamException( format(\"Header section has more than %s bytes (maybe it is not properly terminated)\", Integer.valueOf(HEADER_PART_SIZE_MAX)));",
                    "189": "try {",
                    "192": "catch (UnsupportedEncodingException e) {",
                    "201": "return headers;",
                    "206": "return (int) Streams.copy(istream, output, false);",
                    "210": "return new ItemInputStream();",
                    "214": "return readBodyData(null);",
                    "220": "try {",
                    "222": "return readBoundary();",
                    "224": "catch (MalformedStreamException e) {",
                    "225": "return false;",
                    "239": "return false;",
                    "244": "return true;",
                    "250": "return i;",
                    "255": "return -1;",
                    "265": "return -1;",
                    "278": "return first - 1;",
                    "281": "return -1;",
                    "332": "return total;",
                    "338": "return tail - head - pad;",
                    "341": "return pos - head;",
                    "348": "throw new FileItemStream.ItemSkippedException();",
                    "352": "return -1;",
                    "357": "return b;",
                    "360": "return b + BYTE_POSITIVE_OFFSET;",
                    "366": "throw new FileItemStream.ItemSkippedException();",
                    "370": "return 0;",
                    "377": "return -1;",
                    "386": "return res;",
                    "396": "return;",
                    "425": "throw new FileItemStream.ItemSkippedException();",
                    "432": "return 0;",
                    "439": "return res;",
                    "444": "return 0;",
                    "455": "throw new MalformedStreamException(msg);",
                    "466": "return av;",
                    "474": "return closed;"
                },
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "93": "return headerEncoding;",
                    "105": "throw new IOException(\"No more data is available\");",
                    "114": "return buffer[head++];",
                    "121": "try {",
                    "124": "return true;",
                    "135": "throw new MalformedStreamException( \"Unexpected characters follow a boundary\");",
                    "139": "catch (FileUploadIOException e) {",
                    "140": "throw e;",
                    "142": "catch (IOException e) {",
                    "143": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "146": "return nextChunk;",
                    "151": "throw new IllegalBoundaryException( \"The length of a boundary token can not be changed\");",
                    "163": "try {",
                    "166": "catch (FileUploadIOException e) {",
                    "167": "throw e;",
                    "169": "catch (IOException e) {",
                    "170": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "174": "throw new MalformedStreamException( format(\"Header section has more than %s bytes (maybe it is not properly terminated)\", Integer.valueOf(HEADER_PART_SIZE_MAX)));",
                    "189": "try {",
                    "192": "catch (UnsupportedEncodingException e) {",
                    "201": "return headers;",
                    "206": "return (int) Streams.copy(istream, output, false);",
                    "210": "return new ItemInputStream();",
                    "214": "return readBodyData(null);",
                    "220": "try {",
                    "222": "return readBoundary();",
                    "224": "catch (MalformedStreamException e) {",
                    "225": "return false;",
                    "239": "return false;",
                    "244": "return true;",
                    "250": "return i;",
                    "255": "return -1;",
                    "265": "return -1;",
                    "278": "return first - 1;",
                    "281": "return -1;",
                    "332": "return total;",
                    "338": "return tail - head - pad;",
                    "341": "return pos - head;",
                    "348": "throw new FileItemStream.ItemSkippedException();",
                    "352": "return -1;",
                    "357": "return b;",
                    "360": "return b + BYTE_POSITIVE_OFFSET;",
                    "366": "throw new FileItemStream.ItemSkippedException();",
                    "370": "return 0;",
                    "377": "return -1;",
                    "386": "return res;",
                    "396": "return;",
                    "425": "throw new FileItemStream.ItemSkippedException();",
                    "432": "return 0;",
                    "439": "return res;",
                    "444": "return 0;",
                    "455": "throw new MalformedStreamException(msg);",
                    "466": "return av;",
                    "474": "return closed;"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {
                    "97": "return headerEncoding;",
                    "109": "throw new IOException(\"No more data is available\");",
                    "118": "return buffer[head++];",
                    "125": "try {",
                    "128": "return true;",
                    "139": "throw new MalformedStreamException( \"Unexpected characters follow a boundary\");",
                    "143": "catch (FileUploadIOException e) {",
                    "144": "throw e;",
                    "146": "catch (IOException e) {",
                    "147": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "150": "return nextChunk;",
                    "155": "throw new IllegalBoundaryException( \"The length of a boundary token can not be changed\");",
                    "167": "try {",
                    "170": "catch (FileUploadIOException e) {",
                    "171": "throw e;",
                    "173": "catch (IOException e) {",
                    "174": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "178": "throw new MalformedStreamException( format(\"Header section has more than %s bytes (maybe it is not properly terminated)\", Integer.valueOf(HEADER_PART_SIZE_MAX)));",
                    "193": "try {",
                    "196": "catch (UnsupportedEncodingException e) {",
                    "205": "return headers;",
                    "210": "return (int) Streams.copy(istream, output, false);",
                    "214": "return new ItemInputStream();",
                    "218": "return readBodyData(null);",
                    "224": "try {",
                    "226": "return readBoundary();",
                    "228": "catch (MalformedStreamException e) {",
                    "229": "return false;",
                    "243": "return false;",
                    "248": "return true;",
                    "254": "return i;",
                    "259": "return -1;",
                    "269": "return -1;",
                    "282": "return first - 1;",
                    "285": "return -1;",
                    "336": "return total;",
                    "342": "return tail - head - pad;",
                    "345": "return pos - head;",
                    "352": "throw new FileItemStream.ItemSkippedException();",
                    "356": "return -1;",
                    "361": "return b;",
                    "364": "return b + BYTE_POSITIVE_OFFSET;",
                    "370": "throw new FileItemStream.ItemSkippedException();",
                    "374": "return 0;",
                    "381": "return -1;",
                    "390": "return res;",
                    "400": "return;",
                    "429": "throw new FileItemStream.ItemSkippedException();",
                    "436": "return 0;",
                    "443": "return res;",
                    "448": "return 0;",
                    "459": "throw new MalformedStreamException(msg);",
                    "470": "return av;",
                    "478": "return closed;"
                },
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "97": "return headerEncoding;",
                    "109": "throw new IOException(\"No more data is available\");",
                    "118": "return buffer[head++];",
                    "125": "try {",
                    "128": "return true;",
                    "139": "throw new MalformedStreamException( \"Unexpected characters follow a boundary\");",
                    "143": "catch (FileUploadIOException e) {",
                    "144": "throw e;",
                    "146": "catch (IOException e) {",
                    "147": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "150": "return nextChunk;",
                    "155": "throw new IllegalBoundaryException( \"The length of a boundary token can not be changed\");",
                    "167": "try {",
                    "170": "catch (FileUploadIOException e) {",
                    "171": "throw e;",
                    "173": "catch (IOException e) {",
                    "174": "throw new MalformedStreamException(\"Stream ended unexpectedly\");",
                    "178": "throw new MalformedStreamException( format(\"Header section has more than %s bytes (maybe it is not properly terminated)\", Integer.valueOf(HEADER_PART_SIZE_MAX)));",
                    "193": "try {",
                    "196": "catch (UnsupportedEncodingException e) {",
                    "205": "return headers;",
                    "210": "return (int) Streams.copy(istream, output, false);",
                    "214": "return new ItemInputStream();",
                    "218": "return readBodyData(null);",
                    "224": "try {",
                    "226": "return readBoundary();",
                    "228": "catch (MalformedStreamException e) {",
                    "229": "return false;",
                    "243": "return false;",
                    "248": "return true;",
                    "254": "return i;",
                    "259": "return -1;",
                    "269": "return -1;",
                    "282": "return first - 1;",
                    "285": "return -1;",
                    "336": "return total;",
                    "342": "return tail - head - pad;",
                    "345": "return pos - head;",
                    "352": "throw new FileItemStream.ItemSkippedException();",
                    "356": "return -1;",
                    "361": "return b;",
                    "364": "return b + BYTE_POSITIVE_OFFSET;",
                    "370": "throw new FileItemStream.ItemSkippedException();",
                    "374": "return 0;",
                    "381": "return -1;",
                    "390": "return res;",
                    "400": "return;",
                    "429": "throw new FileItemStream.ItemSkippedException();",
                    "436": "return 0;",
                    "443": "return res;",
                    "448": "return 0;",
                    "459": "throw new MalformedStreamException(msg);",
                    "470": "return av;",
                    "478": "return closed;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {
                    "32": "if (listener != null) {",
                    "101": "if (head == tail) {",
                    "104": "if (tail == -1) {",
                    "108": "if (notifier != null) {",
                    "123": "if (marker[0] == LF) {",
                    "128": "if (arrayequals(marker, STREAM_TERMINATOR, 2)) {",
                    "131": "else if (arrayequals(marker, FIELD_SEPARATOR, 2)) {",
                    "134": "else {",
                    "150": "if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) {",
                    "162": "while (i < HEADER_SEPARATOR.length) {",
                    "173": "if (++size > HEADER_PART_SIZE_MAX) {",
                    "177": "if (b == HEADER_SEPARATOR[i]) {",
                    "180": "else {",
                    "188": "if (headerEncoding != null) {",
                    "197": "else {",
                    "237": "for (int i = 0; i < count; i++) {",
                    "238": "if (a[i] != b[i]) {",
                    "248": "for (int i = pos; i < tail; i++) {",
                    "249": "if (buffer[i] == value) {",
                    "262": "for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {",
                    "264": "if (first == -1 || (first > maxpos)) {",
                    "268": "for (match = 1; match < boundaryLength; match++) {",
                    "269": "if (buffer[first + match] != boundary[match]) {",
                    "277": "if (match == boundaryLength) {",
                    "319": "if (pos == -1) {",
                    "320": "if (tail - head > keepRegion) {",
                    "323": "else {",
                    "337": "if (pos == -1) {",
                    "347": "if (closed) {",
                    "351": "if (available() == 0 && makeAvailable() == 0) {",
                    "356": "if (b >= 0) {",
                    "365": "if (closed) {",
                    "369": "if (len == 0) {",
                    "374": "if (res == 0) {",
                    "376": "if (res == 0) {",
                    "395": "if (closed) {",
                    "399": "if (pCloseUnderlying) {",
                    "403": "else {",
                    "404": "for (;;) {",
                    "406": "if (av == 0) {",
                    "408": "if (av == 0) {",
                    "424": "if (closed) {",
                    "429": "if (av == 0) {",
                    "431": "if (av == 0) {",
                    "443": "if (pos != -1) {",
                    "451": "for (;;) {",
                    "453": "if (bytesRead == -1) {",
                    "458": "if (notifier != null) {",
                    "465": "if (av > 0 || pos != -1) {"
                },
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "32": "if (listener != null) {",
                    "101": "if (head == tail) {",
                    "104": "if (tail == -1) {",
                    "108": "if (notifier != null) {",
                    "123": "if (marker[0] == LF) {",
                    "128": "if (arrayequals(marker, STREAM_TERMINATOR, 2)) {",
                    "131": "else if (arrayequals(marker, FIELD_SEPARATOR, 2)) {",
                    "134": "else {",
                    "150": "if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) {",
                    "162": "while (i < HEADER_SEPARATOR.length) {",
                    "173": "if (++size > HEADER_PART_SIZE_MAX) {",
                    "177": "if (b == HEADER_SEPARATOR[i]) {",
                    "180": "else {",
                    "188": "if (headerEncoding != null) {",
                    "197": "else {",
                    "237": "for (int i = 0; i < count; i++) {",
                    "238": "if (a[i] != b[i]) {",
                    "248": "for (int i = pos; i < tail; i++) {",
                    "249": "if (buffer[i] == value) {",
                    "262": "for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {",
                    "264": "if (first == -1 || (first > maxpos)) {",
                    "268": "for (match = 1; match < boundaryLength; match++) {",
                    "269": "if (buffer[first + match] != boundary[match]) {",
                    "277": "if (match == boundaryLength) {",
                    "319": "if (pos == -1) {",
                    "320": "if (tail - head > keepRegion) {",
                    "323": "else {",
                    "337": "if (pos == -1) {",
                    "347": "if (closed) {",
                    "351": "if (available() == 0 && makeAvailable() == 0) {",
                    "356": "if (b >= 0) {",
                    "365": "if (closed) {",
                    "369": "if (len == 0) {",
                    "374": "if (res == 0) {",
                    "376": "if (res == 0) {",
                    "395": "if (closed) {",
                    "399": "if (pCloseUnderlying) {",
                    "403": "else {",
                    "404": "for (;;) {",
                    "406": "if (av == 0) {",
                    "408": "if (av == 0) {",
                    "424": "if (closed) {",
                    "429": "if (av == 0) {",
                    "431": "if (av == 0) {",
                    "443": "if (pos != -1) {",
                    "451": "for (;;) {",
                    "453": "if (bytesRead == -1) {",
                    "458": "if (notifier != null) {",
                    "465": "if (av > 0 || pos != -1) {"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/FileUploadBase.java": {
                    "32": "if (listener != null) {",
                    "75": "if (bufSize < this.boundaryLength + 1) {",
                    "76": "throw new IllegalArgumentException( \"The buffer size specified for the MultipartStream is too small\");",
                    "105": "if (head == tail) {",
                    "108": "if (tail == -1) {",
                    "112": "if (notifier != null) {",
                    "127": "if (marker[0] == LF) {",
                    "132": "if (arrayequals(marker, STREAM_TERMINATOR, 2)) {",
                    "135": "else if (arrayequals(marker, FIELD_SEPARATOR, 2)) {",
                    "138": "else {",
                    "154": "if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) {",
                    "166": "while (i < HEADER_SEPARATOR.length) {",
                    "177": "if (++size > HEADER_PART_SIZE_MAX) {",
                    "181": "if (b == HEADER_SEPARATOR[i]) {",
                    "184": "else {",
                    "192": "if (headerEncoding != null) {",
                    "201": "else {",
                    "241": "for (int i = 0; i < count; i++) {",
                    "242": "if (a[i] != b[i]) {",
                    "252": "for (int i = pos; i < tail; i++) {",
                    "253": "if (buffer[i] == value) {",
                    "266": "for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {",
                    "268": "if (first == -1 || (first > maxpos)) {",
                    "272": "for (match = 1; match < boundaryLength; match++) {",
                    "273": "if (buffer[first + match] != boundary[match]) {",
                    "281": "if (match == boundaryLength) {",
                    "323": "if (pos == -1) {",
                    "324": "if (tail - head > keepRegion) {",
                    "327": "else {",
                    "341": "if (pos == -1) {",
                    "351": "if (closed) {",
                    "355": "if (available() == 0 && makeAvailable() == 0) {",
                    "360": "if (b >= 0) {",
                    "369": "if (closed) {",
                    "373": "if (len == 0) {",
                    "378": "if (res == 0) {",
                    "380": "if (res == 0) {",
                    "399": "if (closed) {",
                    "403": "if (pCloseUnderlying) {",
                    "407": "else {",
                    "408": "for (;;) {",
                    "410": "if (av == 0) {",
                    "412": "if (av == 0) {",
                    "428": "if (closed) {",
                    "433": "if (av == 0) {",
                    "435": "if (av == 0) {",
                    "447": "if (pos != -1) {",
                    "455": "for (;;) {",
                    "457": "if (bytesRead == -1) {",
                    "462": "if (notifier != null) {",
                    "469": "if (av > 0 || pos != -1) {"
                },
                "src/main/java/org/apache/commons/fileupload/MultipartStream.java": {
                    "32": "if (listener != null) {",
                    "75": "if (bufSize < this.boundaryLength + 1) {",
                    "76": "throw new IllegalArgumentException( \"The buffer size specified for the MultipartStream is too small\");",
                    "105": "if (head == tail) {",
                    "108": "if (tail == -1) {",
                    "112": "if (notifier != null) {",
                    "127": "if (marker[0] == LF) {",
                    "132": "if (arrayequals(marker, STREAM_TERMINATOR, 2)) {",
                    "135": "else if (arrayequals(marker, FIELD_SEPARATOR, 2)) {",
                    "138": "else {",
                    "154": "if (boundary.length != boundaryLength - BOUNDARY_PREFIX.length) {",
                    "166": "while (i < HEADER_SEPARATOR.length) {",
                    "177": "if (++size > HEADER_PART_SIZE_MAX) {",
                    "181": "if (b == HEADER_SEPARATOR[i]) {",
                    "184": "else {",
                    "192": "if (headerEncoding != null) {",
                    "201": "else {",
                    "241": "for (int i = 0; i < count; i++) {",
                    "242": "if (a[i] != b[i]) {",
                    "252": "for (int i = pos; i < tail; i++) {",
                    "253": "if (buffer[i] == value) {",
                    "266": "for (first = head; (first <= maxpos) && (match != boundaryLength); first++) {",
                    "268": "if (first == -1 || (first > maxpos)) {",
                    "272": "for (match = 1; match < boundaryLength; match++) {",
                    "273": "if (buffer[first + match] != boundary[match]) {",
                    "281": "if (match == boundaryLength) {",
                    "323": "if (pos == -1) {",
                    "324": "if (tail - head > keepRegion) {",
                    "327": "else {",
                    "341": "if (pos == -1) {",
                    "351": "if (closed) {",
                    "355": "if (available() == 0 && makeAvailable() == 0) {",
                    "360": "if (b >= 0) {",
                    "369": "if (closed) {",
                    "373": "if (len == 0) {",
                    "378": "if (res == 0) {",
                    "380": "if (res == 0) {",
                    "399": "if (closed) {",
                    "403": "if (pCloseUnderlying) {",
                    "407": "else {",
                    "408": "for (;;) {",
                    "410": "if (av == 0) {",
                    "412": "if (av == 0) {",
                    "428": "if (closed) {",
                    "433": "if (av == 0) {",
                    "435": "if (av == 0) {",
                    "447": "if (pos != -1) {",
                    "455": "for (;;) {",
                    "457": "if (bytesRead == -1) {",
                    "462": "if (notifier != null) {",
                    "469": "if (av > 0 || pos != -1) {"
                }
            }
        }
    },
    "CVE-2021-23899": {
        "source": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "277": "private void sanitizeString(int start, int end) {",
                    "803": "private boolean isOctAt(int i) {",
                    "808": "private boolean isHexAt(int i) {"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "277": "private void sanitizeString(int start, int end) {",
                    "817": "private boolean isOctAt(int i) {",
                    "821": "private static boolean isOct(char ch) {",
                    "825": "private boolean isHexAt(int i) {",
                    "829": "private static boolean isHex(char ch) {",
                    "835": "private static int hexVal(char ch) {",
                    "892": "private static int unescapedChar(String s, int left) {",
                    "966": "private static int unescapedCharRev(String s, int rightIncl) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "7": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "13": "return s.toString();",
                    "41": "return this.maximumNestingDepth;",
                    "50": "try {",
                    "233": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "441": "return State.AFTER_KEY;",
                    "445": "return State.AFTER_VALUE;",
                    "450": "return State.AFTER_VALUE;",
                    "452": "return State.AFTER_VALUE;",
                    "456": "return State.AFTER_KEY;",
                    "460": "return State.AFTER_VALUE;",
                    "464": "return State.AFTER_ELEMENT;",
                    "468": "return State.AFTER_ELEMENT;",
                    "471": "throw new AssertionError();",
                    "509": "return i + 1;",
                    "514": "return s.length();",
                    "524": "return;",
                    "525": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "530": "assert sanitizedJson != null;",
                    "537": "return;",
                    "538": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "543": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "666": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "693": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "699": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "705": "try {",
                    "708": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "709": "return false;",
                    "762": "return true;",
                    "788": "return true;",
                    "794": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "797": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "800": "return false;",
                    "805": "return '0' <= ch && ch <= '7';",
                    "812": "return 'a' <= ch && ch <= 'f';",
                    "823": "return true;",
                    "824": "default: return false;",
                    "847": "return limit;",
                    "857": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "862": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "7": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "13": "return s.toString();",
                    "41": "return this.maximumNestingDepth;",
                    "50": "try {",
                    "233": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "455": "return State.AFTER_KEY;",
                    "459": "return State.AFTER_VALUE;",
                    "464": "return State.AFTER_VALUE;",
                    "466": "return State.AFTER_VALUE;",
                    "470": "return State.AFTER_KEY;",
                    "474": "return State.AFTER_VALUE;",
                    "478": "return State.AFTER_ELEMENT;",
                    "482": "return State.AFTER_ELEMENT;",
                    "485": "throw new AssertionError();",
                    "523": "return i + 1;",
                    "528": "return s.length();",
                    "538": "return;",
                    "539": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "544": "assert sanitizedJson != null;",
                    "551": "return;",
                    "552": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "557": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "680": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "707": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "713": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "719": "try {",
                    "722": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "723": "return false;",
                    "776": "return true;",
                    "802": "return true;",
                    "808": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "811": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "814": "return false;",
                    "818": "return isOct(jsonish.charAt(i));",
                    "822": "return '0' <= ch && ch <= '7';",
                    "826": "return isHex(jsonish.charAt(i));",
                    "832": "return 'a' <= lch && lch <= 'f';",
                    "837": "return lch - (lch <= '9' ? '0' : 'a' - 10);",
                    "848": "return true;",
                    "849": "default: return false;",
                    "872": "return limit;",
                    "882": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "887": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;",
                    "895": "return 0;",
                    "901": "return 0x10000;",
                    "922": "return ((octalEnd - left) << 16) | value;",
                    "930": "return 0x4000 | (hexVal(d0) << 4) | hexVal(d1);",
                    "943": "return 0x6000 | (hexVal(d0) << 12) | (hexVal(d1) << 8) | (hexVal(d2) << 4) | hexVal(d3);",
                    "949": "case 'b': return (0x20000 | '\\b');",
                    "950": "case 'f': return (0x20000 | '\\f');",
                    "951": "case 'n': return 0x2000A;",
                    "952": "case 'r': return 0x2000D;",
                    "953": "case 't': return 0x20009;",
                    "954": "case 'v': return 0x20008;",
                    "958": "return (0x20000) | nc;",
                    "961": "return 0x10000 | c;",
                    "968": "return 0;",
                    "982": "return unescaped;",
                    "992": "return 0x10000 | s.charAt(rightIncl);"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "33": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "49": "token_loop: for (int i = 0; i < n; ++i) {",
                    "52": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "57": "switch (ch) {",
                    "71": "if (isMap == null) {",
                    "80": "if (bracketDepth == 0) {",
                    "85": "switch (state) {",
                    "100": "if (ch != closeBracket) {",
                    "107": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "108": "switch (state) {",
                    "131": "if (state == State.AFTER_KEY) {",
                    "134": "else {",
                    "141": "if (i + 1 < n) {",
                    "142": "switch (jsonish.charAt(i + 1)) {",
                    "145": "for (int j = i + 2; j < n; ++j) {",
                    "147": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "157": "if (i + 3 < n) {",
                    "158": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "159": "if (jsonish.charAt(j - 1) == '*') {",
                    "177": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "179": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "186": "if (runEnd == i) {",
                    "194": "if (!(isNumber || isKeyword)) {",
                    "195": "for (; runEnd < n; ++runEnd) {",
                    "196": "if (isJsonSpecialChar(runEnd)) {",
                    "202": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "207": "if (state == State.AFTER_KEY) {",
                    "209": "if (isNumber) {",
                    "213": "else {",
                    "218": "else {",
                    "219": "if (isNumber) {",
                    "222": "else if (!isKeyword) {",
                    "240": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "245": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "249": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "250": "if (sanitizedJson == null) {",
                    "256": "switch (state) {",
                    "269": "while (bracketDepth != 0) {",
                    "279": "for (int i = start; i < end; ++i) {",
                    "281": "switch (ch) {",
                    "288": "if (i == start) {",
                    "289": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "291": "else {",
                    "292": "if (i + 1 == end) {",
                    "294": "if (startDelim != '\\'') {",
                    "301": "if (closed) {",
                    "302": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "304": "else if (ch == '\"') {",
                    "312": "if (i + 3 >= end) {",
                    "322": "if ( (c1 == '\\\\' || c2 == '\\\\' || c3 == '\\\\') || (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {",
                    "330": "if ((i - 2) >= start) {",
                    "333": "if (('-' == cm2 || '\\\\' == cm2) && ('-' == cm1 || '\\\\' == cm1)) {",
                    "341": "if (i + 2 < end) {",
                    "344": "if ((']' == c1 || '\\\\' == c1) && ('>' == c2 || '\\\\' == c2)) {",
                    "352": "if (i + 1 == end) {",
                    "358": "switch (sch) {",
                    "366": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "375": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "386": "if (octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "387": "if (sch <= '3' && octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "393": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "409": "default: if (ch < 0x20) {",
                    "411": "else if (ch < 0xd800) {",
                    "414": "else if (ch < 0xe000) {",
                    "415": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "420": "else if (ch <= 0xfffd) {",
                    "425": "for (int j = 4; --j >= 0;) {",
                    "434": "if (!closed) { insert(end, '\"'); }",
                    "438": "switch (state) {",
                    "440": "if (canBeKey) {",
                    "443": "else {",
                    "454": "if (canBeKey) {",
                    "458": "else {",
                    "466": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "483": "if (sanitizedJson == null) {",
                    "503": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "505": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "508": "if (((i - slashRunStart) & 1) == 0) {",
                    "518": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "519": "switch (jsonish.charAt(i)) {",
                    "531": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "532": "switch (sanitizedJson.charAt(i)) {",
                    "548": "if (pos < end) {",
                    "549": "switch (jsonish.charAt(pos)) {",
                    "561": "if (pos == intEnd) {",
                    "564": "else if ('0' == jsonish.charAt(pos)) {",
                    "569": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "572": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "575": "if ('0' <= ch && ch <= '9') {",
                    "578": "else {",
                    "580": "if ('a' <= ch && ch <= 'f') {",
                    "583": "else {",
                    "594": "else if (intEnd - pos > 1) {",
                    "597": "for (int i = pos; i < intEnd; ++i) {",
                    "599": "if (digVal < 0) {",
                    "609": "if (reencoded) {",
                    "614": "if (DIGITS_BY_BASE_THAT_FIT_IN_63B[base] >= nDigits) {",
                    "618": "else {",
                    "628": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "630": "if (fractionEnd == pos) {",
                    "637": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "638": "if (pos < end) {",
                    "639": "switch (jsonish.charAt(pos)) {",
                    "647": "if (expEnd == pos) {",
                    "654": "if (pos != end) {",
                    "672": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "674": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "677": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "680": "else {",
                    "682": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "684": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "689": "if (fractionEnd == sanEnd) {",
                    "692": "else {",
                    "695": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "701": "if (expEnd == expStart) {",
                    "704": "else {",
                    "718": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "720": "if (ch == '.') {",
                    "722": "if (zero) { nZeroesPending = 0; }",
                    "727": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "728": "if (digit == '0') { ++nZeroesPending;",
                    "730": "else {",
                    "731": "if (zero) {",
                    "732": "if (sawDecimal) {",
                    "740": "while (nZeroesPending != 0 || digit != 0) {",
                    "742": "if (nZeroesPending == 0) {",
                    "746": "else {",
                    "759": "if (zero) {",
                    "765": "if (k <= n && n <= 21) {",
                    "766": "for (int i = k; i < n; ++i) {",
                    "771": "else if (0 < n && n <= 21) {",
                    "774": "else if (-6 < n && n <= 0) {",
                    "777": "else {",
                    "778": "if (k == 1) {",
                    "780": "else {",
                    "793": "if (n == 5) {",
                    "796": "else if (n == 4) {",
                    "810": "if ('0' <= ch && ch <= '9') { return true; }",
                    "817": "if (ch <= ' ') { return true; }",
                    "818": "switch (ch) {",
                    "830": "for (int quadsToShift = nDigits; --quadsToShift >= 0;) {",
                    "842": "for (int end = start; end < limit; ++end) {",
                    "844": "if (!('0' <= ch && ch <= '9')) { return end; }"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "33": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "49": "token_loop: for (int i = 0; i < n; ++i) {",
                    "52": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "57": "switch (ch) {",
                    "71": "if (isMap == null) {",
                    "80": "if (bracketDepth == 0) {",
                    "85": "switch (state) {",
                    "100": "if (ch != closeBracket) {",
                    "107": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "108": "switch (state) {",
                    "131": "if (state == State.AFTER_KEY) {",
                    "134": "else {",
                    "141": "if (i + 1 < n) {",
                    "142": "switch (jsonish.charAt(i + 1)) {",
                    "145": "for (int j = i + 2; j < n; ++j) {",
                    "147": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "157": "if (i + 3 < n) {",
                    "158": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "159": "if (jsonish.charAt(j - 1) == '*') {",
                    "177": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "179": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "186": "if (runEnd == i) {",
                    "194": "if (!(isNumber || isKeyword)) {",
                    "195": "for (; runEnd < n; ++runEnd) {",
                    "196": "if (isJsonSpecialChar(runEnd)) {",
                    "202": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "207": "if (state == State.AFTER_KEY) {",
                    "209": "if (isNumber) {",
                    "213": "else {",
                    "218": "else {",
                    "219": "if (isNumber) {",
                    "222": "else if (!isKeyword) {",
                    "240": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "245": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "249": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "250": "if (sanitizedJson == null) {",
                    "256": "switch (state) {",
                    "269": "while (bracketDepth != 0) {",
                    "279": "for (int i = start; i < end; ++i) {",
                    "281": "switch (ch) {",
                    "288": "if (i == start) {",
                    "289": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "291": "else {",
                    "292": "if (i + 1 == end) {",
                    "294": "if (startDelim != '\\'') {",
                    "301": "if (closed) {",
                    "302": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "304": "else if (ch == '\"') {",
                    "312": "if (i + 3 >= end) {",
                    "328": "if ( (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {",
                    "336": "if ((i - 2) >= start) {",
                    "343": "if ('-' == cm2 && '-' == cm1) {",
                    "351": "if (i + 2 < end) {",
                    "358": "if (']' == c1 && '>' == c2) {",
                    "366": "if (i + 1 == end) {",
                    "372": "switch (sch) {",
                    "380": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "389": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "400": "if (octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "401": "if (sch <= '3' && octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "407": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "423": "default: if (ch < 0x20) {",
                    "425": "else if (ch < 0xd800) {",
                    "428": "else if (ch < 0xe000) {",
                    "429": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "434": "else if (ch <= 0xfffd) {",
                    "439": "for (int j = 4; --j >= 0;) {",
                    "448": "if (!closed) { insert(end, '\"'); }",
                    "452": "switch (state) {",
                    "454": "if (canBeKey) {",
                    "457": "else {",
                    "468": "if (canBeKey) {",
                    "472": "else {",
                    "480": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "497": "if (sanitizedJson == null) {",
                    "517": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "519": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "522": "if (((i - slashRunStart) & 1) == 0) {",
                    "532": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "533": "switch (jsonish.charAt(i)) {",
                    "545": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "546": "switch (sanitizedJson.charAt(i)) {",
                    "562": "if (pos < end) {",
                    "563": "switch (jsonish.charAt(pos)) {",
                    "575": "if (pos == intEnd) {",
                    "578": "else if ('0' == jsonish.charAt(pos)) {",
                    "583": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "586": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "589": "if ('0' <= ch && ch <= '9') {",
                    "592": "else {",
                    "594": "if ('a' <= ch && ch <= 'f') {",
                    "597": "else {",
                    "608": "else if (intEnd - pos > 1) {",
                    "611": "for (int i = pos; i < intEnd; ++i) {",
                    "613": "if (digVal < 0) {",
                    "623": "if (reencoded) {",
                    "628": "if (DIGITS_BY_BASE_THAT_FIT_IN_63B[base] >= nDigits) {",
                    "632": "else {",
                    "642": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "644": "if (fractionEnd == pos) {",
                    "651": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "652": "if (pos < end) {",
                    "653": "switch (jsonish.charAt(pos)) {",
                    "661": "if (expEnd == pos) {",
                    "668": "if (pos != end) {",
                    "686": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "688": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "691": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "694": "else {",
                    "696": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "698": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "703": "if (fractionEnd == sanEnd) {",
                    "706": "else {",
                    "709": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "715": "if (expEnd == expStart) {",
                    "718": "else {",
                    "732": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "734": "if (ch == '.') {",
                    "736": "if (zero) { nZeroesPending = 0; }",
                    "741": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "742": "if (digit == '0') { ++nZeroesPending;",
                    "744": "else {",
                    "745": "if (zero) {",
                    "746": "if (sawDecimal) {",
                    "754": "while (nZeroesPending != 0 || digit != 0) {",
                    "756": "if (nZeroesPending == 0) {",
                    "760": "else {",
                    "773": "if (zero) {",
                    "779": "if (k <= n && n <= 21) {",
                    "780": "for (int i = k; i < n; ++i) {",
                    "785": "else if (0 < n && n <= 21) {",
                    "788": "else if (-6 < n && n <= 0) {",
                    "791": "else {",
                    "792": "if (k == 1) {",
                    "794": "else {",
                    "807": "if (n == 5) {",
                    "810": "else if (n == 4) {",
                    "830": "if ('0' <= ch && ch <= '9') { return true; }",
                    "842": "if (ch <= ' ') { return true; }",
                    "843": "switch (ch) {",
                    "855": "for (int quadsToShift = nDigits; --quadsToShift >= 0;) {",
                    "867": "for (int end = start; end < limit; ++end) {",
                    "869": "if (!('0' <= ch && ch <= '9')) { return end; }",
                    "894": "if (left >= n) {",
                    "899": "if (c == '\\\\') {",
                    "900": "if (left + 1 == n) {",
                    "905": "switch (nc) {",
                    "910": "if (octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;",
                    "911": "if (nc <= '3' && octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;",
                    "917": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "926": "if (left + 3 < n) {",
                    "929": "if (isHex(d0) && isHex(d1)) {",
                    "937": "if (left + 5 < n) {",
                    "942": "if (isHex(d0) && isHex(d1) && isHex(d2) && isHex(d3)) {",
                    "960": "else {",
                    "967": "if (rightIncl < 0) {",
                    "971": "for (int i = 1; i < 6; ++i) {",
                    "973": "if (left < 0) { break; }",
                    "974": "if (s.charAt(left) == '\\\\') {",
                    "976": "while (left - n >= 0 && s.charAt(left - n) == '\\\\') { ++n;",
                    "979": "if ((n & 1) == 0) {",
                    "981": "if ((unescaped >>> 16) == i) {"
                }
            }
        }
    },
    "CVE-2019-10755": {
        "source": {
            "old": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "134": "public static String randomString(final int size) {"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {}
            },
            "new": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "134": "public static String randomString(final int size) {"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {}
            }
        },
        "sink": {
            "old": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "11": "return false;",
                    "14": "return s.trim().length() > 0;",
                    "18": "return !isNotBlank(s);",
                    "22": "return s1 == null ? s2 == null : s1.equals(s2);",
                    "27": "return true;",
                    "30": "return s1.trim().equalsIgnoreCase(s2.trim());",
                    "33": "return false;",
                    "39": "return !areEquals(s1, s2);",
                    "43": "return coll == null || coll.isEmpty();",
                    "47": "return !isEmpty(coll);",
                    "52": "throw new TechnicalException(message);",
                    "93": "return sb.toString();",
                    "96": "return null;",
                    "100": "try {",
                    "101": "return URLEncoder.encode(text, StandardCharsets.UTF_8.name());",
                    "103": "catch (final UnsupportedEncodingException e) {",
                    "105": "throw new TechnicalException(message, e);",
                    "131": "return sb.toString();",
                    "135": "return java.util.UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, size);",
                    "139": "return original != null ? new Date(original.getTime()) : null;",
                    "143": "try {",
                    "144": "return new URI(s);",
                    "146": "catch (final URISyntaxException e) {",
                    "147": "throw new TechnicalException(\"Cannot make an URI from: \" + s, e);",
                    "156": "return null;",
                    "163": "return str.substring(start + open.length(), end);",
                    "168": "return null;",
                    "173": "return str;",
                    "177": "return EMPTY;",
                    "182": "return EMPTY;",
                    "185": "return str.substring(pos + separator.length());",
                    "190": "return str;",
                    "194": "return EMPTY;",
                    "199": "return str;",
                    "202": "return str.substring(0, pos);",
                    "206": "return cs == null || cs.length() == 0;"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {
                    "11": "return false;",
                    "14": "return s.trim().length() > 0;",
                    "18": "return !isNotBlank(s);",
                    "22": "return s1 == null ? s2 == null : s1.equals(s2);",
                    "27": "return true;",
                    "30": "return s1.trim().equalsIgnoreCase(s2.trim());",
                    "33": "return false;",
                    "39": "return !areEquals(s1, s2);",
                    "43": "return coll == null || coll.isEmpty();",
                    "47": "return !isEmpty(coll);",
                    "52": "throw new TechnicalException(message);",
                    "93": "return sb.toString();",
                    "96": "return null;",
                    "100": "try {",
                    "101": "return URLEncoder.encode(text, StandardCharsets.UTF_8.name());",
                    "103": "catch (final UnsupportedEncodingException e) {",
                    "105": "throw new TechnicalException(message, e);",
                    "131": "return sb.toString();",
                    "135": "return java.util.UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, size);",
                    "139": "return original != null ? new Date(original.getTime()) : null;",
                    "143": "try {",
                    "144": "return new URI(s);",
                    "146": "catch (final URISyntaxException e) {",
                    "147": "throw new TechnicalException(\"Cannot make an URI from: \" + s, e);",
                    "156": "return null;",
                    "163": "return str.substring(start + open.length(), end);",
                    "168": "return null;",
                    "173": "return str;",
                    "177": "return EMPTY;",
                    "182": "return EMPTY;",
                    "185": "return str.substring(pos + separator.length());",
                    "190": "return str;",
                    "194": "return EMPTY;",
                    "199": "return str;",
                    "202": "return str.substring(0, pos);",
                    "206": "return cs == null || cs.length() == 0;"
                }
            },
            "new": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "11": "return false;",
                    "14": "return s.trim().length() > 0;",
                    "18": "return !isNotBlank(s);",
                    "22": "return s1 == null ? s2 == null : s1.equals(s2);",
                    "27": "return true;",
                    "30": "return s1.trim().equalsIgnoreCase(s2.trim());",
                    "33": "return false;",
                    "39": "return !areEquals(s1, s2);",
                    "43": "return coll == null || coll.isEmpty();",
                    "47": "return !isEmpty(coll);",
                    "52": "throw new TechnicalException(message);",
                    "93": "return sb.toString();",
                    "96": "return null;",
                    "100": "try {",
                    "101": "return URLEncoder.encode(text, StandardCharsets.UTF_8.name());",
                    "103": "catch (final UnsupportedEncodingException e) {",
                    "105": "throw new TechnicalException(message, e);",
                    "131": "return sb.toString();",
                    "140": "return sb.toString().substring(0, size);",
                    "144": "return original != null ? new Date(original.getTime()) : null;",
                    "148": "try {",
                    "149": "return new URI(s);",
                    "151": "catch (final URISyntaxException e) {",
                    "152": "throw new TechnicalException(\"Cannot make an URI from: \" + s, e);",
                    "161": "return null;",
                    "168": "return str.substring(start + open.length(), end);",
                    "173": "return null;",
                    "178": "return str;",
                    "182": "return EMPTY;",
                    "187": "return EMPTY;",
                    "190": "return str.substring(pos + separator.length());",
                    "195": "return str;",
                    "199": "return EMPTY;",
                    "204": "return str;",
                    "207": "return str.substring(0, pos);",
                    "211": "return cs == null || cs.length() == 0;"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {
                    "11": "return false;",
                    "14": "return s.trim().length() > 0;",
                    "18": "return !isNotBlank(s);",
                    "22": "return s1 == null ? s2 == null : s1.equals(s2);",
                    "27": "return true;",
                    "30": "return s1.trim().equalsIgnoreCase(s2.trim());",
                    "33": "return false;",
                    "39": "return !areEquals(s1, s2);",
                    "43": "return coll == null || coll.isEmpty();",
                    "47": "return !isEmpty(coll);",
                    "52": "throw new TechnicalException(message);",
                    "93": "return sb.toString();",
                    "96": "return null;",
                    "100": "try {",
                    "101": "return URLEncoder.encode(text, StandardCharsets.UTF_8.name());",
                    "103": "catch (final UnsupportedEncodingException e) {",
                    "105": "throw new TechnicalException(message, e);",
                    "131": "return sb.toString();",
                    "140": "return sb.toString().substring(0, size);",
                    "144": "return original != null ? new Date(original.getTime()) : null;",
                    "148": "try {",
                    "149": "return new URI(s);",
                    "151": "catch (final URISyntaxException e) {",
                    "152": "throw new TechnicalException(\"Cannot make an URI from: \" + s, e);",
                    "161": "return null;",
                    "168": "return str.substring(start + open.length(), end);",
                    "173": "return null;",
                    "178": "return str;",
                    "182": "return EMPTY;",
                    "187": "return EMPTY;",
                    "190": "return str.substring(pos + separator.length());",
                    "195": "return str;",
                    "199": "return EMPTY;",
                    "204": "return str;",
                    "207": "return str.substring(0, pos);",
                    "211": "return cs == null || cs.length() == 0;"
                }
            }
        },
        "undefined": {
            "old": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "10": "if (s == null) {",
                    "26": "if (s1 == null && s2 == null) {",
                    "29": "else if (s1 != null && s2 != null) {",
                    "32": "else {",
                    "51": "if (!value) {",
                    "74": "if (url != null) {",
                    "77": "if (name != null) {",
                    "78": "if (url.indexOf(\"?\") >= 0) {",
                    "81": "else {",
                    "87": "if (value != null) {",
                    "116": "for (final Object arg : args) {",
                    "117": "if (b) {",
                    "122": "else {",
                    "155": "if (str == null || open == null || close == null) {",
                    "160": "if (start != INDEX_NOT_FOUND) {",
                    "162": "if (end != INDEX_NOT_FOUND) {",
                    "172": "if (isEmpty(str)) {",
                    "176": "if (separator == null) {",
                    "181": "if (pos == INDEX_NOT_FOUND) {",
                    "189": "if (isEmpty(str) || separator == null) {",
                    "193": "if (separator.length() == 0) {",
                    "198": "if (pos == INDEX_NOT_FOUND) {"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {
                    "10": "if (s == null) {",
                    "26": "if (s1 == null && s2 == null) {",
                    "29": "else if (s1 != null && s2 != null) {",
                    "32": "else {",
                    "51": "if (!value) {",
                    "74": "if (url != null) {",
                    "77": "if (name != null) {",
                    "78": "if (url.indexOf(\"?\") >= 0) {",
                    "81": "else {",
                    "87": "if (value != null) {",
                    "116": "for (final Object arg : args) {",
                    "117": "if (b) {",
                    "122": "else {",
                    "155": "if (str == null || open == null || close == null) {",
                    "160": "if (start != INDEX_NOT_FOUND) {",
                    "162": "if (end != INDEX_NOT_FOUND) {",
                    "172": "if (isEmpty(str)) {",
                    "176": "if (separator == null) {",
                    "181": "if (pos == INDEX_NOT_FOUND) {",
                    "189": "if (isEmpty(str) || separator == null) {",
                    "193": "if (separator.length() == 0) {",
                    "198": "if (pos == INDEX_NOT_FOUND) {"
                }
            },
            "new": {
                "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java": {
                    "10": "if (s == null) {",
                    "26": "if (s1 == null && s2 == null) {",
                    "29": "else if (s1 != null && s2 != null) {",
                    "32": "else {",
                    "51": "if (!value) {",
                    "74": "if (url != null) {",
                    "77": "if (name != null) {",
                    "78": "if (url.indexOf(\"?\") >= 0) {",
                    "81": "else {",
                    "87": "if (value != null) {",
                    "116": "for (final Object arg : args) {",
                    "117": "if (b) {",
                    "122": "else {",
                    "136": "while (sb.length() < size) {",
                    "160": "if (str == null || open == null || close == null) {",
                    "165": "if (start != INDEX_NOT_FOUND) {",
                    "167": "if (end != INDEX_NOT_FOUND) {",
                    "177": "if (isEmpty(str)) {",
                    "181": "if (separator == null) {",
                    "186": "if (pos == INDEX_NOT_FOUND) {",
                    "194": "if (isEmpty(str) || separator == null) {",
                    "198": "if (separator.length() == 0) {",
                    "203": "if (pos == INDEX_NOT_FOUND) {"
                },
                "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java": {
                    "10": "if (s == null) {",
                    "26": "if (s1 == null && s2 == null) {",
                    "29": "else if (s1 != null && s2 != null) {",
                    "32": "else {",
                    "51": "if (!value) {",
                    "74": "if (url != null) {",
                    "77": "if (name != null) {",
                    "78": "if (url.indexOf(\"?\") >= 0) {",
                    "81": "else {",
                    "87": "if (value != null) {",
                    "116": "for (final Object arg : args) {",
                    "117": "if (b) {",
                    "122": "else {",
                    "136": "while (sb.length() < size) {",
                    "160": "if (str == null || open == null || close == null) {",
                    "165": "if (start != INDEX_NOT_FOUND) {",
                    "167": "if (end != INDEX_NOT_FOUND) {",
                    "177": "if (isEmpty(str)) {",
                    "181": "if (separator == null) {",
                    "186": "if (pos == INDEX_NOT_FOUND) {",
                    "194": "if (isEmpty(str) || separator == null) {",
                    "198": "if (separator.length() == 0) {",
                    "203": "if (pos == INDEX_NOT_FOUND) {"
                }
            }
        }
    },
    "CVE-2019-20444": {
        "source": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {}
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "548": "private void splitHeader(AppendableCharSequence sb) {"
                }
            }
        },
        "sink": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "61": "return;",
                    "67": "case READ_INITIAL: try {",
                    "70": "return;",
                    "76": "return;",
                    "82": "catch (Exception e) {",
                    "84": "return;",
                    "87": "case READ_HEADER: try {",
                    "90": "return;",
                    "99": "return;",
                    "102": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "106": "return;",
                    "112": "return;",
                    "115": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "121": "return;",
                    "125": "catch (Exception e) {",
                    "127": "return;",
                    "137": "return;",
                    "143": "return;",
                    "160": "return;",
                    "163": "case READ_CHUNK_SIZE: try {",
                    "166": "return;",
                    "173": "return;",
                    "178": "catch (Exception e) {",
                    "180": "return;",
                    "184": "assert chunkSize <= Integer.MAX_VALUE;",
                    "188": "return;",
                    "195": "return;",
                    "214": "return;",
                    "217": "case READ_CHUNK_FOOTER: try {",
                    "220": "return;",
                    "225": "return;",
                    "227": "catch (Exception e) {",
                    "229": "return;",
                    "262": "return;",
                    "268": "return;",
                    "310": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "315": "return true;",
                    "320": "return false;",
                    "325": "return false;",
                    "329": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "349": "return;",
                    "368": "return ret;",
                    "378": "return chunk;",
                    "396": "return skiped;",
                    "404": "return null;",
                    "425": "return null;",
                    "453": "return nextState;",
                    "461": "return contentLength;",
                    "467": "return null;",
                    "472": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "506": "return null;",
                    "512": "return trailer;",
                    "529": "return Integer.parseInt(hex, 16);",
                    "545": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "587": "return result;",
                    "592": "return sb.length();",
                    "598": "return result;",
                    "603": "return sb.length();",
                    "609": "return result + 1;",
                    "614": "return 0;",
                    "632": "return null;",
                    "636": "return seq;",
                    "647": "return true;",
                    "651": "return false;",
                    "655": "throw newException(maxLength);",
                    "659": "return true;",
                    "663": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "676": "return super.parse(buffer);",
                    "681": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "61": "return;",
                    "67": "case READ_INITIAL: try {",
                    "70": "return;",
                    "76": "return;",
                    "82": "catch (Exception e) {",
                    "84": "return;",
                    "87": "case READ_HEADER: try {",
                    "90": "return;",
                    "99": "return;",
                    "102": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "106": "return;",
                    "112": "return;",
                    "115": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "121": "return;",
                    "125": "catch (Exception e) {",
                    "127": "return;",
                    "137": "return;",
                    "143": "return;",
                    "160": "return;",
                    "163": "case READ_CHUNK_SIZE: try {",
                    "166": "return;",
                    "173": "return;",
                    "178": "catch (Exception e) {",
                    "180": "return;",
                    "184": "assert chunkSize <= Integer.MAX_VALUE;",
                    "188": "return;",
                    "195": "return;",
                    "214": "return;",
                    "217": "case READ_CHUNK_FOOTER: try {",
                    "220": "return;",
                    "225": "return;",
                    "227": "catch (Exception e) {",
                    "229": "return;",
                    "262": "return;",
                    "268": "return;",
                    "310": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "315": "return true;",
                    "320": "return false;",
                    "325": "return false;",
                    "329": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "349": "return;",
                    "368": "return ret;",
                    "378": "return chunk;",
                    "396": "return skiped;",
                    "404": "return null;",
                    "425": "return null;",
                    "453": "return nextState;",
                    "461": "return contentLength;",
                    "467": "return null;",
                    "472": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "506": "return null;",
                    "512": "return trailer;",
                    "529": "return Integer.parseInt(hex, 16);",
                    "545": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "565": "throw new IllegalArgumentException(\"No colon found\");",
                    "591": "return result;",
                    "596": "return sb.length();",
                    "602": "return result;",
                    "607": "return sb.length();",
                    "613": "return result + 1;",
                    "618": "return 0;",
                    "636": "return null;",
                    "640": "return seq;",
                    "651": "return true;",
                    "655": "return false;",
                    "659": "throw newException(maxLength);",
                    "663": "return true;",
                    "667": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "680": "return super.parse(buffer);",
                    "685": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            }
        },
        "undefined": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "54": "if (resetRequested) {",
                    "58": "switch (currentState) {",
                    "60": "if (!skipControlCharacters(buffer)) {",
                    "69": "if (line == null) {",
                    "74": "if (initialLine.length < 3) {",
                    "89": "if (nextState == null) {",
                    "94": "switch (nextState) {",
                    "101": "if (!chunkedSupported) {",
                    "108": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "117": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "132": "if (toRead > 0) {",
                    "142": "if (toRead == 0) {",
                    "146": "if (toRead > chunkSize) {",
                    "152": "if (chunkSize == 0) {",
                    "156": "else {",
                    "165": "if (line == null) {",
                    "171": "if (chunkSize == 0) {",
                    "187": "if (toRead == 0) {",
                    "194": "if (chunkSize != 0) {",
                    "204": "while (wIdx > rIdx) {",
                    "206": "if (next == HttpConstants.LF) {",
                    "219": "if (trailer == null) {",
                    "239": "if (readableBytes > 0) {",
                    "253": "if (resetRequested) {",
                    "257": "if (message != null) {",
                    "259": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "265": "if (currentState == State.READ_HEADER) {",
                    "272": "if (isDecodingRequest() || chunked) {",
                    "275": "else {",
                    "279": "if (!prematureClosure) {",
                    "290": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "291": "switch (currentState) {",
                    "306": "if (msg instanceof HttpResponse) {",
                    "309": "if (code >= 100 && code < 200) {",
                    "313": "switch (code) {",
                    "324": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "345": "if (!isDecodingRequest()) {",
                    "347": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "361": "if (message == null) {",
                    "385": "while (wIdx > rIdx) {",
                    "387": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "403": "if (line == null) {",
                    "407": "if (line.length() > 0) {",
                    "410": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "415": "else {",
                    "416": "if (name != null) {",
                    "424": "if (line == null) {",
                    "429": "while (line.length() > 0);",
                    "432": "if (name != null) {",
                    "439": "if (isContentAlwaysEmpty(message)) {",
                    "443": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "446": "else if (contentLength() >= 0) {",
                    "449": "else {",
                    "457": "if (contentLength == Long.MIN_VALUE) {",
                    "466": "if (line == null) {",
                    "471": "if (line.length() == 0 && trailer == null) {",
                    "476": "if (trailer == null) {",
                    "480": "while (line.length() > 0) {",
                    "482": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "484": "if (!current.isEmpty()) {",
                    "492": "else {",
                    "495": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "505": "if (line == null) {",
                    "520": "for (int i = 0; i < hex.length(); i ++) {",
                    "522": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "556": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "558": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "564": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "565": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "574": "if (valueStart == length) {",
                    "577": "else {",
                    "585": "for (int result = offset; result < sb.length(); ++result) {",
                    "586": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "596": "for (int result = offset; result < sb.length(); ++result) {",
                    "597": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "607": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "608": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "630": "if (i == -1) {",
                    "646": "if (nextByte == HttpConstants.CR) {",
                    "650": "if (nextByte == HttpConstants.LF) {",
                    "654": "if (++ size > maxLength) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "54": "if (resetRequested) {",
                    "58": "switch (currentState) {",
                    "60": "if (!skipControlCharacters(buffer)) {",
                    "69": "if (line == null) {",
                    "74": "if (initialLine.length < 3) {",
                    "89": "if (nextState == null) {",
                    "94": "switch (nextState) {",
                    "101": "if (!chunkedSupported) {",
                    "108": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "117": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "132": "if (toRead > 0) {",
                    "142": "if (toRead == 0) {",
                    "146": "if (toRead > chunkSize) {",
                    "152": "if (chunkSize == 0) {",
                    "156": "else {",
                    "165": "if (line == null) {",
                    "171": "if (chunkSize == 0) {",
                    "187": "if (toRead == 0) {",
                    "194": "if (chunkSize != 0) {",
                    "204": "while (wIdx > rIdx) {",
                    "206": "if (next == HttpConstants.LF) {",
                    "219": "if (trailer == null) {",
                    "239": "if (readableBytes > 0) {",
                    "253": "if (resetRequested) {",
                    "257": "if (message != null) {",
                    "259": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "265": "if (currentState == State.READ_HEADER) {",
                    "272": "if (isDecodingRequest() || chunked) {",
                    "275": "else {",
                    "279": "if (!prematureClosure) {",
                    "290": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "291": "switch (currentState) {",
                    "306": "if (msg instanceof HttpResponse) {",
                    "309": "if (code >= 100 && code < 200) {",
                    "313": "switch (code) {",
                    "324": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "345": "if (!isDecodingRequest()) {",
                    "347": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "361": "if (message == null) {",
                    "385": "while (wIdx > rIdx) {",
                    "387": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "403": "if (line == null) {",
                    "407": "if (line.length() > 0) {",
                    "410": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "415": "else {",
                    "416": "if (name != null) {",
                    "424": "if (line == null) {",
                    "429": "while (line.length() > 0);",
                    "432": "if (name != null) {",
                    "439": "if (isContentAlwaysEmpty(message)) {",
                    "443": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "446": "else if (contentLength() >= 0) {",
                    "449": "else {",
                    "457": "if (contentLength == Long.MIN_VALUE) {",
                    "466": "if (line == null) {",
                    "471": "if (line.length() == 0 && trailer == null) {",
                    "476": "if (trailer == null) {",
                    "480": "while (line.length() > 0) {",
                    "482": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "484": "if (!current.isEmpty()) {",
                    "492": "else {",
                    "495": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "505": "if (line == null) {",
                    "520": "for (int i = 0; i < hex.length(); i ++) {",
                    "522": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "556": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "558": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "564": "if (nameEnd == length) {",
                    "568": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "569": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "578": "if (valueStart == length) {",
                    "581": "else {",
                    "589": "for (int result = offset; result < sb.length(); ++result) {",
                    "590": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "600": "for (int result = offset; result < sb.length(); ++result) {",
                    "601": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "611": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "612": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "634": "if (i == -1) {",
                    "650": "if (nextByte == HttpConstants.CR) {",
                    "654": "if (nextByte == HttpConstants.LF) {",
                    "658": "if (++ size > maxLength) {"
                }
            }
        }
    },
    "CVE-2021-43797": {
        "source": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {},
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {}
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {},
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {
                    "342": "private static void validateHeaderNameElement(byte value) {",
                    "368": "private static void validateHeaderNameElement(char value) {"
                }
            }
        },
        "sink": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "29": "return true;",
                    "37": "throw new IllegalArgumentException(\"empty headers are not allowed [\" + name + \"]\");",
                    "41": "try {",
                    "44": "catch (Exception e) {",
                    "80": "return this;",
                    "83": "return super.add(headers);",
                    "92": "return this;",
                    "95": "return super.set(headers);",
                    "103": "return this;",
                    "109": "return this;",
                    "115": "return this;",
                    "121": "return this;",
                    "127": "return this;",
                    "133": "return this;",
                    "139": "return this;",
                    "145": "return this;",
                    "151": "return this;",
                    "157": "return this;",
                    "163": "return this;",
                    "169": "return this;",
                    "175": "return this;",
                    "181": "return this;",
                    "187": "return this;",
                    "192": "return get((CharSequence) name);",
                    "197": "return HeadersUtils.getAsString(headers, name);",
                    "202": "return headers.getInt(name);",
                    "207": "return headers.getInt(name, defaultValue);",
                    "212": "return headers.getShort(name);",
                    "217": "return headers.getShort(name, defaultValue);",
                    "222": "return headers.getTimeMillis(name);",
                    "227": "return headers.getTimeMillis(name, defaultValue);",
                    "232": "return getAll((CharSequence) name);",
                    "237": "return HeadersUtils.getAllAsString(headers, name);",
                    "243": "return Collections.emptyList();",
                    "251": "return entriesConverted;",
                    "257": "return HeadersUtils.iteratorAsString(headers);",
                    "262": "return headers.iterator();",
                    "268": "return new Iterator<String>() {",
                    "271": "return itr.hasNext();",
                    "276": "return itr.next().toString();",
                    "289": "return headers.valueIterator(name);",
                    "294": "return contains((CharSequence) name);",
                    "299": "return headers.contains(name);",
                    "304": "return headers.isEmpty();",
                    "309": "return headers.size();",
                    "314": "return contains((CharSequence) name, (CharSequence) value, ignoreCase);",
                    "319": "return headers.contains(name, value, ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER);",
                    "324": "return HeadersUtils.namesAsString(headers);",
                    "329": "return o instanceof DefaultHttpHeaders && headers.equals(((DefaultHttpHeaders) o).headers, CASE_SENSITIVE_HASHER);",
                    "334": "return headers.hashCode(CASE_SENSITIVE_HASHER);",
                    "339": "return new DefaultHttpHeaders(headers.copy());",
                    "355": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "357": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "377": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "379": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "387": "return validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE;",
                    "392": "return validate ? HttpNameValidator : NameValidator.NOT_NULL;",
                    "400": "return (CharSequence) value;",
                    "404": "return DateFormatter.format((Date) value);",
                    "408": "return DateFormatter.format(((Calendar) value).getTime());",
                    "411": "return value.toString();",
                    "427": "throw new IllegalArgumentException(\"a header value must not end with '\\\\r' or '\\\\n':\" + seq);",
                    "430": "return seq;",
                    "437": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\0': \" + seq);",
                    "439": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\v': \" + seq);",
                    "441": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\f': \" + seq);",
                    "451": "return 1;",
                    "453": "return 2;",
                    "460": "return 2;",
                    "463": "throw new IllegalArgumentException(\"only '\\\\n' is allowed after '\\\\r': \" + seq);",
                    "468": "return 0;",
                    "469": "default: throw new IllegalArgumentException(\"only ' ' and '\\\\t' are allowed after '\\\\n': \" + seq);",
                    "475": "return state;"
                },
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {
                    "29": "return true;",
                    "37": "throw new IllegalArgumentException(\"empty headers are not allowed [\" + name + \"]\");",
                    "41": "try {",
                    "44": "catch (Exception e) {",
                    "80": "return this;",
                    "83": "return super.add(headers);",
                    "92": "return this;",
                    "95": "return super.set(headers);",
                    "103": "return this;",
                    "109": "return this;",
                    "115": "return this;",
                    "121": "return this;",
                    "127": "return this;",
                    "133": "return this;",
                    "139": "return this;",
                    "145": "return this;",
                    "151": "return this;",
                    "157": "return this;",
                    "163": "return this;",
                    "169": "return this;",
                    "175": "return this;",
                    "181": "return this;",
                    "187": "return this;",
                    "192": "return get((CharSequence) name);",
                    "197": "return HeadersUtils.getAsString(headers, name);",
                    "202": "return headers.getInt(name);",
                    "207": "return headers.getInt(name, defaultValue);",
                    "212": "return headers.getShort(name);",
                    "217": "return headers.getShort(name, defaultValue);",
                    "222": "return headers.getTimeMillis(name);",
                    "227": "return headers.getTimeMillis(name, defaultValue);",
                    "232": "return getAll((CharSequence) name);",
                    "237": "return HeadersUtils.getAllAsString(headers, name);",
                    "243": "return Collections.emptyList();",
                    "251": "return entriesConverted;",
                    "257": "return HeadersUtils.iteratorAsString(headers);",
                    "262": "return headers.iterator();",
                    "268": "return new Iterator<String>() {",
                    "271": "return itr.hasNext();",
                    "276": "return itr.next().toString();",
                    "289": "return headers.valueIterator(name);",
                    "294": "return contains((CharSequence) name);",
                    "299": "return headers.contains(name);",
                    "304": "return headers.isEmpty();",
                    "309": "return headers.size();",
                    "314": "return contains((CharSequence) name, (CharSequence) value, ignoreCase);",
                    "319": "return headers.contains(name, value, ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER);",
                    "324": "return HeadersUtils.namesAsString(headers);",
                    "329": "return o instanceof DefaultHttpHeaders && headers.equals(((DefaultHttpHeaders) o).headers, CASE_SENSITIVE_HASHER);",
                    "334": "return headers.hashCode(CASE_SENSITIVE_HASHER);",
                    "339": "return new DefaultHttpHeaders(headers.copy());",
                    "355": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "357": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "377": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "379": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "387": "return validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE;",
                    "392": "return validate ? HttpNameValidator : NameValidator.NOT_NULL;",
                    "400": "return (CharSequence) value;",
                    "404": "return DateFormatter.format((Date) value);",
                    "408": "return DateFormatter.format(((Calendar) value).getTime());",
                    "411": "return value.toString();",
                    "427": "throw new IllegalArgumentException(\"a header value must not end with '\\\\r' or '\\\\n':\" + seq);",
                    "430": "return seq;",
                    "437": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\0': \" + seq);",
                    "439": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\v': \" + seq);",
                    "441": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\f': \" + seq);",
                    "451": "return 1;",
                    "453": "return 2;",
                    "460": "return 2;",
                    "463": "throw new IllegalArgumentException(\"only '\\\\n' is allowed after '\\\\r': \" + seq);",
                    "468": "return 0;",
                    "469": "default: throw new IllegalArgumentException(\"only ' ' and '\\\\t' are allowed after '\\\\n': \" + seq);",
                    "475": "return state;"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "29": "return true;",
                    "37": "throw new IllegalArgumentException(\"empty headers are not allowed [\" + name + \"]\");",
                    "41": "try {",
                    "44": "catch (Exception e) {",
                    "80": "return this;",
                    "83": "return super.add(headers);",
                    "92": "return this;",
                    "95": "return super.set(headers);",
                    "103": "return this;",
                    "109": "return this;",
                    "115": "return this;",
                    "121": "return this;",
                    "127": "return this;",
                    "133": "return this;",
                    "139": "return this;",
                    "145": "return this;",
                    "151": "return this;",
                    "157": "return this;",
                    "163": "return this;",
                    "169": "return this;",
                    "175": "return this;",
                    "181": "return this;",
                    "187": "return this;",
                    "192": "return get((CharSequence) name);",
                    "197": "return HeadersUtils.getAsString(headers, name);",
                    "202": "return headers.getInt(name);",
                    "207": "return headers.getInt(name, defaultValue);",
                    "212": "return headers.getShort(name);",
                    "217": "return headers.getShort(name, defaultValue);",
                    "222": "return headers.getTimeMillis(name);",
                    "227": "return headers.getTimeMillis(name, defaultValue);",
                    "232": "return getAll((CharSequence) name);",
                    "237": "return HeadersUtils.getAllAsString(headers, name);",
                    "243": "return Collections.emptyList();",
                    "251": "return entriesConverted;",
                    "257": "return HeadersUtils.iteratorAsString(headers);",
                    "262": "return headers.iterator();",
                    "268": "return new Iterator<String>() {",
                    "271": "return itr.hasNext();",
                    "276": "return itr.next().toString();",
                    "289": "return headers.valueIterator(name);",
                    "294": "return contains((CharSequence) name);",
                    "299": "return headers.contains(name);",
                    "304": "return headers.isEmpty();",
                    "309": "return headers.size();",
                    "314": "return contains((CharSequence) name, (CharSequence) value, ignoreCase);",
                    "319": "return headers.contains(name, value, ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER);",
                    "324": "return HeadersUtils.namesAsString(headers);",
                    "329": "return o instanceof DefaultHttpHeaders && headers.equals(((DefaultHttpHeaders) o).headers, CASE_SENSITIVE_HASHER);",
                    "334": "return headers.hashCode(CASE_SENSITIVE_HASHER);",
                    "339": "return new DefaultHttpHeaders(headers.copy());",
                    "359": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "361": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "385": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "387": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "395": "return validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE;",
                    "400": "return validate ? HttpNameValidator : NameValidator.NOT_NULL;",
                    "408": "return (CharSequence) value;",
                    "412": "return DateFormatter.format((Date) value);",
                    "416": "return DateFormatter.format(((Calendar) value).getTime());",
                    "419": "return value.toString();",
                    "435": "throw new IllegalArgumentException(\"a header value must not end with '\\\\r' or '\\\\n':\" + seq);",
                    "438": "return seq;",
                    "445": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\0': \" + seq);",
                    "447": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\v': \" + seq);",
                    "449": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\f': \" + seq);",
                    "459": "return 1;",
                    "461": "return 2;",
                    "468": "return 2;",
                    "471": "throw new IllegalArgumentException(\"only '\\\\n' is allowed after '\\\\r': \" + seq);",
                    "476": "return 0;",
                    "477": "default: throw new IllegalArgumentException(\"only ' ' and '\\\\t' are allowed after '\\\\n': \" + seq);",
                    "483": "return state;"
                },
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {
                    "29": "return true;",
                    "37": "throw new IllegalArgumentException(\"empty headers are not allowed [\" + name + \"]\");",
                    "41": "try {",
                    "44": "catch (Exception e) {",
                    "80": "return this;",
                    "83": "return super.add(headers);",
                    "92": "return this;",
                    "95": "return super.set(headers);",
                    "103": "return this;",
                    "109": "return this;",
                    "115": "return this;",
                    "121": "return this;",
                    "127": "return this;",
                    "133": "return this;",
                    "139": "return this;",
                    "145": "return this;",
                    "151": "return this;",
                    "157": "return this;",
                    "163": "return this;",
                    "169": "return this;",
                    "175": "return this;",
                    "181": "return this;",
                    "187": "return this;",
                    "192": "return get((CharSequence) name);",
                    "197": "return HeadersUtils.getAsString(headers, name);",
                    "202": "return headers.getInt(name);",
                    "207": "return headers.getInt(name, defaultValue);",
                    "212": "return headers.getShort(name);",
                    "217": "return headers.getShort(name, defaultValue);",
                    "222": "return headers.getTimeMillis(name);",
                    "227": "return headers.getTimeMillis(name, defaultValue);",
                    "232": "return getAll((CharSequence) name);",
                    "237": "return HeadersUtils.getAllAsString(headers, name);",
                    "243": "return Collections.emptyList();",
                    "251": "return entriesConverted;",
                    "257": "return HeadersUtils.iteratorAsString(headers);",
                    "262": "return headers.iterator();",
                    "268": "return new Iterator<String>() {",
                    "271": "return itr.hasNext();",
                    "276": "return itr.next().toString();",
                    "289": "return headers.valueIterator(name);",
                    "294": "return contains((CharSequence) name);",
                    "299": "return headers.contains(name);",
                    "304": "return headers.isEmpty();",
                    "309": "return headers.size();",
                    "314": "return contains((CharSequence) name, (CharSequence) value, ignoreCase);",
                    "319": "return headers.contains(name, value, ignoreCase ? CASE_INSENSITIVE_HASHER : CASE_SENSITIVE_HASHER);",
                    "324": "return HeadersUtils.namesAsString(headers);",
                    "329": "return o instanceof DefaultHttpHeaders && headers.equals(((DefaultHttpHeaders) o).headers, CASE_SENSITIVE_HASHER);",
                    "334": "return headers.hashCode(CASE_SENSITIVE_HASHER);",
                    "339": "return new DefaultHttpHeaders(headers.copy());",
                    "359": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "361": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "385": "throw new IllegalArgumentException( \"a header name cannot contain the following prohibited characters: =,;: \\\\t\\\\r\\\\n\\\\v\\\\f: \" + value);",
                    "387": "throw new IllegalArgumentException(\"a header name cannot contain non-ASCII character: \" + value);",
                    "395": "return validate ? HeaderValueConverterAndValidator.INSTANCE : HeaderValueConverter.INSTANCE;",
                    "400": "return validate ? HttpNameValidator : NameValidator.NOT_NULL;",
                    "408": "return (CharSequence) value;",
                    "412": "return DateFormatter.format((Date) value);",
                    "416": "return DateFormatter.format(((Calendar) value).getTime());",
                    "419": "return value.toString();",
                    "435": "throw new IllegalArgumentException(\"a header value must not end with '\\\\r' or '\\\\n':\" + seq);",
                    "438": "return seq;",
                    "445": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\0': \" + seq);",
                    "447": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\v': \" + seq);",
                    "449": "throw new IllegalArgumentException(\"a header value contains a prohibited character '\\\\f': \" + seq);",
                    "459": "return 1;",
                    "461": "return 2;",
                    "468": "return 2;",
                    "471": "throw new IllegalArgumentException(\"only '\\\\n' is allowed after '\\\\r': \" + seq);",
                    "476": "return 0;",
                    "477": "default: throw new IllegalArgumentException(\"only ' ' and '\\\\t' are allowed after '\\\\n': \" + seq);",
                    "483": "return state;"
                }
            }
        },
        "undefined": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "36": "if (name == null || name.length() == 0) {",
                    "40": "if (name instanceof AsciiString) {",
                    "49": "else {",
                    "50": "for (int index = 0; index < name.length(); ++index) {",
                    "78": "if (headers instanceof DefaultHttpHeaders) {",
                    "82": "else {",
                    "90": "if (headers instanceof DefaultHttpHeaders) {",
                    "94": "else {",
                    "242": "if (isEmpty()) {",
                    "247": "for (Entry<String, String> entry : this) {",
                    "343": "switch (value) {",
                    "356": "default: if (value < 0) {",
                    "365": "switch (value) {",
                    "378": "default: if (value > 127) {",
                    "399": "if (value instanceof CharSequence) {",
                    "403": "if (value instanceof Date) {",
                    "407": "if (value instanceof Calendar) {",
                    "422": "for (int index = 0; index < seq.length(); index++) {",
                    "426": "if (state != 0) {",
                    "434": "if ((character & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {",
                    "435": "switch (character) {",
                    "447": "switch (state) {",
                    "449": "switch (character) {",
                    "459": "if (character == '\\n') {",
                    "465": "switch (character) {"
                },
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {
                    "36": "if (name == null || name.length() == 0) {",
                    "40": "if (name instanceof AsciiString) {",
                    "49": "else {",
                    "50": "for (int index = 0; index < name.length(); ++index) {",
                    "78": "if (headers instanceof DefaultHttpHeaders) {",
                    "82": "else {",
                    "90": "if (headers instanceof DefaultHttpHeaders) {",
                    "94": "else {",
                    "242": "if (isEmpty()) {",
                    "247": "for (Entry<String, String> entry : this) {",
                    "343": "switch (value) {",
                    "356": "default: if (value < 0) {",
                    "365": "switch (value) {",
                    "378": "default: if (value > 127) {",
                    "399": "if (value instanceof CharSequence) {",
                    "403": "if (value instanceof Date) {",
                    "407": "if (value instanceof Calendar) {",
                    "422": "for (int index = 0; index < seq.length(); index++) {",
                    "426": "if (state != 0) {",
                    "434": "if ((character & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {",
                    "435": "switch (character) {",
                    "447": "switch (state) {",
                    "449": "switch (character) {",
                    "459": "if (character == '\\n') {",
                    "465": "switch (character) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "36": "if (name == null || name.length() == 0) {",
                    "40": "if (name instanceof AsciiString) {",
                    "49": "else {",
                    "50": "for (int index = 0; index < name.length(); ++index) {",
                    "78": "if (headers instanceof DefaultHttpHeaders) {",
                    "82": "else {",
                    "90": "if (headers instanceof DefaultHttpHeaders) {",
                    "94": "else {",
                    "242": "if (isEmpty()) {",
                    "247": "for (Entry<String, String> entry : this) {",
                    "343": "switch (value) {",
                    "360": "default: if (value < 0) {",
                    "369": "switch (value) {",
                    "386": "default: if (value > 127) {",
                    "407": "if (value instanceof CharSequence) {",
                    "411": "if (value instanceof Date) {",
                    "415": "if (value instanceof Calendar) {",
                    "430": "for (int index = 0; index < seq.length(); index++) {",
                    "434": "if (state != 0) {",
                    "442": "if ((character & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {",
                    "443": "switch (character) {",
                    "455": "switch (state) {",
                    "457": "switch (character) {",
                    "467": "if (character == '\\n') {",
                    "473": "switch (character) {"
                },
                "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java": {
                    "36": "if (name == null || name.length() == 0) {",
                    "40": "if (name instanceof AsciiString) {",
                    "49": "else {",
                    "50": "for (int index = 0; index < name.length(); ++index) {",
                    "78": "if (headers instanceof DefaultHttpHeaders) {",
                    "82": "else {",
                    "90": "if (headers instanceof DefaultHttpHeaders) {",
                    "94": "else {",
                    "242": "if (isEmpty()) {",
                    "247": "for (Entry<String, String> entry : this) {",
                    "343": "switch (value) {",
                    "360": "default: if (value < 0) {",
                    "369": "switch (value) {",
                    "386": "default: if (value > 127) {",
                    "407": "if (value instanceof CharSequence) {",
                    "411": "if (value instanceof Date) {",
                    "415": "if (value instanceof Calendar) {",
                    "430": "for (int index = 0; index < seq.length(); index++) {",
                    "434": "if (state != 0) {",
                    "442": "if ((character & HIGHEST_INVALID_VALUE_CHAR_MASK) == 0) {",
                    "443": "switch (character) {",
                    "455": "switch (state) {",
                    "457": "switch (character) {",
                    "467": "if (character == '\\n') {",
                    "473": "switch (character) {"
                }
            }
        }
    },
    "CVE-2022-23596": {
        "source": {
            "old": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "214": "private void readHeaders(final long fileLength) throws IOException, RarException {"
                }
            },
            "new": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "215": "private void readHeaders(final long fileLength) throws IOException, RarException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "73": "try {",
                    "76": "catch (IOException | RarException e) {",
                    "77": "try {",
                    "80": "catch (IOException e1) {",
                    "84": "throw e;",
                    "127": "try {",
                    "130": "catch (UnsupportedRarEncryptedException | UnsupportedRarV5Exception | CorruptHeaderException | BadRarArchiveException e) {",
                    "132": "throw e;",
                    "134": "catch (final Exception e) {",
                    "163": "return this.channel;",
                    "167": "return new ArrayList<>(this.headers);",
                    "179": "return list;",
                    "187": "return (FileHeader) block;",
                    "192": "return null;",
                    "196": "return this.unrarCallback;",
                    "201": "return this.newMhd.isEncrypted();",
                    "204": "throw new MainHeaderNullException();",
                    "211": "return getFileHeaders().stream().anyMatch(FileHeader::isEncrypted);",
                    "229": "try {",
                    "233": "catch (Exception e) {",
                    "234": "throw new InitDeciphererFailedException(e);",
                    "254": "throw new CorruptHeaderException();",
                    "263": "throw new UnsupportedRarV5Exception();",
                    "266": "throw new BadRarArchiveException();",
                    "304": "throw new BadRarArchiveException();",
                    "330": "return;",
                    "345": "throw new BadRarArchiveException();",
                    "358": "throw new BadRarArchiveException();",
                    "411": "throw new NotRarArchiveException();",
                    "422": "throw new IllegalArgumentException(\"maxsize must be >= 0\");",
                    "426": "throw new BadRarArchiveException();",
                    "429": "return new byte[(int) len];",
                    "434": "throw new HeaderNotInArchiveException();",
                    "437": "try {",
                    "440": "catch (final Exception e) {",
                    "442": "throw (RarException) e;",
                    "445": "throw new RarException(e);",
                    "456": "try {",
                    "459": "catch (final RarException e) {",
                    "462": "try {",
                    "465": "catch (final IOException e) {",
                    "472": "return in;",
                    "488": "try {",
                    "494": "throw new CrcErrorException();",
                    "498": "catch (final Exception e) {",
                    "501": "throw (RarException) e;",
                    "504": "throw new RarException(e);",
                    "512": "return this.newMhd;",
                    "516": "return this.markHead.isOldFormat();",
                    "533": "return this.volumeManager;",
                    "541": "return this.volume;",
                    "545": "return password;",
                    "559": "return new Iterator<FileHeader>() {",
                    "571": "return next;",
                    "577": "return Archive.this.nextFileHeader != null;"
                }
            },
            "new": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "74": "try {",
                    "77": "catch (IOException | RarException e) {",
                    "78": "try {",
                    "81": "catch (IOException e1) {",
                    "85": "throw e;",
                    "128": "try {",
                    "131": "catch (UnsupportedRarEncryptedException | UnsupportedRarV5Exception | CorruptHeaderException | BadRarArchiveException e) {",
                    "133": "throw e;",
                    "135": "catch (final Exception e) {",
                    "164": "return this.channel;",
                    "168": "return new ArrayList<>(this.headers);",
                    "180": "return list;",
                    "188": "return (FileHeader) block;",
                    "193": "return null;",
                    "197": "return this.unrarCallback;",
                    "202": "return this.newMhd.isEncrypted();",
                    "205": "throw new MainHeaderNullException();",
                    "212": "return getFileHeaders().stream().anyMatch(FileHeader::isEncrypted);",
                    "230": "try {",
                    "234": "catch (Exception e) {",
                    "235": "throw new InitDeciphererFailedException(e);",
                    "255": "throw new CorruptHeaderException();",
                    "264": "throw new UnsupportedRarV5Exception();",
                    "267": "throw new BadRarArchiveException();",
                    "305": "throw new BadRarArchiveException();",
                    "331": "return;",
                    "346": "throw new BadRarArchiveException();",
                    "359": "throw new BadRarArchiveException();",
                    "414": "throw new NotRarArchiveException();",
                    "425": "throw new IllegalArgumentException(\"maxsize must be >= 0\");",
                    "429": "throw new BadRarArchiveException();",
                    "432": "return new byte[(int) len];",
                    "437": "throw new HeaderNotInArchiveException();",
                    "440": "try {",
                    "443": "catch (final Exception e) {",
                    "445": "throw (RarException) e;",
                    "448": "throw new RarException(e);",
                    "459": "try {",
                    "462": "catch (final RarException e) {",
                    "465": "try {",
                    "468": "catch (final IOException e) {",
                    "475": "return in;",
                    "491": "try {",
                    "497": "throw new CrcErrorException();",
                    "501": "catch (final Exception e) {",
                    "504": "throw (RarException) e;",
                    "507": "throw new RarException(e);",
                    "515": "return this.newMhd;",
                    "519": "return this.markHead.isOldFormat();",
                    "536": "return this.volumeManager;",
                    "544": "return this.volume;",
                    "548": "return password;",
                    "562": "return new Iterator<FileHeader>() {",
                    "574": "return next;",
                    "580": "return Archive.this.nextFileHeader != null;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "138": "for (final BaseBlock block : this.headers) {",
                    "139": "if (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                    "145": "if (this.unrarCallback != null) {",
                    "152": "if (count > 0) {",
                    "154": "if (this.unrarCallback != null) {",
                    "172": "for (final BaseBlock block : this.headers) {",
                    "173": "if (block.getHeaderType().equals(UnrarHeadertype.FileHeader)) {",
                    "184": "while (this.currentHeaderIndex < n) {",
                    "186": "if (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                    "200": "if (this.newMhd != null) {",
                    "203": "else {",
                    "210": "if (isEncrypted()) return true;",
                    "221": "while (true) {",
                    "226": "if (newMhd != null && newMhd.isEncrypted()) {",
                    "240": "if (position >= fileLength) {",
                    "245": "if (size == 0) {",
                    "252": "if (headerType == null) {",
                    "257": "switch (headerType) {",
                    "260": "if (!this.markHead.isSignature()) {",
                    "261": "if (markHead.getVersion() == RARVersion.V5) {",
                    "262": "logger.warn(\"Support for rar version 5 is not yet implemented!\");",
                    "265": "else {",
                    "303": "if (processedPositions.contains(newpos)) {",
                    "311": "if (block.hasArchiveDataCRC()) {",
                    "315": "if (block.hasVolumeNumber()) {",
                    "320": "if (toRead > 0) {",
                    "325": "else {",
                    "334": "switch (blockHead.getHeaderType()) {",
                    "344": "if (processedPositions.contains(newpos)) {",
                    "357": "if (processedPositions.contains(newpos)) {",
                    "368": "switch (subHead.getSubType()) {",
                    "421": "if (maxSize < 0) {",
                    "425": "if (len < 0 || len > maxSize) {",
                    "433": "if (!this.headers.contains(hd)) {",
                    "441": "if (e instanceof RarException) {",
                    "444": "else {",
                    "479": "if (this.unpack == null) {",
                    "483": "if (!hd.isSolid()) {",
                    "493": "if (actualCRC != expectedCRC) {",
                    "500": "if (e instanceof RarException) {",
                    "503": "else {",
                    "521": "if (this.channel != null) {",
                    "526": "if (this.unpack != null) {",
                    "564": "if (Archive.this.nextFileHeader != null) {",
                    "567": "else {"
                }
            },
            "new": {
                "src/main/java/com/github/junrar/Archive.java": {
                    "139": "for (final BaseBlock block : this.headers) {",
                    "140": "if (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                    "146": "if (this.unrarCallback != null) {",
                    "153": "if (count > 0) {",
                    "155": "if (this.unrarCallback != null) {",
                    "173": "for (final BaseBlock block : this.headers) {",
                    "174": "if (block.getHeaderType().equals(UnrarHeadertype.FileHeader)) {",
                    "185": "while (this.currentHeaderIndex < n) {",
                    "187": "if (block.getHeaderType() == UnrarHeadertype.FileHeader) {",
                    "201": "if (this.newMhd != null) {",
                    "204": "else {",
                    "211": "if (isEncrypted()) return true;",
                    "222": "while (true) {",
                    "227": "if (newMhd != null && newMhd.isEncrypted()) {",
                    "241": "if (position >= fileLength) {",
                    "246": "if (size == 0) {",
                    "253": "if (headerType == null) {",
                    "258": "switch (headerType) {",
                    "261": "if (!this.markHead.isSignature()) {",
                    "262": "if (markHead.getVersion() == RARVersion.V5) {",
                    "263": "logger.warn(\"Support for rar version 5 is not yet implemented!\");",
                    "266": "else {",
                    "304": "if (processedPositions.contains(newpos)) {",
                    "312": "if (block.hasArchiveDataCRC()) {",
                    "316": "if (block.hasVolumeNumber()) {",
                    "321": "if (toRead > 0) {",
                    "326": "else {",
                    "335": "switch (blockHead.getHeaderType()) {",
                    "345": "if (processedPositions.contains(newpos)) {",
                    "358": "if (processedPositions.contains(newpos)) {",
                    "370": "if (subType == null) break;",
                    "371": "switch (subType) {",
                    "424": "if (maxSize < 0) {",
                    "428": "if (len < 0 || len > maxSize) {",
                    "436": "if (!this.headers.contains(hd)) {",
                    "444": "if (e instanceof RarException) {",
                    "447": "else {",
                    "482": "if (this.unpack == null) {",
                    "486": "if (!hd.isSolid()) {",
                    "496": "if (actualCRC != expectedCRC) {",
                    "503": "if (e instanceof RarException) {",
                    "506": "else {",
                    "524": "if (this.channel != null) {",
                    "529": "if (this.unpack != null) {",
                    "567": "if (Archive.this.nextFileHeader != null) {",
                    "570": "else {"
                }
            }
        }
    },
    "CVE-2022-22969": {
        "source": {
            "old": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {}
            },
            "new": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {
                    "40": "public void setPreservedState(String stateKey, Object preservedState) {"
                }
            }
        },
        "sink": {
            "old": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {
                    "28": "return accessToken;",
                    "37": "return accessTokenRequest;",
                    "45": "return state.remove(stateKey);"
                }
            },
            "new": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {
                    "28": "return accessToken;",
                    "37": "return accessTokenRequest;",
                    "46": "return state.remove(stateKey);"
                }
            }
        },
        "undefined": {
            "old": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {}
            },
            "new": {
                "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java": {}
            }
        }
    },
    "CVE-2016-1000340": {
        "source": {
            "old": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {},
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "699": "public static int sub(int[] x, int xOff, int[] y, int yOff, int[] z, int zOff) {",
                    "719": "public static int subBothFrom(int[] x, int[] y, int[] z) {",
                    "739": "public static int subFrom(int[] x, int[] z) {",
                    "759": "public static int subFrom(int[] x, int xOff, int[] z, int zOff) {",
                    "779": "public static BigInteger toBigInteger(int[] x) {",
                    "792": "public static void zero(int[] z) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "679": "public static int sub(int[] x, int[] y, int[] z) {",
                    "699": "public static int sub(int[] x, int xOff, int[] y, int yOff, int[] z, int zOff) {",
                    "719": "public static int subBothFrom(int[] x, int[] y, int[] z) {",
                    "739": "public static int subFrom(int[] x, int[] z) {",
                    "759": "public static int subFrom(int[] x, int xOff, int[] z, int zOff) {",
                    "779": "public static BigInteger toBigInteger(int[] x) {",
                    "792": "public static void zero(int[] z) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "507": "public static void square(int[] x, int[] zz) {",
                    "593": "public static void square(int[] x, int xOff, int[] zz, int zzOff) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {}
            },
            "new": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {},
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "699": "public static int sub(int[] x, int xOff, int[] y, int yOff, int[] z, int zOff) {",
                    "719": "public static int subBothFrom(int[] x, int[] y, int[] z) {",
                    "739": "public static int subFrom(int[] x, int[] z) {",
                    "759": "public static int subFrom(int[] x, int xOff, int[] z, int zOff) {",
                    "779": "public static BigInteger toBigInteger(int[] x) {",
                    "792": "public static void zero(int[] z) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "679": "public static int sub(int[] x, int[] y, int[] z) {",
                    "699": "public static int sub(int[] x, int xOff, int[] y, int yOff, int[] z, int zOff) {",
                    "719": "public static int subBothFrom(int[] x, int[] y, int[] z) {",
                    "739": "public static int subFrom(int[] x, int[] z) {",
                    "759": "public static int subFrom(int[] x, int xOff, int[] z, int zOff) {",
                    "779": "public static BigInteger toBigInteger(int[] x) {",
                    "792": "public static void zero(int[] z) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "507": "public static void square(int[] x, int[] zz) {",
                    "593": "public static void square(int[] x, int xOff, int[] zz, int zzOff) {"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {}
            }
        },
        "sink": {
            "old": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {
                    "23": "return (int)c;",
                    "43": "return (int)c;",
                    "63": "return (int)c;",
                    "83": "return (int)c;",
                    "108": "return (int)c;",
                    "120": "return new int[5];",
                    "124": "return new int[10];",
                    "137": "return pos;",
                    "143": "return false;",
                    "148": "return true;",
                    "153": "throw new IllegalArgumentException();",
                    "163": "return z;",
                    "168": "return x[0] & 1;",
                    "173": "return 0;",
                    "177": "return (x[w] >>> b) & 1;",
                    "185": "return false;",
                    "187": "return true;",
                    "190": "return true;",
                    "198": "return false;",
                    "200": "return true;",
                    "203": "return true;",
                    "208": "return false;",
                    "213": "return false;",
                    "218": "return true;",
                    "224": "return false;",
                    "229": "return true;",
                    "355": "return (int)zc;",
                    "387": "return (int)zc;",
                    "413": "return c;",
                    "433": "return (int)c;",
                    "452": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 4);",
                    "466": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "480": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 3);",
                    "491": "return c == 0 ? 0 : Nat.incAt(5, z, zOff, 2);",
                    "504": "return (int)c;",
                    "696": "return (int)c;",
                    "716": "return (int)c;",
                    "736": "return (int)c;",
                    "756": "return (int)c;",
                    "776": "return (int)c;",
                    "789": "return new BigInteger(1, bs);"
                }
            }
        },
        "undefined": {
            "old": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/math/raw/Nat128.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat224.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat192.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat160.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                },
                "core/src/main/java/org/bouncycastle/math/raw/Nat256.java": {
                    "129": "if (pos){",
                    "133": "else{",
                    "141": "for (int i = 4; i >= 0; --i){",
                    "142": "if (x[i] != y[i]){",
                    "152": "if (x.signum() < 0 || x.bitLength() > 160){",
                    "158": "while (x.signum() != 0) {",
                    "167": "if (bit == 0){",
                    "172": "if (w < 0 || w >= 5){",
                    "181": "for (int i = 4; i >= 0; --i){",
                    "184": "if (x_i < y_i)",
                    "186": "if (x_i > y_i)",
                    "194": "for (int i = 4; i >= 0; --i){",
                    "197": "if (x_i < y_i)",
                    "199": "if (x_i > y_i)",
                    "207": "if (x[0] != 1){",
                    "211": "for (int i = 1; i < 5; ++i){",
                    "212": "if (x[i] != 0){",
                    "222": "for (int i = 0; i < 5; ++i){",
                    "223": "if (x[i] != 0){",
                    "257": "for (int i = 1; i < 5; ++i){",
                    "304": "for (int i = 1; i < 5; ++i){ ++zzOff;",
                    "333": "for (int i = 0; i < 5; ++i){",
                    "365": "for (int i = 0; i < 5; ++i){",
                    "503": "while (++i < 5);",
                    "520": "while (i > 0);{",
                    "606": "while (i > 0);{",
                    "781": "for (int i = 0; i < 5; ++i){",
                    "783": "if (x_i != 0){"
                }
            }
        }
    },
    "CVE-2023-34454": {
        "source": {
            "old": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "61": "public static byte[] compress(char[] input) throws IOException {",
                    "65": "public static byte[] compress(double[] input) throws IOException {",
                    "69": "public static byte[] compress(float[] input) throws IOException {",
                    "73": "public static byte[] compress(int[] input) throws IOException {",
                    "77": "public static byte[] compress(long[] input) throws IOException {",
                    "81": "public static byte[] compress(short[] input) throws IOException {"
                }
            },
            "new": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "61": "public static byte[] compress(char[] input) throws IOException {",
                    "70": "public static byte[] compress(double[] input) throws IOException {",
                    "79": "public static byte[] compress(float[] input) throws IOException {",
                    "88": "public static byte[] compress(int[] input) throws IOException {",
                    "97": "public static byte[] compress(long[] input) throws IOException {",
                    "106": "public static byte[] compress(short[] input) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "22": "try {",
                    "26": "catch (Exception e) {",
                    "27": "throw new ExceptionInInitializerError(e);",
                    "37": "return rawCompress(input, input.length);",
                    "41": "return rawCompress(input, inputOffset, inputLength, output, outputOffset);",
                    "46": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "50": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"destination is not a direct buffer\");",
                    "58": "return compressedSize;",
                    "62": "return rawCompress(input, input.length * 2);",
                    "66": "return rawCompress(input, input.length * 8);",
                    "70": "return rawCompress(input, input.length * 4);",
                    "74": "return rawCompress(input, input.length * 4);",
                    "78": "return rawCompress(input, input.length * 8);",
                    "82": "return rawCompress(input, input.length * 2);",
                    "86": "try {",
                    "87": "return compress(s, \"UTF-8\");",
                    "90": "catch (UnsupportedEncodingException e) {",
                    "91": "throw new IllegalStateException(\"UTF-8 encoder is not found\");",
                    "98": "return compress(data);",
                    "103": "return compress(data);",
                    "109": "try {",
                    "112": "try {",
                    "135": "catch (IOException e) {",
                    "139": "return version;",
                    "144": "throw new NullPointerException(\"input is null\");",
                    "147": "return impl.isValidCompressedBuffer(input, offset, length);",
                    "151": "return isValidCompressedBuffer(input, 0, input.length);",
                    "155": "return impl.isValidCompressedBuffer(compressed, compressed.position(), compressed.remaining());",
                    "159": "return impl.isValidCompressedBuffer(inputAddr, offset, length);",
                    "163": "return impl.maxCompressedLength(byteSize);",
                    "167": "return impl.rawCompress(inputAddr, inputSize, destAddr);",
                    "171": "return impl.rawUncompress(inputAddr, inputSize, destAddr);",
                    "179": "return result;",
                    "184": "throw new NullPointerException(\"input or output is null\");",
                    "188": "return compressedSize;",
                    "193": "throw new NullPointerException(\"input or output is null\");",
                    "196": "return impl.rawUncompress(input, inputOffset, inputLength, output, outputOffset);",
                    "202": "return result;",
                    "206": "return rawUncompress(input, inputOffset, inputLength, output, outputOffset);",
                    "211": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "215": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"destination is not a direct buffer\");",
                    "223": "return decompressedSize;",
                    "227": "return uncompressCharArray(input, 0, input.length);",
                    "234": "return result;",
                    "238": "return uncompressDoubleArray(input, 0, input.length);",
                    "245": "return result;",
                    "249": "return impl.uncompressedLength(input, 0, input.length);",
                    "254": "throw new NullPointerException(\"input is null\");",
                    "257": "return impl.uncompressedLength(input, offset, length);",
                    "262": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "265": "return impl.uncompressedLength(compressed, compressed.position(), compressed.remaining());",
                    "269": "return impl.uncompressedLength(inputAddr, len);",
                    "273": "return uncompressFloatArray(input, 0, input.length);",
                    "280": "return result;",
                    "284": "return uncompressIntArray(input, 0, input.length);",
                    "291": "return result;",
                    "295": "return uncompressLongArray(input, 0, input.length);",
                    "302": "return result;",
                    "306": "return uncompressShortArray(input, 0, input.length);",
                    "313": "return result;",
                    "317": "try {",
                    "318": "return uncompressString(input, \"UTF-8\");",
                    "321": "catch (UnsupportedEncodingException e) {",
                    "322": "throw new IllegalStateException(\"UTF-8 decoder is not found\");",
                    "328": "try {",
                    "329": "return uncompressString(input, offset, length, \"UTF-8\");",
                    "332": "catch (UnsupportedEncodingException e) {",
                    "333": "throw new IllegalStateException(\"UTF-8 decoder is not found\");",
                    "341": "return new String(uncompressed, encoding);",
                    "347": "return new String(uncompressed, encoding);",
                    "352": "return new String(uncompressed, encoding);",
                    "357": "return new String(uncompressed, encoding);"
                }
            },
            "new": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "22": "try {",
                    "26": "catch (Exception e) {",
                    "27": "throw new ExceptionInInitializerError(e);",
                    "37": "return rawCompress(input, input.length);",
                    "41": "return rawCompress(input, inputOffset, inputLength, output, outputOffset);",
                    "46": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "50": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"destination is not a direct buffer\");",
                    "58": "return compressedSize;",
                    "64": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "67": "return rawCompress(input, byteSize);",
                    "73": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "76": "return rawCompress(input, byteSize);",
                    "82": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "85": "return rawCompress(input, byteSize);",
                    "91": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "94": "return rawCompress(input, byteSize);",
                    "100": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "103": "return rawCompress(input, byteSize);",
                    "109": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);",
                    "112": "return rawCompress(input, byteSize);",
                    "116": "try {",
                    "117": "return compress(s, \"UTF-8\");",
                    "120": "catch (UnsupportedEncodingException e) {",
                    "121": "throw new IllegalStateException(\"UTF-8 encoder is not found\");",
                    "128": "return compress(data);",
                    "133": "return compress(data);",
                    "139": "try {",
                    "142": "try {",
                    "165": "catch (IOException e) {",
                    "169": "return version;",
                    "174": "throw new NullPointerException(\"input is null\");",
                    "177": "return impl.isValidCompressedBuffer(input, offset, length);",
                    "181": "return isValidCompressedBuffer(input, 0, input.length);",
                    "185": "return impl.isValidCompressedBuffer(compressed, compressed.position(), compressed.remaining());",
                    "189": "return impl.isValidCompressedBuffer(inputAddr, offset, length);",
                    "193": "return impl.maxCompressedLength(byteSize);",
                    "197": "return impl.rawCompress(inputAddr, inputSize, destAddr);",
                    "201": "return impl.rawUncompress(inputAddr, inputSize, destAddr);",
                    "209": "return result;",
                    "214": "throw new NullPointerException(\"input or output is null\");",
                    "218": "return compressedSize;",
                    "223": "throw new NullPointerException(\"input or output is null\");",
                    "226": "return impl.rawUncompress(input, inputOffset, inputLength, output, outputOffset);",
                    "232": "return result;",
                    "236": "return rawUncompress(input, inputOffset, inputLength, output, outputOffset);",
                    "241": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "245": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"destination is not a direct buffer\");",
                    "253": "return decompressedSize;",
                    "257": "return uncompressCharArray(input, 0, input.length);",
                    "264": "return result;",
                    "268": "return uncompressDoubleArray(input, 0, input.length);",
                    "275": "return result;",
                    "279": "return impl.uncompressedLength(input, 0, input.length);",
                    "284": "throw new NullPointerException(\"input is null\");",
                    "287": "return impl.uncompressedLength(input, offset, length);",
                    "292": "throw new SnappyError(SnappyErrorCode.NOT_A_DIRECT_BUFFER, \"input is not a direct buffer\");",
                    "295": "return impl.uncompressedLength(compressed, compressed.position(), compressed.remaining());",
                    "299": "return impl.uncompressedLength(inputAddr, len);",
                    "303": "return uncompressFloatArray(input, 0, input.length);",
                    "310": "return result;",
                    "314": "return uncompressIntArray(input, 0, input.length);",
                    "321": "return result;",
                    "325": "return uncompressLongArray(input, 0, input.length);",
                    "332": "return result;",
                    "336": "return uncompressShortArray(input, 0, input.length);",
                    "343": "return result;",
                    "347": "try {",
                    "348": "return uncompressString(input, \"UTF-8\");",
                    "351": "catch (UnsupportedEncodingException e) {",
                    "352": "throw new IllegalStateException(\"UTF-8 decoder is not found\");",
                    "358": "try {",
                    "359": "return uncompressString(input, offset, length, \"UTF-8\");",
                    "362": "catch (UnsupportedEncodingException e) {",
                    "363": "throw new IllegalStateException(\"UTF-8 decoder is not found\");",
                    "371": "return new String(uncompressed, encoding);",
                    "377": "return new String(uncompressed, encoding);",
                    "382": "return new String(uncompressed, encoding);",
                    "387": "return new String(uncompressed, encoding);"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "45": "if (!uncompressed.isDirect()) {",
                    "49": "if (!compressed.isDirect()) {",
                    "110": "if (versionFile != null) {",
                    "117": "if (version.equals(\"unknown\")) {",
                    "125": "if(in != null) {",
                    "143": "if (input == null) {",
                    "183": "if (input == null || output == null) {",
                    "192": "if (input == null || output == null) {",
                    "210": "if (!compressed.isDirect()) {",
                    "214": "if (!uncompressed.isDirect()) {",
                    "253": "if (input == null) {",
                    "261": "if (!compressed.isDirect()) {"
                }
            },
            "new": {
                "src/main/java/org/xerial/snappy/Snappy.java": {
                    "45": "if (!uncompressed.isDirect()) {",
                    "49": "if (!compressed.isDirect()) {",
                    "63": "if (byteSize < input.length) {",
                    "72": "if (byteSize < input.length) {",
                    "81": "if (byteSize < input.length) {",
                    "90": "if (byteSize < input.length) {",
                    "99": "if (byteSize < input.length) {",
                    "108": "if (byteSize < input.length) {",
                    "140": "if (versionFile != null) {",
                    "147": "if (version.equals(\"unknown\")) {",
                    "155": "if(in != null) {",
                    "173": "if (input == null) {",
                    "213": "if (input == null || output == null) {",
                    "222": "if (input == null || output == null) {",
                    "240": "if (!compressed.isDirect()) {",
                    "244": "if (!uncompressed.isDirect()) {",
                    "283": "if (input == null) {",
                    "291": "if (!compressed.isDirect()) {"
                }
            }
        }
    },
    "CVE-2021-43859": {
        "source": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            }
        },
        "sink": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            }
        },
        "undefined": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {},
                "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java": {},
                "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java": {},
                "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java": {}
            }
        }
    },
    "CVE-2020-7238": {
        "source": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "399": "private State readHeaders(ByteBuf buffer) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "399": "private State readHeaders(ByteBuf buffer) {"
                }
            }
        },
        "sink": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "61": "return;",
                    "67": "case READ_INITIAL: try {",
                    "70": "return;",
                    "76": "return;",
                    "82": "catch (Exception e) {",
                    "84": "return;",
                    "87": "case READ_HEADER: try {",
                    "90": "return;",
                    "99": "return;",
                    "102": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "106": "return;",
                    "112": "return;",
                    "115": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "121": "return;",
                    "125": "catch (Exception e) {",
                    "127": "return;",
                    "137": "return;",
                    "143": "return;",
                    "160": "return;",
                    "163": "case READ_CHUNK_SIZE: try {",
                    "166": "return;",
                    "173": "return;",
                    "178": "catch (Exception e) {",
                    "180": "return;",
                    "184": "assert chunkSize <= Integer.MAX_VALUE;",
                    "188": "return;",
                    "195": "return;",
                    "214": "return;",
                    "217": "case READ_CHUNK_FOOTER: try {",
                    "220": "return;",
                    "225": "return;",
                    "227": "catch (Exception e) {",
                    "229": "return;",
                    "262": "return;",
                    "268": "return;",
                    "310": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "315": "return true;",
                    "320": "return false;",
                    "325": "return false;",
                    "329": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "349": "return;",
                    "368": "return ret;",
                    "378": "return chunk;",
                    "396": "return skiped;",
                    "404": "return null;",
                    "425": "return null;",
                    "453": "return nextState;",
                    "461": "return contentLength;",
                    "467": "return null;",
                    "472": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "506": "return null;",
                    "512": "return trailer;",
                    "529": "return Integer.parseInt(hex, 16);",
                    "545": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "565": "throw new IllegalArgumentException(\"No colon found\");",
                    "591": "return result;",
                    "596": "return sb.length();",
                    "602": "return result;",
                    "607": "return sb.length();",
                    "613": "return result + 1;",
                    "618": "return 0;",
                    "636": "return null;",
                    "640": "return seq;",
                    "651": "return true;",
                    "655": "return false;",
                    "659": "throw newException(maxLength);",
                    "663": "return true;",
                    "667": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "680": "return super.parse(buffer);",
                    "685": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "61": "return;",
                    "67": "case READ_INITIAL: try {",
                    "70": "return;",
                    "76": "return;",
                    "82": "catch (Exception e) {",
                    "84": "return;",
                    "87": "case READ_HEADER: try {",
                    "90": "return;",
                    "99": "return;",
                    "102": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "106": "return;",
                    "112": "return;",
                    "115": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "121": "return;",
                    "125": "catch (Exception e) {",
                    "127": "return;",
                    "137": "return;",
                    "143": "return;",
                    "160": "return;",
                    "163": "case READ_CHUNK_SIZE: try {",
                    "166": "return;",
                    "173": "return;",
                    "178": "catch (Exception e) {",
                    "180": "return;",
                    "184": "assert chunkSize <= Integer.MAX_VALUE;",
                    "188": "return;",
                    "195": "return;",
                    "214": "return;",
                    "217": "case READ_CHUNK_FOOTER: try {",
                    "220": "return;",
                    "225": "return;",
                    "227": "catch (Exception e) {",
                    "229": "return;",
                    "262": "return;",
                    "268": "return;",
                    "310": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "315": "return true;",
                    "320": "return false;",
                    "325": "return false;",
                    "329": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "349": "return;",
                    "368": "return ret;",
                    "378": "return chunk;",
                    "396": "return skiped;",
                    "404": "return null;",
                    "425": "return null;",
                    "442": "throw new IllegalArgumentException(\"Multiple Content-Length headers found\");",
                    "450": "return State.SKIP_CONTROL_CHARS;",
                    "454": "throw new IllegalArgumentException( \"Both 'Content-Length: \" + contentLength + \"' and 'Transfer-Encoding: chunked' found\");",
                    "457": "return State.READ_CHUNK_SIZE;",
                    "460": "return State.READ_FIXED_LENGTH_CONTENT;",
                    "463": "return State.READ_VARIABLE_LENGTH_CONTENT;",
                    "473": "return contentLength;",
                    "479": "return null;",
                    "484": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "518": "return null;",
                    "524": "return trailer;",
                    "541": "return Integer.parseInt(hex, 16);",
                    "557": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "577": "throw new IllegalArgumentException(\"No colon found\");",
                    "603": "return result;",
                    "608": "return sb.length();",
                    "614": "return result;",
                    "619": "return sb.length();",
                    "625": "return result + 1;",
                    "630": "return 0;",
                    "648": "return null;",
                    "652": "return seq;",
                    "663": "return true;",
                    "667": "return false;",
                    "671": "throw newException(maxLength);",
                    "675": "return true;",
                    "679": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "692": "return super.parse(buffer);",
                    "697": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            }
        },
        "undefined": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "54": "if (resetRequested) {",
                    "58": "switch (currentState) {",
                    "60": "if (!skipControlCharacters(buffer)) {",
                    "69": "if (line == null) {",
                    "74": "if (initialLine.length < 3) {",
                    "89": "if (nextState == null) {",
                    "94": "switch (nextState) {",
                    "101": "if (!chunkedSupported) {",
                    "108": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "117": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "132": "if (toRead > 0) {",
                    "142": "if (toRead == 0) {",
                    "146": "if (toRead > chunkSize) {",
                    "152": "if (chunkSize == 0) {",
                    "156": "else {",
                    "165": "if (line == null) {",
                    "171": "if (chunkSize == 0) {",
                    "187": "if (toRead == 0) {",
                    "194": "if (chunkSize != 0) {",
                    "204": "while (wIdx > rIdx) {",
                    "206": "if (next == HttpConstants.LF) {",
                    "219": "if (trailer == null) {",
                    "239": "if (readableBytes > 0) {",
                    "253": "if (resetRequested) {",
                    "257": "if (message != null) {",
                    "259": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "265": "if (currentState == State.READ_HEADER) {",
                    "272": "if (isDecodingRequest() || chunked) {",
                    "275": "else {",
                    "279": "if (!prematureClosure) {",
                    "290": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "291": "switch (currentState) {",
                    "306": "if (msg instanceof HttpResponse) {",
                    "309": "if (code >= 100 && code < 200) {",
                    "313": "switch (code) {",
                    "324": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "345": "if (!isDecodingRequest()) {",
                    "347": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "361": "if (message == null) {",
                    "385": "while (wIdx > rIdx) {",
                    "387": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "403": "if (line == null) {",
                    "407": "if (line.length() > 0) {",
                    "410": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "415": "else {",
                    "416": "if (name != null) {",
                    "424": "if (line == null) {",
                    "429": "while (line.length() > 0);",
                    "432": "if (name != null) {",
                    "439": "if (isContentAlwaysEmpty(message)) {",
                    "443": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "446": "else if (contentLength() >= 0) {",
                    "449": "else {",
                    "457": "if (contentLength == Long.MIN_VALUE) {",
                    "466": "if (line == null) {",
                    "471": "if (line.length() == 0 && trailer == null) {",
                    "476": "if (trailer == null) {",
                    "480": "while (line.length() > 0) {",
                    "482": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "484": "if (!current.isEmpty()) {",
                    "492": "else {",
                    "495": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "505": "if (line == null) {",
                    "520": "for (int i = 0; i < hex.length(); i ++) {",
                    "522": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "556": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "558": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "564": "if (nameEnd == length) {",
                    "568": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "569": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "578": "if (valueStart == length) {",
                    "581": "else {",
                    "589": "for (int result = offset; result < sb.length(); ++result) {",
                    "590": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "600": "for (int result = offset; result < sb.length(); ++result) {",
                    "601": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "611": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "612": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "634": "if (i == -1) {",
                    "650": "if (nextByte == HttpConstants.CR) {",
                    "654": "if (nextByte == HttpConstants.LF) {",
                    "658": "if (++ size > maxLength) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "54": "if (resetRequested) {",
                    "58": "switch (currentState) {",
                    "60": "if (!skipControlCharacters(buffer)) {",
                    "69": "if (line == null) {",
                    "74": "if (initialLine.length < 3) {",
                    "89": "if (nextState == null) {",
                    "94": "switch (nextState) {",
                    "101": "if (!chunkedSupported) {",
                    "108": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "117": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "132": "if (toRead > 0) {",
                    "142": "if (toRead == 0) {",
                    "146": "if (toRead > chunkSize) {",
                    "152": "if (chunkSize == 0) {",
                    "156": "else {",
                    "165": "if (line == null) {",
                    "171": "if (chunkSize == 0) {",
                    "187": "if (toRead == 0) {",
                    "194": "if (chunkSize != 0) {",
                    "204": "while (wIdx > rIdx) {",
                    "206": "if (next == HttpConstants.LF) {",
                    "219": "if (trailer == null) {",
                    "239": "if (readableBytes > 0) {",
                    "253": "if (resetRequested) {",
                    "257": "if (message != null) {",
                    "259": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "265": "if (currentState == State.READ_HEADER) {",
                    "272": "if (isDecodingRequest() || chunked) {",
                    "275": "else {",
                    "279": "if (!prematureClosure) {",
                    "290": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "291": "switch (currentState) {",
                    "306": "if (msg instanceof HttpResponse) {",
                    "309": "if (code >= 100 && code < 200) {",
                    "313": "switch (code) {",
                    "324": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "345": "if (!isDecodingRequest()) {",
                    "347": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "361": "if (message == null) {",
                    "385": "while (wIdx > rIdx) {",
                    "387": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "403": "if (line == null) {",
                    "407": "if (line.length() > 0) {",
                    "410": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "415": "else {",
                    "416": "if (name != null) {",
                    "424": "if (line == null) {",
                    "429": "while (line.length() > 0);",
                    "432": "if (name != null) {",
                    "440": "if (contentLengthValuesCount > 0) {",
                    "441": "if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {",
                    "448": "if (isContentAlwaysEmpty(message)) {",
                    "452": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "453": "if (contentLengthValuesCount > 0 && message.protocolVersion() == HttpVersion.HTTP_1_1) {",
                    "459": "else if (contentLength() >= 0) {",
                    "462": "else {",
                    "469": "if (contentLength == Long.MIN_VALUE) {",
                    "478": "if (line == null) {",
                    "483": "if (line.length() == 0 && trailer == null) {",
                    "488": "if (trailer == null) {",
                    "492": "while (line.length() > 0) {",
                    "494": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "496": "if (!current.isEmpty()) {",
                    "504": "else {",
                    "507": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "517": "if (line == null) {",
                    "532": "for (int i = 0; i < hex.length(); i ++) {",
                    "534": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "568": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "570": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "576": "if (nameEnd == length) {",
                    "580": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "581": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "590": "if (valueStart == length) {",
                    "593": "else {",
                    "601": "for (int result = offset; result < sb.length(); ++result) {",
                    "602": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "612": "for (int result = offset; result < sb.length(); ++result) {",
                    "613": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "623": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "624": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "646": "if (i == -1) {",
                    "662": "if (nextByte == HttpConstants.CR) {",
                    "666": "if (nextByte == HttpConstants.LF) {",
                    "670": "if (++ size > maxLength) {"
                }
            }
        }
    },
    "CVE-2022-24816": {
        "source": {
            "old": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {},
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "29": "public void write(SourceWriter w) {",
                    "51": "String template = \"public class %s extends %s {\";",
                    "79": "w.indent().append(\"public \").append(className).append(\"() {\").newLine();",
                    "129": "w.line(\"public void evaluate(double _x, double _y) {\");",
                    "132": "w.line(\"public void evaluate(double _x, double _y, double[] result) {\");"
                }
            },
            "new": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {},
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "21": "public Script( Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer) {",
                    "31": "private void validate() {",
                    "48": "public void write(SourceWriter w) {",
                    "71": "String template = \"public class %s extends %s {\";",
                    "99": "w.indent().append(\"public \").append(className).append(\"() {\").newLine();",
                    "149": "w.line(\"public void evaluate(double _x, double _y) {\");",
                    "152": "w.line(\"public void evaluate(double _x, double _y, double[] result) {\");"
                }
            }
        },
        "sink": {
            "old": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {
                    "93": "try {",
                    "97": "catch (UndefinedOptionException e) {",
                    "98": "throw new JiffleParserException(e);",
                    "161": "return Objects.equals(stmts, script.stmts) && Objects.equals(options, script.options) && Objects.equals(sourceImages, script.sourceImages) && Objects.equals(destImages, script.destImages) && Objects.equals(globals, script.globals);",
                    "166": "return Objects.hash(stmts, options, sourceImages, destImages, globals);",
                    "170": "return stmts;",
                    "174": "return Collections.unmodifiableMap(options);",
                    "178": "return Collections.unmodifiableSet(sourceImages);",
                    "182": "return Collections.unmodifiableSet(destImages);",
                    "186": "return globals;"
                },
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "93": "try {",
                    "97": "catch (UndefinedOptionException e) {",
                    "98": "throw new JiffleParserException(e);",
                    "161": "return Objects.equals(stmts, script.stmts) && Objects.equals(options, script.options) && Objects.equals(sourceImages, script.sourceImages) && Objects.equals(destImages, script.destImages) && Objects.equals(globals, script.globals);",
                    "166": "return Objects.hash(stmts, options, sourceImages, destImages, globals);",
                    "170": "return stmts;",
                    "174": "return Collections.unmodifiableMap(options);",
                    "178": "return Collections.unmodifiableSet(sourceImages);",
                    "182": "return Collections.unmodifiableSet(destImages);",
                    "186": "return globals;"
                }
            },
            "new": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {
                    "34": "throw new JiffleParserException(\"Invalid source image name: \" + name);",
                    "41": "throw new JiffleParserException(\"Invalid dest image name: \" + name);",
                    "113": "try {",
                    "117": "catch (UndefinedOptionException e) {",
                    "118": "throw new JiffleParserException(e);",
                    "181": "return Objects.equals(stmts, script.stmts) && Objects.equals(options, script.options) && Objects.equals(sourceImages, script.sourceImages) && Objects.equals(destImages, script.destImages) && Objects.equals(globals, script.globals);",
                    "186": "return Objects.hash(stmts, options, sourceImages, destImages, globals);",
                    "190": "return stmts;",
                    "194": "return Collections.unmodifiableMap(options);",
                    "198": "return Collections.unmodifiableSet(sourceImages);",
                    "202": "return Collections.unmodifiableSet(destImages);",
                    "206": "return globals;"
                },
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "34": "throw new JiffleParserException(\"Invalid source image name: \" + name);",
                    "41": "throw new JiffleParserException(\"Invalid dest image name: \" + name);",
                    "113": "try {",
                    "117": "catch (UndefinedOptionException e) {",
                    "118": "throw new JiffleParserException(e);",
                    "181": "return Objects.equals(stmts, script.stmts) && Objects.equals(options, script.options) && Objects.equals(sourceImages, script.sourceImages) && Objects.equals(destImages, script.destImages) && Objects.equals(globals, script.globals);",
                    "186": "return Objects.hash(stmts, options, sourceImages, destImages, globals);",
                    "190": "return stmts;",
                    "194": "return Collections.unmodifiableMap(options);",
                    "198": "return Collections.unmodifiableSet(sourceImages);",
                    "202": "return Collections.unmodifiableSet(destImages);",
                    "206": "return globals;"
                }
            }
        },
        "undefined": {
            "old": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {
                    "38": "if (script != null) {",
                    "43": "for (String line : lines) {",
                    "54": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "57": "else {",
                    "63": "if (w.isInternalBaseClass()) {",
                    "64": "for (String sourceImage : sourceImages) {",
                    "68": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "69": "for (String destImage : destImages) {",
                    "87": "if (options != null && !options.isEmpty()) {",
                    "90": "for (Map.Entry<String, String> entry : options.entrySet()) {",
                    "109": "if (w.isInternalBaseClass()) {",
                    "110": "for (String sourceImage : sourceImages) {",
                    "114": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "115": "for (String destImage : destImages) {",
                    "128": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "131": "else {",
                    "136": "w.line(\"if (!isWorldSet()) {\");",
                    "141": "w.line(\"if (!_imageScopeVarsInitialized) {\");",
                    "158": "if (this == o) return true;",
                    "159": "if (o == null || getClass() != o.getClass()) return false;"
                },
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "38": "if (script != null) {",
                    "43": "for (String line : lines) {",
                    "54": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "57": "else {",
                    "63": "if (w.isInternalBaseClass()) {",
                    "64": "for (String sourceImage : sourceImages) {",
                    "68": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "69": "for (String destImage : destImages) {",
                    "87": "if (options != null && !options.isEmpty()) {",
                    "90": "for (Map.Entry<String, String> entry : options.entrySet()) {",
                    "109": "if (w.isInternalBaseClass()) {",
                    "110": "for (String sourceImage : sourceImages) {",
                    "114": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "115": "for (String destImage : destImages) {",
                    "128": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "131": "else {",
                    "136": "w.line(\"if (!isWorldSet()) {\");",
                    "141": "w.line(\"if (!_imageScopeVarsInitialized) {\");",
                    "158": "if (this == o) return true;",
                    "159": "if (o == null || getClass() != o.getClass()) return false;"
                }
            },
            "new": {
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java": {
                    "32": "for (String name : sourceImages) {",
                    "33": "if (!VALID_IDENTIFIER.matcher(name).matches()) {",
                    "39": "for (String name : destImages) {",
                    "40": "if (!VALID_IDENTIFIER.matcher(name).matches()) {",
                    "57": "if (script != null) {",
                    "62": "for (String line : lines) {",
                    "74": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "77": "else {",
                    "83": "if (w.isInternalBaseClass()) {",
                    "84": "for (String sourceImage : sourceImages) {",
                    "88": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "89": "for (String destImage : destImages) {",
                    "107": "if (options != null && !options.isEmpty()) {",
                    "110": "for (Map.Entry<String, String> entry : options.entrySet()) {",
                    "129": "if (w.isInternalBaseClass()) {",
                    "130": "for (String sourceImage : sourceImages) {",
                    "134": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "135": "for (String destImage : destImages) {",
                    "148": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "151": "else {",
                    "156": "w.line(\"if (!isWorldSet()) {\");",
                    "161": "w.line(\"if (!_imageScopeVarsInitialized) {\");",
                    "178": "if (this == o) return true;",
                    "179": "if (o == null || getClass() != o.getClass()) return false;"
                },
                "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java": {
                    "32": "for (String name : sourceImages) {",
                    "33": "if (!VALID_IDENTIFIER.matcher(name).matches()) {",
                    "39": "for (String name : destImages) {",
                    "40": "if (!VALID_IDENTIFIER.matcher(name).matches()) {",
                    "57": "if (script != null) {",
                    "62": "for (String line : lines) {",
                    "74": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "77": "else {",
                    "83": "if (w.isInternalBaseClass()) {",
                    "84": "for (String sourceImage : sourceImages) {",
                    "88": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "89": "for (String destImage : destImages) {",
                    "107": "if (options != null && !options.isEmpty()) {",
                    "110": "for (Map.Entry<String, String> entry : options.entrySet()) {",
                    "129": "if (w.isInternalBaseClass()) {",
                    "130": "for (String sourceImage : sourceImages) {",
                    "134": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "135": "for (String destImage : destImages) {",
                    "148": "if (model == Jiffle.RuntimeModel.DIRECT) {",
                    "151": "else {",
                    "156": "w.line(\"if (!isWorldSet()) {\");",
                    "161": "w.line(\"if (!_imageScopeVarsInitialized) {\");",
                    "178": "if (this == o) return true;",
                    "179": "if (o == null || getClass() != o.getClass()) return false;"
                }
            }
        }
    },
    "CVE-2020-11988": {
        "source": {
            "old": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {}
            },
            "new": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {
                    "18": "public static Metadata parseXMP(Source src) throws TransformerException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {
                    "14": "return parseXMP(new StreamSource(url.toExternalForm()));",
                    "23": "return handler.getMetadata();",
                    "27": "return new XMPHandler();"
                }
            },
            "new": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {
                    "15": "return parseXMP(new StreamSource(url.toExternalForm()));",
                    "26": "return handler.getMetadata();",
                    "30": "return new XMPHandler();"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {}
            },
            "new": {
                "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java": {}
            }
        }
    },
    "CVE-2021-23900": {
        "source": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "277": "private void sanitizeString(int start, int end) {",
                    "803": "private boolean isOctAt(int i) {",
                    "808": "private boolean isHexAt(int i) {"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "277": "private void sanitizeString(int start, int end) {",
                    "817": "private boolean isOctAt(int i) {",
                    "821": "private static boolean isOct(char ch) {",
                    "825": "private boolean isHexAt(int i) {",
                    "829": "private static boolean isHex(char ch) {",
                    "835": "private static int hexVal(char ch) {",
                    "892": "private static int unescapedChar(String s, int left) {",
                    "966": "private static int unescapedCharRev(String s, int rightIncl) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "7": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "13": "return s.toString();",
                    "41": "return this.maximumNestingDepth;",
                    "50": "try {",
                    "233": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "441": "return State.AFTER_KEY;",
                    "445": "return State.AFTER_VALUE;",
                    "450": "return State.AFTER_VALUE;",
                    "452": "return State.AFTER_VALUE;",
                    "456": "return State.AFTER_KEY;",
                    "460": "return State.AFTER_VALUE;",
                    "464": "return State.AFTER_ELEMENT;",
                    "468": "return State.AFTER_ELEMENT;",
                    "471": "throw new AssertionError();",
                    "509": "return i + 1;",
                    "514": "return s.length();",
                    "524": "return;",
                    "525": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "530": "assert sanitizedJson != null;",
                    "537": "return;",
                    "538": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "543": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "666": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "693": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "699": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "705": "try {",
                    "708": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "709": "return false;",
                    "762": "return true;",
                    "788": "return true;",
                    "794": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "797": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "800": "return false;",
                    "805": "return '0' <= ch && ch <= '7';",
                    "812": "return 'a' <= ch && ch <= 'f';",
                    "823": "return true;",
                    "824": "default: return false;",
                    "847": "return limit;",
                    "857": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "862": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "7": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "13": "return s.toString();",
                    "41": "return this.maximumNestingDepth;",
                    "50": "try {",
                    "233": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "455": "return State.AFTER_KEY;",
                    "459": "return State.AFTER_VALUE;",
                    "464": "return State.AFTER_VALUE;",
                    "466": "return State.AFTER_VALUE;",
                    "470": "return State.AFTER_KEY;",
                    "474": "return State.AFTER_VALUE;",
                    "478": "return State.AFTER_ELEMENT;",
                    "482": "return State.AFTER_ELEMENT;",
                    "485": "throw new AssertionError();",
                    "523": "return i + 1;",
                    "528": "return s.length();",
                    "538": "return;",
                    "539": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "544": "assert sanitizedJson != null;",
                    "551": "return;",
                    "552": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "557": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "680": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "707": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "713": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "719": "try {",
                    "722": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "723": "return false;",
                    "776": "return true;",
                    "802": "return true;",
                    "808": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "811": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "814": "return false;",
                    "818": "return isOct(jsonish.charAt(i));",
                    "822": "return '0' <= ch && ch <= '7';",
                    "826": "return isHex(jsonish.charAt(i));",
                    "832": "return 'a' <= lch && lch <= 'f';",
                    "837": "return lch - (lch <= '9' ? '0' : 'a' - 10);",
                    "848": "return true;",
                    "849": "default: return false;",
                    "872": "return limit;",
                    "882": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "887": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;",
                    "895": "return 0;",
                    "901": "return 0x10000;",
                    "922": "return ((octalEnd - left) << 16) | value;",
                    "930": "return 0x4000 | (hexVal(d0) << 4) | hexVal(d1);",
                    "943": "return 0x6000 | (hexVal(d0) << 12) | (hexVal(d1) << 8) | (hexVal(d2) << 4) | hexVal(d3);",
                    "949": "case 'b': return (0x20000 | '\\b');",
                    "950": "case 'f': return (0x20000 | '\\f');",
                    "951": "case 'n': return 0x2000A;",
                    "952": "case 'r': return 0x2000D;",
                    "953": "case 't': return 0x20009;",
                    "954": "case 'v': return 0x20008;",
                    "958": "return (0x20000) | nc;",
                    "961": "return 0x10000 | c;",
                    "968": "return 0;",
                    "982": "return unescaped;",
                    "992": "return 0x10000 | s.charAt(rightIncl);"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "33": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "49": "token_loop: for (int i = 0; i < n; ++i) {",
                    "52": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "57": "switch (ch) {",
                    "71": "if (isMap == null) {",
                    "80": "if (bracketDepth == 0) {",
                    "85": "switch (state) {",
                    "100": "if (ch != closeBracket) {",
                    "107": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "108": "switch (state) {",
                    "131": "if (state == State.AFTER_KEY) {",
                    "134": "else {",
                    "141": "if (i + 1 < n) {",
                    "142": "switch (jsonish.charAt(i + 1)) {",
                    "145": "for (int j = i + 2; j < n; ++j) {",
                    "147": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "157": "if (i + 3 < n) {",
                    "158": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "159": "if (jsonish.charAt(j - 1) == '*') {",
                    "177": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "179": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "186": "if (runEnd == i) {",
                    "194": "if (!(isNumber || isKeyword)) {",
                    "195": "for (; runEnd < n; ++runEnd) {",
                    "196": "if (isJsonSpecialChar(runEnd)) {",
                    "202": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "207": "if (state == State.AFTER_KEY) {",
                    "209": "if (isNumber) {",
                    "213": "else {",
                    "218": "else {",
                    "219": "if (isNumber) {",
                    "222": "else if (!isKeyword) {",
                    "240": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "245": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "249": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "250": "if (sanitizedJson == null) {",
                    "256": "switch (state) {",
                    "269": "while (bracketDepth != 0) {",
                    "279": "for (int i = start; i < end; ++i) {",
                    "281": "switch (ch) {",
                    "288": "if (i == start) {",
                    "289": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "291": "else {",
                    "292": "if (i + 1 == end) {",
                    "294": "if (startDelim != '\\'') {",
                    "301": "if (closed) {",
                    "302": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "304": "else if (ch == '\"') {",
                    "312": "if (i + 3 >= end) {",
                    "322": "if ( (c1 == '\\\\' || c2 == '\\\\' || c3 == '\\\\') || (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {",
                    "330": "if ((i - 2) >= start) {",
                    "333": "if (('-' == cm2 || '\\\\' == cm2) && ('-' == cm1 || '\\\\' == cm1)) {",
                    "341": "if (i + 2 < end) {",
                    "344": "if ((']' == c1 || '\\\\' == c1) && ('>' == c2 || '\\\\' == c2)) {",
                    "352": "if (i + 1 == end) {",
                    "358": "switch (sch) {",
                    "366": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "375": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "386": "if (octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "387": "if (sch <= '3' && octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "393": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "409": "default: if (ch < 0x20) {",
                    "411": "else if (ch < 0xd800) {",
                    "414": "else if (ch < 0xe000) {",
                    "415": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "420": "else if (ch <= 0xfffd) {",
                    "425": "for (int j = 4; --j >= 0;) {",
                    "434": "if (!closed) { insert(end, '\"'); }",
                    "438": "switch (state) {",
                    "440": "if (canBeKey) {",
                    "443": "else {",
                    "454": "if (canBeKey) {",
                    "458": "else {",
                    "466": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "483": "if (sanitizedJson == null) {",
                    "503": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "505": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "508": "if (((i - slashRunStart) & 1) == 0) {",
                    "518": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "519": "switch (jsonish.charAt(i)) {",
                    "531": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "532": "switch (sanitizedJson.charAt(i)) {",
                    "548": "if (pos < end) {",
                    "549": "switch (jsonish.charAt(pos)) {",
                    "561": "if (pos == intEnd) {",
                    "564": "else if ('0' == jsonish.charAt(pos)) {",
                    "569": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "572": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "575": "if ('0' <= ch && ch <= '9') {",
                    "578": "else {",
                    "580": "if ('a' <= ch && ch <= 'f') {",
                    "583": "else {",
                    "594": "else if (intEnd - pos > 1) {",
                    "597": "for (int i = pos; i < intEnd; ++i) {",
                    "599": "if (digVal < 0) {",
                    "609": "if (reencoded) {",
                    "614": "if (DIGITS_BY_BASE_THAT_FIT_IN_63B[base] >= nDigits) {",
                    "618": "else {",
                    "628": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "630": "if (fractionEnd == pos) {",
                    "637": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "638": "if (pos < end) {",
                    "639": "switch (jsonish.charAt(pos)) {",
                    "647": "if (expEnd == pos) {",
                    "654": "if (pos != end) {",
                    "672": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "674": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "677": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "680": "else {",
                    "682": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "684": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "689": "if (fractionEnd == sanEnd) {",
                    "692": "else {",
                    "695": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "701": "if (expEnd == expStart) {",
                    "704": "else {",
                    "718": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "720": "if (ch == '.') {",
                    "722": "if (zero) { nZeroesPending = 0; }",
                    "727": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "728": "if (digit == '0') { ++nZeroesPending;",
                    "730": "else {",
                    "731": "if (zero) {",
                    "732": "if (sawDecimal) {",
                    "740": "while (nZeroesPending != 0 || digit != 0) {",
                    "742": "if (nZeroesPending == 0) {",
                    "746": "else {",
                    "759": "if (zero) {",
                    "765": "if (k <= n && n <= 21) {",
                    "766": "for (int i = k; i < n; ++i) {",
                    "771": "else if (0 < n && n <= 21) {",
                    "774": "else if (-6 < n && n <= 0) {",
                    "777": "else {",
                    "778": "if (k == 1) {",
                    "780": "else {",
                    "793": "if (n == 5) {",
                    "796": "else if (n == 4) {",
                    "810": "if ('0' <= ch && ch <= '9') { return true; }",
                    "817": "if (ch <= ' ') { return true; }",
                    "818": "switch (ch) {",
                    "830": "for (int quadsToShift = nDigits; --quadsToShift >= 0;) {",
                    "842": "for (int end = start; end < limit; ++end) {",
                    "844": "if (!('0' <= ch && ch <= '9')) { return end; }"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "33": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "49": "token_loop: for (int i = 0; i < n; ++i) {",
                    "52": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "57": "switch (ch) {",
                    "71": "if (isMap == null) {",
                    "80": "if (bracketDepth == 0) {",
                    "85": "switch (state) {",
                    "100": "if (ch != closeBracket) {",
                    "107": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "108": "switch (state) {",
                    "131": "if (state == State.AFTER_KEY) {",
                    "134": "else {",
                    "141": "if (i + 1 < n) {",
                    "142": "switch (jsonish.charAt(i + 1)) {",
                    "145": "for (int j = i + 2; j < n; ++j) {",
                    "147": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "157": "if (i + 3 < n) {",
                    "158": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "159": "if (jsonish.charAt(j - 1) == '*') {",
                    "177": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "179": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "186": "if (runEnd == i) {",
                    "194": "if (!(isNumber || isKeyword)) {",
                    "195": "for (; runEnd < n; ++runEnd) {",
                    "196": "if (isJsonSpecialChar(runEnd)) {",
                    "202": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "207": "if (state == State.AFTER_KEY) {",
                    "209": "if (isNumber) {",
                    "213": "else {",
                    "218": "else {",
                    "219": "if (isNumber) {",
                    "222": "else if (!isKeyword) {",
                    "240": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "245": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "249": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "250": "if (sanitizedJson == null) {",
                    "256": "switch (state) {",
                    "269": "while (bracketDepth != 0) {",
                    "279": "for (int i = start; i < end; ++i) {",
                    "281": "switch (ch) {",
                    "288": "if (i == start) {",
                    "289": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "291": "else {",
                    "292": "if (i + 1 == end) {",
                    "294": "if (startDelim != '\\'') {",
                    "301": "if (closed) {",
                    "302": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "304": "else if (ch == '\"') {",
                    "312": "if (i + 3 >= end) {",
                    "328": "if ( (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {",
                    "336": "if ((i - 2) >= start) {",
                    "343": "if ('-' == cm2 && '-' == cm1) {",
                    "351": "if (i + 2 < end) {",
                    "358": "if (']' == c1 && '>' == c2) {",
                    "366": "if (i + 1 == end) {",
                    "372": "switch (sch) {",
                    "380": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "389": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "400": "if (octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "401": "if (sch <= '3' && octalEnd < end && isOctAt(octalEnd)) { ++octalEnd;",
                    "407": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "423": "default: if (ch < 0x20) {",
                    "425": "else if (ch < 0xd800) {",
                    "428": "else if (ch < 0xe000) {",
                    "429": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "434": "else if (ch <= 0xfffd) {",
                    "439": "for (int j = 4; --j >= 0;) {",
                    "448": "if (!closed) { insert(end, '\"'); }",
                    "452": "switch (state) {",
                    "454": "if (canBeKey) {",
                    "457": "else {",
                    "468": "if (canBeKey) {",
                    "472": "else {",
                    "480": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "497": "if (sanitizedJson == null) {",
                    "517": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "519": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "522": "if (((i - slashRunStart) & 1) == 0) {",
                    "532": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "533": "switch (jsonish.charAt(i)) {",
                    "545": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "546": "switch (sanitizedJson.charAt(i)) {",
                    "562": "if (pos < end) {",
                    "563": "switch (jsonish.charAt(pos)) {",
                    "575": "if (pos == intEnd) {",
                    "578": "else if ('0' == jsonish.charAt(pos)) {",
                    "583": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "586": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "589": "if ('0' <= ch && ch <= '9') {",
                    "592": "else {",
                    "594": "if ('a' <= ch && ch <= 'f') {",
                    "597": "else {",
                    "608": "else if (intEnd - pos > 1) {",
                    "611": "for (int i = pos; i < intEnd; ++i) {",
                    "613": "if (digVal < 0) {",
                    "623": "if (reencoded) {",
                    "628": "if (DIGITS_BY_BASE_THAT_FIT_IN_63B[base] >= nDigits) {",
                    "632": "else {",
                    "642": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "644": "if (fractionEnd == pos) {",
                    "651": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "652": "if (pos < end) {",
                    "653": "switch (jsonish.charAt(pos)) {",
                    "661": "if (expEnd == pos) {",
                    "668": "if (pos != end) {",
                    "686": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "688": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "691": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "694": "else {",
                    "696": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "698": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "703": "if (fractionEnd == sanEnd) {",
                    "706": "else {",
                    "709": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "715": "if (expEnd == expStart) {",
                    "718": "else {",
                    "732": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "734": "if (ch == '.') {",
                    "736": "if (zero) { nZeroesPending = 0; }",
                    "741": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "742": "if (digit == '0') { ++nZeroesPending;",
                    "744": "else {",
                    "745": "if (zero) {",
                    "746": "if (sawDecimal) {",
                    "754": "while (nZeroesPending != 0 || digit != 0) {",
                    "756": "if (nZeroesPending == 0) {",
                    "760": "else {",
                    "773": "if (zero) {",
                    "779": "if (k <= n && n <= 21) {",
                    "780": "for (int i = k; i < n; ++i) {",
                    "785": "else if (0 < n && n <= 21) {",
                    "788": "else if (-6 < n && n <= 0) {",
                    "791": "else {",
                    "792": "if (k == 1) {",
                    "794": "else {",
                    "807": "if (n == 5) {",
                    "810": "else if (n == 4) {",
                    "830": "if ('0' <= ch && ch <= '9') { return true; }",
                    "842": "if (ch <= ' ') { return true; }",
                    "843": "switch (ch) {",
                    "855": "for (int quadsToShift = nDigits; --quadsToShift >= 0;) {",
                    "867": "for (int end = start; end < limit; ++end) {",
                    "869": "if (!('0' <= ch && ch <= '9')) { return end; }",
                    "894": "if (left >= n) {",
                    "899": "if (c == '\\\\') {",
                    "900": "if (left + 1 == n) {",
                    "905": "switch (nc) {",
                    "910": "if (octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;",
                    "911": "if (nc <= '3' && octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;",
                    "917": "for (int j = octalStart; j < octalEnd; ++j) {",
                    "926": "if (left + 3 < n) {",
                    "929": "if (isHex(d0) && isHex(d1)) {",
                    "937": "if (left + 5 < n) {",
                    "942": "if (isHex(d0) && isHex(d1) && isHex(d2) && isHex(d3)) {",
                    "960": "else {",
                    "967": "if (rightIncl < 0) {",
                    "971": "for (int i = 1; i < 6; ++i) {",
                    "973": "if (left < 0) { break; }",
                    "974": "if (s.charAt(left) == '\\\\') {",
                    "976": "while (left - n >= 0 && s.charAt(left - n) == '\\\\') { ++n;",
                    "979": "if ((n & 1) == 0) {",
                    "981": "if ((unescaped >>> 16) == i) {"
                }
            }
        }
    },
    "CVE-2019-10086": {
        "source": {
            "old": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {}
            },
            "new": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {
                    "52": "public final void resetBeanIntrospectors() {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {
                    "21": "return BeanUtilsBean.getInstance().getPropertyUtils();",
                    "39": "return resolver;",
                    "59": "throw new IllegalArgumentException( \"BeanIntrospector must not be null!\");",
                    "66": "return introspectors.remove(introspector);",
                    "77": "throw new IllegalArgumentException (\"No destination bean specified\");",
                    "81": "throw new IllegalArgumentException(\"No origin bean specified\");",
                    "89": "try {",
                    "99": "catch (final NoSuchMethodException e) {",
                    "115": "try {",
                    "124": "catch (final NoSuchMethodException e) {",
                    "141": "try {",
                    "151": "catch (final NoSuchMethodException e) {",
                    "168": "throw new IllegalArgumentException(\"No bean specified\");",
                    "192": "return description;",
                    "197": "throw new IllegalArgumentException(\"No bean specified\");",
                    "205": "try {",
                    "208": "catch (final IllegalArgumentException e) {",
                    "209": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"' \" + e.getMessage());",
                    "213": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "217": "return getIndexedProperty(bean, name, index);",
                    "222": "throw new IllegalArgumentException(\"No bean specified\");",
                    "227": "return Array.get(bean, index);",
                    "230": "return ((List<?>)bean).get(index);",
                    "242": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "245": "return ((DynaBean) bean).get(name, index);",
                    "250": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "259": "try {",
                    "260": "return invokeMethod(readMethod,bean, subscript);",
                    "262": "catch (final InvocationTargetException e) {",
                    "264": "throw (IndexOutOfBoundsException) e.getTargetException();",
                    "267": "throw e;",
                    "276": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no \" + \"getter method on bean class '\" + bean.getClass() + \"'\");",
                    "282": "throw new IllegalArgumentException(\"Property '\" + name + \"' is not indexed on bean class '\" + bean.getClass() + \"'\");",
                    "285": "return ((java.util.List<?>) value).get(index);",
                    "288": "try {",
                    "289": "return Array.get(value, index);",
                    "291": "catch (final ArrayIndexOutOfBoundsException e) {",
                    "299": "throw new IllegalArgumentException(\"No bean specified\");",
                    "307": "try {",
                    "310": "catch (final IllegalArgumentException e) {",
                    "311": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"' \" + e.getMessage());",
                    "315": "throw new IllegalArgumentException(\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "319": "return getMappedProperty(bean, name, key);",
                    "324": "throw new IllegalArgumentException(\"No bean specified\");",
                    "338": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"'+ on bean class '\" + bean.getClass() + \"'\");",
                    "341": "return ((DynaBean) bean).get(name, key);",
                    "347": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"'+ on bean class '\" + bean.getClass() + \"'\");",
                    "359": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "373": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "378": "return result;",
                    "383": "return null;",
                    "386": "return mappedDescriptorsCache.get(beanClass);",
                    "391": "return null;",
                    "394": "return getMappedPropertyDescriptors(bean.getClass());",
                    "399": "throw new IllegalArgumentException(\"No bean specified\");",
                    "443": "return bean;",
                    "456": "throw new IllegalArgumentException( \"Indexed or mapped properties are not supported on\" + \" objects of type Map: \" + propertyName);",
                    "459": "return bean.get(propertyName);",
                    "463": "return getNestedProperty(bean, name);",
                    "468": "throw new IllegalArgumentException(\"No bean specified\");",
                    "488": "return null;",
                    "494": "return result;",
                    "505": "try {",
                    "508": "catch (final IntrospectionException ie) {",
                    "517": "return result;",
                    "521": "return getIntrospectionData(beanClass).getDescriptors();",
                    "526": "throw new IllegalArgumentException(\"No bean specified\");",
                    "529": "return getPropertyDescriptors(bean.getClass());",
                    "534": "throw new IllegalArgumentException(\"No bean specified\");",
                    "543": "return descriptor.getPropertyEditorClass();",
                    "546": "return null;",
                    "551": "throw new IllegalArgumentException(\"No bean specified\");",
                    "573": "return null;",
                    "578": "return null;",
                    "581": "return type.getComponentType();",
                    "584": "return type;",
                    "591": "return null;",
                    "594": "return ((IndexedPropertyDescriptor) descriptor). getIndexedPropertyType();",
                    "597": "return ((MappedPropertyDescriptor) descriptor). getMappedPropertyType();",
                    "600": "return descriptor.getPropertyType();",
                    "606": "return MethodUtils.getAccessibleMethod(descriptor.getReadMethod());",
                    "610": "return MethodUtils.getAccessibleMethod(clazz, descriptor.getReadMethod());",
                    "615": "throw new IllegalArgumentException(\"No bean specified\");",
                    "623": "throw new IllegalArgumentException (\"Nested property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "626": "throw new IllegalArgumentException (\"Indexed property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "629": "throw new IllegalArgumentException (\"Mapped property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "635": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on dynaclass '\" + ((DynaBean) bean).getDynaClass() + \"'\" );",
                    "638": "return ((DynaBean) bean).get(name);",
                    "643": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on class '\" + bean.getClass() + \"'\" );",
                    "648": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no getter method in class '\" + bean.getClass() + \"'\");",
                    "652": "return value;",
                    "656": "return MethodUtils.getAccessibleMethod(descriptor.getWriteMethod());",
                    "661": "return MethodUtils.getAccessibleMethod(clazz, data.getWriteMethod(clazz, descriptor));",
                    "666": "throw new IllegalArgumentException(\"No bean specified\");",
                    "676": "try {",
                    "679": "catch (final IllegalAccessException e) {",
                    "680": "return false;",
                    "682": "catch (final InvocationTargetException e) {",
                    "683": "return false;",
                    "685": "catch (final NoSuchMethodException e) {",
                    "686": "return false;",
                    "703": "return ((DynaBean) bean).getDynaClass().getDynaProperty(name) != null;",
                    "706": "try {",
                    "721": "return readMethod != null;",
                    "724": "return false;",
                    "726": "catch (final IllegalAccessException e) {",
                    "727": "return false;",
                    "729": "catch (final InvocationTargetException e) {",
                    "730": "return false;",
                    "732": "catch (final NoSuchMethodException e) {",
                    "733": "return false;",
                    "740": "throw new IllegalArgumentException(\"No bean specified\");",
                    "750": "try {",
                    "753": "catch (final IllegalAccessException e) {",
                    "754": "return false;",
                    "756": "catch (final InvocationTargetException e) {",
                    "757": "return false;",
                    "759": "catch (final NoSuchMethodException e) {",
                    "760": "return false;",
                    "777": "return ((DynaBean) bean).getDynaClass().getDynaProperty(name) != null;",
                    "780": "try {",
                    "795": "return writeMethod != null;",
                    "798": "return false;",
                    "800": "catch (final IllegalAccessException e) {",
                    "801": "return false;",
                    "803": "catch (final InvocationTargetException e) {",
                    "804": "return false;",
                    "806": "catch (final NoSuchMethodException e) {",
                    "807": "return false;",
                    "814": "throw new IllegalArgumentException(\"No bean specified\");",
                    "822": "try {",
                    "825": "catch (final IllegalArgumentException e) {",
                    "826": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "830": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "839": "throw new IllegalArgumentException(\"No bean specified\");",
                    "845": "return;",
                    "850": "return;",
                    "862": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "866": "return;",
                    "871": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "881": "try {",
                    "889": "catch (final InvocationTargetException e) {",
                    "891": "throw (IndexOutOfBoundsException) e.getTargetException();",
                    "894": "throw e;",
                    "897": "return;",
                    "904": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no getter method on bean class '\" + bean.getClass() + \"'\");",
                    "914": "throw new IllegalArgumentException(\"Property '\" + name + \"' is not indexed on bean class '\" + bean.getClass() + \"'\");",
                    "926": "throw new IllegalArgumentException(\"No bean specified\");",
                    "934": "try {",
                    "937": "catch (final IllegalArgumentException e) {",
                    "938": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "942": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "951": "throw new IllegalArgumentException(\"No bean specified\");",
                    "965": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "969": "return;",
                    "974": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "992": "throw new NoSuchMethodException (\"Property '\" + name + \"' has no mapped setter method\" + \"on bean class '\" + bean.getClass() + \"'\");",
                    "1007": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "1016": "throw new IllegalArgumentException(\"No bean specified\");",
                    "1072": "throw new IllegalArgumentException( \"Indexed or mapped properties are not supported on\" + \" objects of type Map: \" + propertyName);",
                    "1084": "throw new IllegalArgumentException(\"No bean specified\");",
                    "1092": "throw new IllegalArgumentException (\"Nested property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1095": "throw new IllegalArgumentException (\"Indexed property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1098": "throw new IllegalArgumentException (\"Mapped property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1104": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on dynaclass '\" + ((DynaBean) bean).getDynaClass() + \"'\" );",
                    "1108": "return;",
                    "1113": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on class '\" + bean.getClass() + \"'\" );",
                    "1118": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no setter method in class '\" + bean.getClass() + \"'\");",
                    "1133": "throw new IllegalArgumentException(\"No bean specified \" + \"- this should have been checked before reaching this method\");",
                    "1136": "try {",
                    "1137": "return method.invoke(bean, values);",
                    "1139": "catch (final NullPointerException cause) {",
                    "1176": "throw e;",
                    "1178": "catch (final IllegalArgumentException cause) {",
                    "1215": "throw e;",
                    "1222": "throw new IllegalArgumentException(\"No bean class specified\");",
                    "1231": "return data;",
                    "1237": "try {",
                    "1240": "catch (final IntrospectionException iex) {",
                    "1246": "return new BeanIntrospectionData(ictx.getPropertyDescriptors());",
                    "1252": "return list;",
                    "1258": "return map;"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {
                    "21": "return BeanUtilsBean.getInstance().getPropertyUtils();",
                    "39": "return resolver;",
                    "60": "throw new IllegalArgumentException( \"BeanIntrospector must not be null!\");",
                    "67": "return introspectors.remove(introspector);",
                    "78": "throw new IllegalArgumentException (\"No destination bean specified\");",
                    "82": "throw new IllegalArgumentException(\"No origin bean specified\");",
                    "90": "try {",
                    "100": "catch (final NoSuchMethodException e) {",
                    "116": "try {",
                    "125": "catch (final NoSuchMethodException e) {",
                    "142": "try {",
                    "152": "catch (final NoSuchMethodException e) {",
                    "169": "throw new IllegalArgumentException(\"No bean specified\");",
                    "193": "return description;",
                    "198": "throw new IllegalArgumentException(\"No bean specified\");",
                    "206": "try {",
                    "209": "catch (final IllegalArgumentException e) {",
                    "210": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"' \" + e.getMessage());",
                    "214": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "218": "return getIndexedProperty(bean, name, index);",
                    "223": "throw new IllegalArgumentException(\"No bean specified\");",
                    "228": "return Array.get(bean, index);",
                    "231": "return ((List<?>)bean).get(index);",
                    "243": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "246": "return ((DynaBean) bean).get(name, index);",
                    "251": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "260": "try {",
                    "261": "return invokeMethod(readMethod,bean, subscript);",
                    "263": "catch (final InvocationTargetException e) {",
                    "265": "throw (IndexOutOfBoundsException) e.getTargetException();",
                    "268": "throw e;",
                    "277": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no \" + \"getter method on bean class '\" + bean.getClass() + \"'\");",
                    "283": "throw new IllegalArgumentException(\"Property '\" + name + \"' is not indexed on bean class '\" + bean.getClass() + \"'\");",
                    "286": "return ((java.util.List<?>) value).get(index);",
                    "289": "try {",
                    "290": "return Array.get(value, index);",
                    "292": "catch (final ArrayIndexOutOfBoundsException e) {",
                    "300": "throw new IllegalArgumentException(\"No bean specified\");",
                    "308": "try {",
                    "311": "catch (final IllegalArgumentException e) {",
                    "312": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"' \" + e.getMessage());",
                    "316": "throw new IllegalArgumentException(\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "320": "return getMappedProperty(bean, name, key);",
                    "325": "throw new IllegalArgumentException(\"No bean specified\");",
                    "339": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"'+ on bean class '\" + bean.getClass() + \"'\");",
                    "342": "return ((DynaBean) bean).get(name, key);",
                    "348": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"'+ on bean class '\" + bean.getClass() + \"'\");",
                    "360": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "374": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "379": "return result;",
                    "384": "return null;",
                    "387": "return mappedDescriptorsCache.get(beanClass);",
                    "392": "return null;",
                    "395": "return getMappedPropertyDescriptors(bean.getClass());",
                    "400": "throw new IllegalArgumentException(\"No bean specified\");",
                    "444": "return bean;",
                    "457": "throw new IllegalArgumentException( \"Indexed or mapped properties are not supported on\" + \" objects of type Map: \" + propertyName);",
                    "460": "return bean.get(propertyName);",
                    "464": "return getNestedProperty(bean, name);",
                    "469": "throw new IllegalArgumentException(\"No bean specified\");",
                    "489": "return null;",
                    "495": "return result;",
                    "506": "try {",
                    "509": "catch (final IntrospectionException ie) {",
                    "518": "return result;",
                    "522": "return getIntrospectionData(beanClass).getDescriptors();",
                    "527": "throw new IllegalArgumentException(\"No bean specified\");",
                    "530": "return getPropertyDescriptors(bean.getClass());",
                    "535": "throw new IllegalArgumentException(\"No bean specified\");",
                    "544": "return descriptor.getPropertyEditorClass();",
                    "547": "return null;",
                    "552": "throw new IllegalArgumentException(\"No bean specified\");",
                    "574": "return null;",
                    "579": "return null;",
                    "582": "return type.getComponentType();",
                    "585": "return type;",
                    "592": "return null;",
                    "595": "return ((IndexedPropertyDescriptor) descriptor). getIndexedPropertyType();",
                    "598": "return ((MappedPropertyDescriptor) descriptor). getMappedPropertyType();",
                    "601": "return descriptor.getPropertyType();",
                    "607": "return MethodUtils.getAccessibleMethod(descriptor.getReadMethod());",
                    "611": "return MethodUtils.getAccessibleMethod(clazz, descriptor.getReadMethod());",
                    "616": "throw new IllegalArgumentException(\"No bean specified\");",
                    "624": "throw new IllegalArgumentException (\"Nested property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "627": "throw new IllegalArgumentException (\"Indexed property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "630": "throw new IllegalArgumentException (\"Mapped property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "636": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on dynaclass '\" + ((DynaBean) bean).getDynaClass() + \"'\" );",
                    "639": "return ((DynaBean) bean).get(name);",
                    "644": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on class '\" + bean.getClass() + \"'\" );",
                    "649": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no getter method in class '\" + bean.getClass() + \"'\");",
                    "653": "return value;",
                    "657": "return MethodUtils.getAccessibleMethod(descriptor.getWriteMethod());",
                    "662": "return MethodUtils.getAccessibleMethod(clazz, data.getWriteMethod(clazz, descriptor));",
                    "667": "throw new IllegalArgumentException(\"No bean specified\");",
                    "677": "try {",
                    "680": "catch (final IllegalAccessException e) {",
                    "681": "return false;",
                    "683": "catch (final InvocationTargetException e) {",
                    "684": "return false;",
                    "686": "catch (final NoSuchMethodException e) {",
                    "687": "return false;",
                    "704": "return ((DynaBean) bean).getDynaClass().getDynaProperty(name) != null;",
                    "707": "try {",
                    "722": "return readMethod != null;",
                    "725": "return false;",
                    "727": "catch (final IllegalAccessException e) {",
                    "728": "return false;",
                    "730": "catch (final InvocationTargetException e) {",
                    "731": "return false;",
                    "733": "catch (final NoSuchMethodException e) {",
                    "734": "return false;",
                    "741": "throw new IllegalArgumentException(\"No bean specified\");",
                    "751": "try {",
                    "754": "catch (final IllegalAccessException e) {",
                    "755": "return false;",
                    "757": "catch (final InvocationTargetException e) {",
                    "758": "return false;",
                    "760": "catch (final NoSuchMethodException e) {",
                    "761": "return false;",
                    "778": "return ((DynaBean) bean).getDynaClass().getDynaProperty(name) != null;",
                    "781": "try {",
                    "796": "return writeMethod != null;",
                    "799": "return false;",
                    "801": "catch (final IllegalAccessException e) {",
                    "802": "return false;",
                    "804": "catch (final InvocationTargetException e) {",
                    "805": "return false;",
                    "807": "catch (final NoSuchMethodException e) {",
                    "808": "return false;",
                    "815": "throw new IllegalArgumentException(\"No bean specified\");",
                    "823": "try {",
                    "826": "catch (final IllegalArgumentException e) {",
                    "827": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "831": "throw new IllegalArgumentException(\"Invalid indexed property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "840": "throw new IllegalArgumentException(\"No bean specified\");",
                    "846": "return;",
                    "851": "return;",
                    "863": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "867": "return;",
                    "872": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "882": "try {",
                    "890": "catch (final InvocationTargetException e) {",
                    "892": "throw (IndexOutOfBoundsException) e.getTargetException();",
                    "895": "throw e;",
                    "898": "return;",
                    "905": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no getter method on bean class '\" + bean.getClass() + \"'\");",
                    "915": "throw new IllegalArgumentException(\"Property '\" + name + \"' is not indexed on bean class '\" + bean.getClass() + \"'\");",
                    "927": "throw new IllegalArgumentException(\"No bean specified\");",
                    "935": "try {",
                    "938": "catch (final IllegalArgumentException e) {",
                    "939": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "943": "throw new IllegalArgumentException (\"Invalid mapped property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "952": "throw new IllegalArgumentException(\"No bean specified\");",
                    "966": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "970": "return;",
                    "975": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "993": "throw new NoSuchMethodException (\"Property '\" + name + \"' has no mapped setter method\" + \"on bean class '\" + bean.getClass() + \"'\");",
                    "1008": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no mapped getter method on bean class '\" + bean.getClass() + \"'\");",
                    "1017": "throw new IllegalArgumentException(\"No bean specified\");",
                    "1073": "throw new IllegalArgumentException( \"Indexed or mapped properties are not supported on\" + \" objects of type Map: \" + propertyName);",
                    "1085": "throw new IllegalArgumentException(\"No bean specified\");",
                    "1093": "throw new IllegalArgumentException (\"Nested property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1096": "throw new IllegalArgumentException (\"Indexed property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1099": "throw new IllegalArgumentException (\"Mapped property names are not allowed: Property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1105": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on dynaclass '\" + ((DynaBean) bean).getDynaClass() + \"'\" );",
                    "1109": "return;",
                    "1114": "throw new NoSuchMethodException(\"Unknown property '\" + name + \"' on class '\" + bean.getClass() + \"'\" );",
                    "1119": "throw new NoSuchMethodException(\"Property '\" + name + \"' has no setter method in class '\" + bean.getClass() + \"'\");",
                    "1134": "throw new IllegalArgumentException(\"No bean specified \" + \"- this should have been checked before reaching this method\");",
                    "1137": "try {",
                    "1138": "return method.invoke(bean, values);",
                    "1140": "catch (final NullPointerException cause) {",
                    "1177": "throw e;",
                    "1179": "catch (final IllegalArgumentException cause) {",
                    "1216": "throw e;",
                    "1223": "throw new IllegalArgumentException(\"No bean class specified\");",
                    "1232": "return data;",
                    "1238": "try {",
                    "1241": "catch (final IntrospectionException iex) {",
                    "1247": "return new BeanIntrospectionData(ictx.getPropertyDescriptors());",
                    "1253": "return list;",
                    "1259": "return map;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {
                    "43": "if (resolver == null) {",
                    "46": "else {",
                    "58": "if (introspector == null) {",
                    "76": "if (dest == null) {",
                    "80": "if (orig == null) {",
                    "84": "if (orig instanceof DynaBean) {",
                    "86": "for (final DynaProperty origDescriptor : origDescriptors) {",
                    "88": "if (isReadable(orig, name) && isWriteable(dest, name)) {",
                    "91": "if (dest instanceof DynaBean) {",
                    "94": "else {",
                    "100": "if (log.isDebugEnabled()) {",
                    "111": "else if (orig instanceof Map) {",
                    "112": "for (final Map.Entry<?, ?> entry : ((Map<?, ?>) orig).entrySet()) {",
                    "114": "if (isWriteable(dest, name)) {",
                    "116": "if (dest instanceof DynaBean) {",
                    "119": "else {",
                    "125": "if (log.isDebugEnabled()) {",
                    "136": "else  {",
                    "138": "for (final PropertyDescriptor origDescriptor : origDescriptors) {",
                    "140": "if (isReadable(orig, name) && isWriteable(dest, name)) {",
                    "143": "if (dest instanceof DynaBean) {",
                    "146": "else {",
                    "152": "if (log.isDebugEnabled()) {",
                    "167": "if (bean == null) {",
                    "172": "if (bean instanceof DynaBean) {",
                    "174": "for (final DynaProperty descriptor : descriptors) {",
                    "180": "else {",
                    "182": "for (final PropertyDescriptor descriptor : descriptors) {",
                    "184": "if (descriptor.getReadMethod() != null) {",
                    "196": "if (bean == null) {",
                    "200": "if (name == null) {",
                    "201": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "212": "if (index < 0) {",
                    "221": "if (bean == null) {",
                    "225": "if (name == null || name.length() == 0) {",
                    "226": "if (bean.getClass().isArray()) {",
                    "229": "else if (bean instanceof List) {",
                    "235": "if (name == null) {",
                    "236": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "239": "if (bean instanceof DynaBean) {",
                    "241": "if (descriptor == null) {",
                    "249": "if (descriptor == null) {",
                    "253": "if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "256": "if (readMethod != null) {",
                    "263": "if (e.getTargetException() instanceof IndexOutOfBoundsException) {",
                    "275": "if (readMethod == null) {",
                    "280": "if (!value.getClass().isArray()) {",
                    "281": "if (!(value instanceof java.util.List)) {",
                    "292": "throw new ArrayIndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + Array.getLength(value) + \" for property '\" + name + \"'\");",
                    "298": "if (bean == null) {",
                    "302": "if (name == null) {",
                    "303": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "314": "if (key == null) {",
                    "323": "if (bean == null) {",
                    "327": "if (name == null) {",
                    "328": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "331": "if (key == null) {",
                    "332": "throw new IllegalArgumentException(\"No key specified for property '\" + name + \"' on bean class \" + bean.getClass() + \"'\");",
                    "335": "if (bean instanceof DynaBean) {",
                    "337": "if (descriptor == null) {",
                    "346": "if (descriptor == null) {",
                    "350": "if (descriptor instanceof MappedPropertyDescriptor) {",
                    "353": "if (readMethod != null) {",
                    "358": "else {",
                    "363": "else {",
                    "365": "if (readMethod != null) {",
                    "367": "if (invokeResult instanceof java.util.Map) {",
                    "372": "else {",
                    "382": "if (beanClass == null) {",
                    "390": "if (bean == null) {",
                    "398": "if (bean == null) {",
                    "402": "if (name == null) {",
                    "403": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "406": "while (resolver.hasNested(name)) {",
                    "409": "if (bean instanceof Map) {",
                    "412": "else if (resolver.isMapped(next)) {",
                    "415": "else if (resolver.isIndexed(next)) {",
                    "418": "else {",
                    "422": "if (nestedBean == null) {",
                    "423": "throw new NestedNullException (\"Null property value for '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "430": "if (bean instanceof Map) {",
                    "433": "else if (resolver.isMapped(name)) {",
                    "436": "else if (resolver.isIndexed(name)) {",
                    "439": "else {",
                    "447": "if (resolver.isMapped(propertyName)) {",
                    "449": "if (name == null || name.length() == 0) {",
                    "455": "if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {",
                    "467": "if (bean == null) {",
                    "471": "if (name == null) {",
                    "472": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "475": "while (resolver.hasNested(name)) {",
                    "478": "if (nestedBean == null) {",
                    "479": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "487": "if (name == null) {",
                    "493": "if (result != null) {",
                    "498": "if (mappedDescriptors == null) {",
                    "504": "if (result == null) {",
                    "511": "if (result != null) {",
                    "525": "if (bean == null) {",
                    "533": "if (bean == null) {",
                    "537": "if (name == null) {",
                    "538": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "542": "if (descriptor != null) {",
                    "550": "if (bean == null) {",
                    "554": "if (name == null) {",
                    "555": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "558": "while (resolver.hasNested(name)) {",
                    "561": "if (nestedBean == null) {",
                    "562": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "570": "if (bean instanceof DynaBean) {",
                    "572": "if (descriptor == null) {",
                    "577": "if (type == null) {",
                    "580": "else if (type.isArray()) {",
                    "583": "else {",
                    "590": "if (descriptor == null) {",
                    "593": "else if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "596": "else if (descriptor instanceof MappedPropertyDescriptor) {",
                    "599": "else {",
                    "614": "if (bean == null) {",
                    "618": "if (name == null) {",
                    "619": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "622": "if (resolver.hasNested(name)) {",
                    "625": "else if (resolver.isIndexed(name)) {",
                    "628": "else if (resolver.isMapped(name)) {",
                    "632": "if (bean instanceof DynaBean) {",
                    "634": "if (descriptor == null) {",
                    "642": "if (descriptor == null) {",
                    "647": "if (readMethod == null) {",
                    "665": "if (bean == null) {",
                    "669": "if (name == null) {",
                    "670": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "673": "while (resolver.hasNested(name)) {",
                    "689": "if (nestedBean == null) {",
                    "690": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "698": "if (bean instanceof WrapDynaBean) {",
                    "702": "if (bean instanceof DynaBean) {",
                    "708": "if (desc != null) {",
                    "710": "if (readMethod == null) {",
                    "711": "if (desc instanceof IndexedPropertyDescriptor) {",
                    "714": "else if (desc instanceof MappedPropertyDescriptor) {",
                    "739": "if (bean == null) {",
                    "743": "if (name == null) {",
                    "744": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "747": "while (resolver.hasNested(name)) {",
                    "763": "if (nestedBean == null) {",
                    "764": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "772": "if (bean instanceof WrapDynaBean) {",
                    "776": "if (bean instanceof DynaBean) {",
                    "782": "if (desc != null) {",
                    "784": "if (writeMethod == null) {",
                    "785": "if (desc instanceof IndexedPropertyDescriptor) {",
                    "788": "else if (desc instanceof MappedPropertyDescriptor) {",
                    "813": "if (bean == null) {",
                    "817": "if (name == null) {",
                    "818": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "829": "if (index < 0) {",
                    "838": "if (bean == null) {",
                    "842": "if (name == null || name.length() == 0) {",
                    "843": "if (bean.getClass().isArray()) {",
                    "847": "else if (bean instanceof List) {",
                    "855": "if (name == null) {",
                    "856": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "859": "if (bean instanceof DynaBean) {",
                    "861": "if (descriptor == null) {",
                    "870": "if (descriptor == null) {",
                    "874": "if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "877": "if (writeMethod != null) {",
                    "882": "if (log.isTraceEnabled()) {",
                    "890": "if (e.getTargetException() instanceof IndexOutOfBoundsException) {",
                    "903": "if (readMethod == null) {",
                    "908": "if (!array.getClass().isArray()) {",
                    "909": "if (array instanceof List) {",
                    "913": "else {",
                    "918": "else {",
                    "925": "if (bean == null) {",
                    "929": "if (name == null) {",
                    "930": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "941": "if (key == null) {",
                    "950": "if (bean == null) {",
                    "954": "if (name == null) {",
                    "955": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "958": "if (key == null) {",
                    "959": "throw new IllegalArgumentException(\"No key specified for property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "962": "if (bean instanceof DynaBean) {",
                    "964": "if (descriptor == null) {",
                    "973": "if (descriptor == null) {",
                    "977": "if (descriptor instanceof MappedPropertyDescriptor) {",
                    "980": "if (mappedWriteMethod != null) {",
                    "984": "if (log.isTraceEnabled()) {",
                    "991": "else {",
                    "996": "else {",
                    "998": "if (readMethod != null) {",
                    "1000": "if (invokeResult instanceof java.util.Map) {",
                    "1006": "else {",
                    "1015": "if (bean == null) {",
                    "1019": "if (name == null) {",
                    "1020": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "1023": "while (resolver.hasNested(name)) {",
                    "1026": "if (bean instanceof Map) {",
                    "1029": "else if (resolver.isMapped(next)) {",
                    "1032": "else if (resolver.isIndexed(next)) {",
                    "1035": "else {",
                    "1039": "if (nestedBean == null) {",
                    "1040": "throw new NestedNullException (\"Null property value for '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1047": "if (bean instanceof Map) {",
                    "1050": "else if (resolver.isMapped(name)) {",
                    "1053": "else if (resolver.isIndexed(name)) {",
                    "1056": "else {",
                    "1063": "if (resolver.isMapped(propertyName)) {",
                    "1065": "if (name == null || name.length() == 0) {",
                    "1071": "if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {",
                    "1083": "if (bean == null) {",
                    "1087": "if (name == null) {",
                    "1088": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "1091": "if (resolver.hasNested(name)) {",
                    "1094": "else if (resolver.isIndexed(name)) {",
                    "1097": "else if (resolver.isMapped(name)) {",
                    "1101": "if (bean instanceof DynaBean) {",
                    "1103": "if (descriptor == null) {",
                    "1112": "if (descriptor == null) {",
                    "1117": "if (writeMethod == null) {",
                    "1123": "if (log.isTraceEnabled()) {",
                    "1132": "if(bean == null) {",
                    "1141": "if (values != null) {",
                    "1142": "for (int i = 0; i < values.length; i++) {",
                    "1143": "if (i>0) {",
                    "1147": "if (values[i] == null) {",
                    "1150": "else {",
                    "1160": "if (parTypes != null) {",
                    "1161": "for (int i = 0; i < parTypes.length; i++) {",
                    "1162": "if (i > 0) {",
                    "1172": "if (!BeanUtils.initCause(e, cause)) {",
                    "1180": "if (values != null) {",
                    "1181": "for (int i = 0; i < values.length; i++) {",
                    "1182": "if (i>0) {",
                    "1186": "if (values[i] == null) {",
                    "1189": "else {",
                    "1199": "if (parTypes != null) {",
                    "1200": "for (int i = 0; i < parTypes.length; i++) {",
                    "1201": "if (i > 0) {",
                    "1211": "if (!BeanUtils.initCause(e, cause)) {",
                    "1221": "if (beanClass == null) {",
                    "1226": "if (data == null) {",
                    "1236": "for (final BeanIntrospector bi : introspectors) {"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java": {
                    "43": "if (resolver == null) {",
                    "46": "else {",
                    "59": "if (introspector == null) {",
                    "77": "if (dest == null) {",
                    "81": "if (orig == null) {",
                    "85": "if (orig instanceof DynaBean) {",
                    "87": "for (final DynaProperty origDescriptor : origDescriptors) {",
                    "89": "if (isReadable(orig, name) && isWriteable(dest, name)) {",
                    "92": "if (dest instanceof DynaBean) {",
                    "95": "else {",
                    "101": "if (log.isDebugEnabled()) {",
                    "112": "else if (orig instanceof Map) {",
                    "113": "for (final Map.Entry<?, ?> entry : ((Map<?, ?>) orig).entrySet()) {",
                    "115": "if (isWriteable(dest, name)) {",
                    "117": "if (dest instanceof DynaBean) {",
                    "120": "else {",
                    "126": "if (log.isDebugEnabled()) {",
                    "137": "else  {",
                    "139": "for (final PropertyDescriptor origDescriptor : origDescriptors) {",
                    "141": "if (isReadable(orig, name) && isWriteable(dest, name)) {",
                    "144": "if (dest instanceof DynaBean) {",
                    "147": "else {",
                    "153": "if (log.isDebugEnabled()) {",
                    "168": "if (bean == null) {",
                    "173": "if (bean instanceof DynaBean) {",
                    "175": "for (final DynaProperty descriptor : descriptors) {",
                    "181": "else {",
                    "183": "for (final PropertyDescriptor descriptor : descriptors) {",
                    "185": "if (descriptor.getReadMethod() != null) {",
                    "197": "if (bean == null) {",
                    "201": "if (name == null) {",
                    "202": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "213": "if (index < 0) {",
                    "222": "if (bean == null) {",
                    "226": "if (name == null || name.length() == 0) {",
                    "227": "if (bean.getClass().isArray()) {",
                    "230": "else if (bean instanceof List) {",
                    "236": "if (name == null) {",
                    "237": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "240": "if (bean instanceof DynaBean) {",
                    "242": "if (descriptor == null) {",
                    "250": "if (descriptor == null) {",
                    "254": "if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "257": "if (readMethod != null) {",
                    "264": "if (e.getTargetException() instanceof IndexOutOfBoundsException) {",
                    "276": "if (readMethod == null) {",
                    "281": "if (!value.getClass().isArray()) {",
                    "282": "if (!(value instanceof java.util.List)) {",
                    "293": "throw new ArrayIndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + Array.getLength(value) + \" for property '\" + name + \"'\");",
                    "299": "if (bean == null) {",
                    "303": "if (name == null) {",
                    "304": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "315": "if (key == null) {",
                    "324": "if (bean == null) {",
                    "328": "if (name == null) {",
                    "329": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "332": "if (key == null) {",
                    "333": "throw new IllegalArgumentException(\"No key specified for property '\" + name + \"' on bean class \" + bean.getClass() + \"'\");",
                    "336": "if (bean instanceof DynaBean) {",
                    "338": "if (descriptor == null) {",
                    "347": "if (descriptor == null) {",
                    "351": "if (descriptor instanceof MappedPropertyDescriptor) {",
                    "354": "if (readMethod != null) {",
                    "359": "else {",
                    "364": "else {",
                    "366": "if (readMethod != null) {",
                    "368": "if (invokeResult instanceof java.util.Map) {",
                    "373": "else {",
                    "383": "if (beanClass == null) {",
                    "391": "if (bean == null) {",
                    "399": "if (bean == null) {",
                    "403": "if (name == null) {",
                    "404": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "407": "while (resolver.hasNested(name)) {",
                    "410": "if (bean instanceof Map) {",
                    "413": "else if (resolver.isMapped(next)) {",
                    "416": "else if (resolver.isIndexed(next)) {",
                    "419": "else {",
                    "423": "if (nestedBean == null) {",
                    "424": "throw new NestedNullException (\"Null property value for '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "431": "if (bean instanceof Map) {",
                    "434": "else if (resolver.isMapped(name)) {",
                    "437": "else if (resolver.isIndexed(name)) {",
                    "440": "else {",
                    "448": "if (resolver.isMapped(propertyName)) {",
                    "450": "if (name == null || name.length() == 0) {",
                    "456": "if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {",
                    "468": "if (bean == null) {",
                    "472": "if (name == null) {",
                    "473": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "476": "while (resolver.hasNested(name)) {",
                    "479": "if (nestedBean == null) {",
                    "480": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "488": "if (name == null) {",
                    "494": "if (result != null) {",
                    "499": "if (mappedDescriptors == null) {",
                    "505": "if (result == null) {",
                    "512": "if (result != null) {",
                    "526": "if (bean == null) {",
                    "534": "if (bean == null) {",
                    "538": "if (name == null) {",
                    "539": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "543": "if (descriptor != null) {",
                    "551": "if (bean == null) {",
                    "555": "if (name == null) {",
                    "556": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "559": "while (resolver.hasNested(name)) {",
                    "562": "if (nestedBean == null) {",
                    "563": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "571": "if (bean instanceof DynaBean) {",
                    "573": "if (descriptor == null) {",
                    "578": "if (type == null) {",
                    "581": "else if (type.isArray()) {",
                    "584": "else {",
                    "591": "if (descriptor == null) {",
                    "594": "else if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "597": "else if (descriptor instanceof MappedPropertyDescriptor) {",
                    "600": "else {",
                    "615": "if (bean == null) {",
                    "619": "if (name == null) {",
                    "620": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "623": "if (resolver.hasNested(name)) {",
                    "626": "else if (resolver.isIndexed(name)) {",
                    "629": "else if (resolver.isMapped(name)) {",
                    "633": "if (bean instanceof DynaBean) {",
                    "635": "if (descriptor == null) {",
                    "643": "if (descriptor == null) {",
                    "648": "if (readMethod == null) {",
                    "666": "if (bean == null) {",
                    "670": "if (name == null) {",
                    "671": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "674": "while (resolver.hasNested(name)) {",
                    "690": "if (nestedBean == null) {",
                    "691": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "699": "if (bean instanceof WrapDynaBean) {",
                    "703": "if (bean instanceof DynaBean) {",
                    "709": "if (desc != null) {",
                    "711": "if (readMethod == null) {",
                    "712": "if (desc instanceof IndexedPropertyDescriptor) {",
                    "715": "else if (desc instanceof MappedPropertyDescriptor) {",
                    "740": "if (bean == null) {",
                    "744": "if (name == null) {",
                    "745": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "748": "while (resolver.hasNested(name)) {",
                    "764": "if (nestedBean == null) {",
                    "765": "throw new NestedNullException (\"Null property value for '\" + next + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "773": "if (bean instanceof WrapDynaBean) {",
                    "777": "if (bean instanceof DynaBean) {",
                    "783": "if (desc != null) {",
                    "785": "if (writeMethod == null) {",
                    "786": "if (desc instanceof IndexedPropertyDescriptor) {",
                    "789": "else if (desc instanceof MappedPropertyDescriptor) {",
                    "814": "if (bean == null) {",
                    "818": "if (name == null) {",
                    "819": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "830": "if (index < 0) {",
                    "839": "if (bean == null) {",
                    "843": "if (name == null || name.length() == 0) {",
                    "844": "if (bean.getClass().isArray()) {",
                    "848": "else if (bean instanceof List) {",
                    "856": "if (name == null) {",
                    "857": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "860": "if (bean instanceof DynaBean) {",
                    "862": "if (descriptor == null) {",
                    "871": "if (descriptor == null) {",
                    "875": "if (descriptor instanceof IndexedPropertyDescriptor) {",
                    "878": "if (writeMethod != null) {",
                    "883": "if (log.isTraceEnabled()) {",
                    "891": "if (e.getTargetException() instanceof IndexOutOfBoundsException) {",
                    "904": "if (readMethod == null) {",
                    "909": "if (!array.getClass().isArray()) {",
                    "910": "if (array instanceof List) {",
                    "914": "else {",
                    "919": "else {",
                    "926": "if (bean == null) {",
                    "930": "if (name == null) {",
                    "931": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "942": "if (key == null) {",
                    "951": "if (bean == null) {",
                    "955": "if (name == null) {",
                    "956": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "959": "if (key == null) {",
                    "960": "throw new IllegalArgumentException(\"No key specified for property '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "963": "if (bean instanceof DynaBean) {",
                    "965": "if (descriptor == null) {",
                    "974": "if (descriptor == null) {",
                    "978": "if (descriptor instanceof MappedPropertyDescriptor) {",
                    "981": "if (mappedWriteMethod != null) {",
                    "985": "if (log.isTraceEnabled()) {",
                    "992": "else {",
                    "997": "else {",
                    "999": "if (readMethod != null) {",
                    "1001": "if (invokeResult instanceof java.util.Map) {",
                    "1007": "else {",
                    "1016": "if (bean == null) {",
                    "1020": "if (name == null) {",
                    "1021": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "1024": "while (resolver.hasNested(name)) {",
                    "1027": "if (bean instanceof Map) {",
                    "1030": "else if (resolver.isMapped(next)) {",
                    "1033": "else if (resolver.isIndexed(next)) {",
                    "1036": "else {",
                    "1040": "if (nestedBean == null) {",
                    "1041": "throw new NestedNullException (\"Null property value for '\" + name + \"' on bean class '\" + bean.getClass() + \"'\");",
                    "1048": "if (bean instanceof Map) {",
                    "1051": "else if (resolver.isMapped(name)) {",
                    "1054": "else if (resolver.isIndexed(name)) {",
                    "1057": "else {",
                    "1064": "if (resolver.isMapped(propertyName)) {",
                    "1066": "if (name == null || name.length() == 0) {",
                    "1072": "if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {",
                    "1084": "if (bean == null) {",
                    "1088": "if (name == null) {",
                    "1089": "throw new IllegalArgumentException(\"No name specified for bean class '\" + bean.getClass() + \"'\");",
                    "1092": "if (resolver.hasNested(name)) {",
                    "1095": "else if (resolver.isIndexed(name)) {",
                    "1098": "else if (resolver.isMapped(name)) {",
                    "1102": "if (bean instanceof DynaBean) {",
                    "1104": "if (descriptor == null) {",
                    "1113": "if (descriptor == null) {",
                    "1118": "if (writeMethod == null) {",
                    "1124": "if (log.isTraceEnabled()) {",
                    "1133": "if(bean == null) {",
                    "1142": "if (values != null) {",
                    "1143": "for (int i = 0; i < values.length; i++) {",
                    "1144": "if (i>0) {",
                    "1148": "if (values[i] == null) {",
                    "1151": "else {",
                    "1161": "if (parTypes != null) {",
                    "1162": "for (int i = 0; i < parTypes.length; i++) {",
                    "1163": "if (i > 0) {",
                    "1173": "if (!BeanUtils.initCause(e, cause)) {",
                    "1181": "if (values != null) {",
                    "1182": "for (int i = 0; i < values.length; i++) {",
                    "1183": "if (i>0) {",
                    "1187": "if (values[i] == null) {",
                    "1190": "else {",
                    "1200": "if (parTypes != null) {",
                    "1201": "for (int i = 0; i < parTypes.length; i++) {",
                    "1202": "if (i > 0) {",
                    "1212": "if (!BeanUtils.initCause(e, cause)) {",
                    "1222": "if (beanClass == null) {",
                    "1227": "if (data == null) {",
                    "1237": "for (final BeanIntrospector bi : introspectors) {"
                }
            }
        }
    },
    "CVE-2015-2156": {
        "source": {
            "old": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "62": "public List<String> encode(Cookie... cookies) {",
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {",
                    "104": "public List<String> encode(Iterable<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "21": "public String encode(Cookie cookie) {"
                }
            },
            "new": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "62": "public List<String> encode(Cookie... cookies) {",
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {",
                    "104": "public List<String> encode(Iterable<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {},
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "83": "public List<String> encode(Collection<? extends Cookie> cookies) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "21": "public String encode(Cookie cookie) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                }
            },
            "new": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "18": "return encode(new DefaultCookie(name, value));",
                    "23": "throw new NullPointerException(\"cookie\");",
                    "59": "return stripTrailingSeparator(buf);",
                    "64": "throw new NullPointerException(\"cookies\");",
                    "68": "return Collections.emptyList();",
                    "80": "return encoded;",
                    "85": "throw new NullPointerException(\"cookies\");",
                    "89": "return Collections.emptyList();",
                    "101": "return encoded;",
                    "106": "throw new NullPointerException(\"cookies\");",
                    "110": "return Collections.emptyList();",
                    "122": "return encoded;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Long.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                }
            },
            "new": {
                "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                },
                "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java": {
                    "22": "if (cookie == null) {",
                    "30": "if (cookie.wrap()) {",
                    "33": "else {",
                    "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {",
                    "43": "if (cookie.path() != null) {",
                    "47": "if (cookie.domain() != null) {",
                    "51": "if (cookie.isSecure()) {",
                    "55": "if (cookie.isHttpOnly()) {",
                    "63": "if (cookies == null) {",
                    "67": "if (cookies.length == 0) {",
                    "72": "for (Cookie c : cookies) {",
                    "73": "if (c == null) {",
                    "84": "if (cookies == null) {",
                    "88": "if (cookies.isEmpty()) {",
                    "93": "for (Cookie c : cookies) {",
                    "94": "if (c == null) {",
                    "105": "if (cookies == null) {",
                    "109": "if (cookies.iterator().hasNext()) {",
                    "114": "for (Cookie c : cookies) {",
                    "115": "if (c == null) {"
                }
            }
        }
    },
    "CVE-2020-26217": {
        "source": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {}
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {}
            }
        },
        "sink": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {
                    "296": "return mapper;",
                    "300": "try {",
                    "303": "return (Mapper)constructor.newInstance(constructorParamValues);",
                    "305": "catch (Exception e) {",
                    "306": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate mapper : \" + className, e);",
                    "308": "catch (LinkageError e) {",
                    "309": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate mapper : \" + className, e);",
                    "315": "return next;",
                    "319": "return false;",
                    "340": "return;",
                    "436": "throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");",
                    "443": "return;",
                    "582": "return;",
                    "705": "try {",
                    "717": "catch (Exception e) {",
                    "718": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate converter : \" + className, e);",
                    "720": "catch (LinkageError e) {",
                    "721": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate converter : \" + className, e);",
                    "728": "return;",
                    "758": "try {",
                    "769": "catch (NoSuchMethodException e) {",
                    "771": "catch (SecurityException e) {",
                    "773": "catch (IllegalAccessException e) {",
                    "775": "catch (InvocationTargetException e) {",
                    "847": "return writer.toString();",
                    "852": "try {",
                    "863": "try {",
                    "881": "return fromXML(new StringReader(xml));",
                    "885": "return unmarshal(hierarchicalStreamDriver.createReader(reader), null);",
                    "889": "return unmarshal(hierarchicalStreamDriver.createReader(input), null);",
                    "893": "return fromXML(url, null);",
                    "897": "return fromXML(file, null);",
                    "901": "return fromXML(new StringReader(xml), root);",
                    "905": "return unmarshal(hierarchicalStreamDriver.createReader(xml), root);",
                    "909": "return unmarshal(hierarchicalStreamDriver.createReader(url), root);",
                    "914": "try {",
                    "915": "return unmarshal(reader, root);",
                    "924": "return unmarshal(hierarchicalStreamDriver.createReader(input), root);",
                    "928": "return unmarshal(reader, null, null);",
                    "932": "return unmarshal(reader, root, null);",
                    "936": "try {",
                    "942": "return marshallingStrategy.unmarshal(root, reader, dataHolder, converterLookup, mapper);",
                    "944": "catch (ConversionException e) {",
                    "948": "throw e;",
                    "955": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ClassAliasingMapper.class.getName() + \" available\");",
                    "963": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ClassAliasingMapper.class.getName() + \" available\");",
                    "976": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + PackageAliasingMapper.class.getName() + \" available\");",
                    "984": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + FieldAliasingMapper.class.getName() + \" available\");",
                    "992": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeAliasingMapper.class.getName() + \" available\");",
                    "1000": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + SystemAttributeAliasingMapper.class.getName() + \" available\");",
                    "1013": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1021": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1029": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1037": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + DefaultImplementationsMapper.class.getName() + \" available\");",
                    "1049": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ImmutableTypesMapper.class.getName() + \" available\");",
                    "1079": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + LocalConversionMapper.class.getName() + \" available\");",
                    "1090": "return mapper;",
                    "1094": "return reflectionProvider;",
                    "1098": "return converterLookup;",
                    "1121": "default: throw new IllegalArgumentException(\"Unknown mode : \" + mode);",
                    "1156": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ImplicitCollectionMapper.class.getName() + \" available\");",
                    "1163": "return new MapBackedDataHolder();",
                    "1167": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(writer), \"object-stream\");",
                    "1171": "return createObjectOutputStream(writer, \"object-stream\");",
                    "1175": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(writer), rootNodeName);",
                    "1179": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(out), \"object-stream\");",
                    "1183": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(out), rootNodeName);",
                    "1187": "return createObjectOutputStream(writer, rootNodeName, null);",
                    "1197": "throw new NotActiveException(\"not in call to writeObject\");",
                    "1201": "throw new NotActiveException(\"not in call to writeObject\");",
                    "1222": "return createObjectInputStream(hierarchicalStreamDriver.createReader(xmlReader));",
                    "1226": "return createObjectInputStream(hierarchicalStreamDriver.createReader(in));",
                    "1230": "return createObjectInputStream(reader, null);",
                    "1240": "return result;",
                    "1244": "throw new NotActiveException(\"not in call to readObject\");",
                    "1248": "throw new NotActiveException(\"not in call to readObject\");",
                    "1252": "throw new NotActiveException(\"stream inactive\");",
                    "1267": "return classLoaderReference.getReference();",
                    "1271": "return classLoaderReference;",
                    "1276": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ElementIgnoringMapper.class.getName() + \" available\");",
                    "1292": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ElementIgnoringMapper.class.getName() + \" available\");",
                    "1300": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ANNOTATION_MAPPER_TYPE + \" available\");",
                    "1379": "return this;"
                }
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {
                    "296": "return mapper;",
                    "300": "try {",
                    "303": "return (Mapper)constructor.newInstance(constructorParamValues);",
                    "305": "catch (Exception e) {",
                    "306": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate mapper : \" + className, e);",
                    "308": "catch (LinkageError e) {",
                    "309": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate mapper : \" + className, e);",
                    "315": "return next;",
                    "319": "return false;",
                    "340": "return;",
                    "436": "throw new IllegalArgumentException(\"Security framework of XStream instance already initialized\");",
                    "443": "return;",
                    "582": "return;",
                    "705": "try {",
                    "717": "catch (Exception e) {",
                    "718": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate converter : \" + className, e);",
                    "720": "catch (LinkageError e) {",
                    "721": "throw new com.thoughtworks.xstream.InitializationException(\"Could not instantiate converter : \" + className, e);",
                    "728": "return;",
                    "758": "try {",
                    "769": "catch (NoSuchMethodException e) {",
                    "771": "catch (SecurityException e) {",
                    "773": "catch (IllegalAccessException e) {",
                    "775": "catch (InvocationTargetException e) {",
                    "847": "return writer.toString();",
                    "852": "try {",
                    "863": "try {",
                    "881": "return fromXML(new StringReader(xml));",
                    "885": "return unmarshal(hierarchicalStreamDriver.createReader(reader), null);",
                    "889": "return unmarshal(hierarchicalStreamDriver.createReader(input), null);",
                    "893": "return fromXML(url, null);",
                    "897": "return fromXML(file, null);",
                    "901": "return fromXML(new StringReader(xml), root);",
                    "905": "return unmarshal(hierarchicalStreamDriver.createReader(xml), root);",
                    "909": "return unmarshal(hierarchicalStreamDriver.createReader(url), root);",
                    "914": "try {",
                    "915": "return unmarshal(reader, root);",
                    "924": "return unmarshal(hierarchicalStreamDriver.createReader(input), root);",
                    "928": "return unmarshal(reader, null, null);",
                    "932": "return unmarshal(reader, root, null);",
                    "936": "try {",
                    "942": "return marshallingStrategy.unmarshal(root, reader, dataHolder, converterLookup, mapper);",
                    "944": "catch (ConversionException e) {",
                    "948": "throw e;",
                    "955": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ClassAliasingMapper.class.getName() + \" available\");",
                    "963": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ClassAliasingMapper.class.getName() + \" available\");",
                    "976": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + PackageAliasingMapper.class.getName() + \" available\");",
                    "984": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + FieldAliasingMapper.class.getName() + \" available\");",
                    "992": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeAliasingMapper.class.getName() + \" available\");",
                    "1000": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + SystemAttributeAliasingMapper.class.getName() + \" available\");",
                    "1013": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1021": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1029": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + AttributeMapper.class.getName() + \" available\");",
                    "1037": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + DefaultImplementationsMapper.class.getName() + \" available\");",
                    "1049": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ImmutableTypesMapper.class.getName() + \" available\");",
                    "1079": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + LocalConversionMapper.class.getName() + \" available\");",
                    "1090": "return mapper;",
                    "1094": "return reflectionProvider;",
                    "1098": "return converterLookup;",
                    "1121": "default: throw new IllegalArgumentException(\"Unknown mode : \" + mode);",
                    "1156": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ImplicitCollectionMapper.class.getName() + \" available\");",
                    "1163": "return new MapBackedDataHolder();",
                    "1167": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(writer), \"object-stream\");",
                    "1171": "return createObjectOutputStream(writer, \"object-stream\");",
                    "1175": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(writer), rootNodeName);",
                    "1179": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(out), \"object-stream\");",
                    "1183": "return createObjectOutputStream(hierarchicalStreamDriver.createWriter(out), rootNodeName);",
                    "1187": "return createObjectOutputStream(writer, rootNodeName, null);",
                    "1197": "throw new NotActiveException(\"not in call to writeObject\");",
                    "1201": "throw new NotActiveException(\"not in call to writeObject\");",
                    "1222": "return createObjectInputStream(hierarchicalStreamDriver.createReader(xmlReader));",
                    "1226": "return createObjectInputStream(hierarchicalStreamDriver.createReader(in));",
                    "1230": "return createObjectInputStream(reader, null);",
                    "1240": "return result;",
                    "1244": "throw new NotActiveException(\"not in call to readObject\");",
                    "1248": "throw new NotActiveException(\"not in call to readObject\");",
                    "1252": "throw new NotActiveException(\"stream inactive\");",
                    "1267": "return classLoaderReference.getReference();",
                    "1271": "return classLoaderReference;",
                    "1276": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ElementIgnoringMapper.class.getName() + \" available\");",
                    "1292": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ElementIgnoringMapper.class.getName() + \" available\");",
                    "1300": "throw new com.thoughtworks.xstream.InitializationException(\"No \" + ANNOTATION_MAPPER_TYPE + \" available\");",
                    "1379": "return this;"
                }
            }
        },
        "undefined": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {
                    "226": "this(reflectionProvider, driver, classLoader, mapper, new ConverterLookup() {             public Converter lookupConverterForType(Class type) { return defaultConverterLookup.lookupConverterForType(type);",
                    "242": "if (reflectionProvider == null) {",
                    "263": "if (useXStream11XmlFriendlyMapper()) {",
                    "279": "if (JVM.isVersion(5)) {",
                    "285": "if (JVM.isVersion(8)) {",
                    "290": "if (JVM.isVersion(5)) {",
                    "339": "if (securityMapper == null) {",
                    "351": "if (!xstream.securityInitialized) {",
                    "366": "if (type != null) {",
                    "371": "if (type != null) {",
                    "393": "if (JVM.isSQLAvailable()) {",
                    "399": "if (JVM.isVersion(8)) {",
                    "429": "for (int i = 0; i < classes.length; ++i) {",
                    "435": "else {",
                    "442": "if (classAliasingMapper == null) {",
                    "486": "if (JVM.isAWTAvailable()) {",
                    "493": "if (type != null) {",
                    "497": "if (JVM.isSQLAvailable()) {",
                    "506": "if (JVM.isVersion(4)) {",
                    "515": "if (JVM.isVersion(5)) {",
                    "524": "if (JVM.isVersion(7)) {",
                    "528": "if (JVM.isVersion(8)) {",
                    "566": "if (JVM.loadClassForName(\"java.lang.invoke.SerializedLambda\") != null) {",
                    "574": "if (type != null) {",
                    "581": "if (defaultImplementationsMapper == null) {",
                    "624": "if (JVM.isSQLAvailable()) {",
                    "634": "if (JVM.isAWTAvailable()) {",
                    "640": "if (JVM.isSwingAvailable()) {",
                    "646": "if (JVM.isVersion(4)) {",
                    "655": "if (JVM.isVersion(5)) {",
                    "656": "if (JVM.loadClassForName(\"javax.xml.datatype.Duration\") != null) {",
                    "667": "if (JVM.loadClassForName(\"javax.activation.ActivationDataFlavor\") != null) {",
                    "671": "if (JVM.isVersion(7)) {",
                    "675": "if (JVM.isVersion(8)) {",
                    "709": "if (instance instanceof Converter) {",
                    "712": "else if (instance instanceof SingleValueConverter) {",
                    "727": "if (immutableTypesMapper == null) {",
                    "754": "if (JVM.isVersion(7)) {",
                    "756": "if (type != null) {",
                    "760": "if (methodGet != null) {",
                    "762": "if (path != null) {",
                    "782": "if (JVM.isAWTAvailable()) {",
                    "786": "if (JVM.isVersion(4)) {",
                    "791": "if (JVM.isVersion(5)) {",
                    "799": "if (JVM.isVersion(8)) {",
                    "834": "if (type != null) {",
                    "937": "if (!securityInitialized && !securityWarningGiven) {",
                    "954": "if (classAliasingMapper == null) {",
                    "962": "if (classAliasingMapper == null) {",
                    "975": "if (packageAliasingMapper == null) {",
                    "983": "if (fieldAliasingMapper == null) {",
                    "991": "if (attributeAliasingMapper == null) {",
                    "999": "if (systemAttributeAliasingMapper == null) {",
                    "1012": "if (attributeMapper == null) {",
                    "1020": "if (attributeMapper == null) {",
                    "1028": "if (attributeMapper == null) {",
                    "1036": "if (defaultImplementationsMapper == null) {",
                    "1048": "if (immutableTypesMapper == null) {",
                    "1060": "if (converterRegistry != null) {",
                    "1071": "if (converterRegistry != null) {",
                    "1078": "if (localConversionMapper == null) {",
                    "1102": "switch (mode) {",
                    "1155": "if (implicitCollectionMapper == null) {",
                    "1193": "return new CustomObjectOutputStream(new CustomObjectOutputStream.StreamCallback() {             public void writeToStream(final Object object) { marshal(object, statefulWriter, dataHolder);",
                    "1209": "if (statefulWriter.state() != StatefulWriter.STATE_CLOSED) {",
                    "1234": "return new CustomObjectInputStream(new CustomObjectInputStream.StreamCallback() {             public Object readFromStream() throws EOFException { if (!reader.hasMoreChildren()) { throw new EOFException();",
                    "1275": "if (elementIgnoringMapper == null) {",
                    "1291": "if (elementIgnoringMapper == null) {",
                    "1299": "if (annotationConfiguration == null) {",
                    "1311": "if (annotationConfiguration != null) {",
                    "1318": "if (securityMapper != null) {"
                }
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/XStream.java": {
                    "226": "this(reflectionProvider, driver, classLoader, mapper, new ConverterLookup() {             public Converter lookupConverterForType(Class type) { return defaultConverterLookup.lookupConverterForType(type);",
                    "242": "if (reflectionProvider == null) {",
                    "263": "if (useXStream11XmlFriendlyMapper()) {",
                    "279": "if (JVM.isVersion(5)) {",
                    "285": "if (JVM.isVersion(8)) {",
                    "290": "if (JVM.isVersion(5)) {",
                    "339": "if (securityMapper == null) {",
                    "351": "if (!xstream.securityInitialized) {",
                    "366": "if (type != null) {",
                    "371": "if (type != null) {",
                    "393": "if (JVM.isSQLAvailable()) {",
                    "399": "if (JVM.isVersion(8)) {",
                    "429": "for (int i = 0; i < classes.length; ++i) {",
                    "435": "else {",
                    "442": "if (classAliasingMapper == null) {",
                    "486": "if (JVM.isAWTAvailable()) {",
                    "493": "if (type != null) {",
                    "497": "if (JVM.isSQLAvailable()) {",
                    "506": "if (JVM.isVersion(4)) {",
                    "515": "if (JVM.isVersion(5)) {",
                    "524": "if (JVM.isVersion(7)) {",
                    "528": "if (JVM.isVersion(8)) {",
                    "566": "if (JVM.loadClassForName(\"java.lang.invoke.SerializedLambda\") != null) {",
                    "574": "if (type != null) {",
                    "581": "if (defaultImplementationsMapper == null) {",
                    "624": "if (JVM.isSQLAvailable()) {",
                    "634": "if (JVM.isAWTAvailable()) {",
                    "640": "if (JVM.isSwingAvailable()) {",
                    "646": "if (JVM.isVersion(4)) {",
                    "655": "if (JVM.isVersion(5)) {",
                    "656": "if (JVM.loadClassForName(\"javax.xml.datatype.Duration\") != null) {",
                    "667": "if (JVM.loadClassForName(\"javax.activation.ActivationDataFlavor\") != null) {",
                    "671": "if (JVM.isVersion(7)) {",
                    "675": "if (JVM.isVersion(8)) {",
                    "709": "if (instance instanceof Converter) {",
                    "712": "else if (instance instanceof SingleValueConverter) {",
                    "727": "if (immutableTypesMapper == null) {",
                    "754": "if (JVM.isVersion(7)) {",
                    "756": "if (type != null) {",
                    "760": "if (methodGet != null) {",
                    "762": "if (path != null) {",
                    "782": "if (JVM.isAWTAvailable()) {",
                    "786": "if (JVM.isVersion(4)) {",
                    "791": "if (JVM.isVersion(5)) {",
                    "799": "if (JVM.isVersion(8)) {",
                    "834": "if (type != null) {",
                    "937": "if (!securityInitialized && !securityWarningGiven) {",
                    "954": "if (classAliasingMapper == null) {",
                    "962": "if (classAliasingMapper == null) {",
                    "975": "if (packageAliasingMapper == null) {",
                    "983": "if (fieldAliasingMapper == null) {",
                    "991": "if (attributeAliasingMapper == null) {",
                    "999": "if (systemAttributeAliasingMapper == null) {",
                    "1012": "if (attributeMapper == null) {",
                    "1020": "if (attributeMapper == null) {",
                    "1028": "if (attributeMapper == null) {",
                    "1036": "if (defaultImplementationsMapper == null) {",
                    "1048": "if (immutableTypesMapper == null) {",
                    "1060": "if (converterRegistry != null) {",
                    "1071": "if (converterRegistry != null) {",
                    "1078": "if (localConversionMapper == null) {",
                    "1102": "switch (mode) {",
                    "1155": "if (implicitCollectionMapper == null) {",
                    "1193": "return new CustomObjectOutputStream(new CustomObjectOutputStream.StreamCallback() {             public void writeToStream(final Object object) { marshal(object, statefulWriter, dataHolder);",
                    "1209": "if (statefulWriter.state() != StatefulWriter.STATE_CLOSED) {",
                    "1234": "return new CustomObjectInputStream(new CustomObjectInputStream.StreamCallback() {             public Object readFromStream() throws EOFException { if (!reader.hasMoreChildren()) { throw new EOFException();",
                    "1275": "if (elementIgnoringMapper == null) {",
                    "1291": "if (elementIgnoringMapper == null) {",
                    "1299": "if (annotationConfiguration == null) {",
                    "1311": "if (annotationConfiguration != null) {",
                    "1318": "if (securityMapper != null) {"
                }
            }
        }
    },
    "CVE-2020-28052": {
        "source": {
            "old": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "103": "private static boolean doCheckPassword( String bcryptString, byte[] password) {"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "103": "private static boolean doCheckPassword( String bcryptString, byte[] password) {"
                }
            }
        },
        "sink": {
            "old": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "32": "return generate(defaultVersion, password, salt, cost);",
                    "36": "return generate(defaultVersion, password, salt, cost);",
                    "41": "throw new IllegalArgumentException(\"Password required.\");",
                    "44": "return doGenerate(version, Strings.toUTF8ByteArray(password), salt, cost);",
                    "49": "throw new IllegalArgumentException(\"Password required.\");",
                    "52": "return doGenerate(version, Arrays.clone(password), salt, cost);",
                    "57": "throw new IllegalArgumentException(\"Version \" + version + \" is not accepted by this implementation.\");",
                    "61": "throw new IllegalArgumentException(\"Salt required.\");",
                    "65": "throw new DataLengthException(\"16 byte salt required: \" + salt.length);",
                    "69": "throw new IllegalArgumentException(\"Invalid cost factor.\");",
                    "84": "return rv;",
                    "89": "throw new IllegalArgumentException(\"Missing password.\");",
                    "92": "return doCheckPassword(bcryptString, Strings.toUTF8ByteArray(password));",
                    "97": "throw new IllegalArgumentException(\"Missing password.\");",
                    "100": "return doCheckPassword(bcryptString, Arrays.clone(password));",
                    "105": "throw new IllegalArgumentException(\"Missing bcryptString.\");",
                    "110": "throw new DataLengthException(\"Bcrypt String length: \" + sLength + \", 60 required.\");",
                    "114": "throw new IllegalArgumentException(\"Invalid Bcrypt String format.\");",
                    "119": "throw new IllegalArgumentException(\"Bcrypt version '\" + version + \"' is not supported by this implementation\");",
                    "124": "try {",
                    "128": "catch (NumberFormatException nfe) {",
                    "129": "throw new IllegalArgumentException(\"Invalid cost factor: \" + costStr);",
                    "133": "throw new IllegalArgumentException(\"Invalid cost factor: \" + cost + \", 4 < cost < 31 expected.\");",
                    "143": "return isEqual;",
                    "148": "throw new IllegalArgumentException(\"Version \" + version + \" is not accepted by this implementation.\");",
                    "160": "return sb.toString();",
                    "208": "throw new DataLengthException(\"Invalid base64 salt length: \" + saltChars.length + \" , 22 required.\");",
                    "214": "throw new IllegalArgumentException(\"Salt string contains invalid character: \" + value);",
                    "237": "return saltBytes;"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "32": "return generate(defaultVersion, password, salt, cost);",
                    "36": "return generate(defaultVersion, password, salt, cost);",
                    "41": "throw new IllegalArgumentException(\"Password required.\");",
                    "44": "return doGenerate(version, Strings.toUTF8ByteArray(password), salt, cost);",
                    "49": "throw new IllegalArgumentException(\"Password required.\");",
                    "52": "return doGenerate(version, Arrays.clone(password), salt, cost);",
                    "57": "throw new IllegalArgumentException(\"Version \" + version + \" is not accepted by this implementation.\");",
                    "61": "throw new IllegalArgumentException(\"Salt required.\");",
                    "65": "throw new DataLengthException(\"16 byte salt required: \" + salt.length);",
                    "69": "throw new IllegalArgumentException(\"Invalid cost factor.\");",
                    "84": "return rv;",
                    "89": "throw new IllegalArgumentException(\"Missing password.\");",
                    "92": "return doCheckPassword(bcryptString, Strings.toUTF8ByteArray(password));",
                    "97": "throw new IllegalArgumentException(\"Missing password.\");",
                    "100": "return doCheckPassword(bcryptString, Arrays.clone(password));",
                    "105": "throw new IllegalArgumentException(\"Missing bcryptString.\");",
                    "110": "throw new DataLengthException(\"Bcrypt String length: \" + sLength + \", 60 required.\");",
                    "114": "throw new IllegalArgumentException(\"Invalid Bcrypt String format.\");",
                    "119": "throw new IllegalArgumentException(\"Bcrypt version '\" + version + \"' is not supported by this implementation\");",
                    "124": "try {",
                    "128": "catch (NumberFormatException nfe) {",
                    "129": "throw new IllegalArgumentException(\"Invalid cost factor: \" + costStr);",
                    "133": "throw new IllegalArgumentException(\"Invalid cost factor: \" + cost + \", 4 < cost < 31 expected.\");",
                    "143": "return isEqual;",
                    "148": "throw new IllegalArgumentException(\"Version \" + version + \" is not accepted by this implementation.\");",
                    "160": "return sb.toString();",
                    "208": "throw new DataLengthException(\"Invalid base64 salt length: \" + saltChars.length + \" , 22 required.\");",
                    "214": "throw new IllegalArgumentException(\"Salt string contains invalid character: \" + value);",
                    "237": "return saltBytes;"
                }
            }
        },
        "undefined": {
            "old": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "18": "for (int i = 0; i < decodingTable.length; i++){",
                    "22": "for (int i = 0; i < encodingTable.length; i++){",
                    "40": "if (password == null){",
                    "48": "if (password == null){",
                    "56": "if (!allowedVersions.contains(version)){",
                    "60": "if (salt == null){",
                    "64": "else if (salt.length != 16){",
                    "68": "if (cost < 4 || cost > 31) {",
                    "73": "if (tmp.length > psw.length){",
                    "77": "else{",
                    "88": "if (password == null){",
                    "96": "if (password == null){",
                    "104": "if (bcryptString == null){",
                    "109": "if (sLength != 60){",
                    "113": "if (bcryptString.charAt(0) != '$' || bcryptString.charAt(3) != '$' || bcryptString.charAt(6) != '$'){",
                    "118": "if (!allowedVersions.contains(version)){",
                    "132": "if (cost < 4 || cost > 31){",
                    "139": "for (int i = 0; i != sLength; i++){",
                    "147": "if (!allowedVersions.contains(version)){",
                    "164": "if (data.length != 24 && data.length != 16) {",
                    "165": "throw new DataLengthException(\"Invalid length: \" + data.length + \", 24 for key or 16 for salt expected\");",
                    "169": "if (data.length == 16){",
                    "176": "else {",
                    "183": "for (i = 0; i < len; i += 3){",
                    "193": "if (salt == true){",
                    "197": "else{",
                    "207": "if (saltChars.length != 22){",
                    "211": "for (int i = 0; i < saltChars.length; i++){",
                    "213": "if (value > 122 || value < 46 || (value > 57 && value < 65)){",
                    "223": "for (int i = 0; i < len; i += 4){"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java": {
                    "18": "for (int i = 0; i < decodingTable.length; i++){",
                    "22": "for (int i = 0; i < encodingTable.length; i++){",
                    "40": "if (password == null){",
                    "48": "if (password == null){",
                    "56": "if (!allowedVersions.contains(version)){",
                    "60": "if (salt == null){",
                    "64": "else if (salt.length != 16){",
                    "68": "if (cost < 4 || cost > 31) {",
                    "73": "if (tmp.length > psw.length){",
                    "77": "else{",
                    "88": "if (password == null){",
                    "96": "if (password == null){",
                    "104": "if (bcryptString == null){",
                    "109": "if (sLength != 60){",
                    "113": "if (bcryptString.charAt(0) != '$' || bcryptString.charAt(3) != '$' || bcryptString.charAt(6) != '$'){",
                    "118": "if (!allowedVersions.contains(version)){",
                    "132": "if (cost < 4 || cost > 31){",
                    "139": "for (int i = 0; i != sLength; i++){",
                    "147": "if (!allowedVersions.contains(version)){",
                    "164": "if (data.length != 24 && data.length != 16) {",
                    "165": "throw new DataLengthException(\"Invalid length: \" + data.length + \", 24 for key or 16 for salt expected\");",
                    "169": "if (data.length == 16){",
                    "176": "else {",
                    "183": "for (i = 0; i < len; i += 3){",
                    "193": "if (salt == true){",
                    "197": "else{",
                    "207": "if (saltChars.length != 22){",
                    "211": "for (int i = 0; i < saltChars.length; i++){",
                    "213": "if (value > 122 || value < 46 || (value > 57 && value < 65)){",
                    "223": "for (int i = 0; i < len; i += 4){"
                }
            }
        }
    },
    "CVE-2022-42004": {
        "source": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {},
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {}
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {},
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {}
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {},
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {}
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {},
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {}
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {
                    "14": "public boolean enabledByDefault() { return _defaultState; }",
                    "16": "public int getMask() { return _mask; }",
                    "18": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }"
                },
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {
                    "14": "public boolean enabledByDefault() { return _defaultState; }",
                    "16": "public int getMask() { return _mask; }",
                    "18": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }"
                }
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java": {
                    "14": "public boolean enabledByDefault() { return _defaultState; }",
                    "16": "public int getMask() { return _mask; }",
                    "18": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }"
                },
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java": {
                    "14": "public boolean enabledByDefault() { return _defaultState; }",
                    "16": "public int getMask() { return _mask; }",
                    "18": "public boolean enabledIn(int flags) { return (flags & _mask) != 0; }"
                }
            }
        }
    },
    "CVE-2018-20227": {
        "source": {
            "old": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "35": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException {"
                }
            },
            "new": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "35": "public static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "15": "return Arrays.equals(MAGIC_NUMBER, fileHeader);",
                    "19": "try (ZipFile zf = new ZipFile(zipFile)) {",
                    "26": "assert destDir.isDirectory();",
                    "43": "try (InputStream in = zipFile.getInputStream(entry)) {"
                }
            },
            "new": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "15": "return Arrays.equals(MAGIC_NUMBER, fileHeader);",
                    "19": "try (ZipFile zf = new ZipFile(zipFile)) {",
                    "26": "assert destDir.isDirectory();",
                    "38": "throw new IOException(\"Zip entry outside destination directory: \" + entry.getName());",
                    "46": "try (InputStream in = zipFile.getInputStream(entry)) {"
                }
            }
        },
        "undefined": {
            "old": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "28": "while (entries.hasMoreElements()) {",
                    "37": "if (entry.isDirectory()) {",
                    "41": "else {"
                }
            },
            "new": {
                "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java": {
                    "28": "while (entries.hasMoreElements()) {",
                    "37": "if (! outFile.getCanonicalFile().toPath().startsWith(destDir.toPath())) {",
                    "41": "if (entry.isDirectory()) {",
                    "44": "else {"
                }
            }
        }
    },
    "CVE-2022-22976": {
        "source": {
            "old": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {",
                    "285": "public static String hashpw(byte passwordb[], String salt) {",
                    "397": "public static boolean checkpw(String plaintext, String hashed) {",
                    "401": "public static boolean checkpw(byte[] passwordb, String hashed) {"
                }
            },
            "new": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety, boolean for_check) {",
                    "293": "private static String hashpwforcheck(byte[] passwordb, String salt) {",
                    "303": "public static String hashpw(byte passwordb[], String salt) {",
                    "307": "private static String hashpw(byte passwordb[], String salt, boolean for_check) {",
                    "419": "public static boolean checkpw(String plaintext, String hashed) {",
                    "424": "public static boolean checkpw(byte[] passwordb, String hashed) {"
                }
            }
        },
        "sink": {
            "old": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "23": "throw new IllegalArgumentException(\"Invalid len\");",
                    "54": "return -1;",
                    "57": "return index_64[x];",
                    "66": "throw new IllegalArgumentException(\"Invalid maxolen\");",
                    "106": "return ret;",
                    "146": "return words;",
                    "151": "return streamtowords(data, offp, signp)[0];",
                    "156": "return streamtowords(data, offp, signp)[1];",
                    "234": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "237": "return 1L << log_rounds;",
                    "246": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "251": "throw new IllegalArgumentException(\"Bad salt length\");",
                    "276": "return ret;",
                    "282": "return hashpw(passwordb, salt);",
                    "293": "throw new IllegalArgumentException(\"salt cannot be null\");",
                    "298": "throw new IllegalArgumentException(\"Invalid salt\");",
                    "302": "throw new IllegalArgumentException(\"Invalid salt version\");",
                    "312": "throw new IllegalArgumentException(\"Invalid salt revision\");",
                    "319": "throw new IllegalArgumentException(\"Missing salt rounds\");",
                    "323": "throw new IllegalArgumentException(\"Invalid salt\");",
                    "349": "return rs.toString();",
                    "356": "throw new IllegalArgumentException(\"Invalid prefix\");",
                    "360": "throw new IllegalArgumentException(\"Invalid log_rounds\");",
                    "374": "return rs.toString();",
                    "378": "return gensalt(prefix, log_rounds, new SecureRandom());",
                    "382": "return gensalt(\"$2a\", log_rounds, random);",
                    "386": "return gensalt(log_rounds, new SecureRandom());",
                    "390": "return gensalt(prefix, GENSALT_DEFAULT_LOG2_ROUNDS);",
                    "394": "return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);",
                    "398": "return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));",
                    "402": "return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));",
                    "406": "return MessageDigest.isEqual(a.getBytes(StandardCharsets.UTF_8), b.getBytes(StandardCharsets.UTF_8));"
                }
            },
            "new": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "23": "throw new IllegalArgumentException(\"Invalid len\");",
                    "54": "return -1;",
                    "57": "return index_64[x];",
                    "66": "throw new IllegalArgumentException(\"Invalid maxolen\");",
                    "106": "return ret;",
                    "146": "return words;",
                    "151": "return streamtowords(data, offp, signp)[0];",
                    "156": "return streamtowords(data, offp, signp)[1];",
                    "234": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "237": "return 1L << log_rounds;",
                    "246": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "250": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "259": "throw new IllegalArgumentException(\"Bad number of rounds\");",
                    "265": "throw new IllegalArgumentException(\"Bad salt length\");",
                    "290": "return ret;",
                    "294": "return hashpw(passwordb, salt, true);",
                    "300": "return hashpw(passwordb, salt);",
                    "304": "return hashpw(passwordb, salt, false);",
                    "315": "throw new IllegalArgumentException(\"salt cannot be null\");",
                    "320": "throw new IllegalArgumentException(\"Invalid salt\");",
                    "324": "throw new IllegalArgumentException(\"Invalid salt version\");",
                    "334": "throw new IllegalArgumentException(\"Invalid salt revision\");",
                    "341": "throw new IllegalArgumentException(\"Missing salt rounds\");",
                    "345": "throw new IllegalArgumentException(\"Invalid salt\");",
                    "371": "return rs.toString();",
                    "378": "throw new IllegalArgumentException(\"Invalid prefix\");",
                    "382": "throw new IllegalArgumentException(\"Invalid log_rounds\");",
                    "396": "return rs.toString();",
                    "400": "return gensalt(prefix, log_rounds, new SecureRandom());",
                    "404": "return gensalt(\"$2a\", log_rounds, random);",
                    "408": "return gensalt(log_rounds, new SecureRandom());",
                    "412": "return gensalt(prefix, GENSALT_DEFAULT_LOG2_ROUNDS);",
                    "416": "return gensalt(GENSALT_DEFAULT_LOG2_ROUNDS);",
                    "421": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
                    "425": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));",
                    "429": "return MessageDigest.isEqual(a.getBytes(StandardCharsets.UTF_8), b.getBytes(StandardCharsets.UTF_8));"
                }
            }
        },
        "undefined": {
            "old": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "22": "if (len <= 0 || len > d.length) {",
                    "26": "while (off < len) {",
                    "30": "if (off >= len) {",
                    "39": "if (off >= len) {",
                    "53": "if (x < 0 || x >= index_64.length) {",
                    "65": "if (maxolen <= 0) {",
                    "69": "while (off < slen - 1 && olen < maxolen) {",
                    "72": "if (c1 == -1 || c2 == -1) {",
                    "79": "if (++olen >= maxolen || off >= slen) {",
                    "84": "if (c3 == -1) {",
                    "91": "if (++olen >= maxolen || off >= slen) {",
                    "102": "for (off = 0; off < olen; off++) {",
                    "112": "for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {",
                    "134": "for (i = 0; i < 4; i++) {",
                    "137": "if (i > 0) {",
                    "169": "for (i = 0; i < plen; i++) {",
                    "170": "if (!sign_ext_bug) {",
                    "174": "else {",
                    "180": "for (i = 0; i < plen; i += 2) {",
                    "186": "for (i = 0; i < slen; i += 2) {",
                    "201": "for (i = 0; i < plen; i++) {",
                    "214": "for (i = 0; i < plen; i += 2) {",
                    "222": "for (i = 0; i < slen; i += 2) {",
                    "233": "if (log_rounds < 4 || log_rounds > 31) {",
                    "245": "if (log_rounds < 4 || log_rounds > 31) {",
                    "250": "if (salt.length != BCRYPT_SALT_LEN) {",
                    "256": "for (i = 0; i < rounds; i++) {",
                    "261": "for (i = 0; i < 64; i++) {",
                    "262": "for (j = 0; j < (clen >> 1); j++) {",
                    "269": "for (i = 0, j = 0; i < clen; i++) {",
                    "292": "if (salt == null) {",
                    "297": "if (saltLength < 28) {",
                    "301": "if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {",
                    "305": "if (salt.charAt(2) == '$') {",
                    "309": "else {",
                    "311": "if ((minor != 'a' && minor != 'x' && minor != 'y' && minor != 'b') || salt.charAt(3) != '$') {",
                    "318": "if (salt.charAt(off + 2) > '$') {",
                    "322": "if (off == 4 && saltLength < 29) {",
                    "329": "if (minor >= 'a') {",
                    "336": "if (minor >= 'a') {",
                    "341": "if (rounds < 10) {",
                    "355": "if (!prefix.startsWith(\"$2\") || (prefix.charAt(2) != 'a' && prefix.charAt(2) != 'y' && prefix.charAt(2) != 'b')) {",
                    "359": "if (log_rounds < 4 || log_rounds > 31) {",
                    "367": "if (log_rounds < 10) {"
                }
            },
            "new": {
                "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java": {
                    "22": "if (len <= 0 || len > d.length) {",
                    "26": "while (off < len) {",
                    "30": "if (off >= len) {",
                    "39": "if (off >= len) {",
                    "53": "if (x < 0 || x >= index_64.length) {",
                    "65": "if (maxolen <= 0) {",
                    "69": "while (off < slen - 1 && olen < maxolen) {",
                    "72": "if (c1 == -1 || c2 == -1) {",
                    "79": "if (++olen >= maxolen || off >= slen) {",
                    "84": "if (c3 == -1) {",
                    "91": "if (++olen >= maxolen || off >= slen) {",
                    "102": "for (off = 0; off < olen; off++) {",
                    "112": "for (i = 0; i <= BLOWFISH_NUM_ROUNDS - 2;) {",
                    "134": "for (i = 0; i < 4; i++) {",
                    "137": "if (i > 0) {",
                    "169": "for (i = 0; i < plen; i++) {",
                    "170": "if (!sign_ext_bug) {",
                    "174": "else {",
                    "180": "for (i = 0; i < plen; i += 2) {",
                    "186": "for (i = 0; i < slen; i += 2) {",
                    "201": "for (i = 0; i < plen; i++) {",
                    "214": "for (i = 0; i < plen; i += 2) {",
                    "222": "for (i = 0; i < slen; i += 2) {",
                    "233": "if (log_rounds < 4 || log_rounds > 31) {",
                    "244": "if (log_rounds < 4 || log_rounds > 31) {",
                    "245": "if (!for_check) {",
                    "249": "if (log_rounds != 0) {",
                    "256": "else {",
                    "258": "if (rounds < 16 || rounds > Integer.MAX_VALUE) {",
                    "264": "if (salt.length != BCRYPT_SALT_LEN) {",
                    "270": "for (int i = 0; i < rounds; i++) {",
                    "275": "for (int i = 0; i < 64; i++) {",
                    "276": "for (int j = 0; j < (clen >> 1); j++) {",
                    "283": "for (int i = 0, j = 0; i < clen; i++) {",
                    "314": "if (salt == null) {",
                    "319": "if (saltLength < 28) {",
                    "323": "if (salt.charAt(0) != '$' || salt.charAt(1) != '2') {",
                    "327": "if (salt.charAt(2) == '$') {",
                    "331": "else {",
                    "333": "if ((minor != 'a' && minor != 'x' && minor != 'y' && minor != 'b') || salt.charAt(3) != '$') {",
                    "340": "if (salt.charAt(off + 2) > '$') {",
                    "344": "if (off == 4 && saltLength < 29) {",
                    "351": "if (minor >= 'a') {",
                    "358": "if (minor >= 'a') {",
                    "363": "if (rounds < 10) {",
                    "377": "if (!prefix.startsWith(\"$2\") || (prefix.charAt(2) != 'a' && prefix.charAt(2) != 'y' && prefix.charAt(2) != 'b')) {",
                    "381": "if (log_rounds < 4 || log_rounds > 31) {",
                    "389": "if (log_rounds < 10) {"
                }
            }
        }
    },
    "CVE-2016-1000343": {
        "source": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "46": "public KeyPair generateKeyPair() {"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "33": "public void initialize( int strength, SecureRandom random) {",
                    "54": "public KeyPair generateKeyPair() {"
                }
            }
        },
        "sink": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "28": "throw new InvalidParameterException(\"strength must be from 512 - 4096 and a multiple of 1024 above 1024\");",
                    "37": "throw new InvalidAlgorithmParameterException(\"parameter object not a DSAParameterSpec\");",
                    "58": "return new KeyPair(new BCDSAPublicKey(pub), new BCDSAPrivateKey(priv));"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "35": "throw new InvalidParameterException(\"strength must be from 512 - 4096 and a multiple of 1024 above 1024\");",
                    "45": "throw new InvalidAlgorithmParameterException(\"parameter object not a DSAParameterSpec\");",
                    "109": "return new KeyPair(new BCDSAPublicKey(pub), new BCDSAPrivateKey(priv));"
                }
            }
        },
        "undefined": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "27": "if (strength < 512 || strength > 4096 || ((strength < 1024) && strength % 64 != 0) || (strength >= 1024 && strength % 1024 != 0)){",
                    "36": "if (!(params instanceof DSAParameterSpec)){",
                    "47": "if (!initialised){"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java": {
                    "34": "if (strength < 512 || strength > 4096 || ((strength < 1024) && strength % 64 != 0) || (strength >= 1024 && strength % 1024 != 0)){",
                    "44": "if (!(params instanceof DSAParameterSpec)){",
                    "55": "if (!initialised){",
                    "57": "if (params.containsKey(paramStrength)){",
                    "61": "else{",
                    "63": "if (params.containsKey(paramStrength)){",
                    "67": "else{",
                    "70": "if (strength == 1024){",
                    "72": "if (Properties.isOverrideSet(\"org.bouncycastle.dsa.FIPS186-2for1024bits\")){",
                    "76": "else{",
                    "83": "else if (strength > 1024){",
                    "89": "else{"
                }
            }
        }
    },
    "CVE-2021-27568": {
        "source": {
            "old": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {}
            },
            "new": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {}
            }
        },
        "sink": {
            "old": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {
                    "63": "return;",
                    "70": "throw new ParseException(pos + i, ParseException.ERROR_UNEXPECTED_CHAR, c);",
                    "73": "throw new ParseException(pos + i, ParseException.ERROR_UNEXPECTED_CHAR, c);",
                    "83": "return;",
                    "86": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "87": "return;",
                    "95": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "96": "return;",
                    "100": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "107": "return Float.parseFloat(xs);",
                    "109": "return new BigDecimal(xs);",
                    "110": "return Double.parseDouble(xs);",
                    "116": "try {",
                    "123": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_TOKEN, c);",
                    "127": "catch (IOException e) {",
                    "128": "throw new ParseException(pos, e);",
                    "133": "return result;",
                    "146": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, s);",
                    "151": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, s);",
                    "160": "return new BigInteger(s, 10);",
                    "188": "return new BigInteger(s, 10);",
                    "194": "return (int) r;",
                    "195": "return r;",
                    "200": "return (int) r;",
                    "201": "return r;",
                    "208": "throw new RuntimeException(\"Internal Error\");",
                    "212": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "223": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "225": "return mapper.convert(current);",
                    "228": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "231": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "236": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, \"EOF\");",
                    "258": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "260": "return readObject(mapper);",
                    "262": "return readArray(mapper);",
                    "266": "return mapper.convert(xs);",
                    "270": "return null;",
                    "274": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "275": "return mapper.convert(xs);",
                    "279": "return mapper.convert(Boolean.FALSE);",
                    "283": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "284": "return mapper.convert(xs);",
                    "288": "return mapper.convert(Boolean.TRUE);",
                    "292": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "293": "return mapper.convert(xs);",
                    "297": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "299": "return mapper.convert(Float.valueOf(Float.NaN));",
                    "303": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "304": "return mapper.convert(xs);",
                    "317": "return mapper.convert(xo);",
                    "320": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "321": "return mapper.convert(xs);",
                    "340": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "342": "return readObject(mapper.startObject(lastKey));",
                    "344": "return readArray(mapper.startArray(lastKey));",
                    "348": "return xs;",
                    "352": "return null;",
                    "356": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "357": "return xs;",
                    "361": "return Boolean.FALSE;",
                    "365": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "366": "return xs;",
                    "370": "return Boolean.TRUE;",
                    "374": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "375": "return xs;",
                    "379": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "381": "return Float.valueOf(Float.NaN);",
                    "385": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "386": "return xs;",
                    "398": "return readNumber(stop);",
                    "401": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "402": "return xs;",
                    "414": "throw new RuntimeException(\"Internal Error\");",
                    "430": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "433": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "435": "return mapper.convert(current);",
                    "438": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "449": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "454": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, key);",
                    "458": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "459": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_CHAR, c);",
                    "470": "return mapper.convert(current);",
                    "474": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "478": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_TOKEN, c);",
                    "493": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "499": "return;",
                    "577": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "582": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "602": "throw new ParseException(pos, ERROR_UNEXPECTED_EOF, \"EOF\");",
                    "604": "throw new ParseException(pos, ERROR_UNEXPECTED_UNICODE, c);",
                    "607": "return (char) value;",
                    "613": "return;",
                    "622": "return;",
                    "631": "return;",
                    "668": "return new String(b, 0, p + 1);"
                }
            },
            "new": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {
                    "63": "return;",
                    "70": "throw new ParseException(pos + i, ParseException.ERROR_UNEXPECTED_CHAR, c);",
                    "73": "throw new ParseException(pos + i, ParseException.ERROR_UNEXPECTED_CHAR, c);",
                    "83": "return;",
                    "86": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "87": "return;",
                    "95": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "96": "return;",
                    "100": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, xs);",
                    "106": "try {",
                    "108": "return Float.parseFloat(xs);",
                    "110": "return new BigDecimal(xs);",
                    "111": "return Double.parseDouble(xs);",
                    "113": "catch(Exception e){",
                    "114": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "122": "try {",
                    "129": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_TOKEN, c);",
                    "133": "catch (IOException e) {",
                    "134": "throw new ParseException(pos, e);",
                    "139": "return result;",
                    "152": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, s);",
                    "157": "throw new ParseException(pos, ERROR_UNEXPECTED_LEADING_0, s);",
                    "166": "return new BigInteger(s, 10);",
                    "194": "return new BigInteger(s, 10);",
                    "200": "return (int) r;",
                    "201": "return r;",
                    "206": "return (int) r;",
                    "207": "return r;",
                    "214": "throw new RuntimeException(\"Internal Error\");",
                    "218": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "229": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "231": "return mapper.convert(current);",
                    "234": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "237": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "242": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, \"EOF\");",
                    "264": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "266": "return readObject(mapper);",
                    "268": "return readArray(mapper);",
                    "272": "return mapper.convert(xs);",
                    "276": "return null;",
                    "280": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "281": "return mapper.convert(xs);",
                    "285": "return mapper.convert(Boolean.FALSE);",
                    "289": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "290": "return mapper.convert(xs);",
                    "294": "return mapper.convert(Boolean.TRUE);",
                    "298": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "299": "return mapper.convert(xs);",
                    "303": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "305": "return mapper.convert(Float.valueOf(Float.NaN));",
                    "309": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "310": "return mapper.convert(xs);",
                    "323": "return mapper.convert(xo);",
                    "326": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "327": "return mapper.convert(xs);",
                    "346": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "348": "return readObject(mapper.startObject(lastKey));",
                    "350": "return readArray(mapper.startArray(lastKey));",
                    "354": "return xs;",
                    "358": "return null;",
                    "362": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "363": "return xs;",
                    "367": "return Boolean.FALSE;",
                    "371": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "372": "return xs;",
                    "376": "return Boolean.TRUE;",
                    "380": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "381": "return xs;",
                    "385": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "387": "return Float.valueOf(Float.NaN);",
                    "391": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "392": "return xs;",
                    "404": "return readNumber(stop);",
                    "407": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "408": "return xs;",
                    "420": "throw new RuntimeException(\"Internal Error\");",
                    "436": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "439": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "441": "return mapper.convert(current);",
                    "444": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, (char) c);",
                    "455": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);",
                    "460": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, key);",
                    "464": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "465": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_CHAR, c);",
                    "476": "return mapper.convert(current);",
                    "480": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "484": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_TOKEN, c);",
                    "499": "throw new ParseException(pos - 1, ERROR_UNEXPECTED_EOF, null);",
                    "505": "return;",
                    "583": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "588": "throw new ParseException(pos, ERROR_UNEXPECTED_CHAR, c);",
                    "608": "throw new ParseException(pos, ERROR_UNEXPECTED_EOF, \"EOF\");",
                    "610": "throw new ParseException(pos, ERROR_UNEXPECTED_UNICODE, c);",
                    "613": "return (char) value;",
                    "619": "return;",
                    "628": "return;",
                    "637": "return;",
                    "674": "return new String(b, 0, p + 1);"
                }
            }
        },
        "undefined": {
            "old": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {
                    "62": "if (ignoreControlChar)",
                    "65": "for (int i = 0; i < l; i++) {",
                    "67": "if (c < 0)",
                    "69": "if (c <= 31)",
                    "71": "if (c == 127) {",
                    "72": "if (reject127)",
                    "82": "if (len == 1)",
                    "84": "if (len == 2) {",
                    "85": "if (xs.equals(\"00\"))",
                    "92": "if (c1 == '-') {",
                    "94": "if (c2 == '0' && c3 >= '0' && c3 <= '9')",
                    "99": "if (c1 == '0' && c2 >= '0' && c2 <= '9')",
                    "104": "if (!acceptLeadinZero)",
                    "106": "if (!useHiPrecisionFloat)",
                    "108": "if (xs.length() > 18)",
                    "119": "if (checkTaillingData) {",
                    "120": "if (!checkTaillingSpace)",
                    "122": "if (c != EOI)",
                    "141": "if (s.charAt(0) == '-') {",
                    "145": "if (!acceptLeadinZero && l >= 3 && s.charAt(1) == '0')",
                    "148": "else {",
                    "150": "if (!acceptLeadinZero && l >= 2 && s.charAt(0) == '0')",
                    "155": "if (l < max) {",
                    "159": "else if (l > max) {",
                    "162": "else {",
                    "168": "while (p < max) {",
                    "172": "if (mustCheck) {",
                    "174": "if (r > -922337203685477580L) {",
                    "177": "else if (r < -922337203685477580L) {",
                    "180": "else {",
                    "181": "if (neg)",
                    "183": "else",
                    "187": "if (isBig)",
                    "192": "if (neg) {",
                    "193": "if (this.useIntegerStorage && r >= Integer.MIN_VALUE)",
                    "199": "if (this.useIntegerStorage && r <= Integer.MAX_VALUE)",
                    "207": "if (c != '[')",
                    "211": "if (c == ',' && !acceptUselessComma)",
                    "213": "for (;;) {",
                    "214": "switch (c) {",
                    "222": "if (needData && !acceptUselessComma)",
                    "230": "if (needData && !acceptUselessComma)",
                    "247": "for (;;) {",
                    "248": "switch (c) {",
                    "269": "if (\"null\".equals(xs)) {",
                    "273": "if (!acceptNonQuote)",
                    "278": "if (\"false\".equals(xs)) {",
                    "282": "if (!acceptNonQuote)",
                    "287": "if (\"true\".equals(xs)) {",
                    "291": "if (!acceptNonQuote)",
                    "296": "if (!acceptNaN)",
                    "298": "if (\"NaN\".equals(xs)) {",
                    "302": "if (!acceptNonQuote)",
                    "319": "if (!acceptNonQuote)",
                    "329": "for (;;) {",
                    "330": "switch (c) {",
                    "351": "if (\"null\".equals(xs)) {",
                    "355": "if (!acceptNonQuote)",
                    "360": "if (\"false\".equals(xs)) {",
                    "364": "if (!acceptNonQuote)",
                    "369": "if (\"true\".equals(xs)) {",
                    "373": "if (!acceptNonQuote)",
                    "378": "if (!acceptNaN)",
                    "380": "if (\"NaN\".equals(xs)) {",
                    "384": "if (!acceptNonQuote)",
                    "400": "if (!acceptNonQuote)",
                    "413": "if (c != '{')",
                    "418": "for (;;) {",
                    "420": "switch (c) {",
                    "432": "if (needData && !acceptUselessComma)",
                    "437": "if (needData && !acceptUselessComma)",
                    "443": "default: if (c == '\\\"' || c == '\\'') {",
                    "446": "else {",
                    "448": "if (!acceptNonQuote)",
                    "453": "if (!acceptData)",
                    "456": "if (c != ':') {",
                    "457": "if (c == EOI)",
                    "468": "if (c == '}') {",
                    "473": "if (c == EOI)",
                    "475": "if (c == ',')",
                    "477": "else",
                    "489": "for (;;) {",
                    "491": "switch (c) {",
                    "496": "if (sep == c) {",
                    "506": "switch (c) {",
                    "575": "if (ignoreControlChar)",
                    "579": "if (ignoreControlChar)",
                    "581": "if (reject127)",
                    "592": "for (int i = 0; i < totalChars; i++) {",
                    "595": "if (c <= '9' && c >= '0')",
                    "597": "else if (c <= 'F' && c >= 'A')",
                    "599": "else if (c >= 'a' && c <= 'f')",
                    "601": "else if (c == EOI)",
                    "603": "else",
                    "611": "for (;;) {",
                    "612": "if (c < '0' || c > '9')",
                    "620": "for (;;) {",
                    "621": "if ((c == EOI) || (c >= 0 && c < MAX_STOP && stop[c]))",
                    "629": "for (;;) {",
                    "630": "if (c > ' ' || c == EOI)",
                    "647": "if (b.length <= p) {",
                    "658": "if (b.length <= p) {"
                }
            },
            "new": {
                "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java": {
                    "62": "if (ignoreControlChar)",
                    "65": "for (int i = 0; i < l; i++) {",
                    "67": "if (c < 0)",
                    "69": "if (c <= 31)",
                    "71": "if (c == 127) {",
                    "72": "if (reject127)",
                    "82": "if (len == 1)",
                    "84": "if (len == 2) {",
                    "85": "if (xs.equals(\"00\"))",
                    "92": "if (c1 == '-') {",
                    "94": "if (c2 == '0' && c3 >= '0' && c3 <= '9')",
                    "99": "if (c1 == '0' && c2 >= '0' && c2 <= '9')",
                    "104": "if (!acceptLeadinZero)",
                    "107": "if (!useHiPrecisionFloat)",
                    "109": "if (xs.length() > 18)",
                    "125": "if (checkTaillingData) {",
                    "126": "if (!checkTaillingSpace)",
                    "128": "if (c != EOI)",
                    "147": "if (s.charAt(0) == '-') {",
                    "151": "if (!acceptLeadinZero && l >= 3 && s.charAt(1) == '0')",
                    "154": "else {",
                    "156": "if (!acceptLeadinZero && l >= 2 && s.charAt(0) == '0')",
                    "161": "if (l < max) {",
                    "165": "else if (l > max) {",
                    "168": "else {",
                    "174": "while (p < max) {",
                    "178": "if (mustCheck) {",
                    "180": "if (r > -922337203685477580L) {",
                    "183": "else if (r < -922337203685477580L) {",
                    "186": "else {",
                    "187": "if (neg)",
                    "189": "else",
                    "193": "if (isBig)",
                    "198": "if (neg) {",
                    "199": "if (this.useIntegerStorage && r >= Integer.MIN_VALUE)",
                    "205": "if (this.useIntegerStorage && r <= Integer.MAX_VALUE)",
                    "213": "if (c != '[')",
                    "217": "if (c == ',' && !acceptUselessComma)",
                    "219": "for (;;) {",
                    "220": "switch (c) {",
                    "228": "if (needData && !acceptUselessComma)",
                    "236": "if (needData && !acceptUselessComma)",
                    "253": "for (;;) {",
                    "254": "switch (c) {",
                    "275": "if (\"null\".equals(xs)) {",
                    "279": "if (!acceptNonQuote)",
                    "284": "if (\"false\".equals(xs)) {",
                    "288": "if (!acceptNonQuote)",
                    "293": "if (\"true\".equals(xs)) {",
                    "297": "if (!acceptNonQuote)",
                    "302": "if (!acceptNaN)",
                    "304": "if (\"NaN\".equals(xs)) {",
                    "308": "if (!acceptNonQuote)",
                    "325": "if (!acceptNonQuote)",
                    "335": "for (;;) {",
                    "336": "switch (c) {",
                    "357": "if (\"null\".equals(xs)) {",
                    "361": "if (!acceptNonQuote)",
                    "366": "if (\"false\".equals(xs)) {",
                    "370": "if (!acceptNonQuote)",
                    "375": "if (\"true\".equals(xs)) {",
                    "379": "if (!acceptNonQuote)",
                    "384": "if (!acceptNaN)",
                    "386": "if (\"NaN\".equals(xs)) {",
                    "390": "if (!acceptNonQuote)",
                    "406": "if (!acceptNonQuote)",
                    "419": "if (c != '{')",
                    "424": "for (;;) {",
                    "426": "switch (c) {",
                    "438": "if (needData && !acceptUselessComma)",
                    "443": "if (needData && !acceptUselessComma)",
                    "449": "default: if (c == '\\\"' || c == '\\'') {",
                    "452": "else {",
                    "454": "if (!acceptNonQuote)",
                    "459": "if (!acceptData)",
                    "462": "if (c != ':') {",
                    "463": "if (c == EOI)",
                    "474": "if (c == '}') {",
                    "479": "if (c == EOI)",
                    "481": "if (c == ',')",
                    "483": "else",
                    "495": "for (;;) {",
                    "497": "switch (c) {",
                    "502": "if (sep == c) {",
                    "512": "switch (c) {",
                    "581": "if (ignoreControlChar)",
                    "585": "if (ignoreControlChar)",
                    "587": "if (reject127)",
                    "598": "for (int i = 0; i < totalChars; i++) {",
                    "601": "if (c <= '9' && c >= '0')",
                    "603": "else if (c <= 'F' && c >= 'A')",
                    "605": "else if (c >= 'a' && c <= 'f')",
                    "607": "else if (c == EOI)",
                    "609": "else",
                    "617": "for (;;) {",
                    "618": "if (c < '0' || c > '9')",
                    "626": "for (;;) {",
                    "627": "if ((c == EOI) || (c >= 0 && c < MAX_STOP && stop[c]))",
                    "635": "for (;;) {",
                    "636": "if (c > ' ' || c == EOI)",
                    "653": "if (b.length <= p) {",
                    "664": "if (b.length <= p) {"
                }
            }
        }
    },
    "CVE-2022-24197": {
        "source": {
            "old": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {},
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {},
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "85": "public void close() throws IOException {",
                    "89": "public PdfReader setUnethicalReading(boolean unethicalReading) {"
                }
            },
            "new": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {},
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {
                    "1063": "private void processArrayReadError() {"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "86": "public void close() throws IOException {",
                    "90": "public PdfReader setUnethicalReading(boolean unethicalReading) {"
                }
            }
        },
        "sink": {
            "old": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {
                    "91": "return this;",
                    "96": "return this;",
                    "100": "return strictnessLevel;",
                    "105": "return this;",
                    "109": "return tokens.isCloseStream();",
                    "118": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "121": "return rebuiltXref;",
                    "126": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "129": "return hybridXref;",
                    "134": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "137": "return xrefStm;",
                    "142": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "145": "return fixedXref;",
                    "150": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "153": "return lastXref;",
                    "159": "return decodeBytes(b, stream);",
                    "162": "return b;",
                    "173": "return null;",
                    "176": "return new byte[0];",
                    "179": "try {",
                    "215": "try {",
                    "218": "catch (Exception ignored) {",
                    "223": "return bytes;",
                    "228": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "232": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "237": "return null;",
                    "284": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "295": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "314": "return b;",
                    "318": "return tokens.getSafeFile();",
                    "322": "return tokens.getSafeFile().length();",
                    "327": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "330": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "335": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "343": "return perm;",
                    "348": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "352": "return -1;",
                    "354": "return decrypt.getCryptoMode();",
                    "360": "try {",
                    "363": "catch (XMPException ignored) {",
                    "370": "return pdfAConformanceLevel;",
                    "375": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "379": "return null;",
                    "382": "return decrypt.computeUserPassword(properties.password);",
                    "387": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "392": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "395": "return new byte[0];",
                    "402": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "407": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "410": "return new byte[0];",
                    "417": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "420": "return encrypted;",
                    "425": "try {",
                    "428": "catch (IllegalArgumentException exc) {",
                    "429": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "432": "try {",
                    "435": "catch (XrefCycledReferencesException ex) {",
                    "436": "throw ex;",
                    "438": "catch (RuntimeException ex) {",
                    "454": "try {",
                    "481": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "512": "return readObject(reference, true);",
                    "516": "return readObject(readAsDirect, false);",
                    "522": "return createPdfNullInstance(readAsDirect);",
                    "531": "return createPdfNullInstance(readAsDirect);",
                    "538": "return createPdfNullInstance(readAsDirect);",
                    "541": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "551": "return createPdfNullInstance(readAsDirect);",
                    "559": "return reference;",
                    "584": "return new PdfStream(tokens.getPosition(), dict);",
                    "588": "return dict;",
                    "594": "return readArray(objStm);",
                    "596": "return new PdfNumber(tokens.getByteContent());",
                    "603": "return pdfString;",
                    "607": "return readPdfName(readAsDirect);",
                    "609": "return readReference(readAsDirect);",
                    "611": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "613": "return createPdfNullInstance(readAsDirect);",
                    "617": "return PdfBoolean.TRUE;",
                    "620": "return new PdfBoolean(true);",
                    "626": "return PdfBoolean.FALSE;",
                    "629": "return new PdfBoolean(false);",
                    "634": "return null;",
                    "643": "return cachedName;",
                    "646": "return new PdfName(tokens.getByteContent());",
                    "669": "return dic;",
                    "686": "return array;",
                    "693": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "698": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "704": "try {",
                    "707": "return;",
                    "711": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "712": "throw cycledReferencesException;",
                    "714": "catch (Exception ignored) {",
                    "732": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "735": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "747": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "828": "try {",
                    "833": "catch (IOException e) {",
                    "835": "throw e;",
                    "840": "return trailer;",
                    "848": "return false;",
                    "852": "return false;",
                    "856": "return false;",
                    "860": "return false;",
                    "870": "return false;",
                    "875": "return false;",
                    "949": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "970": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "975": "return true;",
                    "1027": "try {",
                    "1034": "catch (Exception e) {",
                    "1054": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1058": "return memorySavingMode;",
                    "1063": "return;",
                    "1066": "return;",
                    "1071": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1080": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1088": "try {",
                    "1091": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1096": "throw ex;",
                    "1104": "return tok;",
                    "1109": "return null;",
                    "1111": "return reference.refersTo;",
                    "1112": "try {",
                    "1117": "return reference.refersTo;",
                    "1121": "try {",
                    "1130": "catch (RuntimeException ex) {",
                    "1136": "throw ex;",
                    "1141": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1144": "return null;",
                    "1148": "catch (IOException e) {",
                    "1149": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1156": "return;",
                    "1226": "return PdfNull.PDF_NULL;",
                    "1229": "return new PdfNull();",
                    "1244": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1251": "return -1;",
                    "1255": "return len;",
                    "1260": "return buffer.size();",
                    "1278": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {
                    "91": "return this;",
                    "96": "return this;",
                    "100": "return strictnessLevel;",
                    "105": "return this;",
                    "109": "return tokens.isCloseStream();",
                    "118": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "121": "return rebuiltXref;",
                    "126": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "129": "return hybridXref;",
                    "134": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "137": "return xrefStm;",
                    "142": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "145": "return fixedXref;",
                    "150": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "153": "return lastXref;",
                    "159": "return decodeBytes(b, stream);",
                    "162": "return b;",
                    "173": "return null;",
                    "176": "return new byte[0];",
                    "179": "try {",
                    "215": "try {",
                    "218": "catch (Exception ignored) {",
                    "223": "return bytes;",
                    "228": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "232": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "237": "return null;",
                    "284": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "295": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "314": "return b;",
                    "318": "return tokens.getSafeFile();",
                    "322": "return tokens.getSafeFile().length();",
                    "327": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "330": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "335": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "343": "return perm;",
                    "348": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "352": "return -1;",
                    "354": "return decrypt.getCryptoMode();",
                    "360": "try {",
                    "363": "catch (XMPException ignored) {",
                    "370": "return pdfAConformanceLevel;",
                    "375": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "379": "return null;",
                    "382": "return decrypt.computeUserPassword(properties.password);",
                    "387": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "392": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "395": "return new byte[0];",
                    "402": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "407": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "410": "return new byte[0];",
                    "417": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "420": "return encrypted;",
                    "425": "try {",
                    "428": "catch (IllegalArgumentException exc) {",
                    "429": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "432": "try {",
                    "435": "catch (XrefCycledReferencesException ex) {",
                    "436": "throw ex;",
                    "438": "catch (RuntimeException ex) {",
                    "454": "try {",
                    "481": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "512": "return readObject(reference, true);",
                    "516": "return readObject(readAsDirect, false);",
                    "522": "return createPdfNullInstance(readAsDirect);",
                    "531": "return createPdfNullInstance(readAsDirect);",
                    "538": "return createPdfNullInstance(readAsDirect);",
                    "541": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "551": "return createPdfNullInstance(readAsDirect);",
                    "559": "return reference;",
                    "584": "return new PdfStream(tokens.getPosition(), dict);",
                    "588": "return dict;",
                    "594": "return readArray(objStm);",
                    "596": "return new PdfNumber(tokens.getByteContent());",
                    "603": "return pdfString;",
                    "607": "return readPdfName(readAsDirect);",
                    "609": "return readReference(readAsDirect);",
                    "611": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "613": "return createPdfNullInstance(readAsDirect);",
                    "617": "return PdfBoolean.TRUE;",
                    "620": "return new PdfBoolean(true);",
                    "626": "return PdfBoolean.FALSE;",
                    "629": "return new PdfBoolean(false);",
                    "634": "return null;",
                    "643": "return cachedName;",
                    "646": "return new PdfName(tokens.getByteContent());",
                    "669": "return dic;",
                    "686": "return array;",
                    "693": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "698": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "704": "try {",
                    "707": "return;",
                    "711": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "712": "throw cycledReferencesException;",
                    "714": "catch (Exception ignored) {",
                    "732": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "735": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "747": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "828": "try {",
                    "833": "catch (IOException e) {",
                    "835": "throw e;",
                    "840": "return trailer;",
                    "848": "return false;",
                    "852": "return false;",
                    "856": "return false;",
                    "860": "return false;",
                    "870": "return false;",
                    "875": "return false;",
                    "949": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "970": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "975": "return true;",
                    "1027": "try {",
                    "1034": "catch (Exception e) {",
                    "1054": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1058": "return memorySavingMode;",
                    "1063": "return;",
                    "1066": "return;",
                    "1071": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1080": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1088": "try {",
                    "1091": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1096": "throw ex;",
                    "1104": "return tok;",
                    "1109": "return null;",
                    "1111": "return reference.refersTo;",
                    "1112": "try {",
                    "1117": "return reference.refersTo;",
                    "1121": "try {",
                    "1130": "catch (RuntimeException ex) {",
                    "1136": "throw ex;",
                    "1141": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1144": "return null;",
                    "1148": "catch (IOException e) {",
                    "1149": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1156": "return;",
                    "1226": "return PdfNull.PDF_NULL;",
                    "1229": "return new PdfNull();",
                    "1244": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1251": "return -1;",
                    "1255": "return len;",
                    "1260": "return buffer.size();",
                    "1278": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "91": "return this;",
                    "96": "return this;",
                    "100": "return strictnessLevel;",
                    "105": "return this;",
                    "109": "return tokens.isCloseStream();",
                    "118": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "121": "return rebuiltXref;",
                    "126": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "129": "return hybridXref;",
                    "134": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "137": "return xrefStm;",
                    "142": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "145": "return fixedXref;",
                    "150": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "153": "return lastXref;",
                    "159": "return decodeBytes(b, stream);",
                    "162": "return b;",
                    "173": "return null;",
                    "176": "return new byte[0];",
                    "179": "try {",
                    "215": "try {",
                    "218": "catch (Exception ignored) {",
                    "223": "return bytes;",
                    "228": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "232": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "237": "return null;",
                    "284": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "295": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "314": "return b;",
                    "318": "return tokens.getSafeFile();",
                    "322": "return tokens.getSafeFile().length();",
                    "327": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "330": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "335": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "343": "return perm;",
                    "348": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "352": "return -1;",
                    "354": "return decrypt.getCryptoMode();",
                    "360": "try {",
                    "363": "catch (XMPException ignored) {",
                    "370": "return pdfAConformanceLevel;",
                    "375": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "379": "return null;",
                    "382": "return decrypt.computeUserPassword(properties.password);",
                    "387": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "392": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "395": "return new byte[0];",
                    "402": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "407": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "410": "return new byte[0];",
                    "417": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "420": "return encrypted;",
                    "425": "try {",
                    "428": "catch (IllegalArgumentException exc) {",
                    "429": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "432": "try {",
                    "435": "catch (XrefCycledReferencesException ex) {",
                    "436": "throw ex;",
                    "438": "catch (RuntimeException ex) {",
                    "454": "try {",
                    "481": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "512": "return readObject(reference, true);",
                    "516": "return readObject(readAsDirect, false);",
                    "522": "return createPdfNullInstance(readAsDirect);",
                    "531": "return createPdfNullInstance(readAsDirect);",
                    "538": "return createPdfNullInstance(readAsDirect);",
                    "541": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "551": "return createPdfNullInstance(readAsDirect);",
                    "559": "return reference;",
                    "584": "return new PdfStream(tokens.getPosition(), dict);",
                    "588": "return dict;",
                    "594": "return readArray(objStm);",
                    "596": "return new PdfNumber(tokens.getByteContent());",
                    "603": "return pdfString;",
                    "607": "return readPdfName(readAsDirect);",
                    "609": "return readReference(readAsDirect);",
                    "611": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "613": "return createPdfNullInstance(readAsDirect);",
                    "617": "return PdfBoolean.TRUE;",
                    "620": "return new PdfBoolean(true);",
                    "626": "return PdfBoolean.FALSE;",
                    "629": "return new PdfBoolean(false);",
                    "634": "return null;",
                    "643": "return cachedName;",
                    "646": "return new PdfName(tokens.getByteContent());",
                    "669": "return dic;",
                    "686": "return array;",
                    "693": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "698": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "704": "try {",
                    "707": "return;",
                    "711": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "712": "throw cycledReferencesException;",
                    "714": "catch (Exception ignored) {",
                    "732": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "735": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "747": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "828": "try {",
                    "833": "catch (IOException e) {",
                    "835": "throw e;",
                    "840": "return trailer;",
                    "848": "return false;",
                    "852": "return false;",
                    "856": "return false;",
                    "860": "return false;",
                    "870": "return false;",
                    "875": "return false;",
                    "949": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "970": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "975": "return true;",
                    "1027": "try {",
                    "1034": "catch (Exception e) {",
                    "1054": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1058": "return memorySavingMode;",
                    "1063": "return;",
                    "1066": "return;",
                    "1071": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1080": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1088": "try {",
                    "1091": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1096": "throw ex;",
                    "1104": "return tok;",
                    "1109": "return null;",
                    "1111": "return reference.refersTo;",
                    "1112": "try {",
                    "1117": "return reference.refersTo;",
                    "1121": "try {",
                    "1130": "catch (RuntimeException ex) {",
                    "1136": "throw ex;",
                    "1141": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1144": "return null;",
                    "1148": "catch (IOException e) {",
                    "1149": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1156": "return;",
                    "1226": "return PdfNull.PDF_NULL;",
                    "1229": "return new PdfNull();",
                    "1244": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1251": "return -1;",
                    "1255": "return len;",
                    "1260": "return buffer.size();",
                    "1278": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                }
            },
            "new": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {
                    "92": "return this;",
                    "97": "return this;",
                    "101": "return strictnessLevel;",
                    "106": "return this;",
                    "110": "return tokens.isCloseStream();",
                    "119": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "122": "return rebuiltXref;",
                    "127": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "130": "return hybridXref;",
                    "135": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "138": "return xrefStm;",
                    "143": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "146": "return fixedXref;",
                    "151": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "154": "return lastXref;",
                    "160": "return decodeBytes(b, stream);",
                    "163": "return b;",
                    "174": "return null;",
                    "177": "return new byte[0];",
                    "180": "try {",
                    "216": "try {",
                    "219": "catch (Exception ignored) {",
                    "224": "return bytes;",
                    "229": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "233": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "238": "return null;",
                    "285": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "296": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "315": "return b;",
                    "319": "return tokens.getSafeFile();",
                    "323": "return tokens.getSafeFile().length();",
                    "328": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "331": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "336": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "344": "return perm;",
                    "349": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "353": "return -1;",
                    "355": "return decrypt.getCryptoMode();",
                    "361": "try {",
                    "364": "catch (XMPException ignored) {",
                    "371": "return pdfAConformanceLevel;",
                    "376": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "380": "return null;",
                    "383": "return decrypt.computeUserPassword(properties.password);",
                    "388": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "393": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "396": "return new byte[0];",
                    "403": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "408": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "411": "return new byte[0];",
                    "418": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "421": "return encrypted;",
                    "426": "try {",
                    "429": "catch (IllegalArgumentException exc) {",
                    "430": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "433": "try {",
                    "436": "catch (XrefCycledReferencesException ex) {",
                    "437": "throw ex;",
                    "439": "catch (RuntimeException ex) {",
                    "455": "try {",
                    "482": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "513": "return readObject(reference, true);",
                    "517": "return readObject(readAsDirect, false);",
                    "523": "return createPdfNullInstance(readAsDirect);",
                    "532": "return createPdfNullInstance(readAsDirect);",
                    "539": "return createPdfNullInstance(readAsDirect);",
                    "542": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "552": "return createPdfNullInstance(readAsDirect);",
                    "560": "return reference;",
                    "585": "return new PdfStream(tokens.getPosition(), dict);",
                    "589": "return dict;",
                    "595": "return readArray(objStm);",
                    "597": "return new PdfNumber(tokens.getByteContent());",
                    "604": "return pdfString;",
                    "608": "return readPdfName(readAsDirect);",
                    "610": "return readReference(readAsDirect);",
                    "612": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "614": "return createPdfNullInstance(readAsDirect);",
                    "618": "return PdfBoolean.TRUE;",
                    "621": "return new PdfBoolean(true);",
                    "627": "return PdfBoolean.FALSE;",
                    "630": "return new PdfBoolean(false);",
                    "635": "return null;",
                    "644": "return cachedName;",
                    "647": "return new PdfName(tokens.getByteContent());",
                    "670": "return dic;",
                    "688": "return array;",
                    "695": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "700": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "706": "try {",
                    "709": "return;",
                    "713": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "714": "throw cycledReferencesException;",
                    "716": "catch (Exception ignored) {",
                    "734": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "737": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "749": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "830": "try {",
                    "835": "catch (IOException e) {",
                    "837": "throw e;",
                    "842": "return trailer;",
                    "850": "return false;",
                    "854": "return false;",
                    "858": "return false;",
                    "862": "return false;",
                    "872": "return false;",
                    "877": "return false;",
                    "951": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "972": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "977": "return true;",
                    "1029": "try {",
                    "1036": "catch (Exception e) {",
                    "1056": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1060": "return memorySavingMode;",
                    "1077": "return;",
                    "1080": "return;",
                    "1085": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1094": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1102": "try {",
                    "1105": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1110": "throw ex;",
                    "1118": "return tok;",
                    "1123": "return null;",
                    "1125": "return reference.refersTo;",
                    "1126": "try {",
                    "1131": "return reference.refersTo;",
                    "1135": "try {",
                    "1144": "catch (RuntimeException ex) {",
                    "1150": "throw ex;",
                    "1155": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1158": "return null;",
                    "1162": "catch (IOException e) {",
                    "1163": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1170": "return;",
                    "1240": "return PdfNull.PDF_NULL;",
                    "1243": "return new PdfNull();",
                    "1258": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1265": "return -1;",
                    "1269": "return len;",
                    "1274": "return buffer.size();",
                    "1292": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {
                    "92": "return this;",
                    "97": "return this;",
                    "101": "return strictnessLevel;",
                    "106": "return this;",
                    "110": "return tokens.isCloseStream();",
                    "119": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "122": "return rebuiltXref;",
                    "127": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "130": "return hybridXref;",
                    "135": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "138": "return xrefStm;",
                    "143": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "146": "return fixedXref;",
                    "151": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "154": "return lastXref;",
                    "160": "return decodeBytes(b, stream);",
                    "163": "return b;",
                    "174": "return null;",
                    "177": "return new byte[0];",
                    "180": "try {",
                    "216": "try {",
                    "219": "catch (Exception ignored) {",
                    "224": "return bytes;",
                    "229": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "233": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "238": "return null;",
                    "285": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "296": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "315": "return b;",
                    "319": "return tokens.getSafeFile();",
                    "323": "return tokens.getSafeFile().length();",
                    "328": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "331": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "336": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "344": "return perm;",
                    "349": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "353": "return -1;",
                    "355": "return decrypt.getCryptoMode();",
                    "361": "try {",
                    "364": "catch (XMPException ignored) {",
                    "371": "return pdfAConformanceLevel;",
                    "376": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "380": "return null;",
                    "383": "return decrypt.computeUserPassword(properties.password);",
                    "388": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "393": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "396": "return new byte[0];",
                    "403": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "408": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "411": "return new byte[0];",
                    "418": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "421": "return encrypted;",
                    "426": "try {",
                    "429": "catch (IllegalArgumentException exc) {",
                    "430": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "433": "try {",
                    "436": "catch (XrefCycledReferencesException ex) {",
                    "437": "throw ex;",
                    "439": "catch (RuntimeException ex) {",
                    "455": "try {",
                    "482": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "513": "return readObject(reference, true);",
                    "517": "return readObject(readAsDirect, false);",
                    "523": "return createPdfNullInstance(readAsDirect);",
                    "532": "return createPdfNullInstance(readAsDirect);",
                    "539": "return createPdfNullInstance(readAsDirect);",
                    "542": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "552": "return createPdfNullInstance(readAsDirect);",
                    "560": "return reference;",
                    "585": "return new PdfStream(tokens.getPosition(), dict);",
                    "589": "return dict;",
                    "595": "return readArray(objStm);",
                    "597": "return new PdfNumber(tokens.getByteContent());",
                    "604": "return pdfString;",
                    "608": "return readPdfName(readAsDirect);",
                    "610": "return readReference(readAsDirect);",
                    "612": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "614": "return createPdfNullInstance(readAsDirect);",
                    "618": "return PdfBoolean.TRUE;",
                    "621": "return new PdfBoolean(true);",
                    "627": "return PdfBoolean.FALSE;",
                    "630": "return new PdfBoolean(false);",
                    "635": "return null;",
                    "644": "return cachedName;",
                    "647": "return new PdfName(tokens.getByteContent());",
                    "670": "return dic;",
                    "688": "return array;",
                    "695": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "700": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "706": "try {",
                    "709": "return;",
                    "713": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "714": "throw cycledReferencesException;",
                    "716": "catch (Exception ignored) {",
                    "734": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "737": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "749": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "830": "try {",
                    "835": "catch (IOException e) {",
                    "837": "throw e;",
                    "842": "return trailer;",
                    "850": "return false;",
                    "854": "return false;",
                    "858": "return false;",
                    "862": "return false;",
                    "872": "return false;",
                    "877": "return false;",
                    "951": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "972": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "977": "return true;",
                    "1029": "try {",
                    "1036": "catch (Exception e) {",
                    "1056": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1060": "return memorySavingMode;",
                    "1077": "return;",
                    "1080": "return;",
                    "1085": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1094": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1102": "try {",
                    "1105": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1110": "throw ex;",
                    "1118": "return tok;",
                    "1123": "return null;",
                    "1125": "return reference.refersTo;",
                    "1126": "try {",
                    "1131": "return reference.refersTo;",
                    "1135": "try {",
                    "1144": "catch (RuntimeException ex) {",
                    "1150": "throw ex;",
                    "1155": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1158": "return null;",
                    "1162": "catch (IOException e) {",
                    "1163": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1170": "return;",
                    "1240": "return PdfNull.PDF_NULL;",
                    "1243": "return new PdfNull();",
                    "1258": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1265": "return -1;",
                    "1269": "return len;",
                    "1274": "return buffer.size();",
                    "1292": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "92": "return this;",
                    "97": "return this;",
                    "101": "return strictnessLevel;",
                    "106": "return this;",
                    "110": "return tokens.isCloseStream();",
                    "119": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "122": "return rebuiltXref;",
                    "127": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "130": "return hybridXref;",
                    "135": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "138": "return xrefStm;",
                    "143": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "146": "return fixedXref;",
                    "151": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "154": "return lastXref;",
                    "160": "return decodeBytes(b, stream);",
                    "163": "return b;",
                    "174": "return null;",
                    "177": "return new byte[0];",
                    "180": "try {",
                    "216": "try {",
                    "219": "catch (Exception ignored) {",
                    "224": "return bytes;",
                    "229": "return bytes != null ? new ByteArrayInputStream(bytes) : null;",
                    "233": "return decodeBytes(b, streamDictionary, FilterHandlers.getDefaultFilterHandlers());",
                    "238": "return null;",
                    "285": "throw new PdfException(KernelExceptionMessageConstant.THIS_FILTER_IS_NOT_SUPPORTED) .setMessageParams(filterName);",
                    "296": "throw new PdfException(KernelExceptionMessageConstant.THIS_DECODE_PARAMETER_TYPE_IS_NOT_SUPPORTED) .setMessageParams(dpEntry.getClass().toString());",
                    "315": "return b;",
                    "319": "return tokens.getSafeFile();",
                    "323": "return tokens.getSafeFile().length();",
                    "328": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "331": "return !encrypted || decrypt.isOpenedWithFullPermission() || unethicalReading;",
                    "336": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "344": "return perm;",
                    "349": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "353": "return -1;",
                    "355": "return decrypt.getCryptoMode();",
                    "361": "try {",
                    "364": "catch (XMPException ignored) {",
                    "371": "return pdfAConformanceLevel;",
                    "376": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "380": "return null;",
                    "383": "return decrypt.computeUserPassword(properties.password);",
                    "388": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "393": "return ByteUtils.getIsoBytes(id.getAsString(0).getValue());",
                    "396": "return new byte[0];",
                    "403": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "408": "return ByteUtils.getIsoBytes(id.getAsString(1).getValue());",
                    "411": "return new byte[0];",
                    "418": "throw new PdfException(KernelExceptionMessageConstant.DOCUMENT_HAS_NOT_BEEN_READ_YET);",
                    "421": "return encrypted;",
                    "426": "try {",
                    "429": "catch (IllegalArgumentException exc) {",
                    "430": "throw new PdfException(KernelExceptionMessageConstant.PDF_VERSION_IS_NOT_VALID, version);",
                    "433": "try {",
                    "436": "catch (XrefCycledReferencesException ex) {",
                    "437": "throw ex;",
                    "439": "catch (RuntimeException ex) {",
                    "455": "try {",
                    "482": "throw new PdfException(KernelExceptionMessageConstant.ERROR_WHILE_READING_OBJECT_STREAM);",
                    "513": "return readObject(reference, true);",
                    "517": "return readObject(readAsDirect, false);",
                    "523": "return createPdfNullInstance(readAsDirect);",
                    "532": "return createPdfNullInstance(readAsDirect);",
                    "539": "return createPdfNullInstance(readAsDirect);",
                    "542": "throw new PdfException(KernelExceptionMessageConstant.INVALID_INDIRECT_REFERENCE, MessageFormatUtil.format(\"{0} {1} R\", reference.getObjNumber(), reference.getGenNumber()));",
                    "552": "return createPdfNullInstance(readAsDirect);",
                    "560": "return reference;",
                    "585": "return new PdfStream(tokens.getPosition(), dict);",
                    "589": "return dict;",
                    "595": "return readArray(objStm);",
                    "597": "return new PdfNumber(tokens.getByteContent());",
                    "604": "return pdfString;",
                    "608": "return readPdfName(readAsDirect);",
                    "610": "return readReference(readAsDirect);",
                    "612": "throw new PdfException(KernelExceptionMessageConstant.UNEXPECTED_END_OF_FILE);",
                    "614": "return createPdfNullInstance(readAsDirect);",
                    "618": "return PdfBoolean.TRUE;",
                    "621": "return new PdfBoolean(true);",
                    "627": "return PdfBoolean.FALSE;",
                    "630": "return new PdfBoolean(false);",
                    "635": "return null;",
                    "644": "return cachedName;",
                    "647": "return new PdfName(tokens.getByteContent());",
                    "670": "return dic;",
                    "688": "return array;",
                    "695": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_NOT_FOUND, tokens);",
                    "700": "throw new PdfException(KernelExceptionMessageConstant.PDF_STARTXREF_IS_NOT_FOLLOWED_BY_A_NUMBER, tokens);",
                    "706": "try {",
                    "709": "return;",
                    "713": "catch (XrefCycledReferencesException cycledReferencesException) {",
                    "714": "throw cycledReferencesException;",
                    "716": "catch (Exception ignored) {",
                    "734": "throw new PdfException(KernelExceptionMessageConstant. TRAILER_PREV_ENTRY_POINTS_TO_ITS_OWN_CROSS_REFERENCE_SECTION);",
                    "737": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_TABLE_HAS_CYCLED_REFERENCES);",
                    "749": "throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_TABLE);",
                    "830": "try {",
                    "835": "catch (IOException e) {",
                    "837": "throw e;",
                    "842": "return trailer;",
                    "850": "return false;",
                    "854": "return false;",
                    "858": "return false;",
                    "862": "return false;",
                    "872": "return false;",
                    "877": "return false;",
                    "951": "default: throw new PdfException(KernelExceptionMessageConstant.INVALID_XREF_STREAM);",
                    "972": "throw new XrefCycledReferencesException( KernelExceptionMessageConstant.XREF_STREAM_HAS_CYCLED_REFERENCES);",
                    "977": "return true;",
                    "1029": "try {",
                    "1036": "catch (Exception e) {",
                    "1056": "throw new PdfException(KernelExceptionMessageConstant.TRAILER_NOT_FOUND);",
                    "1060": "return memorySavingMode;",
                    "1077": "return;",
                    "1080": "return;",
                    "1085": "throw new PdfException( KernelExceptionMessageConstant.CERTIFICATE_IS_NOT_PROVIDED_DOCUMENT_IS_ENCRYPTED_WITH_PUBLIC_KEY_CERTIFICATE);",
                    "1094": "throw new UnsupportedSecurityHandlerException(MessageFormatUtil.format(UnsupportedSecurityHandlerException.UnsupportedSecurityHandler, filter));",
                    "1102": "try {",
                    "1105": "catch (com.itextpdf.io.exceptions.IOException ex) {",
                    "1110": "throw ex;",
                    "1118": "return tok;",
                    "1123": "return null;",
                    "1125": "return reference.refersTo;",
                    "1126": "try {",
                    "1131": "return reference.refersTo;",
                    "1135": "try {",
                    "1144": "catch (RuntimeException ex) {",
                    "1150": "throw ex;",
                    "1155": "return object != null ? object.setIndirectReference(reference) : null;",
                    "1158": "return null;",
                    "1162": "catch (IOException e) {",
                    "1163": "throw new PdfException(KernelExceptionMessageConstant.CANNOT_READ_PDF_OBJECT, e);",
                    "1170": "return;",
                    "1240": "return PdfNull.PDF_NULL;",
                    "1243": "return new PdfNull();",
                    "1258": "return 0xff & buffer.getInternalBuffer()[(int) offset];",
                    "1265": "return -1;",
                    "1269": "return len;",
                    "1274": "return buffer.size();",
                    "1292": "return compareWith == null || this.levelValue > compareWith.levelValue;"
                }
            }
        },
        "undefined": {
            "old": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {
                    "117": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "125": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "133": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "141": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "149": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "158": "if (decode && b != null) {",
                    "161": "else {",
                    "169": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "172": "if (offset <= 0)",
                    "175": "if (length <= 0)",
                    "184": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "187": "if (filter != null) {",
                    "188": "if (PdfName.Crypt.equals(filter)) {",
                    "191": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "193": "for (int k = 0; k < filters.size(); k++) {",
                    "194": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "206": "if (!skip) {",
                    "236": "if (b == null) {",
                    "242": "if (filter != null) {",
                    "243": "if (filter.getType() == PdfObject.NAME) {",
                    "246": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "253": "if (null != streamDictionary.getIndirectReference()) {",
                    "258": "if(memoryLimitsAwarenessRequired) {",
                    "264": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "265": "if (dpo != null) dpo.release();",
                    "269": "if (dpo != null) {",
                    "270": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "273": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "280": "for (int j = 0; j < filters.size(); ++j) {",
                    "283": "if (filterHandler == null)",
                    "286": "if (j < dp.size()) {",
                    "288": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "291": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "294": "else {",
                    "299": "else {",
                    "304": "if (memoryLimitsAwarenessRequired) {",
                    "310": "if (memoryLimitsAwarenessRequired) {",
                    "326": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "334": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "339": "if (encrypted && decrypt.getPermissions() != null) {",
                    "347": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "351": "if (decrypt == null)",
                    "353": "else",
                    "358": "if (pdfAConformanceLevel == null) {",
                    "359": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "374": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "378": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "386": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "391": "if (id != null && id.size() == 2) {",
                    "394": "else {",
                    "401": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "406": "if (id != null && id.size() == 2) {",
                    "409": "else {",
                    "416": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "459": "for (int k = 0; k < n; ++k) {",
                    "461": "if (!ok)",
                    "463": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "470": "if (!ok)",
                    "472": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "480": "if (!ok)",
                    "482": "for (int k = 0; k < n; ++k) {",
                    "487": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "491": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "494": "else {",
                    "521": "if (num < 0) {",
                    "527": "if (reference != null) {",
                    "528": "if (reference.isFree()) {",
                    "534": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "535": "if (fixedXref) {",
                    "540": "else {",
                    "547": "else {",
                    "548": "if (table.isReadingCompleted()) {",
                    "553": "else {",
                    "565": "switch (type) {",
                    "573": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "574": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "579": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "580": "if (ch != '\\n')",
                    "582": "if (ch != '\\n')",
                    "586": "else {",
                    "599": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "612": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "615": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "616": "if (readAsDirect) {",
                    "619": "else {",
                    "624": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "625": "if (readAsDirect) {",
                    "628": "else {",
                    "640": "if (readAsDirect) {",
                    "642": "if (cachedName != null)",
                    "651": "while (true) {",
                    "653": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "655": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "659": "if (obj == null) {",
                    "660": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "662": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "674": "while (true) {",
                    "676": "if (obj == null) {",
                    "677": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "679": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "692": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "697": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "705": "if (readXrefStream(startxref)) {",
                    "722": "while (true) {",
                    "725": "if (prev == null) {",
                    "730": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "731": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "734": "else {",
                    "746": "if (xrefSize == null) {",
                    "754": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "757": "while (true) {",
                    "759": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "763": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "769": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "774": "for (int num = start; num < end; num++) {",
                    "780": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "789": "if (refFirstEncountered) {",
                    "792": "else if (refReadingState) {",
                    "796": "else {",
                    "800": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "801": "if (pos == 0) {",
                    "806": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "807": "if (refFirstEncountered) {",
                    "812": "else {",
                    "816": "if (refFirstEncountered) {",
                    "826": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "845": "while (ptr != -1) {",
                    "847": "if (!tokens.nextToken()) {",
                    "851": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "855": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "859": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "867": "if (object.getType() == PdfObject.STREAM) {",
                    "869": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "874": "else {",
                    "878": "if (trailer == null) {",
                    "890": "if (obj == null) {",
                    "895": "else {",
                    "902": "if (obj != null)",
                    "908": "for (int k = 0; k < 3; ++k) {",
                    "912": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "916": "while (length-- > 0) {",
                    "918": "if (wc[0] > 0) {",
                    "920": "for (int k = 0; k < wc[0]; ++k) {",
                    "927": "for (int k = 0; k < wc[1]; ++k) {",
                    "932": "for (int k = 0; k < wc[2]; ++k) {",
                    "938": "switch (type) {",
                    "955": "if (refFirstEncountered) {",
                    "958": "else if (refReadingState) {",
                    "969": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "984": "for (; ; ) {",
                    "987": "if (!tokens.readLineSegment(buffer, true))",
                    "989": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "991": "if (obj == null)",
                    "996": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1016": "for (; ; ) {",
                    "1019": "if (!tokens.readLineSegment(buffer, true))",
                    "1021": "if (buffer.get(0) == 't') {",
                    "1022": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1029": "if (dic.get(PdfName.Root, false) != null)",
                    "1031": "else",
                    "1039": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1041": "if (obj == null)",
                    "1045": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1053": "if (trailer == null)",
                    "1062": "if (encrypted)",
                    "1065": "if (enc == null)",
                    "1069": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1070": "if (properties.certificate == null) {",
                    "1076": "else if (PdfName.Standard.equals(filter)) {",
                    "1079": "else {",
                    "1092": "if (closeStream) {",
                    "1099": "if (offset != 0) {",
                    "1108": "if (reference == null)",
                    "1110": "if (reference.refersTo != null)",
                    "1114": "if (reference.getObjStreamNumber() > 0) {",
                    "1119": "else if (reference.getOffset() > 0) {",
                    "1124": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1131": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1135": "else {",
                    "1143": "else {",
                    "1155": "if (!correctStreamLength)",
                    "1162": "if (pdfNumber != null) {",
                    "1164": "if (streamLength + start > fileLength - 20) {",
                    "1167": "else {",
                    "1170": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1177": "else {",
                    "1183": "if (calc) {",
                    "1187": "while (true) {",
                    "1190": "if (!tokens.readLineSegment(line, false))",
                    "1192": "if (line.startsWith(endstream)) {",
                    "1196": "else if (line.startsWith(endobj)) {",
                    "1200": "if (index >= 0)",
                    "1209": "if (tokens.read() == 13) {",
                    "1214": "if (tokens.read() == 10) {",
                    "1225": "if (readAsDirect) {",
                    "1228": "else {",
                    "1237": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1243": "if (offset >= buffer.size()) return -1;",
                    "1249": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1250": "if (offset >= buffer.size())",
                    "1252": "if (offset + len > buffer.size())"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {
                    "117": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "125": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "133": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "141": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "149": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "158": "if (decode && b != null) {",
                    "161": "else {",
                    "169": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "172": "if (offset <= 0)",
                    "175": "if (length <= 0)",
                    "184": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "187": "if (filter != null) {",
                    "188": "if (PdfName.Crypt.equals(filter)) {",
                    "191": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "193": "for (int k = 0; k < filters.size(); k++) {",
                    "194": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "206": "if (!skip) {",
                    "236": "if (b == null) {",
                    "242": "if (filter != null) {",
                    "243": "if (filter.getType() == PdfObject.NAME) {",
                    "246": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "253": "if (null != streamDictionary.getIndirectReference()) {",
                    "258": "if(memoryLimitsAwarenessRequired) {",
                    "264": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "265": "if (dpo != null) dpo.release();",
                    "269": "if (dpo != null) {",
                    "270": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "273": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "280": "for (int j = 0; j < filters.size(); ++j) {",
                    "283": "if (filterHandler == null)",
                    "286": "if (j < dp.size()) {",
                    "288": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "291": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "294": "else {",
                    "299": "else {",
                    "304": "if (memoryLimitsAwarenessRequired) {",
                    "310": "if (memoryLimitsAwarenessRequired) {",
                    "326": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "334": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "339": "if (encrypted && decrypt.getPermissions() != null) {",
                    "347": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "351": "if (decrypt == null)",
                    "353": "else",
                    "358": "if (pdfAConformanceLevel == null) {",
                    "359": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "374": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "378": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "386": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "391": "if (id != null && id.size() == 2) {",
                    "394": "else {",
                    "401": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "406": "if (id != null && id.size() == 2) {",
                    "409": "else {",
                    "416": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "459": "for (int k = 0; k < n; ++k) {",
                    "461": "if (!ok)",
                    "463": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "470": "if (!ok)",
                    "472": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "480": "if (!ok)",
                    "482": "for (int k = 0; k < n; ++k) {",
                    "487": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "491": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "494": "else {",
                    "521": "if (num < 0) {",
                    "527": "if (reference != null) {",
                    "528": "if (reference.isFree()) {",
                    "534": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "535": "if (fixedXref) {",
                    "540": "else {",
                    "547": "else {",
                    "548": "if (table.isReadingCompleted()) {",
                    "553": "else {",
                    "565": "switch (type) {",
                    "573": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "574": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "579": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "580": "if (ch != '\\n')",
                    "582": "if (ch != '\\n')",
                    "586": "else {",
                    "599": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "612": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "615": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "616": "if (readAsDirect) {",
                    "619": "else {",
                    "624": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "625": "if (readAsDirect) {",
                    "628": "else {",
                    "640": "if (readAsDirect) {",
                    "642": "if (cachedName != null)",
                    "651": "while (true) {",
                    "653": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "655": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "659": "if (obj == null) {",
                    "660": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "662": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "674": "while (true) {",
                    "676": "if (obj == null) {",
                    "677": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "679": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "692": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "697": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "705": "if (readXrefStream(startxref)) {",
                    "722": "while (true) {",
                    "725": "if (prev == null) {",
                    "730": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "731": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "734": "else {",
                    "746": "if (xrefSize == null) {",
                    "754": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "757": "while (true) {",
                    "759": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "763": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "769": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "774": "for (int num = start; num < end; num++) {",
                    "780": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "789": "if (refFirstEncountered) {",
                    "792": "else if (refReadingState) {",
                    "796": "else {",
                    "800": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "801": "if (pos == 0) {",
                    "806": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "807": "if (refFirstEncountered) {",
                    "812": "else {",
                    "816": "if (refFirstEncountered) {",
                    "826": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "845": "while (ptr != -1) {",
                    "847": "if (!tokens.nextToken()) {",
                    "851": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "855": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "859": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "867": "if (object.getType() == PdfObject.STREAM) {",
                    "869": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "874": "else {",
                    "878": "if (trailer == null) {",
                    "890": "if (obj == null) {",
                    "895": "else {",
                    "902": "if (obj != null)",
                    "908": "for (int k = 0; k < 3; ++k) {",
                    "912": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "916": "while (length-- > 0) {",
                    "918": "if (wc[0] > 0) {",
                    "920": "for (int k = 0; k < wc[0]; ++k) {",
                    "927": "for (int k = 0; k < wc[1]; ++k) {",
                    "932": "for (int k = 0; k < wc[2]; ++k) {",
                    "938": "switch (type) {",
                    "955": "if (refFirstEncountered) {",
                    "958": "else if (refReadingState) {",
                    "969": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "984": "for (; ; ) {",
                    "987": "if (!tokens.readLineSegment(buffer, true))",
                    "989": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "991": "if (obj == null)",
                    "996": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1016": "for (; ; ) {",
                    "1019": "if (!tokens.readLineSegment(buffer, true))",
                    "1021": "if (buffer.get(0) == 't') {",
                    "1022": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1029": "if (dic.get(PdfName.Root, false) != null)",
                    "1031": "else",
                    "1039": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1041": "if (obj == null)",
                    "1045": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1053": "if (trailer == null)",
                    "1062": "if (encrypted)",
                    "1065": "if (enc == null)",
                    "1069": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1070": "if (properties.certificate == null) {",
                    "1076": "else if (PdfName.Standard.equals(filter)) {",
                    "1079": "else {",
                    "1092": "if (closeStream) {",
                    "1099": "if (offset != 0) {",
                    "1108": "if (reference == null)",
                    "1110": "if (reference.refersTo != null)",
                    "1114": "if (reference.getObjStreamNumber() > 0) {",
                    "1119": "else if (reference.getOffset() > 0) {",
                    "1124": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1131": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1135": "else {",
                    "1143": "else {",
                    "1155": "if (!correctStreamLength)",
                    "1162": "if (pdfNumber != null) {",
                    "1164": "if (streamLength + start > fileLength - 20) {",
                    "1167": "else {",
                    "1170": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1177": "else {",
                    "1183": "if (calc) {",
                    "1187": "while (true) {",
                    "1190": "if (!tokens.readLineSegment(line, false))",
                    "1192": "if (line.startsWith(endstream)) {",
                    "1196": "else if (line.startsWith(endobj)) {",
                    "1200": "if (index >= 0)",
                    "1209": "if (tokens.read() == 13) {",
                    "1214": "if (tokens.read() == 10) {",
                    "1225": "if (readAsDirect) {",
                    "1228": "else {",
                    "1237": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1243": "if (offset >= buffer.size()) return -1;",
                    "1249": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1250": "if (offset >= buffer.size())",
                    "1252": "if (offset + len > buffer.size())"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "117": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "125": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "133": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "141": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "149": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "158": "if (decode && b != null) {",
                    "161": "else {",
                    "169": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "172": "if (offset <= 0)",
                    "175": "if (length <= 0)",
                    "184": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "187": "if (filter != null) {",
                    "188": "if (PdfName.Crypt.equals(filter)) {",
                    "191": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "193": "for (int k = 0; k < filters.size(); k++) {",
                    "194": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "206": "if (!skip) {",
                    "236": "if (b == null) {",
                    "242": "if (filter != null) {",
                    "243": "if (filter.getType() == PdfObject.NAME) {",
                    "246": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "253": "if (null != streamDictionary.getIndirectReference()) {",
                    "258": "if(memoryLimitsAwarenessRequired) {",
                    "264": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "265": "if (dpo != null) dpo.release();",
                    "269": "if (dpo != null) {",
                    "270": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "273": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "280": "for (int j = 0; j < filters.size(); ++j) {",
                    "283": "if (filterHandler == null)",
                    "286": "if (j < dp.size()) {",
                    "288": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "291": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "294": "else {",
                    "299": "else {",
                    "304": "if (memoryLimitsAwarenessRequired) {",
                    "310": "if (memoryLimitsAwarenessRequired) {",
                    "326": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "334": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "339": "if (encrypted && decrypt.getPermissions() != null) {",
                    "347": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "351": "if (decrypt == null)",
                    "353": "else",
                    "358": "if (pdfAConformanceLevel == null) {",
                    "359": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "374": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "378": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "386": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "391": "if (id != null && id.size() == 2) {",
                    "394": "else {",
                    "401": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "406": "if (id != null && id.size() == 2) {",
                    "409": "else {",
                    "416": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "459": "for (int k = 0; k < n; ++k) {",
                    "461": "if (!ok)",
                    "463": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "470": "if (!ok)",
                    "472": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "480": "if (!ok)",
                    "482": "for (int k = 0; k < n; ++k) {",
                    "487": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "491": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "494": "else {",
                    "521": "if (num < 0) {",
                    "527": "if (reference != null) {",
                    "528": "if (reference.isFree()) {",
                    "534": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "535": "if (fixedXref) {",
                    "540": "else {",
                    "547": "else {",
                    "548": "if (table.isReadingCompleted()) {",
                    "553": "else {",
                    "565": "switch (type) {",
                    "573": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "574": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "579": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "580": "if (ch != '\\n')",
                    "582": "if (ch != '\\n')",
                    "586": "else {",
                    "599": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "612": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "615": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "616": "if (readAsDirect) {",
                    "619": "else {",
                    "624": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "625": "if (readAsDirect) {",
                    "628": "else {",
                    "640": "if (readAsDirect) {",
                    "642": "if (cachedName != null)",
                    "651": "while (true) {",
                    "653": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "655": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "659": "if (obj == null) {",
                    "660": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "662": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "674": "while (true) {",
                    "676": "if (obj == null) {",
                    "677": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "679": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "692": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "697": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "705": "if (readXrefStream(startxref)) {",
                    "722": "while (true) {",
                    "725": "if (prev == null) {",
                    "730": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "731": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "734": "else {",
                    "746": "if (xrefSize == null) {",
                    "754": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "757": "while (true) {",
                    "759": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "763": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "769": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "774": "for (int num = start; num < end; num++) {",
                    "780": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "789": "if (refFirstEncountered) {",
                    "792": "else if (refReadingState) {",
                    "796": "else {",
                    "800": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "801": "if (pos == 0) {",
                    "806": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "807": "if (refFirstEncountered) {",
                    "812": "else {",
                    "816": "if (refFirstEncountered) {",
                    "826": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "845": "while (ptr != -1) {",
                    "847": "if (!tokens.nextToken()) {",
                    "851": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "855": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "859": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "867": "if (object.getType() == PdfObject.STREAM) {",
                    "869": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "874": "else {",
                    "878": "if (trailer == null) {",
                    "890": "if (obj == null) {",
                    "895": "else {",
                    "902": "if (obj != null)",
                    "908": "for (int k = 0; k < 3; ++k) {",
                    "912": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "916": "while (length-- > 0) {",
                    "918": "if (wc[0] > 0) {",
                    "920": "for (int k = 0; k < wc[0]; ++k) {",
                    "927": "for (int k = 0; k < wc[1]; ++k) {",
                    "932": "for (int k = 0; k < wc[2]; ++k) {",
                    "938": "switch (type) {",
                    "955": "if (refFirstEncountered) {",
                    "958": "else if (refReadingState) {",
                    "969": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "984": "for (; ; ) {",
                    "987": "if (!tokens.readLineSegment(buffer, true))",
                    "989": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "991": "if (obj == null)",
                    "996": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1016": "for (; ; ) {",
                    "1019": "if (!tokens.readLineSegment(buffer, true))",
                    "1021": "if (buffer.get(0) == 't') {",
                    "1022": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1029": "if (dic.get(PdfName.Root, false) != null)",
                    "1031": "else",
                    "1039": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1041": "if (obj == null)",
                    "1045": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1053": "if (trailer == null)",
                    "1062": "if (encrypted)",
                    "1065": "if (enc == null)",
                    "1069": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1070": "if (properties.certificate == null) {",
                    "1076": "else if (PdfName.Standard.equals(filter)) {",
                    "1079": "else {",
                    "1092": "if (closeStream) {",
                    "1099": "if (offset != 0) {",
                    "1108": "if (reference == null)",
                    "1110": "if (reference.refersTo != null)",
                    "1114": "if (reference.getObjStreamNumber() > 0) {",
                    "1119": "else if (reference.getOffset() > 0) {",
                    "1124": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1131": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1135": "else {",
                    "1143": "else {",
                    "1155": "if (!correctStreamLength)",
                    "1162": "if (pdfNumber != null) {",
                    "1164": "if (streamLength + start > fileLength - 20) {",
                    "1167": "else {",
                    "1170": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1177": "else {",
                    "1183": "if (calc) {",
                    "1187": "while (true) {",
                    "1190": "if (!tokens.readLineSegment(line, false))",
                    "1192": "if (line.startsWith(endstream)) {",
                    "1196": "else if (line.startsWith(endobj)) {",
                    "1200": "if (index >= 0)",
                    "1209": "if (tokens.read() == 13) {",
                    "1214": "if (tokens.read() == 10) {",
                    "1225": "if (readAsDirect) {",
                    "1228": "else {",
                    "1237": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1243": "if (offset >= buffer.size()) return -1;",
                    "1249": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1250": "if (offset >= buffer.size())",
                    "1252": "if (offset + len > buffer.size())"
                }
            },
            "new": {
                "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java": {
                    "118": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "126": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "134": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "142": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "150": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "159": "if (decode && b != null) {",
                    "162": "else {",
                    "170": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "173": "if (offset <= 0)",
                    "176": "if (length <= 0)",
                    "185": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "188": "if (filter != null) {",
                    "189": "if (PdfName.Crypt.equals(filter)) {",
                    "192": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "194": "for (int k = 0; k < filters.size(); k++) {",
                    "195": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "207": "if (!skip) {",
                    "237": "if (b == null) {",
                    "243": "if (filter != null) {",
                    "244": "if (filter.getType() == PdfObject.NAME) {",
                    "247": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "254": "if (null != streamDictionary.getIndirectReference()) {",
                    "259": "if(memoryLimitsAwarenessRequired) {",
                    "265": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "266": "if (dpo != null) dpo.release();",
                    "270": "if (dpo != null) {",
                    "271": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "274": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "281": "for (int j = 0; j < filters.size(); ++j) {",
                    "284": "if (filterHandler == null)",
                    "287": "if (j < dp.size()) {",
                    "289": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "292": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "295": "else {",
                    "300": "else {",
                    "305": "if (memoryLimitsAwarenessRequired) {",
                    "311": "if (memoryLimitsAwarenessRequired) {",
                    "327": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "335": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "340": "if (encrypted && decrypt.getPermissions() != null) {",
                    "348": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "352": "if (decrypt == null)",
                    "354": "else",
                    "359": "if (pdfAConformanceLevel == null) {",
                    "360": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "375": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "379": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "387": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "392": "if (id != null && id.size() == 2) {",
                    "395": "else {",
                    "402": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "407": "if (id != null && id.size() == 2) {",
                    "410": "else {",
                    "417": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "460": "for (int k = 0; k < n; ++k) {",
                    "462": "if (!ok)",
                    "464": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "471": "if (!ok)",
                    "473": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "481": "if (!ok)",
                    "483": "for (int k = 0; k < n; ++k) {",
                    "488": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "492": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "495": "else {",
                    "522": "if (num < 0) {",
                    "528": "if (reference != null) {",
                    "529": "if (reference.isFree()) {",
                    "535": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "536": "if (fixedXref) {",
                    "541": "else {",
                    "548": "else {",
                    "549": "if (table.isReadingCompleted()) {",
                    "554": "else {",
                    "566": "switch (type) {",
                    "574": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "575": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "580": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "581": "if (ch != '\\n')",
                    "583": "if (ch != '\\n')",
                    "587": "else {",
                    "600": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "613": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "616": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "617": "if (readAsDirect) {",
                    "620": "else {",
                    "625": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "626": "if (readAsDirect) {",
                    "629": "else {",
                    "641": "if (readAsDirect) {",
                    "643": "if (cachedName != null)",
                    "652": "while (true) {",
                    "654": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "656": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "660": "if (obj == null) {",
                    "661": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "663": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "675": "while (true) {",
                    "677": "if (obj == null) {",
                    "678": "if (tokens.getTokenType() != PdfTokenizer.TokenType.EndArray) {",
                    "694": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "699": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "707": "if (readXrefStream(startxref)) {",
                    "724": "while (true) {",
                    "727": "if (prev == null) {",
                    "732": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "733": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "736": "else {",
                    "748": "if (xrefSize == null) {",
                    "756": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "759": "while (true) {",
                    "761": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "765": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "771": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "776": "for (int num = start; num < end; num++) {",
                    "782": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "791": "if (refFirstEncountered) {",
                    "794": "else if (refReadingState) {",
                    "798": "else {",
                    "802": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "803": "if (pos == 0) {",
                    "808": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "809": "if (refFirstEncountered) {",
                    "814": "else {",
                    "818": "if (refFirstEncountered) {",
                    "828": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "847": "while (ptr != -1) {",
                    "849": "if (!tokens.nextToken()) {",
                    "853": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "857": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "861": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "869": "if (object.getType() == PdfObject.STREAM) {",
                    "871": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "876": "else {",
                    "880": "if (trailer == null) {",
                    "892": "if (obj == null) {",
                    "897": "else {",
                    "904": "if (obj != null)",
                    "910": "for (int k = 0; k < 3; ++k) {",
                    "914": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "918": "while (length-- > 0) {",
                    "920": "if (wc[0] > 0) {",
                    "922": "for (int k = 0; k < wc[0]; ++k) {",
                    "929": "for (int k = 0; k < wc[1]; ++k) {",
                    "934": "for (int k = 0; k < wc[2]; ++k) {",
                    "940": "switch (type) {",
                    "957": "if (refFirstEncountered) {",
                    "960": "else if (refReadingState) {",
                    "971": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "986": "for (; ; ) {",
                    "989": "if (!tokens.readLineSegment(buffer, true))",
                    "991": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "993": "if (obj == null)",
                    "998": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1018": "for (; ; ) {",
                    "1021": "if (!tokens.readLineSegment(buffer, true))",
                    "1023": "if (buffer.get(0) == 't') {",
                    "1024": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1031": "if (dic.get(PdfName.Root, false) != null)",
                    "1033": "else",
                    "1041": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1043": "if (obj == null)",
                    "1047": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1055": "if (trailer == null)",
                    "1065": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "1069": "else {",
                    "1076": "if (encrypted)",
                    "1079": "if (enc == null)",
                    "1083": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1084": "if (properties.certificate == null) {",
                    "1090": "else if (PdfName.Standard.equals(filter)) {",
                    "1093": "else {",
                    "1106": "if (closeStream) {",
                    "1113": "if (offset != 0) {",
                    "1122": "if (reference == null)",
                    "1124": "if (reference.refersTo != null)",
                    "1128": "if (reference.getObjStreamNumber() > 0) {",
                    "1133": "else if (reference.getOffset() > 0) {",
                    "1138": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1145": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1149": "else {",
                    "1157": "else {",
                    "1169": "if (!correctStreamLength)",
                    "1176": "if (pdfNumber != null) {",
                    "1178": "if (streamLength + start > fileLength - 20) {",
                    "1181": "else {",
                    "1184": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1191": "else {",
                    "1197": "if (calc) {",
                    "1201": "while (true) {",
                    "1204": "if (!tokens.readLineSegment(line, false))",
                    "1206": "if (line.startsWith(endstream)) {",
                    "1210": "else if (line.startsWith(endobj)) {",
                    "1214": "if (index >= 0)",
                    "1223": "if (tokens.read() == 13) {",
                    "1228": "if (tokens.read() == 10) {",
                    "1239": "if (readAsDirect) {",
                    "1242": "else {",
                    "1251": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1257": "if (offset >= buffer.size()) return -1;",
                    "1263": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1264": "if (offset >= buffer.size())",
                    "1266": "if (offset + len > buffer.size())"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java": {
                    "118": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "126": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "134": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "142": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "150": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "159": "if (decode && b != null) {",
                    "162": "else {",
                    "170": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "173": "if (offset <= 0)",
                    "176": "if (length <= 0)",
                    "185": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "188": "if (filter != null) {",
                    "189": "if (PdfName.Crypt.equals(filter)) {",
                    "192": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "194": "for (int k = 0; k < filters.size(); k++) {",
                    "195": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "207": "if (!skip) {",
                    "237": "if (b == null) {",
                    "243": "if (filter != null) {",
                    "244": "if (filter.getType() == PdfObject.NAME) {",
                    "247": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "254": "if (null != streamDictionary.getIndirectReference()) {",
                    "259": "if(memoryLimitsAwarenessRequired) {",
                    "265": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "266": "if (dpo != null) dpo.release();",
                    "270": "if (dpo != null) {",
                    "271": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "274": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "281": "for (int j = 0; j < filters.size(); ++j) {",
                    "284": "if (filterHandler == null)",
                    "287": "if (j < dp.size()) {",
                    "289": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "292": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "295": "else {",
                    "300": "else {",
                    "305": "if (memoryLimitsAwarenessRequired) {",
                    "311": "if (memoryLimitsAwarenessRequired) {",
                    "327": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "335": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "340": "if (encrypted && decrypt.getPermissions() != null) {",
                    "348": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "352": "if (decrypt == null)",
                    "354": "else",
                    "359": "if (pdfAConformanceLevel == null) {",
                    "360": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "375": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "379": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "387": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "392": "if (id != null && id.size() == 2) {",
                    "395": "else {",
                    "402": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "407": "if (id != null && id.size() == 2) {",
                    "410": "else {",
                    "417": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "460": "for (int k = 0; k < n; ++k) {",
                    "462": "if (!ok)",
                    "464": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "471": "if (!ok)",
                    "473": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "481": "if (!ok)",
                    "483": "for (int k = 0; k < n; ++k) {",
                    "488": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "492": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "495": "else {",
                    "522": "if (num < 0) {",
                    "528": "if (reference != null) {",
                    "529": "if (reference.isFree()) {",
                    "535": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "536": "if (fixedXref) {",
                    "541": "else {",
                    "548": "else {",
                    "549": "if (table.isReadingCompleted()) {",
                    "554": "else {",
                    "566": "switch (type) {",
                    "574": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "575": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "580": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "581": "if (ch != '\\n')",
                    "583": "if (ch != '\\n')",
                    "587": "else {",
                    "600": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "613": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "616": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "617": "if (readAsDirect) {",
                    "620": "else {",
                    "625": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "626": "if (readAsDirect) {",
                    "629": "else {",
                    "641": "if (readAsDirect) {",
                    "643": "if (cachedName != null)",
                    "652": "while (true) {",
                    "654": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "656": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "660": "if (obj == null) {",
                    "661": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "663": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "675": "while (true) {",
                    "677": "if (obj == null) {",
                    "678": "if (tokens.getTokenType() != PdfTokenizer.TokenType.EndArray) {",
                    "694": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "699": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "707": "if (readXrefStream(startxref)) {",
                    "724": "while (true) {",
                    "727": "if (prev == null) {",
                    "732": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "733": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "736": "else {",
                    "748": "if (xrefSize == null) {",
                    "756": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "759": "while (true) {",
                    "761": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "765": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "771": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "776": "for (int num = start; num < end; num++) {",
                    "782": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "791": "if (refFirstEncountered) {",
                    "794": "else if (refReadingState) {",
                    "798": "else {",
                    "802": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "803": "if (pos == 0) {",
                    "808": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "809": "if (refFirstEncountered) {",
                    "814": "else {",
                    "818": "if (refFirstEncountered) {",
                    "828": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "847": "while (ptr != -1) {",
                    "849": "if (!tokens.nextToken()) {",
                    "853": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "857": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "861": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "869": "if (object.getType() == PdfObject.STREAM) {",
                    "871": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "876": "else {",
                    "880": "if (trailer == null) {",
                    "892": "if (obj == null) {",
                    "897": "else {",
                    "904": "if (obj != null)",
                    "910": "for (int k = 0; k < 3; ++k) {",
                    "914": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "918": "while (length-- > 0) {",
                    "920": "if (wc[0] > 0) {",
                    "922": "for (int k = 0; k < wc[0]; ++k) {",
                    "929": "for (int k = 0; k < wc[1]; ++k) {",
                    "934": "for (int k = 0; k < wc[2]; ++k) {",
                    "940": "switch (type) {",
                    "957": "if (refFirstEncountered) {",
                    "960": "else if (refReadingState) {",
                    "971": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "986": "for (; ; ) {",
                    "989": "if (!tokens.readLineSegment(buffer, true))",
                    "991": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "993": "if (obj == null)",
                    "998": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1018": "for (; ; ) {",
                    "1021": "if (!tokens.readLineSegment(buffer, true))",
                    "1023": "if (buffer.get(0) == 't') {",
                    "1024": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1031": "if (dic.get(PdfName.Root, false) != null)",
                    "1033": "else",
                    "1041": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1043": "if (obj == null)",
                    "1047": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1055": "if (trailer == null)",
                    "1065": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "1069": "else {",
                    "1076": "if (encrypted)",
                    "1079": "if (enc == null)",
                    "1083": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1084": "if (properties.certificate == null) {",
                    "1090": "else if (PdfName.Standard.equals(filter)) {",
                    "1093": "else {",
                    "1106": "if (closeStream) {",
                    "1113": "if (offset != 0) {",
                    "1122": "if (reference == null)",
                    "1124": "if (reference.refersTo != null)",
                    "1128": "if (reference.getObjStreamNumber() > 0) {",
                    "1133": "else if (reference.getOffset() > 0) {",
                    "1138": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1145": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1149": "else {",
                    "1157": "else {",
                    "1169": "if (!correctStreamLength)",
                    "1176": "if (pdfNumber != null) {",
                    "1178": "if (streamLength + start > fileLength - 20) {",
                    "1181": "else {",
                    "1184": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1191": "else {",
                    "1197": "if (calc) {",
                    "1201": "while (true) {",
                    "1204": "if (!tokens.readLineSegment(line, false))",
                    "1206": "if (line.startsWith(endstream)) {",
                    "1210": "else if (line.startsWith(endobj)) {",
                    "1214": "if (index >= 0)",
                    "1223": "if (tokens.read() == 13) {",
                    "1228": "if (tokens.read() == 10) {",
                    "1239": "if (readAsDirect) {",
                    "1242": "else {",
                    "1251": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1257": "if (offset >= buffer.size()) return -1;",
                    "1263": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1264": "if (offset >= buffer.size())",
                    "1266": "if (offset + len > buffer.size())"
                },
                "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java": {
                    "118": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "126": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "134": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "142": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "150": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "159": "if (decode && b != null) {",
                    "162": "else {",
                    "170": "if (!PdfName.XRefStm.equals(type) && !PdfName.ObjStm.equals(type))",
                    "173": "if (offset <= 0)",
                    "176": "if (length <= 0)",
                    "185": "if (decrypt != null && (!decrypt.isEmbeddedFilesOnly() || embeddedStream)) {",
                    "188": "if (filter != null) {",
                    "189": "if (PdfName.Crypt.equals(filter)) {",
                    "192": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "194": "for (int k = 0; k < filters.size(); k++) {",
                    "195": "if (!filters.isEmpty() && PdfName.Crypt.equals(filters.get(k, true))) {",
                    "207": "if (!skip) {",
                    "237": "if (b == null) {",
                    "243": "if (filter != null) {",
                    "244": "if (filter.getType() == PdfObject.NAME) {",
                    "247": "else if (filter.getType() == PdfObject.ARRAY) {",
                    "254": "if (null != streamDictionary.getIndirectReference()) {",
                    "259": "if(memoryLimitsAwarenessRequired) {",
                    "265": "if (dpo == null || (dpo.getType() != PdfObject.DICTIONARY && dpo.getType() != PdfObject.ARRAY)) {",
                    "266": "if (dpo != null) dpo.release();",
                    "270": "if (dpo != null) {",
                    "271": "if (dpo.getType() == PdfObject.DICTIONARY) {",
                    "274": "else if (dpo.getType() == PdfObject.ARRAY) {",
                    "281": "for (int j = 0; j < filters.size(); ++j) {",
                    "284": "if (filterHandler == null)",
                    "287": "if (j < dp.size()) {",
                    "289": "if (dpEntry == null || dpEntry.getType() == PdfObject.NULL) {",
                    "292": "else if (dpEntry.getType() == PdfObject.DICTIONARY) {",
                    "295": "else {",
                    "300": "else {",
                    "305": "if (memoryLimitsAwarenessRequired) {",
                    "311": "if (memoryLimitsAwarenessRequired) {",
                    "327": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "335": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "340": "if (encrypted && decrypt.getPermissions() != null) {",
                    "348": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "352": "if (decrypt == null)",
                    "354": "else",
                    "359": "if (pdfAConformanceLevel == null) {",
                    "360": "if (pdfDocument != null && pdfDocument.getXmpMetadata() != null) {",
                    "375": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "379": "if (!encrypted || !decrypt.isOpenedWithFullPermission()) {",
                    "387": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "392": "if (id != null && id.size() == 2) {",
                    "395": "else {",
                    "402": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "407": "if (id != null && id.size() == 2) {",
                    "410": "else {",
                    "417": "if (pdfDocument == null || !pdfDocument.getXref().isReadingCompleted()) {",
                    "460": "for (int k = 0; k < n; ++k) {",
                    "462": "if (!ok)",
                    "464": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "471": "if (!ok)",
                    "473": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "481": "if (!ok)",
                    "483": "for (int k = 0; k < n; ++k) {",
                    "488": "if (reference.refersTo != null || reference.getObjStreamNumber() != objectStreamNumber) {",
                    "492": "if (tokens.getTokenType() == PdfTokenizer.TokenType.Number) {",
                    "495": "else {",
                    "522": "if (num < 0) {",
                    "528": "if (reference != null) {",
                    "529": "if (reference.isFree()) {",
                    "535": "if (reference.getGenNumber() != tokens.getGenNr()) {",
                    "536": "if (fixedXref) {",
                    "541": "else {",
                    "548": "else {",
                    "549": "if (table.isReadingCompleted()) {",
                    "554": "else {",
                    "566": "switch (type) {",
                    "574": "while (hasNext && tokens.getTokenType() == PdfTokenizer.TokenType.Comment);",
                    "575": "if (hasNext && tokens.tokenValueEqualsTo(PdfTokenizer.Stream)) {",
                    "580": "while (ch == 32 || ch == 9 || ch == 0 || ch == 12);",
                    "581": "if (ch != '\\n')",
                    "583": "if (ch != '\\n')",
                    "587": "else {",
                    "600": "if (encrypted && !decrypt.isEmbeddedFilesOnly() && !objStm) {",
                    "613": "default: if (tokens.tokenValueEqualsTo(PdfTokenizer.Null)) {",
                    "616": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.True)) {",
                    "617": "if (readAsDirect) {",
                    "620": "else {",
                    "625": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.False)) {",
                    "626": "if (readAsDirect) {",
                    "629": "else {",
                    "641": "if (readAsDirect) {",
                    "643": "if (cachedName != null)",
                    "652": "while (true) {",
                    "654": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "656": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Name)",
                    "660": "if (obj == null) {",
                    "661": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)",
                    "663": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)",
                    "675": "while (true) {",
                    "677": "if (obj == null) {",
                    "678": "if (tokens.getTokenType() != PdfTokenizer.TokenType.EndArray) {",
                    "694": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Startxref)) {",
                    "699": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "707": "if (readXrefStream(startxref)) {",
                    "724": "while (true) {",
                    "727": "if (prev == null) {",
                    "732": "if (alreadyVisitedXrefTables.contains(prevXrefOffset)) {",
                    "733": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "736": "else {",
                    "748": "if (xrefSize == null) {",
                    "756": "if (!tokens.tokenValueEqualsTo(PdfTokenizer.Xref))",
                    "759": "while (true) {",
                    "761": "if (tokens.tokenValueEqualsTo(PdfTokenizer.Trailer)) {",
                    "765": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "771": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "776": "for (int num = start; num < end; num++) {",
                    "782": "if (pos == 0L && gen == 65535 && num == 1 && start != 0) {",
                    "791": "if (refFirstEncountered) {",
                    "794": "else if (refReadingState) {",
                    "798": "else {",
                    "802": "if (tokens.tokenValueEqualsTo(PdfTokenizer.N)) {",
                    "803": "if (pos == 0) {",
                    "808": "else if (tokens.tokenValueEqualsTo(PdfTokenizer.F)) {",
                    "809": "if (refFirstEncountered) {",
                    "814": "else {",
                    "818": "if (refFirstEncountered) {",
                    "828": "if (xrs != null && xrs.getType() == PdfObject.NUMBER) {",
                    "847": "while (ptr != -1) {",
                    "849": "if (!tokens.nextToken()) {",
                    "853": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "857": "if (!tokens.nextToken() || tokens.getTokenType() != PdfTokenizer.TokenType.Number) {",
                    "861": "if (!tokens.nextToken() || !tokens.tokenValueEqualsTo(PdfTokenizer.Obj)) {",
                    "869": "if (object.getType() == PdfObject.STREAM) {",
                    "871": "if (!PdfName.XRef.equals(xrefStream.get(PdfName.Type))) {",
                    "876": "else {",
                    "880": "if (trailer == null) {",
                    "892": "if (obj == null) {",
                    "897": "else {",
                    "904": "if (obj != null)",
                    "910": "for (int k = 0; k < 3; ++k) {",
                    "914": "for (int idx = 0; idx < index.size(); idx += 2) {",
                    "918": "while (length-- > 0) {",
                    "920": "if (wc[0] > 0) {",
                    "922": "for (int k = 0; k < wc[0]; ++k) {",
                    "929": "for (int k = 0; k < wc[1]; ++k) {",
                    "934": "for (int k = 0; k < wc[2]; ++k) {",
                    "940": "switch (type) {",
                    "957": "if (refFirstEncountered) {",
                    "960": "else if (refReadingState) {",
                    "971": "if (alreadyVisitedXrefStreams.contains(ptr)) {",
                    "986": "for (; ; ) {",
                    "989": "if (!tokens.readLineSegment(buffer, true))",
                    "991": "if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "993": "if (obj == null)",
                    "998": "if (reference != null && reference.getGenNumber() == gen) {",
                    "1018": "for (; ; ) {",
                    "1021": "if (!tokens.readLineSegment(buffer, true))",
                    "1023": "if (buffer.get(0) == 't') {",
                    "1024": "if (!PdfTokenizer.checkTrailer(buffer))",
                    "1031": "if (dic.get(PdfName.Root, false) != null)",
                    "1033": "else",
                    "1041": "else if (buffer.get(0) >= '0' && buffer.get(0) <= '9') {",
                    "1043": "if (obj == null)",
                    "1047": "if (xref.get(num) == null || xref.get(num).getGenNumber() <= gen) {",
                    "1055": "if (trailer == null)",
                    "1065": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {",
                    "1069": "else {",
                    "1076": "if (encrypted)",
                    "1079": "if (enc == null)",
                    "1083": "if (PdfName.Adobe_PubSec.equals(filter)) {",
                    "1084": "if (properties.certificate == null) {",
                    "1090": "else if (PdfName.Standard.equals(filter)) {",
                    "1093": "else {",
                    "1106": "if (closeStream) {",
                    "1113": "if (offset != 0) {",
                    "1122": "if (reference == null)",
                    "1124": "if (reference.refersTo != null)",
                    "1128": "if (reference.getObjStreamNumber() > 0) {",
                    "1133": "else if (reference.getOffset() > 0) {",
                    "1138": "if (tokens.getTokenType() != PdfTokenizer.TokenType.Obj || tokens.getObjNr() != reference.getObjNumber() || tokens.getGenNr() != reference.getGenNumber()) {",
                    "1145": "if (fixXref && reference.getObjStreamNumber() == 0) {",
                    "1149": "else {",
                    "1157": "else {",
                    "1169": "if (!correctStreamLength)",
                    "1176": "if (pdfNumber != null) {",
                    "1178": "if (streamLength + start > fileLength - 20) {",
                    "1181": "else {",
                    "1184": "if (!line.startsWith(endstream2) && !line.startsWith(endstream3) && !line.startsWith(endstream4) && !line.startsWith(endstream1)) {",
                    "1191": "else {",
                    "1197": "if (calc) {",
                    "1201": "while (true) {",
                    "1204": "if (!tokens.readLineSegment(line, false))",
                    "1206": "if (line.startsWith(endstream)) {",
                    "1210": "else if (line.startsWith(endobj)) {",
                    "1214": "if (index >= 0)",
                    "1223": "if (tokens.read() == 13) {",
                    "1228": "if (tokens.read() == 10) {",
                    "1239": "if (readAsDirect) {",
                    "1242": "else {",
                    "1251": "if (buffer == null) throw new IllegalArgumentException(\"Passed byte buffer can not be null.\");",
                    "1257": "if (offset >= buffer.size()) return -1;",
                    "1263": "if (buffer == null) throw new IllegalStateException(\"Already closed\");",
                    "1264": "if (offset >= buffer.size())",
                    "1266": "if (offset + len > buffer.size())"
                }
            }
        }
    },
    "CVE-2016-1000338": {
        "source": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {}
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "114": "private BigInteger[] derDecode( byte[]  encoding) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "74": "try {",
                    "76": "return derEncode(sig[0], sig[1]);",
                    "79": "catch (Exception e) {",
                    "80": "throw new SignatureException(e.toString());",
                    "89": "try {",
                    "93": "catch (Exception e) {",
                    "94": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "97": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "101": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "105": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "109": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "114": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "119": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "71": "try {",
                    "73": "return derEncode(sig[0], sig[1]);",
                    "76": "catch (Exception e) {",
                    "77": "throw new SignatureException(e.toString());",
                    "86": "try {",
                    "90": "catch (Exception e) {",
                    "91": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "94": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "98": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "102": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "106": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "111": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "117": "throw new IOException(\"malformed signature\");",
                    "120": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                }
            }
        },
        "undefined": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "55": "if (random != null){"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "52": "if (random != null){",
                    "116": "if (s.size() != 2){"
                }
            }
        }
    },
    "CVE-2019-17359": {
        "source": {
            "old": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {},
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "12": "public int read(byte[] b, int off, int len) throws IOException {"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {},
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "12": "public int read(byte[] b, int off, int len) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "33": "return totalRead;",
                    "42": "return totalRead < 1 ? -1 : totalRead;",
                    "55": "return -1;",
                    "60": "return -1;",
                    "70": "return b;",
                    "76": "return -1;"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "33": "return totalRead;",
                    "42": "return totalRead < 1 ? -1 : totalRead;",
                    "55": "return -1;",
                    "60": "return -1;",
                    "70": "return b;",
                    "76": "return -1;"
                },
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "33": "return totalRead;",
                    "42": "return totalRead < 1 ? -1 : totalRead;",
                    "55": "return -1;",
                    "60": "return -1;",
                    "70": "return b;",
                    "76": "return -1;"
                },
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "33": "return totalRead;",
                    "42": "return totalRead < 1 ? -1 : totalRead;",
                    "55": "return -1;",
                    "60": "return -1;",
                    "70": "return b;",
                    "76": "return -1;"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "24": "throw new IOException(\"unknown object encountered: \" + asn1Obj.getClass());",
                    "38": "return totalRead;",
                    "47": "return totalRead < 1 ? -1 : totalRead;",
                    "60": "return -1;",
                    "65": "return -1;",
                    "75": "return b;",
                    "81": "return -1;"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "24": "throw new IOException(\"unknown object encountered: \" + asn1Obj.getClass());",
                    "38": "return totalRead;",
                    "47": "return totalRead < 1 ? -1 : totalRead;",
                    "60": "return -1;",
                    "65": "return -1;",
                    "75": "return b;",
                    "81": "return -1;"
                },
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "24": "throw new IOException(\"unknown object encountered: \" + asn1Obj.getClass());",
                    "38": "return totalRead;",
                    "47": "return totalRead < 1 ? -1 : totalRead;",
                    "60": "return -1;",
                    "65": "return -1;",
                    "75": "return b;",
                    "81": "return -1;"
                },
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "15": "return -1;",
                    "20": "return -1;",
                    "24": "throw new IOException(\"unknown object encountered: \" + asn1Obj.getClass());",
                    "38": "return totalRead;",
                    "47": "return totalRead < 1 ? -1 : totalRead;",
                    "60": "return -1;",
                    "65": "return -1;",
                    "75": "return b;",
                    "81": "return -1;"
                }
            }
        },
        "undefined": {
            "old": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (s == null){",
                    "28": "for (;;){",
                    "30": "if (numRead >= 0){",
                    "32": "if (totalRead == len){",
                    "38": "else{",
                    "40": "if (aos == null){",
                    "53": "if (_currentStream == null){",
                    "54": "if (!_first){",
                    "59": "if (s == null){",
                    "67": "for (;;){",
                    "69": "if (b >= 0){",
                    "74": "if (s == null){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (s == null){",
                    "28": "for (;;){",
                    "30": "if (numRead >= 0){",
                    "32": "if (totalRead == len){",
                    "38": "else{",
                    "40": "if (aos == null){",
                    "53": "if (_currentStream == null){",
                    "54": "if (!_first){",
                    "59": "if (s == null){",
                    "67": "for (;;){",
                    "69": "if (b >= 0){",
                    "74": "if (s == null){"
                },
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (s == null){",
                    "28": "for (;;){",
                    "30": "if (numRead >= 0){",
                    "32": "if (totalRead == len){",
                    "38": "else{",
                    "40": "if (aos == null){",
                    "53": "if (_currentStream == null){",
                    "54": "if (!_first){",
                    "59": "if (s == null){",
                    "67": "for (;;){",
                    "69": "if (b >= 0){",
                    "74": "if (s == null){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (s == null){",
                    "28": "for (;;){",
                    "30": "if (numRead >= 0){",
                    "32": "if (totalRead == len){",
                    "38": "else{",
                    "40": "if (aos == null){",
                    "53": "if (_currentStream == null){",
                    "54": "if (!_first){",
                    "59": "if (s == null){",
                    "67": "for (;;){",
                    "69": "if (b >= 0){",
                    "74": "if (s == null){"
                }
            },
            "new": {
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (asn1Obj == null){",
                    "23": "if (!(asn1Obj instanceof ASN1OctetStringParser)){",
                    "33": "for (;;){",
                    "35": "if (numRead >= 0){",
                    "37": "if (totalRead == len){",
                    "43": "else{",
                    "45": "if (aos == null){",
                    "58": "if (_currentStream == null){",
                    "59": "if (!_first){",
                    "64": "if (s == null){",
                    "72": "for (;;){",
                    "74": "if (b >= 0){",
                    "79": "if (s == null){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (asn1Obj == null){",
                    "23": "if (!(asn1Obj instanceof ASN1OctetStringParser)){",
                    "33": "for (;;){",
                    "35": "if (numRead >= 0){",
                    "37": "if (totalRead == len){",
                    "43": "else{",
                    "45": "if (aos == null){",
                    "58": "if (_currentStream == null){",
                    "59": "if (!_first){",
                    "64": "if (s == null){",
                    "72": "for (;;){",
                    "74": "if (b >= 0){",
                    "79": "if (s == null){"
                },
                "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (asn1Obj == null){",
                    "23": "if (!(asn1Obj instanceof ASN1OctetStringParser)){",
                    "33": "for (;;){",
                    "35": "if (numRead >= 0){",
                    "37": "if (totalRead == len){",
                    "43": "else{",
                    "45": "if (aos == null){",
                    "58": "if (_currentStream == null){",
                    "59": "if (!_first){",
                    "64": "if (s == null){",
                    "72": "for (;;){",
                    "74": "if (b >= 0){",
                    "79": "if (s == null){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java": {
                    "13": "if (_currentStream == null){",
                    "14": "if (!_first){",
                    "19": "if (asn1Obj == null){",
                    "23": "if (!(asn1Obj instanceof ASN1OctetStringParser)){",
                    "33": "for (;;){",
                    "35": "if (numRead >= 0){",
                    "37": "if (totalRead == len){",
                    "43": "else{",
                    "45": "if (aos == null){",
                    "58": "if (_currentStream == null){",
                    "59": "if (!_first){",
                    "64": "if (s == null){",
                    "72": "for (;;){",
                    "74": "if (b >= 0){",
                    "79": "if (s == null){"
                }
            }
        }
    },
    "CVE-2017-7525": {
        "source": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {}
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {
                    "52": "public JsonDeserializer<Object> createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {
                    "26": "return this;",
                    "30": "throw new IllegalStateException(\"Subtype of BeanDeserializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \" +\"additional deserializer definitions\");",
                    "33": "return new BeanDeserializerFactory(config);",
                    "41": "return custom;",
                    "45": "return buildThrowableDeserializer(ctxt, type, beanDesc);",
                    "52": "return buildBeanDeserializer(ctxt, concreteType, beanDesc);",
                    "60": "return deser;",
                    "64": "return null;",
                    "67": "return buildBeanDeserializer(ctxt, type, beanDesc);",
                    "74": "return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);",
                    "89": "return deser;",
                    "96": "return concrete;",
                    "101": "return null;",
                    "107": "try {",
                    "110": "catch (NoClassDefFoundError error) {",
                    "111": "return new ErrorThrowingDeserializer(error);",
                    "143": "return (JsonDeserializer<Object>) deserializer;",
                    "182": "return (JsonDeserializer<Object>) deserializer;",
                    "188": "return;",
                    "255": "return (JsonDeserializer<Object>) deserializer;",
                    "259": "return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());",
                    "412": "return result;",
                    "475": "return new SettableAnyProperty(prop, mutator, type, deser, typeDeser);",
                    "514": "return prop;",
                    "532": "return prop;",
                    "538": "throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
                    "542": "throw new IllegalArgumentException(\"Can not deserialize Proxy class \"+type.getName()+\" as a Bean\");",
                    "547": "throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
                    "550": "return true;",
                    "556": "return status.booleanValue();",
                    "574": "return status.booleanValue();"
                }
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {
                    "41": "return this;",
                    "45": "throw new IllegalStateException(\"Subtype of BeanDeserializerFactory (\"+getClass().getName() +\") has not properly overridden method 'withAdditionalDeserializers': can not instantiate subtype with \" +\"additional deserializer definitions\");",
                    "48": "return new BeanDeserializerFactory(config);",
                    "56": "return custom;",
                    "60": "return buildThrowableDeserializer(ctxt, type, beanDesc);",
                    "67": "return buildBeanDeserializer(ctxt, concreteType, beanDesc);",
                    "75": "return deser;",
                    "79": "return null;",
                    "83": "return buildBeanDeserializer(ctxt, type, beanDesc);",
                    "90": "return buildBuilderBasedDeserializer(ctxt, valueType, builderDesc);",
                    "105": "return deser;",
                    "112": "return concrete;",
                    "117": "return null;",
                    "123": "try {",
                    "126": "catch (NoClassDefFoundError error) {",
                    "127": "return new ErrorThrowingDeserializer(error);",
                    "159": "return (JsonDeserializer<Object>) deserializer;",
                    "198": "return (JsonDeserializer<Object>) deserializer;",
                    "204": "return;",
                    "271": "return (JsonDeserializer<Object>) deserializer;",
                    "275": "return new BeanDeserializerBuilder(beanDesc, ctxt.getConfig());",
                    "428": "return result;",
                    "491": "return new SettableAnyProperty(prop, mutator, type, deser, typeDeser);",
                    "530": "return prop;",
                    "548": "return prop;",
                    "554": "throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
                    "558": "throw new IllegalArgumentException(\"Can not deserialize Proxy class \"+type.getName()+\" as a Bean\");",
                    "563": "throw new IllegalArgumentException(\"Can not deserialize Class \"+type.getName()+\" (of type \"+typeStr+\") as a Bean\");",
                    "566": "return true;",
                    "572": "return status.booleanValue();",
                    "590": "return status.booleanValue();"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {
                    "25": "if (_factoryConfig == config) {",
                    "29": "if (getClass() != BeanDeserializerFactory.class) {",
                    "40": "if (custom != null) {",
                    "44": "if (type.isThrowable()) {",
                    "48": "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {",
                    "50": "if (concreteType != null) {",
                    "59": "if (deser != null) {",
                    "63": "if (!isPotentialBeanType(type.getRawClass())) {",
                    "79": "if (deser != null) {",
                    "80": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "81": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "93": "for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {",
                    "95": "if (concrete != null) {",
                    "121": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "122": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "129": "if (type.isAbstract() && !valueInstantiator.canInstantiate()) {",
                    "132": "else {",
                    "136": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "137": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "159": "if (buildMethod != null) {",
                    "160": "if (config.canOverrideAccessModifiers()) {",
                    "167": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "168": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "175": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "176": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "187": "if (objectIdInfo == null) {",
                    "196": "if (implClass == ObjectIdGenerators.PropertyGenerator.class) {",
                    "199": "if (idProp == null) {",
                    "200": "throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": can not find property with name '\"+propName+\"'\");",
                    "206": "else {",
                    "224": "if (am != null) {",
                    "227": "if (prop != null) {",
                    "236": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "237": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "244": "if (deserializer instanceof BeanDeserializer) {",
                    "248": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "249": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "268": "if (ignorals != null) {",
                    "272": "for (String propName : ignored) {",
                    "277": "else {",
                    "283": "if (anySetterMethod != null) {",
                    "287": "else {",
                    "289": "if(anySetterField != null) {",
                    "295": "if (anySetterMethod == null && anySetterField == null) {",
                    "297": "if (ignored2 != null) {",
                    "298": "for (String propName : ignored2) {",
                    "308": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "309": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "315": "for (BeanPropertyDefinition propDef : propDefs) {",
                    "317": "if (propDef.hasSetter()) {",
                    "321": "else if (propDef.hasField()) {",
                    "325": "else if (useGettersAsSetters && propDef.hasGetter()) {",
                    "328": "if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {",
                    "334": "if (hasCreatorProps && propDef.hasConstructorParameter()) {",
                    "337": "if (creatorProps != null) {",
                    "338": "for (SettableBeanProperty cp : creatorProps) {",
                    "339": "if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {",
                    "348": "if (cprop == null) {",
                    "350": "for (SettableBeanProperty cp : creatorProps) {",
                    "358": "if (prop != null) {",
                    "367": "if (prop != null) {",
                    "369": "if (views == null) {",
                    "370": "if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {",
                    "387": "for (BeanPropertyDefinition property : propDefsIn) {",
                    "389": "if (ignored.contains(name)) {",
                    "393": "if (!property.hasConstructorParameter()) {",
                    "395": "if (property.hasSetter()) {",
                    "398": "else if (property.hasField()) {",
                    "402": "if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {",
                    "417": "if (refs != null) {",
                    "418": "for (Map.Entry<String, AnnotatedMember> en : refs.entrySet()) {",
                    "422": "if (m instanceof AnnotatedMethod) {",
                    "425": "else {",
                    "427": "if (m instanceof AnnotatedParameter) {",
                    "443": "if (raw != null) {",
                    "444": "for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) {",
                    "456": "if (mutator instanceof AnnotatedMethod) {",
                    "459": "else if (mutator instanceof AnnotatedField) {",
                    "466": "if (deser == null) {",
                    "470": "if (deser != null) {",
                    "480": "if (mutator == null) {",
                    "487": "if (mutator instanceof AnnotatedMethod) {",
                    "490": "else {",
                    "495": "if (deser == null) {",
                    "499": "if (deser != null) {",
                    "505": "if (ref != null && ref.isManagedReference()) {",
                    "510": "if (objectIdInfo != null){",
                    "523": "if (deser == null) {",
                    "527": "if (deser != null) {",
                    "537": "if (typeStr != null) {",
                    "541": "if (ClassUtil.isProxyType(type)) {",
                    "546": "if (typeStr != null) {",
                    "555": "if (status != null) {",
                    "560": "if (override != null) {",
                    "564": "if (status == null) {",
                    "567": "if (status == null) {"
                }
            },
            "new": {
                "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java": {
                    "40": "if (_factoryConfig == config) {",
                    "44": "if (getClass() != BeanDeserializerFactory.class) {",
                    "55": "if (custom != null) {",
                    "59": "if (type.isThrowable()) {",
                    "63": "if (type.isAbstract() && !type.isPrimitive() && !type.isEnumType()) {",
                    "65": "if (concreteType != null) {",
                    "74": "if (deser != null) {",
                    "78": "if (!isPotentialBeanType(type.getRawClass())) {",
                    "95": "if (deser != null) {",
                    "96": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "97": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "109": "for (AbstractTypeResolver r : _factoryConfig.abstractTypeResolvers()) {",
                    "111": "if (concrete != null) {",
                    "137": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "138": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "145": "if (type.isAbstract() && !valueInstantiator.canInstantiate()) {",
                    "148": "else {",
                    "152": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "153": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "175": "if (buildMethod != null) {",
                    "176": "if (config.canOverrideAccessModifiers()) {",
                    "183": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "184": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "191": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "192": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "203": "if (objectIdInfo == null) {",
                    "212": "if (implClass == ObjectIdGenerators.PropertyGenerator.class) {",
                    "215": "if (idProp == null) {",
                    "216": "throw new IllegalArgumentException(\"Invalid Object Id definition for \" +beanDesc.getBeanClass().getName()+\": can not find property with name '\"+propName+\"'\");",
                    "222": "else {",
                    "240": "if (am != null) {",
                    "243": "if (prop != null) {",
                    "252": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "253": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "260": "if (deserializer instanceof BeanDeserializer) {",
                    "264": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "265": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "284": "if (ignorals != null) {",
                    "288": "for (String propName : ignored) {",
                    "293": "else {",
                    "299": "if (anySetterMethod != null) {",
                    "303": "else {",
                    "305": "if(anySetterField != null) {",
                    "311": "if (anySetterMethod == null && anySetterField == null) {",
                    "313": "if (ignored2 != null) {",
                    "314": "for (String propName : ignored2) {",
                    "324": "if (_factoryConfig.hasDeserializerModifiers()) {",
                    "325": "for (BeanDeserializerModifier mod : _factoryConfig.deserializerModifiers()) {",
                    "331": "for (BeanPropertyDefinition propDef : propDefs) {",
                    "333": "if (propDef.hasSetter()) {",
                    "337": "else if (propDef.hasField()) {",
                    "341": "else if (useGettersAsSetters && propDef.hasGetter()) {",
                    "344": "if (Collection.class.isAssignableFrom(rawPropertyType) || Map.class.isAssignableFrom(rawPropertyType)) {",
                    "350": "if (hasCreatorProps && propDef.hasConstructorParameter()) {",
                    "353": "if (creatorProps != null) {",
                    "354": "for (SettableBeanProperty cp : creatorProps) {",
                    "355": "if (name.equals(cp.getName()) && (cp instanceof CreatorProperty)) {",
                    "364": "if (cprop == null) {",
                    "366": "for (SettableBeanProperty cp : creatorProps) {",
                    "374": "if (prop != null) {",
                    "383": "if (prop != null) {",
                    "385": "if (views == null) {",
                    "386": "if (!ctxt.isEnabled(MapperFeature.DEFAULT_VIEW_INCLUSION)) {",
                    "403": "for (BeanPropertyDefinition property : propDefsIn) {",
                    "405": "if (ignored.contains(name)) {",
                    "409": "if (!property.hasConstructorParameter()) {",
                    "411": "if (property.hasSetter()) {",
                    "414": "else if (property.hasField()) {",
                    "418": "if ((rawPropertyType != null) && isIgnorableType(ctxt.getConfig(), beanDesc, rawPropertyType, ignoredTypes)) {",
                    "433": "if (refs != null) {",
                    "434": "for (Map.Entry<String, AnnotatedMember> en : refs.entrySet()) {",
                    "438": "if (m instanceof AnnotatedMethod) {",
                    "441": "else {",
                    "443": "if (m instanceof AnnotatedParameter) {",
                    "459": "if (raw != null) {",
                    "460": "for (Map.Entry<Object, AnnotatedMember> entry : raw.entrySet()) {",
                    "472": "if (mutator instanceof AnnotatedMethod) {",
                    "475": "else if (mutator instanceof AnnotatedField) {",
                    "482": "if (deser == null) {",
                    "486": "if (deser != null) {",
                    "496": "if (mutator == null) {",
                    "503": "if (mutator instanceof AnnotatedMethod) {",
                    "506": "else {",
                    "511": "if (deser == null) {",
                    "515": "if (deser != null) {",
                    "521": "if (ref != null && ref.isManagedReference()) {",
                    "526": "if (objectIdInfo != null){",
                    "539": "if (deser == null) {",
                    "543": "if (deser != null) {",
                    "553": "if (typeStr != null) {",
                    "557": "if (ClassUtil.isProxyType(type)) {",
                    "562": "if (typeStr != null) {",
                    "571": "if (status != null) {",
                    "576": "if (override != null) {",
                    "580": "if (status == null) {",
                    "583": "if (status == null) {",
                    "595": "if (_cfgIllegalClassNames.contains(full)) {",
                    "596": "ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);"
                }
            }
        }
    },
    "CVE-2018-1274": {
        "source": {
            "old": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {}
            },
            "new": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {
                    "195": "private static PropertyPath create(String source, TypeInformation<?> type, String addTail, List<PropertyPath> base) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {
                    "17": "import org.springframework.util.Assert;",
                    "38": "Assert.hasText(name, \"Name must not be null or empty!\");",
                    "39": "Assert.notNull(owningType, \"Owning type must not be null!\");",
                    "40": "Assert.notNull(base, \"Perviously found properties must not be null!\");",
                    "44": "throw new PropertyReferenceException(propertyName, owningType, base);",
                    "55": "return owningType;",
                    "59": "return name;",
                    "68": "return result;",
                    "72": "return getLeafProperty().getType();",
                    "76": "return this.actualTypeInformation.getType();",
                    "81": "return next;",
                    "85": "return next != null;",
                    "90": "return getSegment() + \".\" + requiredNext().toDotPath();",
                    "93": "return getSegment();",
                    "97": "return isCollection;",
                    "101": "Assert.hasText(path, \"Path must not be null or empty!\");",
                    "103": "return PropertyPath.from(lookup, owningType);",
                    "107": "return new Iterator<PropertyPath>() {",
                    "111": "return current != null;",
                    "118": "return null;",
                    "122": "return result;",
                    "126": "throw new UnsupportedOperationException();",
                    "135": "throw new IllegalStateException( \"No next path available! Clients should call hasNext() before invoking this method!\");",
                    "138": "return result;",
                    "142": "return from(source, ClassTypeInformation.from(type));",
                    "146": "Assert.hasText(source, \"Source must not be null or empty!\");",
                    "147": "Assert.notNull(type, \"TypeInformation must not be null or empty!\");",
                    "148": "return CACHE.computeIfAbsent(Key.of(type, source), it -> {",
                    "170": "throw new IllegalStateException( String.format(\"Expected parsing to yield a PropertyPath from %s but got null!\", source));",
                    "173": "return result;",
                    "180": "return source.matches(\"^\\\\\\\\Q.*\\\\\\\\E$\");",
                    "187": "return propertyPath;",
                    "191": "return create(source, type, \"\", base);",
                    "197": "try {",
                    "209": "return current;",
                    "211": "catch (PropertyReferenceException e) {",
                    "213": "throw e;",
                    "225": "try {",
                    "226": "return create(head, type, tail + addTail, base);",
                    "228": "catch (PropertyReferenceException e) {",
                    "229": "throw e.hasDeeperResolutionDepthThan(exception) ? e : exception;",
                    "234": "throw exception;",
                    "239": "return String.format(\"%s.%s\", owningType.getType().getSimpleName(), toDotPath());"
                }
            },
            "new": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {
                    "17": "import org.springframework.util.Assert;",
                    "39": "Assert.hasText(name, \"Name must not be null or empty!\");",
                    "40": "Assert.notNull(owningType, \"Owning type must not be null!\");",
                    "41": "Assert.notNull(base, \"Perviously found properties must not be null!\");",
                    "45": "throw new PropertyReferenceException(propertyName, owningType, base);",
                    "56": "return owningType;",
                    "60": "return name;",
                    "69": "return result;",
                    "73": "return getLeafProperty().getType();",
                    "77": "return this.actualTypeInformation.getType();",
                    "82": "return next;",
                    "86": "return next != null;",
                    "91": "return getSegment() + \".\" + requiredNext().toDotPath();",
                    "94": "return getSegment();",
                    "98": "return isCollection;",
                    "102": "Assert.hasText(path, \"Path must not be null or empty!\");",
                    "104": "return PropertyPath.from(lookup, owningType);",
                    "108": "return new Iterator<PropertyPath>() {",
                    "112": "return current != null;",
                    "119": "return null;",
                    "123": "return result;",
                    "127": "throw new UnsupportedOperationException();",
                    "136": "throw new IllegalStateException( \"No next path available! Clients should call hasNext() before invoking this method!\");",
                    "139": "return result;",
                    "143": "return from(source, ClassTypeInformation.from(type));",
                    "147": "Assert.hasText(source, \"Source must not be null or empty!\");",
                    "148": "Assert.notNull(type, \"TypeInformation must not be null or empty!\");",
                    "149": "return CACHE.computeIfAbsent(Key.of(type, source), it -> {",
                    "171": "throw new IllegalStateException( String.format(\"Expected parsing to yield a PropertyPath from %s but got null!\", source));",
                    "174": "return result;",
                    "181": "return source.matches(\"^\\\\\\\\Q.*\\\\\\\\E$\");",
                    "188": "return propertyPath;",
                    "192": "return create(source, type, \"\", base);",
                    "197": "throw new IllegalArgumentException(PARSE_DEPTH_EXCEEDED);",
                    "202": "try {",
                    "214": "return current;",
                    "216": "catch (PropertyReferenceException e) {",
                    "218": "throw e;",
                    "230": "try {",
                    "231": "return create(head, type, tail + addTail, base);",
                    "233": "catch (PropertyReferenceException e) {",
                    "234": "throw e.hasDeeperResolutionDepthThan(exception) ? e : exception;",
                    "239": "throw exception;",
                    "244": "return String.format(\"%s.%s\", owningType.getType().getSimpleName(), toDotPath());"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {
                    "43": "if (propertyType == null) {",
                    "64": "while (result.hasNext()) {",
                    "89": "if (hasNext()) {",
                    "117": "if (result == null) {",
                    "134": "if (result == null) {",
                    "151": "while (matcher.find()) {",
                    "158": "while (parts.hasNext()) {",
                    "159": "if (result == null) {",
                    "163": "else {",
                    "169": "if (result == null) {",
                    "199": "if (!base.isEmpty()) {",
                    "205": "if (StringUtils.hasText(addTail)) {",
                    "212": "if (current != null) {",
                    "221": "if (matcher.find() && matcher.start() != 0) {"
                }
            },
            "new": {
                "src/main/java/org/springframework/data/mapping/PropertyPath.java": {
                    "22": "private static final String PARSE_DEPTH_EXCEEDED = \"Trying to parse a path with depth greater than 1000! This has been disabled for security reasons to prevent parsing overflows.\";",
                    "44": "if (propertyType == null) {",
                    "65": "while (result.hasNext()) {",
                    "90": "if (hasNext()) {",
                    "118": "if (result == null) {",
                    "135": "if (result == null) {",
                    "152": "while (matcher.find()) {",
                    "159": "while (parts.hasNext()) {",
                    "160": "if (result == null) {",
                    "164": "else {",
                    "170": "if (result == null) {",
                    "196": "if (base.size() > 1000) {",
                    "204": "if (!base.isEmpty()) {",
                    "210": "if (StringUtils.hasText(addTail)) {",
                    "217": "if (current != null) {",
                    "226": "if (matcher.find() && matcher.start() != 0) {"
                }
            }
        }
    },
    "CVE-2019-20445": {
        "source": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "403": "private State readHeaders(ByteBuf buffer) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "403": "private State readHeaders(ByteBuf buffer) {"
                }
            }
        },
        "sink": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "64": "return;",
                    "70": "case READ_INITIAL: try {",
                    "73": "return;",
                    "79": "return;",
                    "85": "catch (Exception e) {",
                    "87": "return;",
                    "90": "case READ_HEADER: try {",
                    "93": "return;",
                    "102": "return;",
                    "105": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "109": "return;",
                    "115": "return;",
                    "118": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "124": "return;",
                    "128": "catch (Exception e) {",
                    "130": "return;",
                    "140": "return;",
                    "146": "return;",
                    "164": "return;",
                    "167": "case READ_CHUNK_SIZE: try {",
                    "170": "return;",
                    "177": "return;",
                    "182": "catch (Exception e) {",
                    "184": "return;",
                    "188": "assert chunkSize <= Integer.MAX_VALUE;",
                    "192": "return;",
                    "199": "return;",
                    "218": "return;",
                    "221": "case READ_CHUNK_FOOTER: try {",
                    "224": "return;",
                    "229": "return;",
                    "231": "catch (Exception e) {",
                    "233": "return;",
                    "266": "return;",
                    "272": "return;",
                    "314": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "319": "return true;",
                    "324": "return false;",
                    "329": "return false;",
                    "333": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "353": "return;",
                    "372": "return ret;",
                    "382": "return chunk;",
                    "400": "return skiped;",
                    "408": "return null;",
                    "429": "return null;",
                    "457": "return nextState;",
                    "465": "return contentLength;",
                    "471": "return null;",
                    "476": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "510": "return null;",
                    "516": "return trailer;",
                    "533": "return Integer.parseInt(hex, 16);",
                    "549": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "569": "throw new IllegalArgumentException(\"No colon found\");",
                    "595": "return result;",
                    "600": "return sb.length();",
                    "606": "return result;",
                    "611": "return sb.length();",
                    "617": "return result + 1;",
                    "622": "return 0;",
                    "640": "return null;",
                    "644": "return seq;",
                    "655": "return true;",
                    "659": "return false;",
                    "663": "throw newException(maxLength);",
                    "667": "return true;",
                    "671": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "684": "return super.parse(buffer);",
                    "689": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "64": "return;",
                    "70": "case READ_INITIAL: try {",
                    "73": "return;",
                    "79": "return;",
                    "85": "catch (Exception e) {",
                    "87": "return;",
                    "90": "case READ_HEADER: try {",
                    "93": "return;",
                    "102": "return;",
                    "105": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "109": "return;",
                    "115": "return;",
                    "118": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "124": "return;",
                    "128": "catch (Exception e) {",
                    "130": "return;",
                    "140": "return;",
                    "146": "return;",
                    "164": "return;",
                    "167": "case READ_CHUNK_SIZE: try {",
                    "170": "return;",
                    "177": "return;",
                    "182": "catch (Exception e) {",
                    "184": "return;",
                    "188": "assert chunkSize <= Integer.MAX_VALUE;",
                    "192": "return;",
                    "199": "return;",
                    "218": "return;",
                    "221": "case READ_CHUNK_FOOTER: try {",
                    "224": "return;",
                    "229": "return;",
                    "231": "catch (Exception e) {",
                    "233": "return;",
                    "266": "return;",
                    "272": "return;",
                    "314": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "319": "return true;",
                    "324": "return false;",
                    "329": "return false;",
                    "333": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "353": "return;",
                    "372": "return ret;",
                    "382": "return chunk;",
                    "400": "return skiped;",
                    "408": "return null;",
                    "429": "return null;",
                    "446": "throw new IllegalArgumentException(\"Multiple Content-Length headers found\");",
                    "454": "return State.SKIP_CONTROL_CHARS;",
                    "458": "throw new IllegalArgumentException( \"Both 'Content-Length: \" + contentLength + \"' and 'Transfer-Encoding: chunked' found\");",
                    "461": "return State.READ_CHUNK_SIZE;",
                    "464": "return State.READ_FIXED_LENGTH_CONTENT;",
                    "467": "return State.READ_VARIABLE_LENGTH_CONTENT;",
                    "477": "return contentLength;",
                    "483": "return null;",
                    "488": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "522": "return null;",
                    "528": "return trailer;",
                    "545": "return Integer.parseInt(hex, 16);",
                    "561": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "581": "throw new IllegalArgumentException(\"No colon found\");",
                    "607": "return result;",
                    "612": "return sb.length();",
                    "618": "return result;",
                    "623": "return sb.length();",
                    "629": "return result + 1;",
                    "634": "return 0;",
                    "652": "return null;",
                    "656": "return seq;",
                    "667": "return true;",
                    "671": "return false;",
                    "675": "throw newException(maxLength);",
                    "679": "return true;",
                    "683": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "696": "return super.parse(buffer);",
                    "701": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            }
        },
        "undefined": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "57": "if (resetRequested) {",
                    "61": "switch (currentState) {",
                    "63": "if (!skipControlCharacters(buffer)) {",
                    "72": "if (line == null) {",
                    "77": "if (initialLine.length < 3) {",
                    "92": "if (nextState == null) {",
                    "97": "switch (nextState) {",
                    "104": "if (!chunkedSupported) {",
                    "111": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "120": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "135": "if (toRead > 0) {",
                    "145": "if (readLimit == 0) {",
                    "150": "if (toRead > chunkSize) {",
                    "156": "if (chunkSize == 0) {",
                    "160": "else {",
                    "169": "if (line == null) {",
                    "175": "if (chunkSize == 0) {",
                    "191": "if (toRead == 0) {",
                    "198": "if (chunkSize != 0) {",
                    "208": "while (wIdx > rIdx) {",
                    "210": "if (next == HttpConstants.LF) {",
                    "223": "if (trailer == null) {",
                    "243": "if (readableBytes > 0) {",
                    "257": "if (resetRequested) {",
                    "261": "if (message != null) {",
                    "263": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "269": "if (currentState == State.READ_HEADER) {",
                    "276": "if (isDecodingRequest() || chunked) {",
                    "279": "else {",
                    "283": "if (!prematureClosure) {",
                    "294": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "295": "switch (currentState) {",
                    "310": "if (msg instanceof HttpResponse) {",
                    "313": "if (code >= 100 && code < 200) {",
                    "317": "switch (code) {",
                    "328": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "349": "if (!isDecodingRequest()) {",
                    "351": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "365": "if (message == null) {",
                    "389": "while (wIdx > rIdx) {",
                    "391": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "407": "if (line == null) {",
                    "411": "if (line.length() > 0) {",
                    "414": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "419": "else {",
                    "420": "if (name != null) {",
                    "428": "if (line == null) {",
                    "433": "while (line.length() > 0);",
                    "436": "if (name != null) {",
                    "443": "if (isContentAlwaysEmpty(message)) {",
                    "447": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "450": "else if (contentLength() >= 0) {",
                    "453": "else {",
                    "461": "if (contentLength == Long.MIN_VALUE) {",
                    "470": "if (line == null) {",
                    "475": "if (line.length() == 0 && trailer == null) {",
                    "480": "if (trailer == null) {",
                    "484": "while (line.length() > 0) {",
                    "486": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "488": "if (!current.isEmpty()) {",
                    "496": "else {",
                    "499": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "509": "if (line == null) {",
                    "524": "for (int i = 0; i < hex.length(); i ++) {",
                    "526": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "560": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "562": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "568": "if (nameEnd == length) {",
                    "572": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "573": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "582": "if (valueStart == length) {",
                    "585": "else {",
                    "593": "for (int result = offset; result < sb.length(); ++result) {",
                    "594": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "604": "for (int result = offset; result < sb.length(); ++result) {",
                    "605": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "615": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "616": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "638": "if (i == -1) {",
                    "654": "if (nextByte == HttpConstants.CR) {",
                    "658": "if (nextByte == HttpConstants.LF) {",
                    "662": "if (++ size > maxLength) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "57": "if (resetRequested) {",
                    "61": "switch (currentState) {",
                    "63": "if (!skipControlCharacters(buffer)) {",
                    "72": "if (line == null) {",
                    "77": "if (initialLine.length < 3) {",
                    "92": "if (nextState == null) {",
                    "97": "switch (nextState) {",
                    "104": "if (!chunkedSupported) {",
                    "111": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "120": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "135": "if (toRead > 0) {",
                    "145": "if (readLimit == 0) {",
                    "150": "if (toRead > chunkSize) {",
                    "156": "if (chunkSize == 0) {",
                    "160": "else {",
                    "169": "if (line == null) {",
                    "175": "if (chunkSize == 0) {",
                    "191": "if (toRead == 0) {",
                    "198": "if (chunkSize != 0) {",
                    "208": "while (wIdx > rIdx) {",
                    "210": "if (next == HttpConstants.LF) {",
                    "223": "if (trailer == null) {",
                    "243": "if (readableBytes > 0) {",
                    "257": "if (resetRequested) {",
                    "261": "if (message != null) {",
                    "263": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "269": "if (currentState == State.READ_HEADER) {",
                    "276": "if (isDecodingRequest() || chunked) {",
                    "279": "else {",
                    "283": "if (!prematureClosure) {",
                    "294": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "295": "switch (currentState) {",
                    "310": "if (msg instanceof HttpResponse) {",
                    "313": "if (code >= 100 && code < 200) {",
                    "317": "switch (code) {",
                    "328": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "349": "if (!isDecodingRequest()) {",
                    "351": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "365": "if (message == null) {",
                    "389": "while (wIdx > rIdx) {",
                    "391": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "407": "if (line == null) {",
                    "411": "if (line.length() > 0) {",
                    "414": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "419": "else {",
                    "420": "if (name != null) {",
                    "428": "if (line == null) {",
                    "433": "while (line.length() > 0);",
                    "436": "if (name != null) {",
                    "444": "if (contentLengthValuesCount > 0) {",
                    "445": "if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {",
                    "452": "if (isContentAlwaysEmpty(message)) {",
                    "456": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "457": "if (contentLengthValuesCount > 0 && message.protocolVersion() == HttpVersion.HTTP_1_1) {",
                    "463": "else if (contentLength() >= 0) {",
                    "466": "else {",
                    "473": "if (contentLength == Long.MIN_VALUE) {",
                    "482": "if (line == null) {",
                    "487": "if (line.length() == 0 && trailer == null) {",
                    "492": "if (trailer == null) {",
                    "496": "while (line.length() > 0) {",
                    "498": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "500": "if (!current.isEmpty()) {",
                    "508": "else {",
                    "511": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "521": "if (line == null) {",
                    "536": "for (int i = 0; i < hex.length(); i ++) {",
                    "538": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "572": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "574": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "580": "if (nameEnd == length) {",
                    "584": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "585": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "594": "if (valueStart == length) {",
                    "597": "else {",
                    "605": "for (int result = offset; result < sb.length(); ++result) {",
                    "606": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "616": "for (int result = offset; result < sb.length(); ++result) {",
                    "617": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "627": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "628": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "650": "if (i == -1) {",
                    "666": "if (nextByte == HttpConstants.CR) {",
                    "670": "if (nextByte == HttpConstants.LF) {",
                    "674": "if (++ size > maxLength) {"
                }
            }
        }
    },
    "CVE-2022-29599": {
        "source": {
            "old": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {
                    "70": "private static String unifyQuotes( String path ) {"
                },
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "9": "public BourneShell() {",
                    "18": "public String getExecutable() {",
                    "70": "private static String unifyQuotes( String path ) {"
                }
            },
            "new": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {},
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "6": "public BourneShell() {",
                    "16": "public String getExecutable() {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {
                    "20": "return super.getExecutable();",
                    "23": "return unifyQuotes( super.getExecutable() );",
                    "34": "return shellArgs;",
                    "50": "return shellArgs;",
                    "55": "return null;",
                    "63": "return sb.toString();",
                    "67": "return BASH_QUOTING_TRIGGER_CHARS;",
                    "72": "return null;",
                    "76": "return StringUtils.escape( path );",
                    "79": "return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );"
                },
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "20": "return super.getExecutable();",
                    "23": "return unifyQuotes( super.getExecutable() );",
                    "34": "return shellArgs;",
                    "50": "return shellArgs;",
                    "55": "return null;",
                    "63": "return sb.toString();",
                    "67": "return BASH_QUOTING_TRIGGER_CHARS;",
                    "72": "return null;",
                    "76": "return StringUtils.escape( path );",
                    "79": "return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );"
                }
            },
            "new": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {
                    "18": "return super.getExecutable();",
                    "21": "return quoteOneItem( super.getExecutable(), true );",
                    "32": "return shellArgs;",
                    "48": "return shellArgs;",
                    "53": "return null;",
                    "61": "return sb.toString();",
                    "66": "return null;",
                    "73": "return sb.toString();"
                },
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "18": "return super.getExecutable();",
                    "21": "return quoteOneItem( super.getExecutable(), true );",
                    "32": "return shellArgs;",
                    "48": "return shellArgs;",
                    "53": "return null;",
                    "61": "return sb.toString();",
                    "66": "return null;",
                    "73": "return sb.toString();"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {
                    "19": "if ( Os.isFamily( Os.FAMILY_WINDOWS ) ){",
                    "29": "if ( ( existingShellArgs != null ) && !existingShellArgs.isEmpty() ){",
                    "39": "if ( shellArgs == null ){",
                    "43": "if ( ( shellArgs.length > 0 ) && !shellArgs[shellArgs.length - 1].equals( \"-c\" ) ){",
                    "54": "if ( getWorkingDirectoryAsString() == null ){",
                    "71": "if ( path == null ){",
                    "75": "if ( path.indexOf( ' ' ) == -1 && path.indexOf( '\\'' ) != -1 && path.indexOf( '\"' ) == -1 ){"
                },
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "19": "if ( Os.isFamily( Os.FAMILY_WINDOWS ) ){",
                    "29": "if ( ( existingShellArgs != null ) && !existingShellArgs.isEmpty() ){",
                    "39": "if ( shellArgs == null ){",
                    "43": "if ( ( shellArgs.length > 0 ) && !shellArgs[shellArgs.length - 1].equals( \"-c\" ) ){",
                    "54": "if ( getWorkingDirectoryAsString() == null ){",
                    "71": "if ( path == null ){",
                    "75": "if ( path.indexOf( ' ' ) == -1 && path.indexOf( '\\'' ) != -1 && path.indexOf( '\"' ) == -1 ){"
                }
            },
            "new": {
                "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java": {
                    "17": "if ( Os.isFamily( Os.FAMILY_WINDOWS ) ){",
                    "27": "if ( ( existingShellArgs != null ) && !existingShellArgs.isEmpty() ){",
                    "37": "if ( shellArgs == null ){",
                    "41": "if ( ( shellArgs.length > 0 ) && !shellArgs[shellArgs.length - 1].equals( \"-c\" ) ){",
                    "52": "if ( getWorkingDirectoryAsString() == null ){",
                    "65": "if ( path == null ){"
                },
                "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java": {
                    "17": "if ( Os.isFamily( Os.FAMILY_WINDOWS ) ){",
                    "27": "if ( ( existingShellArgs != null ) && !existingShellArgs.isEmpty() ){",
                    "37": "if ( shellArgs == null ){",
                    "41": "if ( ( shellArgs.length > 0 ) && !shellArgs[shellArgs.length - 1].equals( \"-c\" ) ){",
                    "52": "if ( getWorkingDirectoryAsString() == null ){",
                    "65": "if ( path == null ){"
                }
            }
        }
    },
    "CVE-2017-7957": {
        "source": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "6": "public class SunLimitedUnsafeReflectionProvider extends PureJavaReflectionProvider {",
                    "7": "protected static final Unsafe unsafe;"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {}
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "6": "public class SunLimitedUnsafeReflectionProvider extends PureJavaReflectionProvider {",
                    "7": "protected static final Unsafe unsafe;"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {
                    "43": "public Object newInstance(final Class<?> type) {"
                }
            }
        },
        "sink": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "12": "try {",
                    "17": "catch (final SecurityException e) {",
                    "20": "catch (final NoSuchFieldException e) {",
                    "23": "catch (final IllegalArgumentException e) {",
                    "26": "catch (final IllegalAccessException e) {",
                    "47": "throw ex;",
                    "51": "try {",
                    "52": "return unsafe.allocateInstance(type);",
                    "54": "catch (final SecurityException e) {",
                    "57": "catch (final InstantiationException e) {",
                    "60": "catch (final IllegalArgumentException e) {",
                    "65": "throw ex;",
                    "74": "return this;"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {
                    "12": "try {",
                    "17": "catch (final SecurityException e) {",
                    "20": "catch (final NoSuchFieldException e) {",
                    "23": "catch (final IllegalArgumentException e) {",
                    "26": "catch (final IllegalAccessException e) {",
                    "47": "throw ex;",
                    "51": "try {",
                    "52": "return unsafe.allocateInstance(type);",
                    "54": "catch (final SecurityException e) {",
                    "57": "catch (final InstantiationException e) {",
                    "60": "catch (final IllegalArgumentException e) {",
                    "65": "throw ex;",
                    "74": "return this;"
                }
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "12": "try {",
                    "17": "catch (final SecurityException e) {",
                    "20": "catch (final NoSuchFieldException e) {",
                    "23": "catch (final IllegalArgumentException e) {",
                    "26": "catch (final IllegalAccessException e) {",
                    "47": "throw ex;",
                    "55": "try {",
                    "56": "return unsafe.allocateInstance(type);",
                    "58": "catch (final SecurityException e) {",
                    "61": "catch (final InstantiationException e) {",
                    "64": "catch (final IllegalArgumentException e) {",
                    "71": "throw ex;",
                    "80": "return this;"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {
                    "12": "try {",
                    "17": "catch (final SecurityException e) {",
                    "20": "catch (final NoSuchFieldException e) {",
                    "23": "catch (final IllegalArgumentException e) {",
                    "26": "catch (final IllegalAccessException e) {",
                    "47": "throw ex;",
                    "55": "try {",
                    "56": "return unsafe.allocateInstance(type);",
                    "58": "catch (final SecurityException e) {",
                    "61": "catch (final InstantiationException e) {",
                    "64": "catch (final IllegalArgumentException e) {",
                    "71": "throw ex;",
                    "80": "return this;"
                }
            }
        },
        "undefined": {
            "old": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "44": "if (exception != null) {"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {
                    "44": "if (exception != null) {"
                }
            },
            "new": {
                "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java": {
                    "44": "if (exception != null) {",
                    "51": "if (type == void.class || type == Void.class) {",
                    "54": "else {"
                },
                "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java": {
                    "44": "if (exception != null) {",
                    "51": "if (type == void.class || type == Void.class) {",
                    "54": "else {"
                }
            }
        }
    },
    "CVE-2022-25845": {
        "source": {
            "old": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "1033": "public Class<?> checkAutoType(String typeName, Class<?> expectClass, int features) {"
                }
            },
            "new": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "1033": "public Class<?> checkAutoType(String typeName, Class<?> expectClass, int features) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "87": "return global;",
                    "142": "try {",
                    "151": "catch (ExceptionInInitializerError error) {",
                    "153": "catch (AccessControlException error) {",
                    "155": "catch (NoClassDefFoundError error) {",
                    "175": "return null;",
                    "251": "return property.split(\",\");",
                    "254": "return null;",
                    "282": "return;",
                    "294": "return;",
                    "306": "return;",
                    "317": "return safeMode;",
                    "325": "return autoTypeSupport;",
                    "333": "return asmEnable;",
                    "341": "return deserializers;",
                    "345": "return deserializers;",
                    "351": "return deserializer;",
                    "355": "return getDeserializer((Class<?>) type, type);",
                    "361": "return getDeserializer((Class<?>) rawType, type);",
                    "364": "return getDeserializer(rawType);",
                    "374": "return getDeserializer(upperBoundType);",
                    "379": "return JavaObjectDeserializer.instance;",
                    "390": "return deserializer;",
                    "399": "return deserializer;",
                    "406": "return getDeserializer(mappingTo, mappingTo);",
                    "418": "return deserializer;",
                    "425": "return deserializer;",
                    "435": "try {",
                    "439": "return deserializer;",
                    "445": "catch (Throwable e) {",
                    "455": "try {",
                    "461": "return deserializer;",
                    "472": "return deserializer;",
                    "480": "catch (Throwable e) {",
                    "487": "try {",
                    "493": "return deserializer;",
                    "501": "catch (Throwable e) {",
                    "508": "try {",
                    "513": "return deserializer;",
                    "519": "catch (ClassNotFoundException e) {",
                    "542": "try {",
                    "551": "catch (Exception ex) {",
                    "559": "return deserializer;",
                    "569": "return deserializer;",
                    "581": "try {",
                    "584": "return deserializer;",
                    "586": "catch (Throwable error) {",
                    "595": "try {",
                    "598": "catch (Exception e) {",
                    "611": "return deserializer;",
                    "642": "return deserializer;",
                    "660": "return jsonCreatorMethod;",
                    "664": "return new EnumDeserializer(clazz);",
                    "669": "return;",
                    "690": "try {",
                    "693": "return (ObjectDeserializer) deseralizer;",
                    "697": "catch (Throwable e) {",
                    "811": "return new JavaBeanDeserializer(this, clazz, type);",
                    "815": "try {",
                    "816": "return asmFactory.createJavaBeanDeserializer(this, beanInfo);",
                    "818": "catch (NoSuchMethodException ex) {",
                    "819": "return new JavaBeanDeserializer(this, clazz, type);",
                    "821": "catch (JSONException asmError) {",
                    "822": "return new JavaBeanDeserializer(this, beanInfo);",
                    "824": "catch (Exception e) {",
                    "825": "throw new JSONException(\"create asm deserializer error, \" + clazz.getName(), e);",
                    "844": "return new ArrayListTypeFieldDeserializer(mapping, clazz, fieldInfo);",
                    "847": "return new DefaultFieldDeserializer(mapping, clazz, fieldInfo);",
                    "870": "return this.deserializers.get(type);",
                    "875": "return null;",
                    "878": "return mixInClasses.get(mixin);",
                    "882": "return getDeserializer(fieldInfo.fieldClass, fieldInfo.fieldType);",
                    "886": "return isPrimitive2(clazz);",
                    "899": "return primitive != null ? primitive : false;",
                    "954": "return field;",
                    "958": "return defaultClassLoader;",
                    "967": "return;",
                    "973": "return;",
                    "977": "return;",
                    "989": "return;",
                    "994": "return;",
                    "1006": "return;",
                    "1011": "return;",
                    "1023": "return type;",
                    "1026": "return checkAutoType(type.getName(), null, JSON.DEFAULT_PARSER_FEATURE);",
                    "1030": "return checkAutoType(typeName, expectClass, JSON.DEFAULT_PARSER_FEATURE);",
                    "1035": "return null;",
                    "1042": "return type;",
                    "1052": "throw new JSONException(\"safeMode not support autoType : \" + typeName);",
                    "1056": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1078": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1082": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1094": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1109": "return clazz;",
                    "1119": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1145": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1148": "return clazz;",
                    "1158": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1164": "return expectClass;",
                    "1168": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1171": "return clazz;",
                    "1180": "try {",
                    "1197": "catch (Exception e) {",
                    "1213": "return clazz;",
                    "1217": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1223": "return clazz;",
                    "1226": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1233": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1240": "return null;",
                    "1243": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1250": "return clazz;",
                    "1259": "return jacksonCompatible;"
                }
            },
            "new": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "87": "return global;",
                    "142": "try {",
                    "151": "catch (ExceptionInInitializerError error) {",
                    "153": "catch (AccessControlException error) {",
                    "155": "catch (NoClassDefFoundError error) {",
                    "175": "return null;",
                    "251": "return property.split(\",\");",
                    "254": "return null;",
                    "282": "return;",
                    "294": "return;",
                    "306": "return;",
                    "317": "return safeMode;",
                    "325": "return autoTypeSupport;",
                    "333": "return asmEnable;",
                    "341": "return deserializers;",
                    "345": "return deserializers;",
                    "351": "return deserializer;",
                    "355": "return getDeserializer((Class<?>) type, type);",
                    "361": "return getDeserializer((Class<?>) rawType, type);",
                    "364": "return getDeserializer(rawType);",
                    "374": "return getDeserializer(upperBoundType);",
                    "379": "return JavaObjectDeserializer.instance;",
                    "390": "return deserializer;",
                    "399": "return deserializer;",
                    "406": "return getDeserializer(mappingTo, mappingTo);",
                    "418": "return deserializer;",
                    "425": "return deserializer;",
                    "435": "try {",
                    "439": "return deserializer;",
                    "445": "catch (Throwable e) {",
                    "455": "try {",
                    "461": "return deserializer;",
                    "472": "return deserializer;",
                    "480": "catch (Throwable e) {",
                    "487": "try {",
                    "493": "return deserializer;",
                    "501": "catch (Throwable e) {",
                    "508": "try {",
                    "513": "return deserializer;",
                    "519": "catch (ClassNotFoundException e) {",
                    "542": "try {",
                    "551": "catch (Exception ex) {",
                    "559": "return deserializer;",
                    "569": "return deserializer;",
                    "581": "try {",
                    "584": "return deserializer;",
                    "586": "catch (Throwable error) {",
                    "595": "try {",
                    "598": "catch (Exception e) {",
                    "611": "return deserializer;",
                    "642": "return deserializer;",
                    "660": "return jsonCreatorMethod;",
                    "664": "return new EnumDeserializer(clazz);",
                    "669": "return;",
                    "690": "try {",
                    "693": "return (ObjectDeserializer) deseralizer;",
                    "697": "catch (Throwable e) {",
                    "811": "return new JavaBeanDeserializer(this, clazz, type);",
                    "815": "try {",
                    "816": "return asmFactory.createJavaBeanDeserializer(this, beanInfo);",
                    "818": "catch (NoSuchMethodException ex) {",
                    "819": "return new JavaBeanDeserializer(this, clazz, type);",
                    "821": "catch (JSONException asmError) {",
                    "822": "return new JavaBeanDeserializer(this, beanInfo);",
                    "824": "catch (Exception e) {",
                    "825": "throw new JSONException(\"create asm deserializer error, \" + clazz.getName(), e);",
                    "844": "return new ArrayListTypeFieldDeserializer(mapping, clazz, fieldInfo);",
                    "847": "return new DefaultFieldDeserializer(mapping, clazz, fieldInfo);",
                    "870": "return this.deserializers.get(type);",
                    "875": "return null;",
                    "878": "return mixInClasses.get(mixin);",
                    "882": "return getDeserializer(fieldInfo.fieldClass, fieldInfo.fieldType);",
                    "886": "return isPrimitive2(clazz);",
                    "899": "return primitive != null ? primitive : false;",
                    "954": "return field;",
                    "958": "return defaultClassLoader;",
                    "967": "return;",
                    "973": "return;",
                    "977": "return;",
                    "989": "return;",
                    "994": "return;",
                    "1006": "return;",
                    "1011": "return;",
                    "1023": "return type;",
                    "1026": "return checkAutoType(type.getName(), null, JSON.DEFAULT_PARSER_FEATURE);",
                    "1030": "return checkAutoType(typeName, expectClass, JSON.DEFAULT_PARSER_FEATURE);",
                    "1035": "return null;",
                    "1042": "return type;",
                    "1052": "throw new JSONException(\"safeMode not support autoType : \" + typeName);",
                    "1058": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1080": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1084": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1096": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1111": "return clazz;",
                    "1121": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1147": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1150": "return clazz;",
                    "1161": "return null;",
                    "1164": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1170": "return expectClass;",
                    "1174": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1177": "return clazz;",
                    "1186": "try {",
                    "1203": "catch (Exception e) {",
                    "1220": "return clazz;",
                    "1224": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1233": "return clazz;",
                    "1236": "throw new JSONException(\"type not match. \" + typeName + \" -> \" + expectClass.getName());",
                    "1243": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1250": "return null;",
                    "1253": "throw new JSONException(\"autoType is not support. \" + typeName);",
                    "1263": "return clazz;",
                    "1272": "return jacksonCompatible;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "76": "if (items == null) {",
                    "115": "for (int i = 0; i < AUTO_TYPE_ACCEPT_LIST.length; i++) {",
                    "141": "if (asmFactory == null && !ASMUtils.IS_ANDROID) {",
                    "143": "if (parentClassLoader == null) {",
                    "146": "else {",
                    "161": "if (asmFactory == null) {",
                    "250": "if (property != null && property.length() > 0) {",
                    "269": "if (\"true\".equals(property)) {",
                    "272": "else if (\"false\".equals(property)) {",
                    "281": "if (items == null){",
                    "285": "for (int i = 0; i < items.length; ++i) {",
                    "293": "if (items == null){",
                    "297": "for (int i = 0; i < items.length; ++i) {",
                    "305": "if (items == null){",
                    "309": "for (int i = 0; i < items.length; ++i) {",
                    "350": "if (deserializer != null) {",
                    "354": "if (type instanceof Class<?>) {",
                    "358": "if (type instanceof ParameterizedType) {",
                    "360": "if (rawType instanceof Class<?>) {",
                    "363": "else {",
                    "369": "if (type instanceof WildcardType) {",
                    "372": "if (upperBounds.length == 1) {",
                    "384": "if (deserializer == null && type instanceof ParameterizedTypeImpl) {",
                    "389": "if (deserializer != null) {",
                    "393": "if (type == null) {",
                    "398": "if (deserializer != null) {",
                    "403": "if (annotation != null) {",
                    "405": "if (mappingTo != Void.class) {",
                    "413": "if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {",
                    "417": "if (deserializer != null) {",
                    "421": "for (Module module : modules) {",
                    "423": "if (deserializer != null) {",
                    "432": "if (className.startsWith(\"java.awt.\")  && AwtCodec.support(clazz)) {",
                    "433": "if (!awtError) {",
                    "436": "for (String name : names) {",
                    "437": "if (name.equals(className)) {",
                    "454": "if (!jdk8Error) {",
                    "456": "if (className.startsWith(\"java.time.\")) {",
                    "458": "for (String name : names) {",
                    "459": "if (name.equals(className)) {",
                    "467": "else if (className.startsWith(\"java.util.Optional\")) {",
                    "469": "for (String name : names) {",
                    "470": "if (name.equals(className)) {",
                    "486": "if (!jodaError) {",
                    "488": "if (className.startsWith(\"org.joda.time.\")) {",
                    "490": "for (String name : names) {",
                    "491": "if (name.equals(className)) {",
                    "507": "if ((!guavaError)  && className.startsWith(\"com.google.common.collect.\")) {",
                    "510": "for (String name : names) {",
                    "511": "if (name.equals(className)) {",
                    "525": "if (className.equals(\"java.nio.ByteBuffer\")) {",
                    "529": "if (className.equals(\"java.nio.file.Path\")) {",
                    "533": "if (clazz == Map.Entry.class) {",
                    "537": "if (className.equals(\"org.javamoney.moneta.Money\")) {",
                    "543": "for (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class, classLoader)) {",
                    "544": "for (Type forType : autowired.getAutowiredFor()) {",
                    "554": "if (deserializer == null) {",
                    "558": "if (deserializer != null) {",
                    "562": "if (clazz.isEnum()) {",
                    "563": "if (jacksonCompatible) {",
                    "565": "for (Method method : methods) {",
                    "566": "if (TypeUtils.isJacksonCreator(method)) {",
                    "579": "if (jsonType != null) {",
                    "592": "if (mixInType != null) {",
                    "594": "if (mixedCreator != null) {",
                    "604": "else {",
                    "608": "if (jsonCreatorMethod != null) {",
                    "616": "else if (clazz.isArray()) {",
                    "619": "else if (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class || clazz == ArrayList.class) {",
                    "622": "else if (Collection.class.isAssignableFrom(clazz)) {",
                    "625": "else if (Map.class.isAssignableFrom(clazz)) {",
                    "628": "else if (Throwable.class.isAssignableFrom(clazz)) {",
                    "631": "else if (PropertyProcessable.class.isAssignableFrom(clazz)) {",
                    "634": "else if (clazz == InetAddress.class) {",
                    "637": "else {",
                    "648": "for (Method method : methods) {",
                    "649": "if (Modifier.isStatic(method.getModifiers()) && method.getReturnType() == enumClass && method.getParameterTypes().length == 1 ) {",
                    "651": "if (jsonCreator != null) {",
                    "668": "if (classes == null) {",
                    "672": "for (Class<?> type : classes) {",
                    "673": "if (type == null) {",
                    "685": "if (asmEnable) {",
                    "687": "if (jsonType != null) {",
                    "689": "if (deserializerClass != Void.class) {",
                    "692": "if (deseralizer instanceof ObjectDeserializer) {",
                    "705": "if (asmEnable) {",
                    "707": "if (superClass == null) {",
                    "711": "for (;;) {",
                    "712": "if (!Modifier.isPublic(superClass.getModifiers())) {",
                    "718": "if (superClass == Object.class || superClass == null) {",
                    "728": "if (clazz.getTypeParameters().length != 0) {",
                    "732": "if (asmEnable && asmFactory != null && asmFactory.classLoader.isExternalClass(clazz)) {",
                    "736": "if (asmEnable) {",
                    "740": "if (asmEnable) {",
                    "741": "if (clazz.isInterface()) {",
                    "746": "if (asmEnable && beanInfo.fields.length > 200) {",
                    "751": "if (asmEnable && defaultConstructor == null && !clazz.isInterface()) {",
                    "755": "for (FieldInfo fieldInfo : beanInfo.fields) {",
                    "756": "if (fieldInfo.getOnly) {",
                    "762": "if (!Modifier.isPublic(fieldClass.getModifiers())) {",
                    "767": "if (fieldClass.isMemberClass() && !Modifier.isStatic(fieldClass.getModifiers())) {",
                    "772": "if (fieldInfo.getMember() != null  && !ASMUtils.checkName(fieldInfo.getMember().getName())) {",
                    "778": "if (annotation != null  && ((!ASMUtils.checkName(annotation.name()))  || annotation.format().length() != 0  || annotation.deserializeUsing() != Void.class  || annotation.parseFeatures().length != 0  || annotation.unwrapped()) || (fieldInfo.method != null && fieldInfo.method.getParameterTypes().length > 1)) {",
                    "783": "if (fieldClass.isEnum()) {",
                    "785": "if (!(fieldDeser instanceof EnumDeserializer)) {",
                    "796": "if (asmEnable) {",
                    "797": "if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {",
                    "803": "if (asmEnable) {",
                    "804": "if (TypeUtils.isXmlField(clazz)) {",
                    "810": "if (!asmEnable) {",
                    "835": "if (annotation != null) {",
                    "837": "if (deserializeUsing == Void.class) {",
                    "843": "if (deserializeUsing == null && (fieldClass == List.class || fieldClass == ArrayList.class)) {",
                    "852": "if (mixin != null) {",
                    "854": "if (mixInClasses == null) {",
                    "861": "else {",
                    "869": "if (null == mixin) {",
                    "874": "if (mixInClasses == null) {",
                    "889": "private static Function<Class<?>, Boolean> isPrimitiveFuncation = new Function<Class<?>, Boolean>() {         public Boolean apply(Class<?> clazz) { return clazz == java.sql.Date.class  || clazz == java.sql.Time.class  || clazz == java.sql.Timestamp.class;",
                    "895": "if (!primitive) {",
                    "904": "for (Field field : fields) {",
                    "906": "if (!fieldCacheMap.containsKey(fieldName)) {",
                    "912": "if (clazz.getSuperclass() != null && clazz.getSuperclass() != Object.class) {",
                    "920": "if (field == null) {",
                    "924": "if (field == null) {",
                    "928": "if (field == null) {",
                    "930": "if (c0 >= 'a' && c0 <= 'z') {",
                    "937": "if (fieldName.length() > 2) {",
                    "939": "if (c0 >= 'a' && c0 <= 'z' && c1 >= 'A' && c1 <= 'Z') {",
                    "940": "for (Map.Entry<String, Field> entry : fieldCacheMap.entrySet()) {",
                    "941": "if (fieldName.equalsIgnoreCase(entry.getKey())) {",
                    "966": "if (name == null || name.length() == 0) {",
                    "971": "if (internalDenyHashCodes == null) {",
                    "976": "if (Arrays.binarySearch(this.internalDenyHashCodes, hash) >= 0) {",
                    "988": "if (name == null || name.length() == 0) {",
                    "993": "if (Arrays.binarySearch(this.denyHashCodes, hash) >= 0) {",
                    "1005": "if (name == null || name.length() == 0) {",
                    "1010": "if (Arrays.binarySearch(this.acceptHashCodes, hash) >= 0) {",
                    "1022": "if (get(type) != null) {",
                    "1034": "if (typeName == null) {",
                    "1038": "if (autoTypeCheckHandlers != null) {",
                    "1039": "for (AutoTypeCheckHandler h : autoTypeCheckHandlers) {",
                    "1041": "if (type != null) {",
                    "1051": "if (safeMode) {",
                    "1055": "if (typeName.length() >= 192 || typeName.length() < 3) {",
                    "1060": "if (expectClass == null) {",
                    "1063": "else {",
                    "1065": "if (expectHash == 0x90a25f5baa21529eL || expectHash == 0x2d10a5801b9d6136L || expectHash == 0xaf586a571e302c6bL || expectHash == 0xed007300a7b227c6L || expectHash == 0x295c4605fd1eaa95L || expectHash == 0x47ef269aadc650b4L || expectHash == 0x6439c4dff712ae8bL || expectHash == 0xe3dd9875a2dc5283L || expectHash == 0xe2a8ddba03e69e0dL || expectHash == 0xd734ceb4c3e9d1daL ) {",
                    "1068": "else {",
                    "1077": "if (h1 == 0xaf64164c86024f1aL) {",
                    "1081": "if ((h1 ^ className.charAt(className.length() - 1)) * fnv1a_64_magic_prime == 0x9198507b5af98f0L) {",
                    "1088": "if (internalDenyHashCodes != null) {",
                    "1090": "for (int i = 3; i < className.length(); ++i) {",
                    "1093": "if (Arrays.binarySearch(internalDenyHashCodes, hash) >= 0) {",
                    "1101": "if ((!internalWhite) && (autoTypeSupport || expectClassFlag)) {",
                    "1103": "for (int i = 3; i < className.length(); ++i) {",
                    "1106": "if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {",
                    "1108": "if (clazz != null) {",
                    "1114": "if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {",
                    "1115": "if (Arrays.binarySearch(acceptHashCodes, fullHash) >= 0) {",
                    "1127": "if (clazz == null) {",
                    "1131": "if (expectClass == null && clazz != null && Throwable.class.isAssignableFrom(clazz) && !autoTypeSupport) {",
                    "1135": "if (clazz == null) {",
                    "1139": "if (internalWhite) {",
                    "1143": "if (clazz != null) {",
                    "1144": "if (expectClass != null && clazz != java.util.HashMap.class && clazz != java.util.LinkedHashMap.class && !expectClass.isAssignableFrom(clazz)) {",
                    "1151": "if (!autoTypeSupport) {",
                    "1153": "for (int i = 3; i < className.length(); ++i) {",
                    "1157": "if (Arrays.binarySearch(denyHashCodes, hash) >= 0) {",
                    "1161": "if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {",
                    "1163": "if (clazz == null) {",
                    "1167": "if (expectClass != null && expectClass.isAssignableFrom(clazz)) {",
                    "1182": "if (defaultClassLoader != null) {",
                    "1185": "else {",
                    "1189": "if (is != null) {",
                    "1205": "if (autoTypeSupport || jsonType || expectClassFlag) {",
                    "1210": "if (clazz != null) {",
                    "1211": "if (jsonType) {",
                    "1216": "if (ClassLoader.class.isAssignableFrom(clazz)  || javax.sql.DataSource.class.isAssignableFrom(clazz)  || javax.sql.RowSet.class.isAssignableFrom(clazz)  ) {",
                    "1220": "if (expectClass != null) {",
                    "1221": "if (expectClass.isAssignableFrom(clazz)) {",
                    "1225": "else {",
                    "1232": "if (beanInfo.creatorConstructor != null && autoTypeSupport) {",
                    "1238": "if (!autoTypeSupport) {",
                    "1239": "if (typeName.endsWith(\"Exception\")) {",
                    "1246": "if (clazz != null) {",
                    "1276": "if (autoTypeCheckHandlers == null) {"
                }
            },
            "new": {
                "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java": {
                    "76": "if (items == null) {",
                    "115": "for (int i = 0; i < AUTO_TYPE_ACCEPT_LIST.length; i++) {",
                    "141": "if (asmFactory == null && !ASMUtils.IS_ANDROID) {",
                    "143": "if (parentClassLoader == null) {",
                    "146": "else {",
                    "161": "if (asmFactory == null) {",
                    "250": "if (property != null && property.length() > 0) {",
                    "269": "if (\"true\".equals(property)) {",
                    "272": "else if (\"false\".equals(property)) {",
                    "281": "if (items == null){",
                    "285": "for (int i = 0; i < items.length; ++i) {",
                    "293": "if (items == null){",
                    "297": "for (int i = 0; i < items.length; ++i) {",
                    "305": "if (items == null){",
                    "309": "for (int i = 0; i < items.length; ++i) {",
                    "350": "if (deserializer != null) {",
                    "354": "if (type instanceof Class<?>) {",
                    "358": "if (type instanceof ParameterizedType) {",
                    "360": "if (rawType instanceof Class<?>) {",
                    "363": "else {",
                    "369": "if (type instanceof WildcardType) {",
                    "372": "if (upperBounds.length == 1) {",
                    "384": "if (deserializer == null && type instanceof ParameterizedTypeImpl) {",
                    "389": "if (deserializer != null) {",
                    "393": "if (type == null) {",
                    "398": "if (deserializer != null) {",
                    "403": "if (annotation != null) {",
                    "405": "if (mappingTo != Void.class) {",
                    "413": "if (type instanceof WildcardType || type instanceof TypeVariable || type instanceof ParameterizedType) {",
                    "417": "if (deserializer != null) {",
                    "421": "for (Module module : modules) {",
                    "423": "if (deserializer != null) {",
                    "432": "if (className.startsWith(\"java.awt.\")  && AwtCodec.support(clazz)) {",
                    "433": "if (!awtError) {",
                    "436": "for (String name : names) {",
                    "437": "if (name.equals(className)) {",
                    "454": "if (!jdk8Error) {",
                    "456": "if (className.startsWith(\"java.time.\")) {",
                    "458": "for (String name : names) {",
                    "459": "if (name.equals(className)) {",
                    "467": "else if (className.startsWith(\"java.util.Optional\")) {",
                    "469": "for (String name : names) {",
                    "470": "if (name.equals(className)) {",
                    "486": "if (!jodaError) {",
                    "488": "if (className.startsWith(\"org.joda.time.\")) {",
                    "490": "for (String name : names) {",
                    "491": "if (name.equals(className)) {",
                    "507": "if ((!guavaError)  && className.startsWith(\"com.google.common.collect.\")) {",
                    "510": "for (String name : names) {",
                    "511": "if (name.equals(className)) {",
                    "525": "if (className.equals(\"java.nio.ByteBuffer\")) {",
                    "529": "if (className.equals(\"java.nio.file.Path\")) {",
                    "533": "if (clazz == Map.Entry.class) {",
                    "537": "if (className.equals(\"org.javamoney.moneta.Money\")) {",
                    "543": "for (AutowiredObjectDeserializer autowired : ServiceLoader.load(AutowiredObjectDeserializer.class, classLoader)) {",
                    "544": "for (Type forType : autowired.getAutowiredFor()) {",
                    "554": "if (deserializer == null) {",
                    "558": "if (deserializer != null) {",
                    "562": "if (clazz.isEnum()) {",
                    "563": "if (jacksonCompatible) {",
                    "565": "for (Method method : methods) {",
                    "566": "if (TypeUtils.isJacksonCreator(method)) {",
                    "579": "if (jsonType != null) {",
                    "592": "if (mixInType != null) {",
                    "594": "if (mixedCreator != null) {",
                    "604": "else {",
                    "608": "if (jsonCreatorMethod != null) {",
                    "616": "else if (clazz.isArray()) {",
                    "619": "else if (clazz == Set.class || clazz == HashSet.class || clazz == Collection.class || clazz == List.class || clazz == ArrayList.class) {",
                    "622": "else if (Collection.class.isAssignableFrom(clazz)) {",
                    "625": "else if (Map.class.isAssignableFrom(clazz)) {",
                    "628": "else if (Throwable.class.isAssignableFrom(clazz)) {",
                    "631": "else if (PropertyProcessable.class.isAssignableFrom(clazz)) {",
                    "634": "else if (clazz == InetAddress.class) {",
                    "637": "else {",
                    "648": "for (Method method : methods) {",
                    "649": "if (Modifier.isStatic(method.getModifiers()) && method.getReturnType() == enumClass && method.getParameterTypes().length == 1 ) {",
                    "651": "if (jsonCreator != null) {",
                    "668": "if (classes == null) {",
                    "672": "for (Class<?> type : classes) {",
                    "673": "if (type == null) {",
                    "685": "if (asmEnable) {",
                    "687": "if (jsonType != null) {",
                    "689": "if (deserializerClass != Void.class) {",
                    "692": "if (deseralizer instanceof ObjectDeserializer) {",
                    "705": "if (asmEnable) {",
                    "707": "if (superClass == null) {",
                    "711": "for (;;) {",
                    "712": "if (!Modifier.isPublic(superClass.getModifiers())) {",
                    "718": "if (superClass == Object.class || superClass == null) {",
                    "728": "if (clazz.getTypeParameters().length != 0) {",
                    "732": "if (asmEnable && asmFactory != null && asmFactory.classLoader.isExternalClass(clazz)) {",
                    "736": "if (asmEnable) {",
                    "740": "if (asmEnable) {",
                    "741": "if (clazz.isInterface()) {",
                    "746": "if (asmEnable && beanInfo.fields.length > 200) {",
                    "751": "if (asmEnable && defaultConstructor == null && !clazz.isInterface()) {",
                    "755": "for (FieldInfo fieldInfo : beanInfo.fields) {",
                    "756": "if (fieldInfo.getOnly) {",
                    "762": "if (!Modifier.isPublic(fieldClass.getModifiers())) {",
                    "767": "if (fieldClass.isMemberClass() && !Modifier.isStatic(fieldClass.getModifiers())) {",
                    "772": "if (fieldInfo.getMember() != null  && !ASMUtils.checkName(fieldInfo.getMember().getName())) {",
                    "778": "if (annotation != null  && ((!ASMUtils.checkName(annotation.name()))  || annotation.format().length() != 0  || annotation.deserializeUsing() != Void.class  || annotation.parseFeatures().length != 0  || annotation.unwrapped()) || (fieldInfo.method != null && fieldInfo.method.getParameterTypes().length > 1)) {",
                    "783": "if (fieldClass.isEnum()) {",
                    "785": "if (!(fieldDeser instanceof EnumDeserializer)) {",
                    "796": "if (asmEnable) {",
                    "797": "if (clazz.isMemberClass() && !Modifier.isStatic(clazz.getModifiers())) {",
                    "803": "if (asmEnable) {",
                    "804": "if (TypeUtils.isXmlField(clazz)) {",
                    "810": "if (!asmEnable) {",
                    "835": "if (annotation != null) {",
                    "837": "if (deserializeUsing == Void.class) {",
                    "843": "if (deserializeUsing == null && (fieldClass == List.class || fieldClass == ArrayList.class)) {",
                    "852": "if (mixin != null) {",
                    "854": "if (mixInClasses == null) {",
                    "861": "else {",
                    "869": "if (null == mixin) {",
                    "874": "if (mixInClasses == null) {",
                    "889": "private static Function<Class<?>, Boolean> isPrimitiveFuncation = new Function<Class<?>, Boolean>() {         public Boolean apply(Class<?> clazz) { return clazz == java.sql.Date.class  || clazz == java.sql.Time.class  || clazz == java.sql.Timestamp.class;",
                    "895": "if (!primitive) {",
                    "904": "for (Field field : fields) {",
                    "906": "if (!fieldCacheMap.containsKey(fieldName)) {",
                    "912": "if (clazz.getSuperclass() != null && clazz.getSuperclass() != Object.class) {",
                    "920": "if (field == null) {",
                    "924": "if (field == null) {",
                    "928": "if (field == null) {",
                    "930": "if (c0 >= 'a' && c0 <= 'z') {",
                    "937": "if (fieldName.length() > 2) {",
                    "939": "if (c0 >= 'a' && c0 <= 'z' && c1 >= 'A' && c1 <= 'Z') {",
                    "940": "for (Map.Entry<String, Field> entry : fieldCacheMap.entrySet()) {",
                    "941": "if (fieldName.equalsIgnoreCase(entry.getKey())) {",
                    "966": "if (name == null || name.length() == 0) {",
                    "971": "if (internalDenyHashCodes == null) {",
                    "976": "if (Arrays.binarySearch(this.internalDenyHashCodes, hash) >= 0) {",
                    "988": "if (name == null || name.length() == 0) {",
                    "993": "if (Arrays.binarySearch(this.denyHashCodes, hash) >= 0) {",
                    "1005": "if (name == null || name.length() == 0) {",
                    "1010": "if (Arrays.binarySearch(this.acceptHashCodes, hash) >= 0) {",
                    "1022": "if (get(type) != null) {",
                    "1034": "if (typeName == null) {",
                    "1038": "if (autoTypeCheckHandlers != null) {",
                    "1039": "for (AutoTypeCheckHandler h : autoTypeCheckHandlers) {",
                    "1041": "if (type != null) {",
                    "1051": "if (safeMode) {",
                    "1057": "if (typeName.length() >= 192 || typeName.length() < 3) {",
                    "1062": "if (expectClass == null) {",
                    "1065": "else {",
                    "1067": "if (expectHash == 0x90a25f5baa21529eL || expectHash == 0x2d10a5801b9d6136L || expectHash == 0xaf586a571e302c6bL || expectHash == 0xed007300a7b227c6L || expectHash == 0x295c4605fd1eaa95L || expectHash == 0x47ef269aadc650b4L || expectHash == 0x6439c4dff712ae8bL || expectHash == 0xe3dd9875a2dc5283L || expectHash == 0xe2a8ddba03e69e0dL || expectHash == 0xd734ceb4c3e9d1daL ) {",
                    "1070": "else {",
                    "1079": "if (h1 == 0xaf64164c86024f1aL) {",
                    "1083": "if ((h1 ^ className.charAt(className.length() - 1)) * fnv1a_64_magic_prime == 0x9198507b5af98f0L) {",
                    "1090": "if (internalDenyHashCodes != null) {",
                    "1092": "for (int i = 3; i < className.length(); ++i) {",
                    "1095": "if (Arrays.binarySearch(internalDenyHashCodes, hash) >= 0) {",
                    "1103": "if ((!internalWhite) && (autoTypeSupport || expectClassFlag)) {",
                    "1105": "for (int i = 3; i < className.length(); ++i) {",
                    "1108": "if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {",
                    "1110": "if (clazz != null) {",
                    "1116": "if (Arrays.binarySearch(denyHashCodes, hash) >= 0 && TypeUtils.getClassFromMapping(typeName) == null) {",
                    "1117": "if (Arrays.binarySearch(acceptHashCodes, fullHash) >= 0) {",
                    "1129": "if (clazz == null) {",
                    "1133": "if (expectClass == null && clazz != null && Throwable.class.isAssignableFrom(clazz) && !autoTypeSupport) {",
                    "1137": "if (clazz == null) {",
                    "1141": "if (internalWhite) {",
                    "1145": "if (clazz != null) {",
                    "1146": "if (expectClass != null && clazz != java.util.HashMap.class && clazz != java.util.LinkedHashMap.class && !expectClass.isAssignableFrom(clazz)) {",
                    "1153": "if (!autoTypeSupport) {",
                    "1155": "for (int i = 3; i < className.length(); ++i) {",
                    "1159": "if (Arrays.binarySearch(denyHashCodes, hash) >= 0) {",
                    "1160": "if (typeName.endsWith(\"Exception\") || typeName.endsWith(\"Error\")) {",
                    "1167": "if (Arrays.binarySearch(acceptHashCodes, hash) >= 0) {",
                    "1169": "if (clazz == null) {",
                    "1173": "if (expectClass != null && expectClass.isAssignableFrom(clazz)) {",
                    "1188": "if (defaultClassLoader != null) {",
                    "1191": "else {",
                    "1195": "if (is != null) {",
                    "1209": "if (autoTypeSupport || jsonType || expectClassFlag) {",
                    "1214": "if (clazz != null) {",
                    "1215": "if (jsonType) {",
                    "1216": "if (autoTypeSupport) {",
                    "1223": "if (ClassLoader.class.isAssignableFrom(clazz)  || javax.sql.DataSource.class.isAssignableFrom(clazz)  || javax.sql.RowSet.class.isAssignableFrom(clazz)  ) {",
                    "1227": "if (expectClass != null) {",
                    "1228": "if (expectClass.isAssignableFrom(clazz)) {",
                    "1229": "if (autoTypeSupport) {",
                    "1235": "else {",
                    "1242": "if (beanInfo.creatorConstructor != null && autoTypeSupport) {",
                    "1248": "if (!autoTypeSupport) {",
                    "1249": "if (typeName.endsWith(\"Exception\") || typeName.endsWith(\"Error\")) {",
                    "1256": "if (clazz != null) {",
                    "1257": "if (autoTypeSupport) {",
                    "1289": "if (autoTypeCheckHandlers == null) {"
                }
            }
        }
    },
    "CVE-2019-16869": {
        "source": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "552": "private void splitHeader(AppendableCharSequence sb) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "552": "private void splitHeader(AppendableCharSequence sb) {"
                }
            }
        },
        "sink": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "64": "return;",
                    "70": "case READ_INITIAL: try {",
                    "73": "return;",
                    "79": "return;",
                    "85": "catch (Exception e) {",
                    "87": "return;",
                    "90": "case READ_HEADER: try {",
                    "93": "return;",
                    "102": "return;",
                    "105": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "109": "return;",
                    "115": "return;",
                    "118": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "124": "return;",
                    "128": "catch (Exception e) {",
                    "130": "return;",
                    "140": "return;",
                    "146": "return;",
                    "164": "return;",
                    "167": "case READ_CHUNK_SIZE: try {",
                    "170": "return;",
                    "177": "return;",
                    "182": "catch (Exception e) {",
                    "184": "return;",
                    "188": "assert chunkSize <= Integer.MAX_VALUE;",
                    "192": "return;",
                    "199": "return;",
                    "218": "return;",
                    "221": "case READ_CHUNK_FOOTER: try {",
                    "224": "return;",
                    "229": "return;",
                    "231": "catch (Exception e) {",
                    "233": "return;",
                    "266": "return;",
                    "272": "return;",
                    "314": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "319": "return true;",
                    "324": "return false;",
                    "329": "return false;",
                    "333": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "353": "return;",
                    "372": "return ret;",
                    "382": "return chunk;",
                    "400": "return skiped;",
                    "408": "return null;",
                    "429": "return null;",
                    "457": "return nextState;",
                    "465": "return contentLength;",
                    "471": "return null;",
                    "476": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "510": "return null;",
                    "516": "return trailer;",
                    "533": "return Integer.parseInt(hex, 16);",
                    "549": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "591": "return result;",
                    "596": "return sb.length();",
                    "602": "return result;",
                    "607": "return sb.length();",
                    "613": "return result + 1;",
                    "618": "return 0;",
                    "636": "return null;",
                    "640": "return seq;",
                    "651": "return true;",
                    "655": "return false;",
                    "659": "throw newException(maxLength);",
                    "663": "return true;",
                    "667": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "680": "return super.parse(buffer);",
                    "685": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "64": "return;",
                    "70": "case READ_INITIAL: try {",
                    "73": "return;",
                    "79": "return;",
                    "85": "catch (Exception e) {",
                    "87": "return;",
                    "90": "case READ_HEADER: try {",
                    "93": "return;",
                    "102": "return;",
                    "105": "throw new IllegalArgumentException(\"Chunked messages not supported\");",
                    "109": "return;",
                    "115": "return;",
                    "118": "assert nextState == State.READ_FIXED_LENGTH_CONTENT || nextState == State.READ_VARIABLE_LENGTH_CONTENT;",
                    "124": "return;",
                    "128": "catch (Exception e) {",
                    "130": "return;",
                    "140": "return;",
                    "146": "return;",
                    "164": "return;",
                    "167": "case READ_CHUNK_SIZE: try {",
                    "170": "return;",
                    "177": "return;",
                    "182": "catch (Exception e) {",
                    "184": "return;",
                    "188": "assert chunkSize <= Integer.MAX_VALUE;",
                    "192": "return;",
                    "199": "return;",
                    "218": "return;",
                    "221": "case READ_CHUNK_FOOTER: try {",
                    "224": "return;",
                    "229": "return;",
                    "231": "catch (Exception e) {",
                    "233": "return;",
                    "266": "return;",
                    "272": "return;",
                    "314": "return !(code == 101 && !res.headers().contains(HttpHeaderNames.SEC_WEBSOCKET_ACCEPT) && res.headers().contains(HttpHeaderNames.UPGRADE, HttpHeaderValues.WEBSOCKET, true));",
                    "319": "return true;",
                    "324": "return false;",
                    "329": "return false;",
                    "333": "return newProtocol == null || !newProtocol.contains(HttpVersion.HTTP_1_0.text()) && !newProtocol.contains(HttpVersion.HTTP_1_1.text());",
                    "353": "return;",
                    "372": "return ret;",
                    "382": "return chunk;",
                    "400": "return skiped;",
                    "408": "return null;",
                    "429": "return null;",
                    "457": "return nextState;",
                    "465": "return contentLength;",
                    "471": "return null;",
                    "476": "return LastHttpContent.EMPTY_LAST_CONTENT;",
                    "510": "return null;",
                    "516": "return trailer;",
                    "533": "return Integer.parseInt(hex, 16);",
                    "549": "return new String[] {                 sb.subStringUnsafe(aStart, aEnd), sb.subStringUnsafe(bStart, bEnd), cStart < cEnd? sb.subStringUnsafe(cStart, cEnd) : \"\" };",
                    "591": "return result;",
                    "596": "return sb.length();",
                    "602": "return result;",
                    "607": "return sb.length();",
                    "613": "return result + 1;",
                    "618": "return 0;",
                    "636": "return null;",
                    "640": "return seq;",
                    "651": "return true;",
                    "655": "return false;",
                    "659": "throw newException(maxLength);",
                    "663": "return true;",
                    "667": "return new TooLongFrameException(\"HTTP header is larger than \" + maxLength + \" bytes.\");",
                    "680": "return super.parse(buffer);",
                    "685": "return new TooLongFrameException(\"An HTTP line is larger than \" + maxLength + \" bytes.\");"
                }
            }
        },
        "undefined": {
            "old": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "57": "if (resetRequested) {",
                    "61": "switch (currentState) {",
                    "63": "if (!skipControlCharacters(buffer)) {",
                    "72": "if (line == null) {",
                    "77": "if (initialLine.length < 3) {",
                    "92": "if (nextState == null) {",
                    "97": "switch (nextState) {",
                    "104": "if (!chunkedSupported) {",
                    "111": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "120": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "135": "if (toRead > 0) {",
                    "145": "if (readLimit == 0) {",
                    "150": "if (toRead > chunkSize) {",
                    "156": "if (chunkSize == 0) {",
                    "160": "else {",
                    "169": "if (line == null) {",
                    "175": "if (chunkSize == 0) {",
                    "191": "if (toRead == 0) {",
                    "198": "if (chunkSize != 0) {",
                    "208": "while (wIdx > rIdx) {",
                    "210": "if (next == HttpConstants.LF) {",
                    "223": "if (trailer == null) {",
                    "243": "if (readableBytes > 0) {",
                    "257": "if (resetRequested) {",
                    "261": "if (message != null) {",
                    "263": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "269": "if (currentState == State.READ_HEADER) {",
                    "276": "if (isDecodingRequest() || chunked) {",
                    "279": "else {",
                    "283": "if (!prematureClosure) {",
                    "294": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "295": "switch (currentState) {",
                    "310": "if (msg instanceof HttpResponse) {",
                    "313": "if (code >= 100 && code < 200) {",
                    "317": "switch (code) {",
                    "328": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "349": "if (!isDecodingRequest()) {",
                    "351": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "365": "if (message == null) {",
                    "389": "while (wIdx > rIdx) {",
                    "391": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "407": "if (line == null) {",
                    "411": "if (line.length() > 0) {",
                    "414": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "419": "else {",
                    "420": "if (name != null) {",
                    "428": "if (line == null) {",
                    "433": "while (line.length() > 0);",
                    "436": "if (name != null) {",
                    "443": "if (isContentAlwaysEmpty(message)) {",
                    "447": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "450": "else if (contentLength() >= 0) {",
                    "453": "else {",
                    "461": "if (contentLength == Long.MIN_VALUE) {",
                    "470": "if (line == null) {",
                    "475": "if (line.length() == 0 && trailer == null) {",
                    "480": "if (trailer == null) {",
                    "484": "while (line.length() > 0) {",
                    "486": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "488": "if (!current.isEmpty()) {",
                    "496": "else {",
                    "499": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "509": "if (line == null) {",
                    "524": "for (int i = 0; i < hex.length(); i ++) {",
                    "526": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "560": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "562": "if (ch == ':' || Character.isWhitespace(ch)) {",
                    "568": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "569": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "578": "if (valueStart == length) {",
                    "581": "else {",
                    "589": "for (int result = offset; result < sb.length(); ++result) {",
                    "590": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "600": "for (int result = offset; result < sb.length(); ++result) {",
                    "601": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "611": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "612": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "634": "if (i == -1) {",
                    "650": "if (nextByte == HttpConstants.CR) {",
                    "654": "if (nextByte == HttpConstants.LF) {",
                    "658": "if (++ size > maxLength) {"
                }
            },
            "new": {
                "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java": {
                    "57": "if (resetRequested) {",
                    "61": "switch (currentState) {",
                    "63": "if (!skipControlCharacters(buffer)) {",
                    "72": "if (line == null) {",
                    "77": "if (initialLine.length < 3) {",
                    "92": "if (nextState == null) {",
                    "97": "switch (nextState) {",
                    "104": "if (!chunkedSupported) {",
                    "111": "if (contentLength == 0 || contentLength == -1 && isDecodingRequest()) {",
                    "120": "if (nextState == State.READ_FIXED_LENGTH_CONTENT) {",
                    "135": "if (toRead > 0) {",
                    "145": "if (readLimit == 0) {",
                    "150": "if (toRead > chunkSize) {",
                    "156": "if (chunkSize == 0) {",
                    "160": "else {",
                    "169": "if (line == null) {",
                    "175": "if (chunkSize == 0) {",
                    "191": "if (toRead == 0) {",
                    "198": "if (chunkSize != 0) {",
                    "208": "while (wIdx > rIdx) {",
                    "210": "if (next == HttpConstants.LF) {",
                    "223": "if (trailer == null) {",
                    "243": "if (readableBytes > 0) {",
                    "257": "if (resetRequested) {",
                    "261": "if (message != null) {",
                    "263": "if (currentState == State.READ_VARIABLE_LENGTH_CONTENT && !in.isReadable() && !chunked) {",
                    "269": "if (currentState == State.READ_HEADER) {",
                    "276": "if (isDecodingRequest() || chunked) {",
                    "279": "else {",
                    "283": "if (!prematureClosure) {",
                    "294": "if (evt instanceof HttpExpectationFailedEvent) {",
                    "295": "switch (currentState) {",
                    "310": "if (msg instanceof HttpResponse) {",
                    "313": "if (code >= 100 && code < 200) {",
                    "317": "switch (code) {",
                    "328": "if (msg.status().code() != HttpResponseStatus.SWITCHING_PROTOCOLS.code()) {",
                    "349": "if (!isDecodingRequest()) {",
                    "351": "if (res != null && isSwitchingToNonHttp1Protocol(res)) {",
                    "365": "if (message == null) {",
                    "389": "while (wIdx > rIdx) {",
                    "391": "if (!Character.isISOControl(c) && !Character.isWhitespace(c)) {",
                    "407": "if (line == null) {",
                    "411": "if (line.length() > 0) {",
                    "414": "if (name != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "419": "else {",
                    "420": "if (name != null) {",
                    "428": "if (line == null) {",
                    "433": "while (line.length() > 0);",
                    "436": "if (name != null) {",
                    "443": "if (isContentAlwaysEmpty(message)) {",
                    "447": "else if (HttpUtil.isTransferEncodingChunked(message)) {",
                    "450": "else if (contentLength() >= 0) {",
                    "453": "else {",
                    "461": "if (contentLength == Long.MIN_VALUE) {",
                    "470": "if (line == null) {",
                    "475": "if (line.length() == 0 && trailer == null) {",
                    "480": "if (trailer == null) {",
                    "484": "while (line.length() > 0) {",
                    "486": "if (lastHeader != null && (firstChar == ' ' || firstChar == '\\t')) {",
                    "488": "if (!current.isEmpty()) {",
                    "496": "else {",
                    "499": "if (!HttpHeaderNames.CONTENT_LENGTH.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRANSFER_ENCODING.contentEqualsIgnoreCase(headerName) && !HttpHeaderNames.TRAILER.contentEqualsIgnoreCase(headerName)) {",
                    "509": "if (line == null) {",
                    "524": "for (int i = 0; i < hex.length(); i ++) {",
                    "526": "if (c == ';' || Character.isWhitespace(c) || Character.isISOControl(c)) {",
                    "560": "for (nameEnd = nameStart; nameEnd < length; nameEnd ++) {",
                    "562": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {",
                    "568": "for (colonEnd = nameEnd; colonEnd < length; colonEnd ++) {",
                    "569": "if (sb.charAtUnsafe(colonEnd) == ':') {",
                    "578": "if (valueStart == length) {",
                    "581": "else {",
                    "589": "for (int result = offset; result < sb.length(); ++result) {",
                    "590": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "600": "for (int result = offset; result < sb.length(); ++result) {",
                    "601": "if (Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "611": "for (int result = sb.length() - 1; result > 0; --result) {",
                    "612": "if (!Character.isWhitespace(sb.charAtUnsafe(result))) {",
                    "634": "if (i == -1) {",
                    "650": "if (nextByte == HttpConstants.CR) {",
                    "654": "if (nextByte == HttpConstants.LF) {",
                    "658": "if (++ size > maxLength) {"
                }
            }
        }
    },
    "CVE-2016-1000031": {
        "source": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {}
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {
                    "309": "private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {
                    "53": "return new FileInputStream(dfos.getFile());",
                    "60": "return new ByteArrayInputStream(cachedContent);",
                    "64": "return contentType;",
                    "71": "return params.get(\"charset\");",
                    "75": "return Streams.checkFileName(fileName);",
                    "80": "return true;",
                    "83": "return dfos.isInMemory();",
                    "88": "return size;",
                    "91": "return cachedContent.length;",
                    "94": "return dfos.getData().length;",
                    "97": "return dfos.getFile().length();",
                    "108": "return cachedContent;",
                    "113": "try {",
                    "117": "catch (IOException e) {",
                    "122": "try {",
                    "125": "catch (IOException e) {",
                    "132": "return fileData;",
                    "136": "return new String(get(), charset);",
                    "146": "try {",
                    "147": "return new String(rawdata, charset);",
                    "149": "catch (UnsupportedEncodingException e) {",
                    "150": "return new String(rawdata);",
                    "158": "try {",
                    "177": "try {",
                    "184": "try {",
                    "187": "catch (IOException e) {",
                    "193": "try {",
                    "196": "catch (IOException e) {",
                    "207": "throw new FileUploadException( \"Cannot write uploaded file to disk!\");",
                    "224": "return fieldName;",
                    "232": "return isFormField;",
                    "245": "return dfos;",
                    "250": "return null;",
                    "253": "return dfos.getFile();",
                    "276": "return tempFile;",
                    "287": "return id;",
                    "292": "return format(\"name=%s, StoreLocation=%s, size=%s bytes, isFormField=%s, FieldName=%s\", getName(), getStoreLocation(), Long.valueOf(getSize()), Boolean.valueOf(isFormField()), getFieldName());",
                    "312": "throw new IOException(format( \"The repository [%s] contains a null character\", repository.getPath()));",
                    "317": "throw new IOException(format( \"The repository [%s] is not a directory\", repository.getAbsolutePath()));",
                    "338": "return headers;"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {
                    "55": "return new FileInputStream(dfos.getFile());",
                    "62": "return new ByteArrayInputStream(cachedContent);",
                    "66": "return contentType;",
                    "73": "return params.get(\"charset\");",
                    "77": "return Streams.checkFileName(fileName);",
                    "82": "return true;",
                    "85": "return dfos.isInMemory();",
                    "90": "return size;",
                    "93": "return cachedContent.length;",
                    "96": "return dfos.getData().length;",
                    "99": "return dfos.getFile().length();",
                    "110": "return cachedContent;",
                    "115": "try {",
                    "119": "catch (IOException e) {",
                    "124": "try {",
                    "127": "catch (IOException e) {",
                    "134": "return fileData;",
                    "138": "return new String(get(), charset);",
                    "148": "try {",
                    "149": "return new String(rawdata, charset);",
                    "151": "catch (UnsupportedEncodingException e) {",
                    "152": "return new String(rawdata);",
                    "160": "try {",
                    "179": "try {",
                    "186": "try {",
                    "189": "catch (IOException e) {",
                    "195": "try {",
                    "198": "catch (IOException e) {",
                    "209": "throw new FileUploadException( \"Cannot write uploaded file to disk!\");",
                    "226": "return fieldName;",
                    "234": "return isFormField;",
                    "247": "return dfos;",
                    "252": "return null;",
                    "255": "return dfos.getFile();",
                    "278": "return tempFile;",
                    "289": "return id;",
                    "294": "return format(\"name=%s, StoreLocation=%s, size=%s bytes, isFormField=%s, FieldName=%s\", getName(), getStoreLocation(), Long.valueOf(getSize()), Boolean.valueOf(isFormField()), getFieldName());",
                    "311": "throw new IllegalStateException(\"Property \" + SERIALIZABLE_PROPERTY + \" is not true, rejecting to deserialize a DiskFileItem.\");",
                    "318": "throw new IOException(format( \"The repository [%s] contains a null character\", repository.getPath()));",
                    "323": "throw new IOException(format( \"The repository [%s] is not a directory\", repository.getAbsolutePath()));",
                    "344": "return headers;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {
                    "52": "if (!isInMemory()) {",
                    "56": "if (cachedContent == null) {",
                    "79": "if (cachedContent != null) {",
                    "87": "if (size >= 0) {",
                    "90": "else if (cachedContent != null) {",
                    "93": "else if (dfos.isInMemory()) {",
                    "96": "else {",
                    "103": "if (isInMemory()) {",
                    "104": "if (cachedContent == null) {",
                    "121": "if (fis != null) {",
                    "142": "if (charset == null) {",
                    "156": "if (isInMemory()) {",
                    "163": "if (fout != null) {",
                    "170": "else {",
                    "172": "if (outputFile != null) {",
                    "174": "if (!outputFile.renameTo(file)) {",
                    "183": "if (in != null) {",
                    "192": "if (out != null) {",
                    "206": "else {",
                    "217": "if (outputFile != null && outputFile.exists()) {",
                    "240": "if (dfos == null) {",
                    "249": "if (dfos == null) {",
                    "259": "if (outputFile != null && outputFile.exists()) {",
                    "266": "if (tempFile == null) {",
                    "268": "if (tempDir == null) {",
                    "283": "if (current < limit) {",
                    "296": "if (dfos.isInMemory()) {",
                    "299": "else {",
                    "309": "if (repository != null) {",
                    "310": "if (repository.isDirectory()) {",
                    "311": "if (repository.getPath().contains(\"\\0\")) {",
                    "316": "else {",
                    "323": "if (cachedContent != null) {",
                    "326": "else {"
                }
            },
            "new": {
                "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java": {
                    "54": "if (!isInMemory()) {",
                    "58": "if (cachedContent == null) {",
                    "81": "if (cachedContent != null) {",
                    "89": "if (size >= 0) {",
                    "92": "else if (cachedContent != null) {",
                    "95": "else if (dfos.isInMemory()) {",
                    "98": "else {",
                    "105": "if (isInMemory()) {",
                    "106": "if (cachedContent == null) {",
                    "123": "if (fis != null) {",
                    "144": "if (charset == null) {",
                    "158": "if (isInMemory()) {",
                    "165": "if (fout != null) {",
                    "172": "else {",
                    "174": "if (outputFile != null) {",
                    "176": "if (!outputFile.renameTo(file)) {",
                    "185": "if (in != null) {",
                    "194": "if (out != null) {",
                    "208": "else {",
                    "219": "if (outputFile != null && outputFile.exists()) {",
                    "242": "if (dfos == null) {",
                    "251": "if (dfos == null) {",
                    "261": "if (outputFile != null && outputFile.exists()) {",
                    "268": "if (tempFile == null) {",
                    "270": "if (tempDir == null) {",
                    "285": "if (current < limit) {",
                    "298": "if (dfos.isInMemory()) {",
                    "301": "else {",
                    "310": "if (!Boolean.getBoolean(SERIALIZABLE_PROPERTY)) {",
                    "315": "if (repository != null) {",
                    "316": "if (repository.isDirectory()) {",
                    "317": "if (repository.getPath().contains(\"\\0\")) {",
                    "322": "else {",
                    "329": "if (cachedContent != null) {",
                    "332": "else {"
                }
            }
        }
    },
    "CVE-2016-1000342": {
        "source": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {},
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {}
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "115": "private BigInteger[] derDecode( byte[]  encoding) throws IOException {"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {},
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {},
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {}
            }
        },
        "sink": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "71": "try {",
                    "73": "return derEncode(sig[0], sig[1]);",
                    "76": "catch (Exception e) {",
                    "77": "throw new SignatureException(e.toString());",
                    "86": "try {",
                    "90": "catch (Exception e) {",
                    "91": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "94": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "98": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "102": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "106": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "111": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "117": "throw new IOException(\"malformed signature\");",
                    "120": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {
                    "71": "try {",
                    "73": "return derEncode(sig[0], sig[1]);",
                    "76": "catch (Exception e) {",
                    "77": "throw new SignatureException(e.toString());",
                    "86": "try {",
                    "90": "catch (Exception e) {",
                    "91": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "94": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "98": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "102": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "106": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "111": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "117": "throw new IOException(\"malformed signature\");",
                    "120": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {
                    "71": "try {",
                    "73": "return derEncode(sig[0], sig[1]);",
                    "76": "catch (Exception e) {",
                    "77": "throw new SignatureException(e.toString());",
                    "86": "try {",
                    "90": "catch (Exception e) {",
                    "91": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "94": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "98": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "102": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "106": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "111": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "117": "throw new IOException(\"malformed signature\");",
                    "120": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "71": "try {",
                    "73": "return derEncode(sig[0], sig[1]);",
                    "76": "catch (Exception e) {",
                    "77": "throw new SignatureException(e.toString());",
                    "86": "try {",
                    "90": "catch (Exception e) {",
                    "91": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "94": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "98": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "102": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "106": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "111": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "117": "throw new IOException(\"malformed signature\");",
                    "120": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "72": "try {",
                    "74": "return derEncode(sig[0], sig[1]);",
                    "77": "catch (Exception e) {",
                    "78": "throw new SignatureException(e.toString());",
                    "87": "try {",
                    "91": "catch (Exception e) {",
                    "92": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "95": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "99": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "103": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "107": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "112": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "118": "throw new IOException(\"malformed signature\");",
                    "122": "throw new IOException(\"malformed signature\");",
                    "125": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {
                    "72": "try {",
                    "74": "return derEncode(sig[0], sig[1]);",
                    "77": "catch (Exception e) {",
                    "78": "throw new SignatureException(e.toString());",
                    "87": "try {",
                    "91": "catch (Exception e) {",
                    "92": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "95": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "99": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "103": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "107": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "112": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "118": "throw new IOException(\"malformed signature\");",
                    "122": "throw new IOException(\"malformed signature\");",
                    "125": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {
                    "72": "try {",
                    "74": "return derEncode(sig[0], sig[1]);",
                    "77": "catch (Exception e) {",
                    "78": "throw new SignatureException(e.toString());",
                    "87": "try {",
                    "91": "catch (Exception e) {",
                    "92": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "95": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "99": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "103": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "107": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "112": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "118": "throw new IOException(\"malformed signature\");",
                    "122": "throw new IOException(\"malformed signature\");",
                    "125": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "72": "try {",
                    "74": "return derEncode(sig[0], sig[1]);",
                    "77": "catch (Exception e) {",
                    "78": "throw new SignatureException(e.toString());",
                    "87": "try {",
                    "91": "catch (Exception e) {",
                    "92": "throw new SignatureException(\"error decoding signature bytes.\");",
                    "95": "return signer.verifySignature(hash, sig[0], sig[1]);",
                    "99": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "103": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "107": "throw new UnsupportedOperationException(\"engineSetParameter unsupported\");",
                    "112": "return new DERSequence(rs).getEncoded(ASN1Encoding.DER);",
                    "118": "throw new IOException(\"malformed signature\");",
                    "122": "throw new IOException(\"malformed signature\");",
                    "125": "return new BigInteger[]{             ((ASN1Integer)s.getObjectAt(0)).getValue(), ((ASN1Integer)s.getObjectAt(1)).getValue() };"
                }
            }
        },
        "undefined": {
            "old": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "52": "if (random != null){",
                    "116": "if (s.size() != 2){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {
                    "52": "if (random != null){",
                    "116": "if (s.size() != 2){"
                },
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {
                    "52": "if (random != null){",
                    "116": "if (s.size() != 2){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "52": "if (random != null){",
                    "116": "if (s.size() != 2){"
                }
            },
            "new": {
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java": {
                    "53": "if (random != null){",
                    "117": "if (s.size() != 2){",
                    "121": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java": {
                    "53": "if (random != null){",
                    "117": "if (s.size() != 2){",
                    "121": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                },
                "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java": {
                    "53": "if (random != null){",
                    "117": "if (s.size() != 2){",
                    "121": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                },
                "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java": {
                    "53": "if (random != null){",
                    "117": "if (s.size() != 2){",
                    "121": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                }
            }
        }
    },
    "CVE-2020-13973": {
        "source": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "276": "private void sanitizeString(int start, int end) {"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "276": "private void sanitizeString(int start, int end) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "6": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "12": "return s.toString();",
                    "40": "return this.maximumNestingDepth;",
                    "49": "try {",
                    "232": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "408": "return State.AFTER_KEY;",
                    "412": "return State.AFTER_VALUE;",
                    "417": "return State.AFTER_VALUE;",
                    "419": "return State.AFTER_VALUE;",
                    "423": "return State.AFTER_KEY;",
                    "427": "return State.AFTER_VALUE;",
                    "431": "return State.AFTER_ELEMENT;",
                    "435": "return State.AFTER_ELEMENT;",
                    "438": "throw new AssertionError();",
                    "476": "return i + 1;",
                    "481": "return s.length();",
                    "491": "return;",
                    "492": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "497": "assert sanitizedJson != null;",
                    "504": "return;",
                    "505": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "510": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "632": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "659": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "665": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "671": "try {",
                    "674": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "675": "return false;",
                    "728": "return true;",
                    "754": "return true;",
                    "760": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "763": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "766": "return false;",
                    "771": "return '0' <= ch && ch <= '7';",
                    "778": "return 'a' <= ch && ch <= 'f';",
                    "789": "return true;",
                    "790": "default: return false;",
                    "813": "return limit;",
                    "823": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "828": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "6": "return sanitize(jsonish, DEFAULT_NESTING_DEPTH);",
                    "12": "return s.toString();",
                    "40": "return this.maximumNestingDepth;",
                    "49": "try {",
                    "232": "catch (@SuppressWarnings(\"unused\") UnbracketedComma e) {",
                    "422": "return State.AFTER_KEY;",
                    "426": "return State.AFTER_VALUE;",
                    "431": "return State.AFTER_VALUE;",
                    "433": "return State.AFTER_VALUE;",
                    "437": "return State.AFTER_KEY;",
                    "441": "return State.AFTER_VALUE;",
                    "445": "return State.AFTER_ELEMENT;",
                    "449": "return State.AFTER_ELEMENT;",
                    "452": "throw new AssertionError();",
                    "490": "return i + 1;",
                    "495": "return s.length();",
                    "505": "return;",
                    "506": "default: throw new AssertionError(\"\" + jsonish.charAt(i));",
                    "511": "assert sanitizedJson != null;",
                    "518": "return;",
                    "519": "default: throw new AssertionError(\"\" + sanitizedJson.charAt(i));",
                    "524": "throw new AssertionError( \"Trailing comma not found in \" + jsonish + \" or \" + sanitizedJson);",
                    "646": "return canonicalizeNumber(sanitizedJson, sanStart, sanEnd);",
                    "673": "assert 'e' == (sanitizedJson.charAt(fractionEnd) | 32);",
                    "679": "assert intStart      <= intEnd && intEnd        <= fractionStart && fractionStart <= fractionEnd && fractionEnd   <= expStart && expStart      <= expEnd;",
                    "685": "try {",
                    "688": "catch (@SuppressWarnings(\"unused\") NumberFormatException ex) {",
                    "689": "return false;",
                    "742": "return true;",
                    "768": "return true;",
                    "774": "return \"false\".regionMatches(0, jsonish, start, n);",
                    "777": "return \"null\".regionMatches(0, jsonish, start, n) || \"true\".regionMatches(0, jsonish, start, n);",
                    "780": "return false;",
                    "785": "return '0' <= ch && ch <= '7';",
                    "792": "return 'a' <= ch && ch <= 'f';",
                    "803": "return true;",
                    "804": "default: return false;",
                    "827": "return limit;",
                    "837": "return sanitizedJson != null ? sanitizedJson : jsonish;",
                    "842": "return sanitizedJson != null ? sanitizedJson.toString() : jsonish;"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "32": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "48": "token_loop: for (int i = 0; i < n; ++i) {",
                    "51": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "56": "switch (ch) {",
                    "70": "if (isMap == null) {",
                    "79": "if (bracketDepth == 0) {",
                    "84": "switch (state) {",
                    "99": "if (ch != closeBracket) {",
                    "106": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "107": "switch (state) {",
                    "130": "if (state == State.AFTER_KEY) {",
                    "133": "else {",
                    "140": "if (i + 1 < n) {",
                    "141": "switch (jsonish.charAt(i + 1)) {",
                    "144": "for (int j = i + 2; j < n; ++j) {",
                    "146": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "156": "if (i + 3 < n) {",
                    "157": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "158": "if (jsonish.charAt(j - 1) == '*') {",
                    "176": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "178": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "185": "if (runEnd == i) {",
                    "193": "if (!(isNumber || isKeyword)) {",
                    "194": "for (; runEnd < n; ++runEnd) {",
                    "195": "if (isJsonSpecialChar(runEnd)) {",
                    "201": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "206": "if (state == State.AFTER_KEY) {",
                    "208": "if (isNumber) {",
                    "212": "else {",
                    "217": "else {",
                    "218": "if (isNumber) {",
                    "221": "else if (!isKeyword) {",
                    "239": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "244": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "248": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "249": "if (sanitizedJson == null) {",
                    "255": "switch (state) {",
                    "268": "while (bracketDepth != 0) {",
                    "278": "for (int i = start; i < end; ++i) {",
                    "280": "switch (ch) {",
                    "286": "if (i == start) {",
                    "287": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "289": "else {",
                    "290": "if (i + 1 == end) {",
                    "292": "if (startDelim != '\\'') {",
                    "299": "if (closed) {",
                    "300": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "302": "else if (ch == '\"') {",
                    "310": "if (i > start && i + 2 < end && '<' == jsonish.charAt(i - 1) && 's' == (jsonish.charAt(i + 1) | 32) && 'c' == (jsonish.charAt(i + 2) | 32)) {",
                    "316": "if (i + 2 < end && ']' == jsonish.charAt(i + 1) && '>' == jsonish.charAt(i + 2)) {",
                    "322": "if (i + 1 == end) {",
                    "328": "switch (sch) {",
                    "336": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "345": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "355": "if (octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd;",
                    "356": "if (ch <= '3' && octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd;",
                    "360": "for (int j = i; j < octalEnd; ++j) {",
                    "375": "default: if (ch < 0x20) {",
                    "376": "if (ch == 9 || ch == 0xa || ch == 0xd) { continue; }",
                    "378": "else if (ch < 0xd800) {",
                    "381": "else if (ch < 0xe000) {",
                    "382": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "387": "else if (ch <= 0xfffd) {",
                    "392": "for (int j = 4; --j >= 0;) {",
                    "401": "if (!closed) { insert(end, '\"'); }",
                    "405": "switch (state) {",
                    "407": "if (canBeKey) {",
                    "410": "else {",
                    "421": "if (canBeKey) {",
                    "425": "else {",
                    "433": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "450": "if (sanitizedJson == null) {",
                    "470": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "472": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "475": "if (((i - slashRunStart) & 1) == 0) {",
                    "485": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "486": "switch (jsonish.charAt(i)) {",
                    "498": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "499": "switch (sanitizedJson.charAt(i)) {",
                    "515": "if (pos < end) {",
                    "516": "switch (jsonish.charAt(pos)) {",
                    "528": "if (pos == intEnd) {",
                    "531": "else if ('0' == jsonish.charAt(pos)) {",
                    "534": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "535": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "538": "if ('0' <= ch && ch <= '9') {",
                    "541": "else {",
                    "543": "if ('a' <= ch && ch <= 'f') {",
                    "546": "else {",
                    "557": "else if (intEnd - pos > 1) {",
                    "558": "for (int i = pos; i < intEnd; ++i) {",
                    "560": "if (digVal < 0) {",
                    "570": "if (reencoded) {",
                    "572": "if (value < 0) {",
                    "574": "if (lastIndex >= 0) {",
                    "576": "if (last == '-' || last == '+') {",
                    "578": "if (last == '-') {",
                    "594": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "596": "if (fractionEnd == pos) {",
                    "603": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "604": "if (pos < end) {",
                    "605": "switch (jsonish.charAt(pos)) {",
                    "613": "if (expEnd == pos) {",
                    "620": "if (pos != end) {",
                    "638": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "640": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "643": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "646": "else {",
                    "648": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "650": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "655": "if (fractionEnd == sanEnd) {",
                    "658": "else {",
                    "661": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "667": "if (expEnd == expStart) {",
                    "670": "else {",
                    "684": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "686": "if (ch == '.') {",
                    "688": "if (zero) { nZeroesPending = 0; }",
                    "693": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "694": "if (digit == '0') { ++nZeroesPending;",
                    "696": "else {",
                    "697": "if (zero) {",
                    "698": "if (sawDecimal) {",
                    "706": "while (nZeroesPending != 0 || digit != 0) {",
                    "708": "if (nZeroesPending == 0) {",
                    "712": "else {",
                    "725": "if (zero) {",
                    "731": "if (k <= n && n <= 21) {",
                    "732": "for (int i = k; i < n; ++i) {",
                    "737": "else if (0 < n && n <= 21) {",
                    "740": "else if (-6 < n && n <= 0) {",
                    "743": "else {",
                    "744": "if (k == 1) {",
                    "746": "else {",
                    "759": "if (n == 5) {",
                    "762": "else if (n == 4) {",
                    "776": "if ('0' <= ch && ch <= '9') { return true; }",
                    "783": "if (ch <= ' ') { return true; }",
                    "784": "switch (ch) {",
                    "796": "for (int i = 0, x = n; i < nDigits; ++i, x >>>= 4) {",
                    "808": "for (int end = start; end < limit; ++end) {",
                    "810": "if (!('0' <= ch && ch <= '9')) { return end; }"
                }
            },
            "new": {
                "src/main/java/com/google/json/JsonSanitizer.java": {
                    "32": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "48": "token_loop: for (int i = 0; i < n; ++i) {",
                    "51": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "56": "switch (ch) {",
                    "70": "if (isMap == null) {",
                    "79": "if (bracketDepth == 0) {",
                    "84": "switch (state) {",
                    "99": "if (ch != closeBracket) {",
                    "106": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "107": "switch (state) {",
                    "130": "if (state == State.AFTER_KEY) {",
                    "133": "else {",
                    "140": "if (i + 1 < n) {",
                    "141": "switch (jsonish.charAt(i + 1)) {",
                    "144": "for (int j = i + 2; j < n; ++j) {",
                    "146": "if (cch == '\\n' || cch == '\\r' || cch == '\\u2028' || cch == '\\u2029') {",
                    "156": "if (i + 3 < n) {",
                    "157": "for (int j = i + 2; (j = jsonish.indexOf('/', j + 1)) >= 0;) {",
                    "158": "if (jsonish.charAt(j - 1) == '*') {",
                    "176": "for (runEnd = i; runEnd < n; ++runEnd) {",
                    "178": "if (('a' <= tch && tch <= 'z') || ('0' <= tch && tch <= '9') || tch == '+' || tch == '-' || tch == '.' || ('A' <= tch && tch <= 'Z') || tch == '_' || tch == '$') {",
                    "185": "if (runEnd == i) {",
                    "193": "if (!(isNumber || isKeyword)) {",
                    "194": "for (; runEnd < n; ++runEnd) {",
                    "195": "if (isJsonSpecialChar(runEnd)) {",
                    "201": "if (runEnd < n && jsonish.charAt(runEnd) == '\"') { ++runEnd;",
                    "206": "if (state == State.AFTER_KEY) {",
                    "208": "if (isNumber) {",
                    "212": "else {",
                    "217": "else {",
                    "218": "if (isNumber) {",
                    "221": "else if (!isKeyword) {",
                    "239": "if (state == State.START_ARRAY && bracketDepth == 0) {",
                    "244": "if (SUPER_VERBOSE_AND_SLOW_LOGGING) {",
                    "248": "if ((sanitizedJson != null && sanitizedJson.length() != 0) || cleaned != 0 || bracketDepth != 0) {",
                    "249": "if (sanitizedJson == null) {",
                    "255": "switch (state) {",
                    "268": "while (bracketDepth != 0) {",
                    "278": "for (int i = start; i < end; ++i) {",
                    "280": "switch (ch) {",
                    "286": "if (i == start) {",
                    "287": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "289": "else {",
                    "290": "if (i + 1 == end) {",
                    "292": "if (startDelim != '\\'') {",
                    "299": "if (closed) {",
                    "300": "if (ch == '\\'') { replace(i, i + 1, '\"'); }",
                    "302": "else if (ch == '\"') {",
                    "310": "if (i + 3 >= end)",
                    "318": "if ((c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c')) {",
                    "324": "if ((i - 2) >= start && '-' == jsonish.charAt(i - 2) && '-' == jsonish.charAt(i - 1)) {",
                    "330": "if (i + 2 < end && ']' == jsonish.charAt(i + 1) && '>' == jsonish.charAt(i + 2)) {",
                    "336": "if (i + 1 == end) {",
                    "342": "switch (sch) {",
                    "350": "if (i + 4 < end && isHexAt(i+2) && isHexAt(i+3)) {",
                    "359": "if (i + 6 < end && isHexAt(i + 2) && isHexAt(i + 3) && isHexAt(i + 4) && isHexAt(i + 5)) {",
                    "369": "if (octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd;",
                    "370": "if (ch <= '3' && octalEnd + 1 < end && isOctAt(octalEnd + 1)) { ++octalEnd;",
                    "374": "for (int j = i; j < octalEnd; ++j) {",
                    "389": "default: if (ch < 0x20) {",
                    "390": "if (ch == 9 || ch == 0xa || ch == 0xd) { continue; }",
                    "392": "else if (ch < 0xd800) {",
                    "395": "else if (ch < 0xe000) {",
                    "396": "if (Character.isHighSurrogate(ch) && i+1 < end && Character.isLowSurrogate(jsonish.charAt(i+1))) { ++i;",
                    "401": "else if (ch <= 0xfffd) {",
                    "406": "for (int j = 4; --j >= 0;) {",
                    "415": "if (!closed) { insert(end, '\"'); }",
                    "419": "switch (state) {",
                    "421": "if (canBeKey) {",
                    "424": "else {",
                    "435": "if (canBeKey) {",
                    "439": "else {",
                    "447": "if (bracketDepth == 0) { throw UNBRACKETED_COMMA; }",
                    "464": "if (sanitizedJson == null) {",
                    "484": "for (int i = start; (i = s.indexOf(quote, i + 1)) >= 0;) {",
                    "486": "while (slashRunStart > start && s.charAt(slashRunStart - 1) == '\\\\') { --slashRunStart;",
                    "489": "if (((i - slashRunStart) & 1) == 0) {",
                    "499": "for (int i = closeBracketPos; --i >= cleaned;) {",
                    "500": "switch (jsonish.charAt(i)) {",
                    "512": "for (int i = sanitizedJson.length(); --i >= 0;) {",
                    "513": "switch (sanitizedJson.charAt(i)) {",
                    "529": "if (pos < end) {",
                    "530": "switch (jsonish.charAt(pos)) {",
                    "542": "if (pos == intEnd) {",
                    "545": "else if ('0' == jsonish.charAt(pos)) {",
                    "548": "if (intEnd - pos == 1 && intEnd < end && 'x' == (jsonish.charAt(intEnd) | 32)) {",
                    "549": "for (intEnd = intEnd + 1; intEnd < end; ++intEnd) {",
                    "552": "if ('0' <= ch && ch <= '9') {",
                    "555": "else {",
                    "557": "if ('a' <= ch && ch <= 'f') {",
                    "560": "else {",
                    "571": "else if (intEnd - pos > 1) {",
                    "572": "for (int i = pos; i < intEnd; ++i) {",
                    "574": "if (digVal < 0) {",
                    "584": "if (reencoded) {",
                    "586": "if (value < 0) {",
                    "588": "if (lastIndex >= 0) {",
                    "590": "if (last == '-' || last == '+') {",
                    "592": "if (last == '-') {",
                    "608": "if (pos < end && jsonish.charAt(pos) == '.') { ++pos;",
                    "610": "if (fractionEnd == pos) {",
                    "617": "if (pos < end && 'e' == (jsonish.charAt(pos) | 32)) { ++pos;",
                    "618": "if (pos < end) {",
                    "619": "switch (jsonish.charAt(pos)) {",
                    "627": "if (expEnd == pos) {",
                    "634": "if (pos != end) {",
                    "652": "for (intEnd = intStart; intEnd < sanEnd; ++intEnd) {",
                    "654": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "657": "if (intEnd == sanEnd || '.' != sanitizedJson.charAt(intEnd)) {",
                    "660": "else {",
                    "662": "for (fractionEnd = fractionStart; fractionEnd < sanEnd; ++fractionEnd) {",
                    "664": "if (!('0' <= ch && ch <= '9')) { break; }",
                    "669": "if (fractionEnd == sanEnd) {",
                    "672": "else {",
                    "675": "if (sanitizedJson.charAt(expStart) == '+') { ++expStart; }",
                    "681": "if (expEnd == expStart) {",
                    "684": "else {",
                    "698": "for (int i = intStart, nZeroesPending = 0; i < fractionEnd; ++i) {",
                    "700": "if (ch == '.') {",
                    "702": "if (zero) { nZeroesPending = 0; }",
                    "707": "if ((!zero || digit != '0') && !sawDecimal) { ++n; }",
                    "708": "if (digit == '0') { ++nZeroesPending;",
                    "710": "else {",
                    "711": "if (zero) {",
                    "712": "if (sawDecimal) {",
                    "720": "while (nZeroesPending != 0 || digit != 0) {",
                    "722": "if (nZeroesPending == 0) {",
                    "726": "else {",
                    "739": "if (zero) {",
                    "745": "if (k <= n && n <= 21) {",
                    "746": "for (int i = k; i < n; ++i) {",
                    "751": "else if (0 < n && n <= 21) {",
                    "754": "else if (-6 < n && n <= 0) {",
                    "757": "else {",
                    "758": "if (k == 1) {",
                    "760": "else {",
                    "773": "if (n == 5) {",
                    "776": "else if (n == 4) {",
                    "790": "if ('0' <= ch && ch <= '9') { return true; }",
                    "797": "if (ch <= ' ') { return true; }",
                    "798": "switch (ch) {",
                    "810": "for (int i = 0, x = n; i < nDigits; ++i, x >>>= 4) {",
                    "822": "for (int end = start; end < limit; ++end) {",
                    "824": "if (!('0' <= ch && ch <= '9')) { return end; }"
                }
            }
        }
    },
    "CVE-2020-13956": {
        "source": {
            "old": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "232": "public static HttpHost extractHost(final URI uri) {"
                }
            },
            "new": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "232": "public static HttpHost extractHost(final URI uri) {"
                }
            }
        },
        "sink": {
            "old": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "56": "return new URI(buffer.toString());",
                    "61": "return rewriteURI(uri, target, dropFragment ? DROP_FRAGMENT : NO_FLAGS);",
                    "68": "return uri;",
                    "108": "return uribuilder.build();",
                    "112": "return rewriteURI(uri, target, NORMALIZE);",
                    "118": "return uri;",
                    "139": "return uribuilder.build();",
                    "143": "return rewriteURIForRoute(uri, route, true);",
                    "148": "return null;",
                    "152": "return uri.isAbsolute() ? rewriteURI(uri) : rewriteURI(uri, route.getTargetHost(), normalizeUri ? DROP_FRAGMENT_AND_NORMALIZE : DROP_FRAGMENT);",
                    "155": "return uri.isAbsolute() ? rewriteURI(uri, null, normalizeUri ? DROP_FRAGMENT_AND_NORMALIZE : DROP_FRAGMENT) : rewriteURI(uri);",
                    "159": "return resolve(baseURI, URI.create(reference));",
                    "170": "return URI.create(baseUri + s);",
                    "184": "try {",
                    "185": "return normalizeSyntax(resolved);",
                    "187": "catch (final URISyntaxException ex) {",
                    "188": "throw new IllegalArgumentException(ex);",
                    "195": "return uri;",
                    "229": "return builder.build();",
                    "234": "return null;",
                    "271": "try {",
                    "274": "catch (final NumberFormatException ex) {",
                    "290": "try {",
                    "293": "catch (final IllegalArgumentException ignore) {",
                    "300": "return target;",
                    "329": "return uribuilder.build();"
                }
            },
            "new": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "56": "return new URI(buffer.toString());",
                    "61": "return rewriteURI(uri, target, dropFragment ? DROP_FRAGMENT : NO_FLAGS);",
                    "68": "return uri;",
                    "108": "return uribuilder.build();",
                    "112": "return rewriteURI(uri, target, NORMALIZE);",
                    "118": "return uri;",
                    "139": "return uribuilder.build();",
                    "143": "return rewriteURIForRoute(uri, route, true);",
                    "148": "return null;",
                    "152": "return uri.isAbsolute() ? rewriteURI(uri) : rewriteURI(uri, route.getTargetHost(), normalizeUri ? DROP_FRAGMENT_AND_NORMALIZE : DROP_FRAGMENT);",
                    "155": "return uri.isAbsolute() ? rewriteURI(uri, null, normalizeUri ? DROP_FRAGMENT_AND_NORMALIZE : DROP_FRAGMENT) : rewriteURI(uri);",
                    "159": "return resolve(baseURI, URI.create(reference));",
                    "170": "return URI.create(baseUri + s);",
                    "184": "try {",
                    "185": "return normalizeSyntax(resolved);",
                    "187": "catch (final URISyntaxException ex) {",
                    "188": "throw new IllegalArgumentException(ex);",
                    "195": "return uri;",
                    "229": "return builder.build();",
                    "234": "return null;",
                    "252": "try {",
                    "256": "catch (final NumberFormatException ex) {",
                    "257": "return null;",
                    "266": "try {",
                    "267": "return new HttpHost(hostname, port, scheme);",
                    "269": "catch (final IllegalArgumentException ex) {",
                    "270": "return null;",
                    "277": "return new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme());",
                    "282": "return null;",
                    "311": "return uribuilder.build();"
                }
            }
        },
        "undefined": {
            "old": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "24": "if (host != null) {",
                    "25": "if (scheme != null) {",
                    "31": "if (port > 0) {",
                    "38": "if (path == null || !path.startsWith(\"/\")) {",
                    "42": "if (path != null) {",
                    "46": "if (query != null) {",
                    "51": "if (fragment != null) {",
                    "67": "if (uri.isOpaque()) {",
                    "72": "if (target != null) {",
                    "77": "else {",
                    "83": "if (flags.contains(UriFlag.DROP_FRAGMENT)) {",
                    "87": "if (flags.contains(UriFlag.NORMALIZE)) {",
                    "90": "for (final Iterator<String> it = pathSegments.iterator(); it.hasNext(); ) {",
                    "92": "if (pathSegment.isEmpty() && it.hasNext()) {",
                    "98": "if (pathSegments.size() != originalPathSegments.size()) {",
                    "104": "if (uribuilder.isPathEmpty()) {",
                    "117": "if (uri.isOpaque()) {",
                    "122": "if (uribuilder.getUserInfo() != null) {",
                    "126": "if (uribuilder.getPathSegments().isEmpty()) {",
                    "130": "if (TextUtils.isEmpty(uribuilder.getPath())) {",
                    "134": "if (uribuilder.getHost() != null) {",
                    "147": "if (uri == null) {",
                    "151": "if (route.getProxyHost() != null && !route.isTunnelled()) {",
                    "166": "if (s.startsWith(\"?\")) {",
                    "175": "if (emptyReference) {",
                    "180": "else {",
                    "194": "if (uri.isOpaque() || uri.getAuthority() == null) {",
                    "201": "for (final String inputSegment : inputSegments) {",
                    "202": "if (\".\".equals(inputSegment)) {",
                    "204": "else if (\"..\".equals(inputSegment)) {",
                    "205": "if (!outputSegments.isEmpty()) {",
                    "210": "else {",
                    "216": "if (outputSegments.size() == 0) {",
                    "221": "if (builder.getScheme() != null) {",
                    "225": "if (builder.getHost() != null) {",
                    "233": "if (uri == null) {",
                    "238": "if (uri.isAbsolute()) {",
                    "241": "if (host == null) {",
                    "243": "if (host != null) {",
                    "245": "if (at >= 0) {",
                    "246": "if (host.length() > at+1 ) {",
                    "249": "else {",
                    "255": "if (host != null) {",
                    "257": "if (colon >= 0) {",
                    "260": "for (int i = pos; i < host.length(); i++) {",
                    "261": "if (Character.isDigit(host.charAt(i))) {",
                    "264": "else {",
                    "270": "if (len > 0) {",
                    "289": "if (!TextUtils.isBlank(host)) {",
                    "306": "if (redirects == null || redirects.isEmpty()) {",
                    "309": "else {",
                    "312": "for (int i = redirects.size() - 1; frag == null && i >= 0; i--) {",
                    "319": "if (uribuilder.getFragment() == null) {",
                    "323": "if (target != null && !uribuilder.isAbsolute()) {"
                }
            },
            "new": {
                "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java": {
                    "24": "if (host != null) {",
                    "25": "if (scheme != null) {",
                    "31": "if (port > 0) {",
                    "38": "if (path == null || !path.startsWith(\"/\")) {",
                    "42": "if (path != null) {",
                    "46": "if (query != null) {",
                    "51": "if (fragment != null) {",
                    "67": "if (uri.isOpaque()) {",
                    "72": "if (target != null) {",
                    "77": "else {",
                    "83": "if (flags.contains(UriFlag.DROP_FRAGMENT)) {",
                    "87": "if (flags.contains(UriFlag.NORMALIZE)) {",
                    "90": "for (final Iterator<String> it = pathSegments.iterator(); it.hasNext(); ) {",
                    "92": "if (pathSegment.isEmpty() && it.hasNext()) {",
                    "98": "if (pathSegments.size() != originalPathSegments.size()) {",
                    "104": "if (uribuilder.isPathEmpty()) {",
                    "117": "if (uri.isOpaque()) {",
                    "122": "if (uribuilder.getUserInfo() != null) {",
                    "126": "if (uribuilder.getPathSegments().isEmpty()) {",
                    "130": "if (TextUtils.isEmpty(uribuilder.getPath())) {",
                    "134": "if (uribuilder.getHost() != null) {",
                    "147": "if (uri == null) {",
                    "151": "if (route.getProxyHost() != null && !route.isTunnelled()) {",
                    "166": "if (s.startsWith(\"?\")) {",
                    "175": "if (emptyReference) {",
                    "180": "else {",
                    "194": "if (uri.isOpaque() || uri.getAuthority() == null) {",
                    "201": "for (final String inputSegment : inputSegments) {",
                    "202": "if (\".\".equals(inputSegment)) {",
                    "204": "else if (\"..\".equals(inputSegment)) {",
                    "205": "if (!outputSegments.isEmpty()) {",
                    "210": "else {",
                    "216": "if (outputSegments.size() == 0) {",
                    "221": "if (builder.getScheme() != null) {",
                    "225": "if (builder.getHost() != null) {",
                    "233": "if (uri == null) {",
                    "237": "if (uri.isAbsolute()) {",
                    "238": "if (uri.getHost() == null) {",
                    "239": "if (uri.getAuthority() != null) {",
                    "242": "if (at != -1) {",
                    "250": "if (at != -1) {",
                    "261": "else {",
                    "276": "else {",
                    "288": "if (redirects == null || redirects.isEmpty()) {",
                    "291": "else {",
                    "294": "for (int i = redirects.size() - 1; frag == null && i >= 0; i--) {",
                    "301": "if (uribuilder.getFragment() == null) {",
                    "305": "if (target != null && !uribuilder.isAbsolute()) {"
                }
            }
        }
    },
    "CVE-2018-1002201": {
        "source": {
            "old": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {}
            },
            "new": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {
                    "678": "public void process(InputStream in, ZipEntry zipEntry) throws IOException {",
                    "722": "public void process(InputStream in, ZipEntry zipEntry) throws IOException {",
                    "769": "public void process(InputStream in, ZipEntry zipEntry) throws IOException {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {
                    "42": "try {",
                    "44": "return zf.getEntry(name) != null;",
                    "47": "catch (IOException e) {",
                    "48": "throw ZipExceptionUtil.rethrow(e);",
                    "59": "return getCompressionMethodOfEntry(zip, name);",
                    "64": "try {",
                    "68": "return -1;",
                    "71": "return zipEntry.getMethod();",
                    "74": "catch (IOException e) {",
                    "75": "throw ZipExceptionUtil.rethrow(e);",
                    "86": "try {",
                    "90": "return true;",
                    "95": "return false;",
                    "98": "catch (IOException e) {",
                    "99": "throw ZipExceptionUtil.rethrow(e);",
                    "110": "try {",
                    "112": "return doUnpackEntry(zf, name);",
                    "115": "catch (IOException e) {",
                    "116": "throw ZipExceptionUtil.rethrow(e);",
                    "127": "try {",
                    "136": "return doUnpackEntry(zf, name);",
                    "139": "catch (IOException e) {",
                    "140": "throw ZipExceptionUtil.rethrow(e);",
                    "150": "try {",
                    "151": "return doUnpackEntry(zf, name);",
                    "154": "catch (IOException e) {",
                    "155": "throw ZipExceptionUtil.rethrow(e);",
                    "163": "return null;",
                    "167": "try {",
                    "168": "return IOUtils.toByteArray(is);",
                    "180": "return null;",
                    "181": "return action.getBytes();",
                    "191": "return bytes;",
                    "197": "return unpackEntry(zip, name, file, null);",
                    "202": "try {",
                    "211": "return doUnpackEntry(zf, name, file);",
                    "214": "catch (IOException e) {",
                    "215": "throw ZipExceptionUtil.rethrow(e);",
                    "225": "try {",
                    "226": "return doUnpackEntry(zf, name, file);",
                    "229": "catch (IOException e) {",
                    "230": "throw ZipExceptionUtil.rethrow(e);",
                    "242": "return false;",
                    "247": "return true;",
                    "254": "return file.mkdirs();",
                    "258": "try {",
                    "266": "return true;",
                    "270": "return handle(is, name, new FileUnpacker(file));",
                    "291": "try {",
                    "304": "try {",
                    "308": "catch (IOException ze) {",
                    "309": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \"' with action \" + action, ze);",
                    "312": "catch (ZipBreakException ex) {",
                    "324": "catch (IOException e) {",
                    "325": "throw ZipExceptionUtil.rethrow(e);",
                    "340": "try {",
                    "356": "try {",
                    "360": "catch (IOException ze) {",
                    "361": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "364": "catch (ZipBreakException ex) {",
                    "376": "catch (IOException e) {",
                    "377": "throw ZipExceptionUtil.rethrow(e);",
                    "388": "try {",
                    "393": "try {",
                    "397": "catch (IOException ze) {",
                    "398": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "401": "catch (ZipBreakException ex) {",
                    "409": "catch (IOException e) {",
                    "410": "throw ZipExceptionUtil.rethrow(e);",
                    "421": "try {",
                    "429": "try {",
                    "433": "catch (IOException ze) {",
                    "434": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "437": "catch (ZipBreakException ex) {",
                    "445": "catch (IOException e) {",
                    "446": "throw ZipExceptionUtil.rethrow(e);",
                    "456": "try {",
                    "458": "try {",
                    "462": "try {",
                    "466": "catch (IOException ze) {",
                    "467": "throw new ZipException(\"Failed to process zip entry '\" + entry.getName() + \" with action \" + action, ze);",
                    "470": "catch (ZipBreakException ex) {",
                    "487": "catch (IOException e) {",
                    "488": "throw ZipExceptionUtil.rethrow(e);",
                    "503": "try {",
                    "505": "try {",
                    "513": "try {",
                    "517": "catch (IOException ze) {",
                    "518": "throw new ZipException(\"Failed to process zip entry '\" + entry.getName() + \" with action \" + action, ze);",
                    "521": "catch (ZipBreakException ex) {",
                    "538": "catch (IOException e) {",
                    "539": "throw ZipExceptionUtil.rethrow(e);",
                    "551": "return new ZipInputStream(in);",
                    "554": "return ZipFileUtil.createZipInputStream(in, charset);",
                    "559": "try {",
                    "563": "return false;",
                    "567": "try {",
                    "575": "return true;",
                    "578": "catch (IOException e) {",
                    "579": "throw ZipExceptionUtil.rethrow(e);",
                    "591": "return helper.found();",
                    "612": "return found;",
                    "764": "throw new ZipException(\"Unwrapping with multiple roots is not supported, roots: \" + rootDir + \", \" + root);",
                    "788": "return name.substring(root.length());",
                    "795": "throw new ZipException(\"Entry \" + newName + \" from the root of the zip is not supported\");",
                    "798": "return newName.substring(0, newName.indexOf(PATH_SEPARATOR));",
                    "804": "try {",
                    "809": "throw new IOException(\"Unable to delete file: \" + tempFile);",
                    "814": "catch (IOException e) {",
                    "815": "throw ZipExceptionUtil.rethrow(e);",
                    "823": "try {",
                    "827": "try {",
                    "838": "catch (IOException e) {",
                    "839": "throw ZipExceptionUtil.rethrow(e);",
                    "842": "return result.toByteArray();",
                    "903": "try {",
                    "917": "catch (IOException e) {",
                    "918": "throw ZipExceptionUtil.rethrow(e);",
                    "935": "throw new ZipException(\"Given file '\" + sourceDir + \"' doesn't exist!\");",
                    "939": "try {",
                    "945": "catch (IOException e) {",
                    "946": "throw ZipExceptionUtil.rethrow(e);",
                    "970": "throw new ZipException(\"Given file '\" + sourceDir + \"' doesn't exist!\");",
                    "975": "try {",
                    "981": "catch (IOException e) {",
                    "987": "try {",
                    "992": "catch (IOException e) {",
                    "1001": "throw ZipExceptionUtil.rethrow(error);",
                    "1010": "throw new ZipException(\"Given file '\" + dir + \"' doesn't exist!\");",
                    "1013": "throw new IOException(\"Given file is not a directory '\" + dir + \"'\");",
                    "1017": "throw new ZipException(\"Given directory '\" + dir + \"' doesn't contain any files!\");",
                    "1051": "try {",
                    "1064": "try {",
                    "1075": "try {",
                    "1079": "throw new IOException(\"Unable to delete the file: \" + zip);",
                    "1085": "catch (IOException e) {",
                    "1086": "throw ZipExceptionUtil.rethrow(e);",
                    "1094": "try {",
                    "1099": "catch (IOException e) {",
                    "1120": "try {",
                    "1127": "catch (IOException e) {",
                    "1128": "throw ZipExceptionUtil.rethrow(e);",
                    "1142": "try {",
                    "1156": "catch (IOException e) {",
                    "1157": "throw ZipExceptionUtil.rethrow(e);",
                    "1168": "try {",
                    "1173": "catch (IOException e) {",
                    "1174": "throw ZipExceptionUtil.rethrow(e);",
                    "1189": "return true;",
                    "1207": "return true;",
                    "1217": "return true;",
                    "1231": "return true;",
                    "1245": "try {",
                    "1250": "catch (IOException e) {",
                    "1266": "try {",
                    "1276": "catch (IOException e) {",
                    "1288": "try {",
                    "1298": "catch (IOException e) {",
                    "1306": "return true;",
                    "1320": "return true;",
                    "1334": "try {",
                    "1339": "catch (IOException e) {",
                    "1340": "throw ZipExceptionUtil.rethrow(e);",
                    "1351": "return true;",
                    "1400": "return;",
                    "1405": "return;",
                    "1428": "return dirs;",
                    "1432": "try {",
                    "1451": "catch (IOException e) {",
                    "1459": "return dirs;",
                    "1463": "return replaceEntry(zip, new FileSource(path, file), destZip);",
                    "1476": "return replaceEntry(zip, new ByteSource(path, bytes), destZip);",
                    "1498": "return replaceEntries(zip, new ZipEntrySource[] { entry }, destZip);",
                    "1517": "try {",
                    "1519": "try {",
                    "1549": "catch (IOException e) {",
                    "1553": "return entryByPath.size() < entryCount;",
                    "1571": "try {",
                    "1573": "try {",
                    "1607": "catch (IOException e) {",
                    "1615": "return true;",
                    "1630": "return result;",
                    "1635": "return transformEntry(zip, new ZipEntryTransformerEntry(path, transformer), destZip);",
                    "1648": "return transformEntries(zip, new ZipEntryTransformerEntry[] { entry }, destZip);",
                    "1663": "try {",
                    "1665": "try {",
                    "1668": "return action.found();",
                    "1677": "catch (IOException e) {",
                    "1678": "throw ZipExceptionUtil.rethrow(e);",
                    "1693": "return transformEntry(is, new ZipEntryTransformerEntry(path, transformer), os);",
                    "1697": "return transformEntries(is, new ZipEntryTransformerEntry[] { entry }, os);",
                    "1703": "try {",
                    "1708": "return action.found();",
                    "1711": "catch (IOException e) {",
                    "1712": "throw ZipExceptionUtil.rethrow(e);",
                    "1748": "return entryByPath.size() < entryCount;",
                    "1759": "return result;",
                    "1766": "try {",
                    "1780": "try {",
                    "1782": "return true;",
                    "1793": "return result;",
                    "1796": "catch (Exception e) {",
                    "1798": "return false;",
                    "1806": "try {",
                    "1811": "return false;",
                    "1820": "return false;",
                    "1825": "try {",
                    "1830": "return false;",
                    "1850": "return true;",
                    "1856": "return false;",
                    "1861": "return true;",
                    "1866": "return false;",
                    "1873": "return false;",
                    "1880": "return false;",
                    "1887": "return false;",
                    "1899": "return true;",
                    "1903": "return entryEquals(f1, f2, path, path);",
                    "1909": "try {",
                    "1912": "return doEntryEquals(zf1, zf2, path1, path2);",
                    "1915": "catch (IOException e) {",
                    "1916": "throw ZipExceptionUtil.rethrow(e);",
                    "1927": "try {",
                    "1928": "return doEntryEquals(zf1, zf2, path1, path2);",
                    "1931": "catch (IOException e) {",
                    "1932": "throw ZipExceptionUtil.rethrow(e);",
                    "1940": "try {",
                    "1944": "return true;",
                    "1948": "return false;",
                    "1954": "return true;",
                    "1958": "return false;",
                    "1961": "return IOUtils.contentEquals(is1, is2);",
                    "1972": "try {",
                    "1979": "catch (IOException e) {",
                    "1990": "try {",
                    "1998": "return result;",
                    "2001": "catch (IOException e) {",
                    "2002": "throw ZipExceptionUtil.rethrow(e);"
                }
            },
            "new": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {
                    "42": "try {",
                    "44": "return zf.getEntry(name) != null;",
                    "47": "catch (IOException e) {",
                    "48": "throw ZipExceptionUtil.rethrow(e);",
                    "59": "return getCompressionMethodOfEntry(zip, name);",
                    "64": "try {",
                    "68": "return -1;",
                    "71": "return zipEntry.getMethod();",
                    "74": "catch (IOException e) {",
                    "75": "throw ZipExceptionUtil.rethrow(e);",
                    "86": "try {",
                    "90": "return true;",
                    "95": "return false;",
                    "98": "catch (IOException e) {",
                    "99": "throw ZipExceptionUtil.rethrow(e);",
                    "110": "try {",
                    "112": "return doUnpackEntry(zf, name);",
                    "115": "catch (IOException e) {",
                    "116": "throw ZipExceptionUtil.rethrow(e);",
                    "127": "try {",
                    "136": "return doUnpackEntry(zf, name);",
                    "139": "catch (IOException e) {",
                    "140": "throw ZipExceptionUtil.rethrow(e);",
                    "150": "try {",
                    "151": "return doUnpackEntry(zf, name);",
                    "154": "catch (IOException e) {",
                    "155": "throw ZipExceptionUtil.rethrow(e);",
                    "163": "return null;",
                    "167": "try {",
                    "168": "return IOUtils.toByteArray(is);",
                    "180": "return null;",
                    "181": "return action.getBytes();",
                    "191": "return bytes;",
                    "197": "return unpackEntry(zip, name, file, null);",
                    "202": "try {",
                    "211": "return doUnpackEntry(zf, name, file);",
                    "214": "catch (IOException e) {",
                    "215": "throw ZipExceptionUtil.rethrow(e);",
                    "225": "try {",
                    "226": "return doUnpackEntry(zf, name, file);",
                    "229": "catch (IOException e) {",
                    "230": "throw ZipExceptionUtil.rethrow(e);",
                    "242": "return false;",
                    "247": "return true;",
                    "254": "return file.mkdirs();",
                    "258": "try {",
                    "266": "return true;",
                    "270": "return handle(is, name, new FileUnpacker(file));",
                    "291": "try {",
                    "304": "try {",
                    "308": "catch (IOException ze) {",
                    "309": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \"' with action \" + action, ze);",
                    "312": "catch (ZipBreakException ex) {",
                    "324": "catch (IOException e) {",
                    "325": "throw ZipExceptionUtil.rethrow(e);",
                    "340": "try {",
                    "356": "try {",
                    "360": "catch (IOException ze) {",
                    "361": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "364": "catch (ZipBreakException ex) {",
                    "376": "catch (IOException e) {",
                    "377": "throw ZipExceptionUtil.rethrow(e);",
                    "388": "try {",
                    "393": "try {",
                    "397": "catch (IOException ze) {",
                    "398": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "401": "catch (ZipBreakException ex) {",
                    "409": "catch (IOException e) {",
                    "410": "throw ZipExceptionUtil.rethrow(e);",
                    "421": "try {",
                    "429": "try {",
                    "433": "catch (IOException ze) {",
                    "434": "throw new ZipException(\"Failed to process zip entry '\" + e.getName() + \" with action \" + action, ze);",
                    "437": "catch (ZipBreakException ex) {",
                    "445": "catch (IOException e) {",
                    "446": "throw ZipExceptionUtil.rethrow(e);",
                    "456": "try {",
                    "458": "try {",
                    "462": "try {",
                    "466": "catch (IOException ze) {",
                    "467": "throw new ZipException(\"Failed to process zip entry '\" + entry.getName() + \" with action \" + action, ze);",
                    "470": "catch (ZipBreakException ex) {",
                    "487": "catch (IOException e) {",
                    "488": "throw ZipExceptionUtil.rethrow(e);",
                    "503": "try {",
                    "505": "try {",
                    "513": "try {",
                    "517": "catch (IOException ze) {",
                    "518": "throw new ZipException(\"Failed to process zip entry '\" + entry.getName() + \" with action \" + action, ze);",
                    "521": "catch (ZipBreakException ex) {",
                    "538": "catch (IOException e) {",
                    "539": "throw ZipExceptionUtil.rethrow(e);",
                    "551": "return new ZipInputStream(in);",
                    "554": "return ZipFileUtil.createZipInputStream(in, charset);",
                    "559": "try {",
                    "563": "return false;",
                    "567": "try {",
                    "575": "return true;",
                    "578": "catch (IOException e) {",
                    "579": "throw ZipExceptionUtil.rethrow(e);",
                    "591": "return helper.found();",
                    "612": "return found;",
                    "683": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                    "739": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                    "748": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                    "776": "throw new ZipException(\"Unwrapping with multiple roots is not supported, roots: \" + rootDir + \", \" + root);",
                    "783": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");",
                    "804": "return name.substring(root.length());",
                    "811": "throw new ZipException(\"Entry \" + newName + \" from the root of the zip is not supported\");",
                    "814": "return newName.substring(0, newName.indexOf(PATH_SEPARATOR));",
                    "820": "try {",
                    "825": "throw new IOException(\"Unable to delete file: \" + tempFile);",
                    "830": "catch (IOException e) {",
                    "831": "throw ZipExceptionUtil.rethrow(e);",
                    "839": "try {",
                    "843": "try {",
                    "854": "catch (IOException e) {",
                    "855": "throw ZipExceptionUtil.rethrow(e);",
                    "858": "return result.toByteArray();",
                    "919": "try {",
                    "933": "catch (IOException e) {",
                    "934": "throw ZipExceptionUtil.rethrow(e);",
                    "951": "throw new ZipException(\"Given file '\" + sourceDir + \"' doesn't exist!\");",
                    "955": "try {",
                    "961": "catch (IOException e) {",
                    "962": "throw ZipExceptionUtil.rethrow(e);",
                    "986": "throw new ZipException(\"Given file '\" + sourceDir + \"' doesn't exist!\");",
                    "991": "try {",
                    "997": "catch (IOException e) {",
                    "1003": "try {",
                    "1008": "catch (IOException e) {",
                    "1017": "throw ZipExceptionUtil.rethrow(error);",
                    "1026": "throw new ZipException(\"Given file '\" + dir + \"' doesn't exist!\");",
                    "1029": "throw new IOException(\"Given file is not a directory '\" + dir + \"'\");",
                    "1033": "throw new ZipException(\"Given directory '\" + dir + \"' doesn't contain any files!\");",
                    "1067": "try {",
                    "1080": "try {",
                    "1091": "try {",
                    "1095": "throw new IOException(\"Unable to delete the file: \" + zip);",
                    "1101": "catch (IOException e) {",
                    "1102": "throw ZipExceptionUtil.rethrow(e);",
                    "1110": "try {",
                    "1115": "catch (IOException e) {",
                    "1136": "try {",
                    "1143": "catch (IOException e) {",
                    "1144": "throw ZipExceptionUtil.rethrow(e);",
                    "1158": "try {",
                    "1172": "catch (IOException e) {",
                    "1173": "throw ZipExceptionUtil.rethrow(e);",
                    "1184": "try {",
                    "1189": "catch (IOException e) {",
                    "1190": "throw ZipExceptionUtil.rethrow(e);",
                    "1205": "return true;",
                    "1223": "return true;",
                    "1233": "return true;",
                    "1247": "return true;",
                    "1261": "try {",
                    "1266": "catch (IOException e) {",
                    "1282": "try {",
                    "1292": "catch (IOException e) {",
                    "1304": "try {",
                    "1314": "catch (IOException e) {",
                    "1322": "return true;",
                    "1336": "return true;",
                    "1350": "try {",
                    "1355": "catch (IOException e) {",
                    "1356": "throw ZipExceptionUtil.rethrow(e);",
                    "1367": "return true;",
                    "1416": "return;",
                    "1421": "return;",
                    "1444": "return dirs;",
                    "1448": "try {",
                    "1467": "catch (IOException e) {",
                    "1475": "return dirs;",
                    "1479": "return replaceEntry(zip, new FileSource(path, file), destZip);",
                    "1492": "return replaceEntry(zip, new ByteSource(path, bytes), destZip);",
                    "1514": "return replaceEntries(zip, new ZipEntrySource[] { entry }, destZip);",
                    "1533": "try {",
                    "1535": "try {",
                    "1565": "catch (IOException e) {",
                    "1569": "return entryByPath.size() < entryCount;",
                    "1587": "try {",
                    "1589": "try {",
                    "1623": "catch (IOException e) {",
                    "1631": "return true;",
                    "1646": "return result;",
                    "1651": "return transformEntry(zip, new ZipEntryTransformerEntry(path, transformer), destZip);",
                    "1664": "return transformEntries(zip, new ZipEntryTransformerEntry[] { entry }, destZip);",
                    "1679": "try {",
                    "1681": "try {",
                    "1684": "return action.found();",
                    "1693": "catch (IOException e) {",
                    "1694": "throw ZipExceptionUtil.rethrow(e);",
                    "1709": "return transformEntry(is, new ZipEntryTransformerEntry(path, transformer), os);",
                    "1713": "return transformEntries(is, new ZipEntryTransformerEntry[] { entry }, os);",
                    "1719": "try {",
                    "1724": "return action.found();",
                    "1727": "catch (IOException e) {",
                    "1728": "throw ZipExceptionUtil.rethrow(e);",
                    "1764": "return entryByPath.size() < entryCount;",
                    "1775": "return result;",
                    "1782": "try {",
                    "1796": "try {",
                    "1798": "return true;",
                    "1809": "return result;",
                    "1812": "catch (Exception e) {",
                    "1814": "return false;",
                    "1822": "try {",
                    "1827": "return false;",
                    "1836": "return false;",
                    "1841": "try {",
                    "1846": "return false;",
                    "1866": "return true;",
                    "1872": "return false;",
                    "1877": "return true;",
                    "1882": "return false;",
                    "1889": "return false;",
                    "1896": "return false;",
                    "1903": "return false;",
                    "1915": "return true;",
                    "1919": "return entryEquals(f1, f2, path, path);",
                    "1925": "try {",
                    "1928": "return doEntryEquals(zf1, zf2, path1, path2);",
                    "1931": "catch (IOException e) {",
                    "1932": "throw ZipExceptionUtil.rethrow(e);",
                    "1943": "try {",
                    "1944": "return doEntryEquals(zf1, zf2, path1, path2);",
                    "1947": "catch (IOException e) {",
                    "1948": "throw ZipExceptionUtil.rethrow(e);",
                    "1956": "try {",
                    "1960": "return true;",
                    "1964": "return false;",
                    "1970": "return true;",
                    "1974": "return false;",
                    "1977": "return IOUtils.contentEquals(is1, is2);",
                    "1988": "try {",
                    "1995": "catch (IOException e) {",
                    "2006": "try {",
                    "2014": "return result;",
                    "2017": "catch (IOException e) {",
                    "2018": "throw ZipExceptionUtil.rethrow(e);"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {
                    "67": "if (zipEntry == null) {",
                    "88": "for (int i = 0; i < names.length; i++) {",
                    "89": "if (zf.getEntry(names[i]) != null) {",
                    "128": "if (charset != null) {",
                    "132": "else {",
                    "162": "if (ze == null) {",
                    "179": "if (!handle(is, name, action))",
                    "203": "if (charset != null) {",
                    "207": "else {",
                    "236": "if (log.isTraceEnabled()) {",
                    "241": "if (ze == null) {",
                    "245": "if (ze.isDirectory() || zf.getInputStream(ze) == null) {",
                    "246": "if (file.isDirectory()) {",
                    "250": "if (file.exists()) {",
                    "292": "if (charset == null) {",
                    "296": "else {",
                    "301": "while (en.hasMoreElements()) {",
                    "341": "if (charset == null) {",
                    "345": "else {",
                    "349": "for (int i = 0; i < entryNames.length; i++) {",
                    "351": "if (e == null) {",
                    "391": "while (en.hasMoreElements()) {",
                    "423": "for (int i = 0; i < entryNames.length; i++) {",
                    "425": "if (e == null) {",
                    "461": "while ((entry = in.getNextEntry()) != null) {",
                    "479": "if (in != null) {",
                    "499": "for (int i = 0; i < entryNames.length; i++) {",
                    "508": "while ((entry = in.getNextEntry()) != null) {",
                    "509": "if (!namesSet.contains(entry.getName())) {",
                    "530": "if (in != null) {",
                    "550": "if (charset == null) {",
                    "562": "if (ze == null) {",
                    "604": "if (name.equals(zipEntry.getName())) {",
                    "680": "if (name != null) {",
                    "682": "if (zipEntry.isDirectory()) {",
                    "686": "else {",
                    "688": "if (log.isDebugEnabled() && file.exists()) {",
                    "696": "if (permissions != null) {",
                    "720": "if (name != null) {",
                    "721": "if (name.indexOf('\\\\') != -1) {",
                    "724": "for (int i = 0; i < dirs.length - 1; i++) {",
                    "726": "if (!file.exists()) {",
                    "737": "else {",
                    "759": "if (rootDir == null) {",
                    "763": "else if (!rootDir.equals(root)) {",
                    "768": "if (name != null) {",
                    "770": "if (zipEntry.isDirectory()) {",
                    "774": "else {",
                    "776": "if (log.isDebugEnabled() && file.exists()) {",
                    "794": "if (idx < 0) {",
                    "808": "if (!tempFile.delete()) {",
                    "854": "if (preserveRoot) {",
                    "856": "pack(sourceDir, targetZipFile, new NameMapper() {         public String map(String name) { return parentName + PATH_SEPARATOR + name;",
                    "864": "else {",
                    "875": "packEntry(fileToPack, destZipFile, new NameMapper() {       public String map(String name) { return fileName;",
                    "907": "for (int i = 0; i < filesToPack.length; i++) {",
                    "934": "if (!sourceDir.exists()) {",
                    "969": "if (!sourceDir.exists()) {",
                    "986": "if (out != null && error == null) {",
                    "1000": "if (error != null) {",
                    "1008": "if (filenames == null) {",
                    "1009": "if (!dir.exists()) {",
                    "1016": "if (mustHaveChildren && filenames.length == 0) {",
                    "1020": "for (int i = 0; i < filenames.length; i++) {",
                    "1025": "if (isDir) {",
                    "1030": "if (name != null) {",
                    "1033": "if (!isDir) {",
                    "1040": "if (isDir) {",
                    "1078": "if (!zip.delete()) {",
                    "1134": "if (log.isDebugEnabled()) {",
                    "1144": "for (int i = 0; i < entries.length; i++) {",
                    "1150": "if (closeStream) {",
                    "1163": "if (log.isDebugEnabled()) {",
                    "1240": "if (log.isDebugEnabled()) {",
                    "1261": "if (log.isDebugEnabled()) {",
                    "1269": "for (int i = 0; i < entries.length; i++) {",
                    "1283": "if (log.isDebugEnabled()) {",
                    "1291": "for (int i = 0; i < entries.length; i++) {",
                    "1329": "if (log.isDebugEnabled()) {",
                    "1362": "if (names.add(entryName)) {",
                    "1366": "else if (log.isDebugEnabled()) {",
                    "1380": "if (names.add(entryName)) {",
                    "1384": "else if (log.isDebugEnabled()) {",
                    "1399": "if (ignoredEntries.contains(entryName)) {",
                    "1403": "for (String dirName : dirNames) {",
                    "1404": "if (entryName.startsWith(dirName)) {",
                    "1410": "if (names.add(entryName)) {",
                    "1414": "else if (log.isDebugEnabled()) {",
                    "1427": "if (zip == null) {",
                    "1434": "for (String entryName : names) {",
                    "1436": "if (entry != null) {",
                    "1437": "if (entry.isDirectory()) {",
                    "1441": "else if (zf.getInputStream(entry) == null) {",
                    "1467": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new FileSource(path, file), tmpFile);",
                    "1480": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new ByteSource(path, bytes), tmpFile);",
                    "1489": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new ByteSource(path, bytes, compressionMethod), tmpFile);",
                    "1502": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, entry, tmpFile);",
                    "1511": "if (log.isDebugEnabled()) {",
                    "1521": "iterate(zip, new ZipEntryCallback() {           public void process(InputStream in, ZipEntry zipEntry) throws IOException { if (names.add(zipEntry.getName())) { ZipEntrySource entry = (ZipEntrySource) entryByPath.remove(zipEntry.getName());",
                    "1522": "if (entry != null) {",
                    "1526": "else {",
                    "1532": "else if (log.isDebugEnabled()) {",
                    "1557": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntries(zip, entries, tmpFile);",
                    "1566": "if (log.isDebugEnabled()) {",
                    "1575": "iterate(zip, new ZipEntryCallback() {           public void process(InputStream in, ZipEntry zipEntry) throws IOException { if (names.add(zipEntry.getName())) { ZipEntrySource entry = (ZipEntrySource) entryByPath.remove(zipEntry.getName());",
                    "1576": "if (entry != null) {",
                    "1580": "else {",
                    "1586": "else if (log.isDebugEnabled()) {",
                    "1595": "for (ZipEntrySource zipEntrySource : entryByPath.values()) {",
                    "1625": "for (int i = 0; i < entries.length; i++) {",
                    "1634": "if(zip.equals(destZip)){throw new IllegalArgumentException(\"Input (\" +zip.getAbsolutePath()+ \") is the same as the destination!\" + \"Please use the transformEntry method without destination for in-place transformation.\" );}",
                    "1639": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntry(zip, path, transformer, tmpFile);",
                    "1652": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntry(zip, entry, tmpFile);",
                    "1661": "if (log.isDebugEnabled())",
                    "1684": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntries(zip, entries, tmpFile);",
                    "1701": "if (log.isDebugEnabled())",
                    "1729": "if (names.add(zipEntry.getName())) {",
                    "1731": "if (entry != null) {",
                    "1735": "else {",
                    "1741": "else if (log.isDebugEnabled()) {",
                    "1755": "for (ZipEntryTransformerEntry entry : entries) {",
                    "1765": "if (in != null) {",
                    "1781": "if (FileUtils.contentEquals(f1, f2)) {",
                    "1789": "if (time > 0) {",
                    "1809": "if (zf1.size() != zf2.size()) {",
                    "1815": "while (en.hasMoreElements()) {",
                    "1819": "if (!metaDataEquals(path, e1, e2)) {",
                    "1828": "if (!IOUtils.contentEquals(is1, is2)) {",
                    "1854": "if (e2 == null) {",
                    "1859": "if (e1.isDirectory()) {",
                    "1860": "if (e2.isDirectory()) {",
                    "1864": "else {",
                    "1871": "else if (e2.isDirectory()) {",
                    "1878": "if (size1 != -1 && size2 != -1 && size1 != size2) {",
                    "1885": "if (crc1 != -1 && crc2 != -1 && crc1 != crc2) {",
                    "1890": "if (log.isTraceEnabled()) {",
                    "1893": "if (time1 != -1 && time2 != -1 && time1 != time2) {",
                    "1943": "if (e1 == null && e2 == null) {",
                    "1947": "if (e1 == null || e2 == null) {",
                    "1953": "if (is1 == null && is2 == null) {",
                    "1957": "if (is1 == null || is2 == null) {",
                    "1973": "if (zf != null) {",
                    "1993": "if (result) {"
                }
            },
            "new": {
                "src/main/java/org/zeroturnaround/zip/ZipUtil.java": {
                    "67": "if (zipEntry == null) {",
                    "88": "for (int i = 0; i < names.length; i++) {",
                    "89": "if (zf.getEntry(names[i]) != null) {",
                    "128": "if (charset != null) {",
                    "132": "else {",
                    "162": "if (ze == null) {",
                    "179": "if (!handle(is, name, action))",
                    "203": "if (charset != null) {",
                    "207": "else {",
                    "236": "if (log.isTraceEnabled()) {",
                    "241": "if (ze == null) {",
                    "245": "if (ze.isDirectory() || zf.getInputStream(ze) == null) {",
                    "246": "if (file.isDirectory()) {",
                    "250": "if (file.exists()) {",
                    "292": "if (charset == null) {",
                    "296": "else {",
                    "301": "while (en.hasMoreElements()) {",
                    "341": "if (charset == null) {",
                    "345": "else {",
                    "349": "for (int i = 0; i < entryNames.length; i++) {",
                    "351": "if (e == null) {",
                    "391": "while (en.hasMoreElements()) {",
                    "423": "for (int i = 0; i < entryNames.length; i++) {",
                    "425": "if (e == null) {",
                    "461": "while ((entry = in.getNextEntry()) != null) {",
                    "479": "if (in != null) {",
                    "499": "for (int i = 0; i < entryNames.length; i++) {",
                    "508": "while ((entry = in.getNextEntry()) != null) {",
                    "509": "if (!namesSet.contains(entry.getName())) {",
                    "530": "if (in != null) {",
                    "550": "if (charset == null) {",
                    "562": "if (ze == null) {",
                    "604": "if (name.equals(zipEntry.getName())) {",
                    "680": "if (name != null) {",
                    "682": "if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                    "686": "if (zipEntry.isDirectory()) {",
                    "690": "else {",
                    "692": "if (log.isDebugEnabled() && file.exists()) {",
                    "700": "if (permissions != null) {",
                    "724": "if (name != null) {",
                    "725": "if (name.indexOf('\\\\') != -1) {",
                    "728": "for (int i = 0; i < dirs.length - 1; i++) {",
                    "730": "if (!file.exists()) {",
                    "738": "if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                    "745": "else {",
                    "747": "if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                    "771": "if (rootDir == null) {",
                    "775": "else if (!rootDir.equals(root)) {",
                    "780": "if (name != null) {",
                    "782": "if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {",
                    "786": "if (zipEntry.isDirectory()) {",
                    "790": "else {",
                    "792": "if (log.isDebugEnabled() && file.exists()) {",
                    "810": "if (idx < 0) {",
                    "824": "if (!tempFile.delete()) {",
                    "870": "if (preserveRoot) {",
                    "872": "pack(sourceDir, targetZipFile, new NameMapper() {         public String map(String name) { return parentName + PATH_SEPARATOR + name;",
                    "880": "else {",
                    "891": "packEntry(fileToPack, destZipFile, new NameMapper() {       public String map(String name) { return fileName;",
                    "923": "for (int i = 0; i < filesToPack.length; i++) {",
                    "950": "if (!sourceDir.exists()) {",
                    "985": "if (!sourceDir.exists()) {",
                    "1002": "if (out != null && error == null) {",
                    "1016": "if (error != null) {",
                    "1024": "if (filenames == null) {",
                    "1025": "if (!dir.exists()) {",
                    "1032": "if (mustHaveChildren && filenames.length == 0) {",
                    "1036": "for (int i = 0; i < filenames.length; i++) {",
                    "1041": "if (isDir) {",
                    "1046": "if (name != null) {",
                    "1049": "if (!isDir) {",
                    "1056": "if (isDir) {",
                    "1094": "if (!zip.delete()) {",
                    "1150": "if (log.isDebugEnabled()) {",
                    "1160": "for (int i = 0; i < entries.length; i++) {",
                    "1166": "if (closeStream) {",
                    "1179": "if (log.isDebugEnabled()) {",
                    "1256": "if (log.isDebugEnabled()) {",
                    "1277": "if (log.isDebugEnabled()) {",
                    "1285": "for (int i = 0; i < entries.length; i++) {",
                    "1299": "if (log.isDebugEnabled()) {",
                    "1307": "for (int i = 0; i < entries.length; i++) {",
                    "1345": "if (log.isDebugEnabled()) {",
                    "1378": "if (names.add(entryName)) {",
                    "1382": "else if (log.isDebugEnabled()) {",
                    "1396": "if (names.add(entryName)) {",
                    "1400": "else if (log.isDebugEnabled()) {",
                    "1415": "if (ignoredEntries.contains(entryName)) {",
                    "1419": "for (String dirName : dirNames) {",
                    "1420": "if (entryName.startsWith(dirName)) {",
                    "1426": "if (names.add(entryName)) {",
                    "1430": "else if (log.isDebugEnabled()) {",
                    "1443": "if (zip == null) {",
                    "1450": "for (String entryName : names) {",
                    "1452": "if (entry != null) {",
                    "1453": "if (entry.isDirectory()) {",
                    "1457": "else if (zf.getInputStream(entry) == null) {",
                    "1483": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new FileSource(path, file), tmpFile);",
                    "1496": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new ByteSource(path, bytes), tmpFile);",
                    "1505": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, new ByteSource(path, bytes, compressionMethod), tmpFile);",
                    "1518": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntry(zip, entry, tmpFile);",
                    "1527": "if (log.isDebugEnabled()) {",
                    "1537": "iterate(zip, new ZipEntryCallback() {           public void process(InputStream in, ZipEntry zipEntry) throws IOException { if (names.add(zipEntry.getName())) { ZipEntrySource entry = (ZipEntrySource) entryByPath.remove(zipEntry.getName());",
                    "1538": "if (entry != null) {",
                    "1542": "else {",
                    "1548": "else if (log.isDebugEnabled()) {",
                    "1573": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return replaceEntries(zip, entries, tmpFile);",
                    "1582": "if (log.isDebugEnabled()) {",
                    "1591": "iterate(zip, new ZipEntryCallback() {           public void process(InputStream in, ZipEntry zipEntry) throws IOException { if (names.add(zipEntry.getName())) { ZipEntrySource entry = (ZipEntrySource) entryByPath.remove(zipEntry.getName());",
                    "1592": "if (entry != null) {",
                    "1596": "else {",
                    "1602": "else if (log.isDebugEnabled()) {",
                    "1611": "for (ZipEntrySource zipEntrySource : entryByPath.values()) {",
                    "1641": "for (int i = 0; i < entries.length; i++) {",
                    "1650": "if(zip.equals(destZip)){throw new IllegalArgumentException(\"Input (\" +zip.getAbsolutePath()+ \") is the same as the destination!\" + \"Please use the transformEntry method without destination for in-place transformation.\" );}",
                    "1655": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntry(zip, path, transformer, tmpFile);",
                    "1668": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntry(zip, entry, tmpFile);",
                    "1677": "if (log.isDebugEnabled())",
                    "1700": "return operateInPlace(zip, new InPlaceAction() {       public boolean act(File tmpFile) { return transformEntries(zip, entries, tmpFile);",
                    "1717": "if (log.isDebugEnabled())",
                    "1745": "if (names.add(zipEntry.getName())) {",
                    "1747": "if (entry != null) {",
                    "1751": "else {",
                    "1757": "else if (log.isDebugEnabled()) {",
                    "1771": "for (ZipEntryTransformerEntry entry : entries) {",
                    "1781": "if (in != null) {",
                    "1797": "if (FileUtils.contentEquals(f1, f2)) {",
                    "1805": "if (time > 0) {",
                    "1825": "if (zf1.size() != zf2.size()) {",
                    "1831": "while (en.hasMoreElements()) {",
                    "1835": "if (!metaDataEquals(path, e1, e2)) {",
                    "1844": "if (!IOUtils.contentEquals(is1, is2)) {",
                    "1870": "if (e2 == null) {",
                    "1875": "if (e1.isDirectory()) {",
                    "1876": "if (e2.isDirectory()) {",
                    "1880": "else {",
                    "1887": "else if (e2.isDirectory()) {",
                    "1894": "if (size1 != -1 && size2 != -1 && size1 != size2) {",
                    "1901": "if (crc1 != -1 && crc2 != -1 && crc1 != crc2) {",
                    "1906": "if (log.isTraceEnabled()) {",
                    "1909": "if (time1 != -1 && time2 != -1 && time1 != time2) {",
                    "1959": "if (e1 == null && e2 == null) {",
                    "1963": "if (e1 == null || e2 == null) {",
                    "1969": "if (is1 == null && is2 == null) {",
                    "1973": "if (is1 == null || is2 == null) {",
                    "1989": "if (zf != null) {",
                    "2009": "if (result) {"
                }
            }
        }
    },
    "CVE-2018-1000632": {
        "source": {
            "old": {
                "src/main/java/org/dom4j/QName.java": {},
                "src/main/java/org/dom4j/Namespace.java": {},
                "src/main/java/org/dom4j/tree/QNameCache.java": {}
            },
            "new": {
                "src/main/java/org/dom4j/QName.java": {
                    "65": "public String getText() {",
                    "69": "public String getStringValue() {"
                },
                "src/main/java/org/dom4j/Namespace.java": {
                    "12": "public Namespace(String prefix, String uri) {"
                },
                "src/main/java/org/dom4j/tree/QNameCache.java": {
                    "89": "public String getPath(Element context) {"
                }
            }
        },
        "sink": {
            "old": {
                "src/main/java/org/dom4j/QName.java": {
                    "18": "return CACHE.get(prefix, uri);",
                    "22": "return CACHE.get(uri);",
                    "26": "return NAMESPACE_NODE;",
                    "34": "return hashCode;",
                    "43": "return result;",
                    "48": "return true;",
                    "53": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "58": "return false;",
                    "62": "return uri;",
                    "66": "return uri;",
                    "70": "return prefix;",
                    "74": "return uri;",
                    "79": "return \"namespace::\" + prefix;",
                    "82": "return \"namespace::*[name()='']\";",
                    "94": "return path.toString();",
                    "106": "return path.toString();",
                    "110": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "127": "return asxml.toString();",
                    "135": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                },
                "src/main/java/org/dom4j/Namespace.java": {
                    "18": "return CACHE.get(prefix, uri);",
                    "22": "return CACHE.get(uri);",
                    "26": "return NAMESPACE_NODE;",
                    "34": "return hashCode;",
                    "43": "return result;",
                    "48": "return true;",
                    "53": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "58": "return false;",
                    "62": "return uri;",
                    "66": "return uri;",
                    "70": "return prefix;",
                    "74": "return uri;",
                    "79": "return \"namespace::\" + prefix;",
                    "82": "return \"namespace::*[name()='']\";",
                    "94": "return path.toString();",
                    "106": "return path.toString();",
                    "110": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "127": "return asxml.toString();",
                    "135": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                },
                "src/main/java/org/dom4j/tree/QNameCache.java": {
                    "18": "return CACHE.get(prefix, uri);",
                    "22": "return CACHE.get(uri);",
                    "26": "return NAMESPACE_NODE;",
                    "34": "return hashCode;",
                    "43": "return result;",
                    "48": "return true;",
                    "53": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "58": "return false;",
                    "62": "return uri;",
                    "66": "return uri;",
                    "70": "return prefix;",
                    "74": "return uri;",
                    "79": "return \"namespace::\" + prefix;",
                    "82": "return \"namespace::*[name()='']\";",
                    "94": "return path.toString();",
                    "106": "return path.toString();",
                    "110": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "127": "return asxml.toString();",
                    "135": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                }
            },
            "new": {
                "src/main/java/org/dom4j/QName.java": {
                    "22": "return CACHE.get(prefix, uri);",
                    "26": "return CACHE.get(uri);",
                    "30": "return NAMESPACE_NODE;",
                    "38": "return hashCode;",
                    "47": "return result;",
                    "52": "return true;",
                    "57": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "62": "return false;",
                    "66": "return uri;",
                    "70": "return uri;",
                    "74": "return prefix;",
                    "78": "return uri;",
                    "83": "return \"namespace::\" + prefix;",
                    "86": "return \"namespace::*[name()='']\";",
                    "98": "return path.toString();",
                    "110": "return path.toString();",
                    "114": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "131": "return asxml.toString();",
                    "139": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                },
                "src/main/java/org/dom4j/Namespace.java": {
                    "22": "return CACHE.get(prefix, uri);",
                    "26": "return CACHE.get(uri);",
                    "30": "return NAMESPACE_NODE;",
                    "38": "return hashCode;",
                    "47": "return result;",
                    "52": "return true;",
                    "57": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "62": "return false;",
                    "66": "return uri;",
                    "70": "return uri;",
                    "74": "return prefix;",
                    "78": "return uri;",
                    "83": "return \"namespace::\" + prefix;",
                    "86": "return \"namespace::*[name()='']\";",
                    "98": "return path.toString();",
                    "110": "return path.toString();",
                    "114": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "131": "return asxml.toString();",
                    "139": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                },
                "src/main/java/org/dom4j/tree/QNameCache.java": {
                    "22": "return CACHE.get(prefix, uri);",
                    "26": "return CACHE.get(uri);",
                    "30": "return NAMESPACE_NODE;",
                    "38": "return hashCode;",
                    "47": "return result;",
                    "52": "return true;",
                    "57": "return uri.equals(that.getURI()) && prefix.equals(that.getPrefix());",
                    "62": "return false;",
                    "66": "return uri;",
                    "70": "return uri;",
                    "74": "return prefix;",
                    "78": "return uri;",
                    "83": "return \"namespace::\" + prefix;",
                    "86": "return \"namespace::*[name()='']\";",
                    "98": "return path.toString();",
                    "110": "return path.toString();",
                    "114": "return super.toString() + \" [Namespace: prefix \" + getPrefix() + \" mapped to URI \\\"\" + getURI() + \"\\\"]\";",
                    "131": "return asxml.toString();",
                    "139": "return new DefaultNamespace(parent, getPrefix(), getURI());"
                }
            }
        },
        "undefined": {
            "old": {
                "src/main/java/org/dom4j/QName.java": {
                    "30": "if (hashCode == 0) {",
                    "39": "if (result == 0) {",
                    "47": "if (this == object) {",
                    "50": "else if (object instanceof Namespace) {",
                    "52": "if (hashCode() == that.hashCode()) {",
                    "78": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "88": "if ((parent != null) && (parent != context)) {",
                    "100": "if ((parent != null) && (parent != context)) {",
                    "116": "if ((pref != null) && (pref.length() > 0)) {",
                    "121": "else {"
                },
                "src/main/java/org/dom4j/Namespace.java": {
                    "30": "if (hashCode == 0) {",
                    "39": "if (result == 0) {",
                    "47": "if (this == object) {",
                    "50": "else if (object instanceof Namespace) {",
                    "52": "if (hashCode() == that.hashCode()) {",
                    "78": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "88": "if ((parent != null) && (parent != context)) {",
                    "100": "if ((parent != null) && (parent != context)) {",
                    "116": "if ((pref != null) && (pref.length() > 0)) {",
                    "121": "else {"
                },
                "src/main/java/org/dom4j/tree/QNameCache.java": {
                    "30": "if (hashCode == 0) {",
                    "39": "if (result == 0) {",
                    "47": "if (this == object) {",
                    "50": "else if (object instanceof Namespace) {",
                    "52": "if (hashCode() == that.hashCode()) {",
                    "78": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "88": "if ((parent != null) && (parent != context)) {",
                    "100": "if ((parent != null) && (parent != context)) {",
                    "116": "if ((pref != null) && (pref.length() > 0)) {",
                    "121": "else {"
                }
            },
            "new": {
                "src/main/java/org/dom4j/QName.java": {
                    "15": "if (!this.prefix.isEmpty()) {",
                    "34": "if (hashCode == 0) {",
                    "43": "if (result == 0) {",
                    "51": "if (this == object) {",
                    "54": "else if (object instanceof Namespace) {",
                    "56": "if (hashCode() == that.hashCode()) {",
                    "82": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "92": "if ((parent != null) && (parent != context)) {",
                    "104": "if ((parent != null) && (parent != context)) {",
                    "120": "if ((pref != null) && (pref.length() > 0)) {",
                    "125": "else {"
                },
                "src/main/java/org/dom4j/Namespace.java": {
                    "15": "if (!this.prefix.isEmpty()) {",
                    "34": "if (hashCode == 0) {",
                    "43": "if (result == 0) {",
                    "51": "if (this == object) {",
                    "54": "else if (object instanceof Namespace) {",
                    "56": "if (hashCode() == that.hashCode()) {",
                    "82": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "92": "if ((parent != null) && (parent != context)) {",
                    "104": "if ((parent != null) && (parent != context)) {",
                    "120": "if ((pref != null) && (pref.length() > 0)) {",
                    "125": "else {"
                },
                "src/main/java/org/dom4j/tree/QNameCache.java": {
                    "15": "if (!this.prefix.isEmpty()) {",
                    "34": "if (hashCode == 0) {",
                    "43": "if (result == 0) {",
                    "51": "if (this == object) {",
                    "54": "else if (object instanceof Namespace) {",
                    "56": "if (hashCode() == that.hashCode()) {",
                    "82": "if ((prefix != null) && !\"\".equals(prefix)) {",
                    "92": "if ((parent != null) && (parent != context)) {",
                    "104": "if ((parent != null) && (parent != context)) {",
                    "120": "if ((pref != null) && (pref.length() > 0)) {",
                    "125": "else {"
                }
            }
        }
    }
}