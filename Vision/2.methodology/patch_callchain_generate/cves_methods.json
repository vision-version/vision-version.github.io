{
    "CVE-2022-29599": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java",
                "deleteMethodBegin": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": 44,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": 139
                },
                "deleteMethodEnd": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": 82,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": 151
                },
                "deleteMethodFull": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": {
                        "lineNumber": [
                            {
                                "54": "char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );"
                            },
                            {
                                "55": "sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', false ) );"
                            },
                            {
                                "59": "sb.append( getExecutable() );"
                            },
                            {
                                "70": "char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );"
                            },
                            {
                                "71": "sb.append( StringUtils.quoteAndEscape( argument, getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', false ) );"
                            }
                        ],
                        "paramType": "(String executableParameter, String... argumentsParameter)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine:java.util.List(java.lang.String,java.lang.String[])"
                    },
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": {
                        "lineNumber": [
                            {
                                "149": "commandLine.addAll( getCommandLine( getExecutable(), arguments ) );"
                            }
                        ],
                        "paramType": "(String... arguments)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine:java.util.List(java.lang.String[])"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java",
                "deleteMethodBegin": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": 9,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": 18,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": 53,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getQuotingTriggerChars()": 66,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.unifyQuotes(String path)": 70
                },
                "deleteMethodEnd": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": 16,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": 24,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": 64,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getQuotingTriggerChars()": 68,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.unifyQuotes(String path)": 80
                },
                "deleteMethodFull": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": {
                        "lineNumber": [
                            {
                                "11": "setArgumentQuoteDelimiter( DOUBLE_QUOTATION );"
                            },
                            {
                                "12": "setExecutableQuoteDelimiter( DOUBLE_QUOTATION );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>:void()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": {
                        "lineNumber": [
                            {
                                "23": "return unifyQuotes( super.getExecutable() );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable:java.lang.String()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": {
                        "lineNumber": [
                            {
                                "61": "sb.append( unifyQuotes( dir ) );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble:java.lang.String()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getQuotingTriggerChars()": {
                        "lineNumber": [
                            {
                                "66": "protected char[] getQuotingTriggerChars() {"
                            },
                            {
                                "67": "return BASH_QUOTING_TRIGGER_CHARS;"
                            },
                            {
                                "68": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.getQuotingTriggerChars:char[]()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.unifyQuotes(String path)": {
                        "lineNumber": [
                            {
                                "70": "private static String unifyQuotes( String path ) {"
                            },
                            {
                                "75": "if ( path.indexOf( ' ' ) == -1 && path.indexOf( '\\'' ) != -1 && path.indexOf( '\"' ) == -1 ){"
                            },
                            {
                                "76": "return StringUtils.escape( path );"
                            },
                            {
                                "77": "}"
                            },
                            {
                                "78": ""
                            },
                            {
                                "79": "return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.unifyQuotes:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/maven/shared/utils/cli/shell/Shell.java",
                "addMethodBegin": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": 41,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": 50,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": 143,
                    "org.apache.maven.shared.utils.cli.shell.Shell.isUnconditionalQuoting()": 223,
                    "org.apache.maven.shared.utils.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionalQuoting)": 227
                },
                "addMethodEnd": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": 44,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": 86,
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": 155,
                    "org.apache.maven.shared.utils.cli.shell.Shell.isUnconditionalQuoting()": 225,
                    "org.apache.maven.shared.utils.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionalQuoting)": 229
                },
                "addMethodFull": {
                    "org.apache.maven.shared.utils.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": {
                        "lineNumber": [
                            {
                                "41": "protected String quoteOneItem( String inputString, boolean isExecutable ) {"
                            },
                            {
                                "42": "char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );"
                            },
                            {
                                "43": "return StringUtils.quoteAndEscape( inputString, isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', unconditionalQuoting );"
                            },
                            {
                                "44": "}"
                            }
                        ],
                        "paramType": "(String inputString, boolean isExecutable)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.quoteOneItem:java.lang.String(java.lang.String,boolean)"
                    },
                    "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine(String executableParameter, String... argumentsParameter)": {
                        "lineNumber": [
                            {
                                "60": "sb.append( quoteOneItem( executableParameter, true ) );"
                            },
                            {
                                "64": "sb.append( executableParameter );"
                            },
                            {
                                "75": "sb.append( quoteOneItem( argument, false ) );"
                            }
                        ],
                        "paramType": "(String executableParameter, String... argumentsParameter)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.getRawCommandLine:java.util.List(java.lang.String,java.lang.String[])"
                    },
                    "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine(String... arguments)": {
                        "lineNumber": [
                            {
                                "153": "commandLine.addAll( getCommandLine( executable, arguments ) );"
                            }
                        ],
                        "paramType": "(String... arguments)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.getShellCommandLine:java.util.List(java.lang.String[])"
                    },
                    "org.apache.maven.shared.utils.cli.shell.Shell.isUnconditionalQuoting()": {
                        "lineNumber": [
                            {
                                "223": "public boolean isUnconditionalQuoting() {"
                            },
                            {
                                "224": "return unconditionalQuoting;"
                            },
                            {
                                "225": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.isUnconditionalQuoting:boolean()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionalQuoting)": {
                        "lineNumber": [
                            {
                                "227": "public void setUnconditionalQuoting( boolean unconditionalQuoting ) {"
                            },
                            {
                                "228": "this.unconditionalQuoting = unconditionalQuoting;"
                            },
                            {
                                "229": "}"
                            }
                        ],
                        "paramType": "(boolean unconditionalQuoting)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.Shell.setUnconditionalQuoting:void(boolean)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/apache/maven/shared/utils/cli/shell/BourneShell.java",
                "addMethodBegin": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": 6,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": 16,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": 51,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": 64
                },
                "addMethodEnd": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": 14,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": 22,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": 62,
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": 74
                },
                "addMethodFull": {
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>()": {
                        "lineNumber": [
                            {
                                "7": "setUnconditionalQuoting( true );"
                            },
                            {
                                "9": "setArgumentQuoteDelimiter( '\\'' );"
                            },
                            {
                                "10": "setExecutableQuoteDelimiter( '\\'' );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.<init>:void()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable()": {
                        "lineNumber": [
                            {
                                "21": "return quoteOneItem( super.getExecutable(), true );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutable:java.lang.String()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble()": {
                        "lineNumber": [
                            {
                                "59": "sb.append( quoteOneItem( dir, false ) );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.getExecutionPreamble:java.lang.String()"
                    },
                    "org.apache.maven.shared.utils.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": {
                        "lineNumber": [
                            {
                                "64": "protected String quoteOneItem( String path, boolean isExecutable ) {"
                            },
                            {
                                "69": "StringBuilder sb = new StringBuilder();"
                            },
                            {
                                "70": "sb.append( \"'\" );"
                            },
                            {
                                "71": "sb.append( path.replace( \"'\", \"'\\\"'\\\"'\" ) );"
                            },
                            {
                                "72": "sb.append( \"'\" );"
                            },
                            {
                                "73": "return sb.toString();"
                            }
                        ],
                        "paramType": "(String path, boolean isExecutable)",
                        "originalFullName": "org.apache.maven.shared.utils.cli.shell.BourneShell.quoteOneItem:java.lang.String(java.lang.String,boolean)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "BourneShell"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-22976": {
        "old_methods_info": [
            {
                "oldFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
                "deleteMethodBegin": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": 240,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 285,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 397,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 401
                },
                "deleteMethodEnd": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": 277,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 350,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 399,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 403
                },
                "deleteMethodFull": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": {
                        "lineNumber": [
                            {
                                "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {"
                            },
                            {
                                "241": "int rounds, i, j;"
                            },
                            {
                                "244": "byte ret[];"
                            },
                            {
                                "249": "rounds = 1 << log_rounds;"
                            },
                            {
                                "256": "for (i = 0; i < rounds; i++) {"
                            },
                            {
                                "261": "for (i = 0; i < 64; i++) {"
                            },
                            {
                                "262": "for (j = 0; j < (clen >> 1); j++) {"
                            },
                            {
                                "268": "ret = new byte[clen * 4];"
                            },
                            {
                                "269": "for (i = 0, j = 0; i < clen; i++) {"
                            }
                        ],
                        "paramType": "(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw:byte[](byte[],byte[],int,boolean,int)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "334": "hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": {
                        "lineNumber": [
                            {
                                "398": "return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));"
                            }
                        ],
                        "paramType": "(String plaintext, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(java.lang.String,java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": {
                        "lineNumber": [
                            {
                                "402": "return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(byte[],java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
                "addMethodBegin": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": 240,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": 293,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 303,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": 307,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 419,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 424
                },
                "addMethodEnd": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": 291,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": 295,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 305,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": 372,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 422,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 426
                },
                "addMethodFull": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": {
                        "lineNumber": [
                            {
                                "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety, boolean for_check) {"
                            },
                            {
                                "243": "long rounds;"
                            },
                            {
                                "245": "if (!for_check) {"
                            },
                            {
                                "246": "throw new IllegalArgumentException(\"Bad number of rounds\");"
                            },
                            {
                                "247": "}"
                            },
                            {
                                "248": ""
                            },
                            {
                                "249": "if (log_rounds != 0) {"
                            },
                            {
                                "250": "throw new IllegalArgumentException(\"Bad number of rounds\");"
                            },
                            {
                                "251": "}"
                            },
                            {
                                "252": ""
                            },
                            {
                                "253": "rounds = 0;"
                            },
                            {
                                "254": "}"
                            },
                            {
                                "255": ""
                            },
                            {
                                "256": "else {"
                            },
                            {
                                "257": "rounds = roundsForLogRounds(log_rounds);"
                            },
                            {
                                "258": "if (rounds < 16 || rounds > Integer.MAX_VALUE) {"
                            },
                            {
                                "262": "}"
                            },
                            {
                                "263": ""
                            },
                            {
                                "270": "for (int i = 0; i < rounds; i++) {"
                            },
                            {
                                "275": "for (int i = 0; i < 64; i++) {"
                            },
                            {
                                "276": "for (int j = 0; j < (clen >> 1); j++) {"
                            },
                            {
                                "282": "byte[] ret = new byte[clen * 4];"
                            },
                            {
                                "283": "for (int i = 0, j = 0; i < clen; i++) {"
                            }
                        ],
                        "paramType": "(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw:byte[](byte[],byte[],int,boolean,int,boolean)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "293": "private static String hashpwforcheck(byte[] passwordb, String salt) {"
                            },
                            {
                                "294": "return hashpw(passwordb, salt, true);"
                            },
                            {
                                "295": "}"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "304": "return hashpw(passwordb, salt, false);"
                            },
                            {
                                "305": "}"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": {
                        "lineNumber": [
                            {
                                "307": "private static String hashpw(byte passwordb[], String salt, boolean for_check) {"
                            },
                            {
                                "356": "hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0, for_check);"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt, boolean for_check)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String,boolean)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": {
                        "lineNumber": [
                            {
                                "420": "byte[] passwordb = plaintext.getBytes(StandardCharsets.UTF_8);"
                            },
                            {
                                "421": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(String plaintext, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(java.lang.String,java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": {
                        "lineNumber": [
                            {
                                "425": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(byte[],java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-10755": {
        "old_methods_info": [
            {
                "oldFilePath": "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java",
                "deleteMethodBegin": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": 134
                },
                "deleteMethodEnd": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": 136
                },
                "deleteMethodFull": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": {
                        "lineNumber": [
                            {
                                "135": "return java.util.UUID.randomUUID().toString().replace(\"-\", \"\").substring(0, size);"
                            }
                        ],
                        "paramType": "(final int size)",
                        "originalFullName": "org.pac4j.core.util.CommonHelper.randomString:java.lang.String(int)"
                    }
                }
            },
            {
                "oldFilePath": "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java",
                "deleteMethodBegin": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": 14
                },
                "deleteMethodEnd": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": 16
                },
                "deleteMethodFull": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": {
                        "lineNumber": [
                            {
                                "15": "return \"_\".concat(RandomStringUtils.randomAlphanumeric(39)).toLowerCase();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.pac4j.saml.util.SAML2Utils.generateID:java.lang.String()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java",
                "addMethodBegin": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": 134
                },
                "addMethodEnd": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": 141
                },
                "addMethodFull": {
                    "org.pac4j.core.util.CommonHelper.randomString(final int size)": {
                        "lineNumber": [
                            {
                                "135": "StringBuffer sb = new StringBuffer(\"\");"
                            },
                            {
                                "136": "while (sb.length() < size) {"
                            },
                            {
                                "137": "sb.append(java.util.UUID.randomUUID().toString().replace(\"-\", \"\"));"
                            },
                            {
                                "138": "}"
                            },
                            {
                                "139": ""
                            },
                            {
                                "140": "return sb.toString().substring(0, size);"
                            }
                        ],
                        "paramType": "(final int size)",
                        "originalFullName": "org.pac4j.core.util.CommonHelper.randomString:java.lang.String(int)"
                    }
                }
            },
            {
                "newFilePath": "pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java",
                "addMethodBegin": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": 14
                },
                "addMethodEnd": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": 16
                },
                "addMethodFull": {
                    "org.pac4j.saml.util.SAML2Utils.generateID()": {
                        "lineNumber": [
                            {
                                "15": "return \"_\".concat(CommonHelper.randomString(39)).toLowerCase();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.pac4j.saml.util.SAML2Utils.generateID:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "RandomStringUtils"
            ],
            "pathlst": [],
            "langrelatedfiles": [
                "SAML2Utils.java"
            ]
        }
    },
    "CVE-2022-22969": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2ClientContext.java",
                "addMethodBegin": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext.setPreservedState(String stateKey, Object preservedState)": 40
                },
                "addMethodEnd": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext.setPreservedState(String stateKey, Object preservedState)": 43
                },
                "addMethodFull": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext.setPreservedState(String stateKey, Object preservedState)": {
                        "lineNumber": [
                            {
                                "41": "state.clear();"
                            }
                        ],
                        "paramType": "(String stateKey, Object preservedState)",
                        "originalFullName": "org.springframework.security.oauth2.client.DefaultOAuth2ClientContext.setPreservedState:void(java.lang.String,java.lang.Object)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-20445": {
        "old_methods_info": [
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "deleteMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 403
                },
                "deleteMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 458
                },
                "deleteMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                        "lineNumber": [
                            {
                                "442": "State nextState;"
                            },
                            {
                                "445": "nextState = State.SKIP_CONTROL_CHARS;"
                            },
                            {
                                "448": "nextState = State.READ_CHUNK_SIZE;"
                            },
                            {
                                "451": "nextState = State.READ_FIXED_LENGTH_CONTENT;"
                            },
                            {
                                "454": "nextState = State.READ_VARIABLE_LENGTH_CONTENT;"
                            },
                            {
                                "457": "return nextState;"
                            }
                        ],
                        "paramType": "(ByteBuf buffer)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders:io.netty.handler.codec.http.HttpObjectDecoder$State(io.netty.buffer.ByteBuf)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 403
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 470
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                        "lineNumber": [
                            {
                                "442": "List<String> values = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);"
                            },
                            {
                                "443": "int contentLengthValuesCount = values.size();"
                            },
                            {
                                "444": "if (contentLengthValuesCount > 0) {"
                            },
                            {
                                "445": "if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {"
                            },
                            {
                                "446": "throw new IllegalArgumentException(\"Multiple Content-Length headers found\");"
                            },
                            {
                                "447": "}"
                            },
                            {
                                "448": ""
                            },
                            {
                                "449": "contentLength = Long.parseLong(values.get(0));"
                            },
                            {
                                "450": "}"
                            },
                            {
                                "451": ""
                            },
                            {
                                "454": "return State.SKIP_CONTROL_CHARS;"
                            },
                            {
                                "457": "if (contentLengthValuesCount > 0 && message.protocolVersion() == HttpVersion.HTTP_1_1) {"
                            },
                            {
                                "458": "throw new IllegalArgumentException( \"Both 'Content-Length: \" + contentLength + \"' and 'Transfer-Encoding: chunked' found\");"
                            },
                            {
                                "459": "}"
                            },
                            {
                                "460": ""
                            },
                            {
                                "461": "return State.READ_CHUNK_SIZE;"
                            },
                            {
                                "464": "return State.READ_FIXED_LENGTH_CONTENT;"
                            },
                            {
                                "467": "return State.READ_VARIABLE_LENGTH_CONTENT;"
                            }
                        ],
                        "paramType": "(ByteBuf buffer)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders:io.netty.handler.codec.http.HttpObjectDecoder$State(io.netty.buffer.ByteBuf)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "com/netty/netty/issues/9861HttpObjectDecoder.java"
            ],
            "langrelatedfiles": [
                "9861HttpObjectDecoder.java"
            ]
        }
    },
    "CVE-2015-2156": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java",
                "deleteMethodBegin": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": 33
                },
                "deleteMethodEnd": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": 159
                },
                "deleteMethodFull": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": {
                        "lineNumber": [
                            {
                                "80": "long maxAge = Long.MIN_VALUE;"
                            },
                            {
                                "109": "maxAge = maxAgeMillis / 1000 + (maxAgeMillis % 1000 != 0? 1 : 0);"
                            }
                        ],
                        "paramType": "(String header)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.CookieDecoder.decode:<unresolvedSignature>(1)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java",
                "deleteMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(long maxAge, String expires)": 114,
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": 181
                },
                "deleteMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(long maxAge, String expires)": 128,
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": 188
                },
                "deleteMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(long maxAge, String expires)": {
                        "lineNumber": [
                            {
                                "114": "private long mergeMaxAgeAndExpire(long maxAge, String expires) {"
                            },
                            {
                                "115": "if (maxAge != Long.MIN_VALUE) {"
                            },
                            {
                                "122": "return maxAgeMillis / 1000 + (maxAgeMillis % 1000 != 0 ? 1 : 0);"
                            },
                            {
                                "127": "return Long.MIN_VALUE;"
                            }
                        ],
                        "paramType": "(long maxAge, String expires)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire:long(long,java.lang.String)"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": {
                        "lineNumber": [
                            {
                                "183": "maxAge = Math.max(Long.valueOf(value), 0L);"
                            }
                        ],
                        "paramType": "(String value)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge:void(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java",
                "deleteMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 83,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": 87
                },
                "deleteMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 85,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": 89
                },
                "deleteMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": {
                        "lineNumber": [
                            {
                                "83": "public long maxAge() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge:long()"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": {
                        "lineNumber": [
                            {
                                "87": "public void setMaxAge(long maxAge) {"
                            }
                        ],
                        "paramType": "(long maxAge)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge:void(long)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java",
                "deleteMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 83,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": 87
                },
                "deleteMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 85,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": 89
                },
                "deleteMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": {
                        "lineNumber": [
                            {
                                "83": "public long maxAge() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge:long()"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(long maxAge)": {
                        "lineNumber": [
                            {
                                "87": "public void setMaxAge(long maxAge) {"
                            }
                        ],
                        "paramType": "(long maxAge)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge:void(long)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
                "deleteMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": 21
                },
                "deleteMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": 60
                },
                "deleteMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": {
                        "lineNumber": [
                            {
                                "37": "if (cookie.maxAge() != Long.MIN_VALUE) {"
                            }
                        ],
                        "paramType": "(Cookie cookie)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode:java.lang.String(org.jboss.netty.handler.codec.http.cookie.Cookie)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/CookieDecoder.java",
                "addMethodBegin": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": 33
                },
                "addMethodEnd": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": 159
                },
                "addMethodFull": {
                    "org.jboss.netty.handler.codec.http.CookieDecoder.decode(String header)": {
                        "lineNumber": [
                            {
                                "80": "int maxAge = Integer.MIN_VALUE;"
                            },
                            {
                                "109": "maxAge = (int) (maxAgeMillis / 1000 + (maxAgeMillis % 1000 != 0? 1 : 0));"
                            }
                        ],
                        "paramType": "(String header)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.CookieDecoder.decode:<unresolvedSignature>(1)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/Cookie.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/Cookie.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/ClientCookieDecoder.java",
                "addMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(int maxAge, String expires)": 114,
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": 181
                },
                "addMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(int maxAge, String expires)": 128,
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": 188
                },
                "addMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire(int maxAge, String expires)": {
                        "lineNumber": [
                            {
                                "114": "private int mergeMaxAgeAndExpire(int maxAge, String expires) {"
                            },
                            {
                                "115": "if (maxAge != Integer.MIN_VALUE) {"
                            },
                            {
                                "122": "return (int) (maxAgeMillis / 1000 + (maxAgeMillis % 1000 != 0 ? 1 : 0));"
                            },
                            {
                                "127": "return Integer.MIN_VALUE;"
                            }
                        ],
                        "paramType": "(int maxAge, String expires)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.mergeMaxAgeAndExpire:int(int,java.lang.String)"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge(String value)": {
                        "lineNumber": [
                            {
                                "183": "maxAge = Math.max(Integer.valueOf(value), 0);"
                            }
                        ],
                        "paramType": "(String value)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ClientCookieDecoder$CookieBuilder.setMaxAge:void(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/DefaultCookie.java",
                "addMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 83,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": 87
                },
                "addMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 85,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": 89
                },
                "addMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": {
                        "lineNumber": [
                            {
                                "83": "public int maxAge() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge:int()"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": {
                        "lineNumber": [
                            {
                                "87": "public void setMaxAge(int maxAge) {"
                            }
                        ],
                        "paramType": "(int maxAge)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge:void(int)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/DefaultCookie.java",
                "addMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 83,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": 87
                },
                "addMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": 85,
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": 89
                },
                "addMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge()": {
                        "lineNumber": [
                            {
                                "83": "public int maxAge() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.maxAge:int()"
                    },
                    "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge(int maxAge)": {
                        "lineNumber": [
                            {
                                "87": "public void setMaxAge(int maxAge) {"
                            }
                        ],
                        "paramType": "(int maxAge)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.DefaultCookie.setMaxAge:void(int)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/jboss/netty/handler/codec/http/cookie/ServerCookieEncoder.java",
                "addMethodBegin": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": 21
                },
                "addMethodEnd": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": 60
                },
                "addMethodFull": {
                    "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode(Cookie cookie)": {
                        "lineNumber": [
                            {
                                "37": "if (cookie.maxAge() != Integer.MIN_VALUE) {"
                            }
                        ],
                        "paramType": "(Cookie cookie)",
                        "originalFullName": "org.jboss.netty.handler.codec.http.cookie.ServerCookieEncoder.encode:java.lang.String(org.jboss.netty.handler.codec.http.cookie.Cookie)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "httpOnly",
                "Cookie.maxAge"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-1000338": {
        "old_methods_info": [
            {
                "oldFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java",
                "addMethodBegin": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": 114
                },
                "addMethodEnd": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": 121
                },
                "addMethodFull": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": {
                        "lineNumber": [
                            {
                                "116": "if (s.size() != 2){"
                            },
                            {
                                "117": "throw new IOException(\"malformed signature\");"
                            },
                            {
                                "118": "}"
                            },
                            {
                                "119": ""
                            }
                        ],
                        "paramType": "(byte[] encoding)",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode:java.math.BigInteger[](byte[])"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1000632": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/dom4j/QName.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/dom4j/Namespace.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/dom4j/tree/QNameCache.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/dom4j/QName.java",
                "addMethodBegin": {
                    "org.dom4j.QName.<init>(String name, Namespace namespace)": 53,
                    "org.dom4j.QName.<init>(String name, Namespace namespace, String qualifiedName)": 65,
                    "org.dom4j.QName.validateName(String name)": 207,
                    "org.dom4j.QName.validateNCName(String ncname)": 214,
                    "org.dom4j.QName.validateQName(String qname)": 221
                },
                "addMethodEnd": {
                    "org.dom4j.QName.<init>(String name, Namespace namespace)": 63,
                    "org.dom4j.QName.<init>(String name, Namespace namespace, String qualifiedName)": 71,
                    "org.dom4j.QName.validateName(String name)": 212,
                    "org.dom4j.QName.validateNCName(String ncname)": 219,
                    "org.dom4j.QName.validateQName(String qname)": 226
                },
                "addMethodFull": {
                    "org.dom4j.QName.<init>(String name, Namespace namespace)": {
                        "lineNumber": [
                            {
                                "56": "if (this.namespace.equals(Namespace.NO_NAMESPACE)) {"
                            },
                            {
                                "57": "validateName(this.name);"
                            },
                            {
                                "58": "}"
                            },
                            {
                                "59": "else {"
                            },
                            {
                                "60": "validateNCName(this.name);"
                            },
                            {
                                "61": "}"
                            },
                            {
                                "62": ""
                            }
                        ],
                        "paramType": "(String name, Namespace namespace)",
                        "originalFullName": "org.dom4j.QName.<init>:void(java.lang.String,org.dom4j.Namespace)"
                    },
                    "org.dom4j.QName.<init>(String name, Namespace namespace, String qualifiedName)": {
                        "lineNumber": [
                            {
                                "69": "validateNCName(this.name);"
                            },
                            {
                                "70": "validateQName(this.qualifiedName);"
                            }
                        ],
                        "paramType": "(String name, Namespace namespace, String qualifiedName)",
                        "originalFullName": "org.dom4j.QName.<init>:void(java.lang.String,org.dom4j.Namespace,java.lang.String)"
                    },
                    "org.dom4j.QName.validateName(String name)": {
                        "lineNumber": [
                            {
                                "207": "private static void validateName(String name) {"
                            },
                            {
                                "208": "if (!RE_NAME.matcher(name).matches()) {"
                            },
                            {
                                "209": "throw new IllegalArgumentException(String.format(\"Illegal character in name: '%s'.\", name));"
                            },
                            {
                                "210": "}"
                            },
                            {
                                "211": ""
                            },
                            {
                                "212": "}"
                            }
                        ],
                        "paramType": "(String name)",
                        "originalFullName": "org.dom4j.QName.validateName:void(java.lang.String)"
                    },
                    "org.dom4j.QName.validateNCName(String ncname)": {
                        "lineNumber": [
                            {
                                "214": "protected static void validateNCName(String ncname) {"
                            },
                            {
                                "215": "if (!RE_NCNAME.matcher(ncname).matches()) {"
                            },
                            {
                                "216": "throw new IllegalArgumentException(String.format(\"Illegal character in local name: '%s'.\", ncname));"
                            },
                            {
                                "217": "}"
                            },
                            {
                                "218": ""
                            },
                            {
                                "219": "}"
                            }
                        ],
                        "paramType": "(String ncname)",
                        "originalFullName": "org.dom4j.QName.validateNCName:void(java.lang.String)"
                    },
                    "org.dom4j.QName.validateQName(String qname)": {
                        "lineNumber": [
                            {
                                "221": "private static void validateQName(String qname) {"
                            },
                            {
                                "222": "if (!RE_QNAME.matcher(qname).matches()) {"
                            },
                            {
                                "223": "throw new IllegalArgumentException(String.format(\"Illegal character in qualified name: '%s'.\", qname));"
                            },
                            {
                                "224": "}"
                            },
                            {
                                "225": ""
                            },
                            {
                                "226": "}"
                            }
                        ],
                        "paramType": "(String qname)",
                        "originalFullName": "org.dom4j.QName.validateQName:void(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/dom4j/Namespace.java",
                "addMethodBegin": {
                    "org.dom4j.Namespace.<init>(String prefix, String uri)": 12
                },
                "addMethodEnd": {
                    "org.dom4j.Namespace.<init>(String prefix, String uri)": 19
                },
                "addMethodFull": {
                    "org.dom4j.Namespace.<init>(String prefix, String uri)": {
                        "lineNumber": [
                            {
                                "15": "if (!this.prefix.isEmpty()) {"
                            },
                            {
                                "16": "QName.validateNCName(this.prefix);"
                            },
                            {
                                "17": "}"
                            },
                            {
                                "18": ""
                            }
                        ],
                        "paramType": "(String prefix, String uri)",
                        "originalFullName": "org.dom4j.Namespace.<init>:void(java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/dom4j/tree/QNameCache.java",
                "addMethodBegin": {
                    "org.dom4j.tree.QNameCache.get(String qualifiedName, String uri)": 83
                },
                "addMethodEnd": {
                    "org.dom4j.tree.QNameCache.get(String qualifiedName, String uri)": 97
                },
                "addMethodFull": {
                    "org.dom4j.tree.QNameCache.get(String qualifiedName, String uri)": {
                        "lineNumber": [
                            {
                                "87": "}"
                            },
                            {
                                "88": "else if (index == 0){"
                            },
                            {
                                "89": "throw new IllegalArgumentException(\"Qualified name cannot start with ':'.\");"
                            }
                        ],
                        "paramType": "(String qualifiedName, String uri)",
                        "originalFullName": "org.dom4j.tree.QNameCache.get:org.dom4j.QName(java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "addAttribute",
                "addElement"
            ],
            "classnamelst": [
                "IllegalArgumentException"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2017-7957": {
        "old_methods_info": [
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java",
                "deleteMethodBegin": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": 5
                },
                "deleteMethodEnd": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": 8
                },
                "deleteMethodFull": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": {
                        "lineNumber": [
                            {
                                "7": "return type != null && type.isPrimitive() || Primitives.isBoxed(type);"
                            }
                        ],
                        "paramType": "(Class<?> type)",
                        "originalFullName": "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows:boolean(java.lang.Class)"
                    }
                }
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/security/PrimitiveTypePermission.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": 5
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": 8
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows(Class<?> type)": {
                        "lineNumber": [
                            {
                                "7": "return type != null && type != void.class && type != Void.class && type.isPrimitive() || Primitives.isBoxed(type);"
                            }
                        ],
                        "paramType": "(Class<?> type)",
                        "originalFullName": "com.thoughtworks.xstream.security.PrimitiveTypePermission.allows:boolean(java.lang.Class)"
                    }
                }
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/reflection/SunLimitedUnsafeReflectionProvider.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider.newInstance(final Class<?> type)": 42
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider.newInstance(final Class<?> type)": 72
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider.newInstance(final Class<?> type)": {
                        "lineNumber": [
                            {
                                "51": "if (type == void.class || type == Void.class) {"
                            },
                            {
                                "52": "ex = new ConversionException(\"Type void cannot have an instance\");"
                            },
                            {
                                "53": "}"
                            },
                            {
                                "54": "else {"
                            },
                            {
                                "68": "}"
                            },
                            {
                                "69": ""
                            }
                        ],
                        "paramType": "(final Class<?> type)",
                        "originalFullName": "com.thoughtworks.xstream.converters.reflection.SunLimitedUnsafeReflectionProvider.newInstance:java.lang.Object(java.lang.Class)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "denyTypes"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-13973": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "deleteMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 276
                },
                "deleteMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 402
                },
                "deleteMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "309": "case '/':"
                            },
                            {
                                "310": "if (i > start && i + 2 < end && '<' == jsonish.charAt(i - 1) && 's' == (jsonish.charAt(i + 1) | 32) && 'c' == (jsonish.charAt(i + 2) | 32)) {"
                            },
                            {
                                "311": "insert(i, '\\\\');"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "addMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 276
                },
                "addMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 416
                },
                "addMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "309": "case '<':"
                            },
                            {
                                "310": "if (i + 3 >= end)"
                            },
                            {
                                "311": "break;"
                            },
                            {
                                "312": "char c1 = jsonish.charAt(i + 1);"
                            },
                            {
                                "313": "char c2 = jsonish.charAt(i + 2);"
                            },
                            {
                                "314": "char c3 = jsonish.charAt(i + 3);"
                            },
                            {
                                "315": "char lc1 = (char) (c1 | 32);"
                            },
                            {
                                "316": "char lc2 = (char) (c2 | 32);"
                            },
                            {
                                "317": "char lc3 = (char) (c3 | 32);"
                            },
                            {
                                "318": "if ((c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c')) {"
                            },
                            {
                                "319": "replace(i, i + 1, \"\\\\u003c\");"
                            },
                            {
                                "320": "}"
                            },
                            {
                                "321": ""
                            },
                            {
                                "322": "break;"
                            },
                            {
                                "323": "case '>':"
                            },
                            {
                                "324": "if ((i - 2) >= start && '-' == jsonish.charAt(i - 2) && '-' == jsonish.charAt(i - 1)) {"
                            },
                            {
                                "325": "replace(i, i + 1, \"\\\\u003e\");"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-23596": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/github/junrar/Archive.java",
                "deleteMethodBegin": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": 214
                },
                "deleteMethodEnd": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": 418
                },
                "deleteMethodFull": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": {
                        "lineNumber": [
                            {
                                "368": "switch (subHead.getSubType()) {"
                            }
                        ],
                        "paramType": "(final long fileLength)",
                        "originalFullName": "com.github.junrar.Archive.readHeaders:void(long)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/github/junrar/Archive.java",
                "addMethodBegin": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": 215
                },
                "addMethodEnd": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": 421
                },
                "addMethodFull": {
                    "com.github.junrar.Archive.readHeaders(final long fileLength)": {
                        "lineNumber": [
                            {
                                "369": "SubBlockHeaderType subType = subHead.getSubType();"
                            },
                            {
                                "370": "if (subType == null) break;"
                            },
                            {
                                "371": "switch (subType) {"
                            }
                        ],
                        "paramType": "(final long fileLength)",
                        "originalFullName": "com.github.junrar.Archive.readHeaders:void(long)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-43797": {
        "old_methods_info": [
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "deleteMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 573,
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS)": 645
                },
                "deleteMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 611,
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS)": 658
                },
                "deleteMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                        "lineNumber": [
                            {
                                "580": "nameStart = findNonWhitespace(sb, 0, false);"
                            },
                            {
                                "602": "valueStart = findNonWhitespace(sb, colonEnd, true);"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader:void(io.netty.util.internal.AppendableCharSequence)"
                    },
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS)": {
                        "lineNumber": [
                            {
                                "645": "private static int findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS) {"
                            },
                            {
                                "651": "else if (validateOWS && !isOWS(c)) {"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb, int offset, boolean validateOWS)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace:int(io.netty.util.internal.AppendableCharSequence,int,boolean)"
                    }
                }
            },
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 573,
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset)": 645
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 611,
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset)": 658
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                        "lineNumber": [
                            {
                                "580": "nameStart = findNonWhitespace(sb, 0);"
                            },
                            {
                                "602": "valueStart = findNonWhitespace(sb, colonEnd);"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader:void(io.netty.util.internal.AppendableCharSequence)"
                    },
                    "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace(AppendableCharSequence sb, int offset)": {
                        "lineNumber": [
                            {
                                "645": "private static int findNonWhitespace(AppendableCharSequence sb, int offset) {"
                            },
                            {
                                "651": "else if (!isOWS(c)) {"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb, int offset)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.findNonWhitespace:int(io.netty.util.internal.AppendableCharSequence,int)"
                    }
                }
            },
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/DefaultHttpHeaders.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(byte value)": 342,
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(char value)": 368
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(byte value)": 366,
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(char value)": 392
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(byte value)": {
                        "lineNumber": [
                            {
                                "344": "case 0x1c:"
                            },
                            {
                                "345": "case 0x1d:"
                            },
                            {
                                "346": "case 0x1e:"
                            },
                            {
                                "347": "case 0x1f:"
                            }
                        ],
                        "paramType": "(byte value)",
                        "originalFullName": "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement:void(byte)"
                    },
                    "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement(char value)": {
                        "lineNumber": [
                            {
                                "370": "case 0x1c:"
                            },
                            {
                                "371": "case 0x1d:"
                            },
                            {
                                "372": "case 0x1e:"
                            },
                            {
                                "373": "case 0x1f:"
                            }
                        ],
                        "paramType": "(char value)",
                        "originalFullName": "io.netty.handler.codec.http.DefaultHttpHeaders.validateHeaderNameElement:void(char)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "behaviourNetty"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-28052": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": 103
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": 144
                },
                "deleteMethodFull": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": {
                        "lineNumber": [
                            {
                                "140": "isEqual &= (bcryptString.indexOf(i) == newBcryptString.indexOf(i));"
                            }
                        ],
                        "paramType": "(String bcryptString, byte[] password)",
                        "originalFullName": "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword:boolean(java.lang.String,byte[])"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/crypto/generators/OpenBSDBCrypt.java",
                "addMethodBegin": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": 103
                },
                "addMethodEnd": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": 144
                },
                "addMethodFull": {
                    "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword(String bcryptString, byte[] password)": {
                        "lineNumber": [
                            {
                                "140": "isEqual &= (bcryptString.charAt(i) == newBcryptString.charAt(i));"
                            }
                        ],
                        "paramType": "(String bcryptString, byte[] password)",
                        "originalFullName": "org.bouncycastle.crypto.generators.OpenBSDBCrypt.doCheckPassword:boolean(java.lang.String,byte[])"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "OpenBSDBCrypt.checkPassword"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-11988": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/xmlgraphics/xmp/XMPParser.java",
                "addMethodBegin": {
                    "org.apache.xmlgraphics.xmp.XMPParser.parseXMP(Source src)": 18
                },
                "addMethodEnd": {
                    "org.apache.xmlgraphics.xmp.XMPParser.parseXMP(Source src)": 27
                },
                "addMethodFull": {
                    "org.apache.xmlgraphics.xmp.XMPParser.parseXMP(Source src)": {
                        "lineNumber": [
                            {
                                "20": "tFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");"
                            },
                            {
                                "21": "tFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");"
                            }
                        ],
                        "paramType": "(Source src)",
                        "originalFullName": "org.apache.xmlgraphics.xmp.XMPParser.parseXMP:org.apache.xmlgraphics.xmp.Metadata(javax.xml.transform.Source)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "XmlGraphics"
            ],
            "pathlst": [
                "org/repos/asf/xmlgraphics/commons/trunk",
                "svn.apache.org"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-1000342": {
        "old_methods_info": [
            {
                "oldFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/DSASigner.java",
                "addMethodBegin": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": 115
                },
                "addMethodEnd": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": 126
                },
                "addMethodFull": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode(byte[] encoding)": {
                        "lineNumber": [
                            {
                                "121": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                            },
                            {
                                "122": "throw new IOException(\"malformed signature\");"
                            },
                            {
                                "123": "}"
                            },
                            {
                                "124": ""
                            }
                        ],
                        "paramType": "(byte[] encoding)",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.dsa.DSASigner.derDecode:java.math.BigInteger[](byte[])"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Enumerated.java",
                "addMethodBegin": {
                    "org.bouncycastle.asn1.ASN1Enumerated.<init>(byte[] bytes)": 46
                },
                "addMethodEnd": {
                    "org.bouncycastle.asn1.ASN1Enumerated.<init>(byte[] bytes)": 59
                },
                "addMethodFull": {
                    "org.bouncycastle.asn1.ASN1Enumerated.<init>(byte[] bytes)": {
                        "lineNumber": [
                            {
                                "47": "if (bytes.length > 1){"
                            },
                            {
                                "48": "if (bytes[0] == 0 && (bytes[1] & 0x80) == 0){"
                            },
                            {
                                "49": "throw new IllegalArgumentException(\"malformed enumerated\");"
                            },
                            {
                                "50": "}"
                            },
                            {
                                "51": ""
                            },
                            {
                                "52": "if (bytes[0] == (byte)0xff && (bytes[1] & 0x80) != 0){"
                            },
                            {
                                "53": "throw new IllegalArgumentException(\"malformed enumerated\");"
                            },
                            {
                                "54": "}"
                            },
                            {
                                "55": ""
                            },
                            {
                                "56": "}"
                            },
                            {
                                "57": ""
                            }
                        ],
                        "paramType": "(byte[] bytes)",
                        "originalFullName": "org.bouncycastle.asn1.ASN1Enumerated.<init>:void(byte[])"
                    }
                }
            },
            {
                "newFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/ec/SignatureSpi.java",
                "addMethodBegin": {
                    "org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder.decode(byte[] encoding)": 281
                },
                "addMethodEnd": {
                    "org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder.decode(byte[] encoding)": 295
                },
                "addMethodFull": {
                    "org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder.decode(byte[] encoding)": {
                        "lineNumber": [
                            {
                                "283": "if (s.size() != 2){"
                            },
                            {
                                "284": "throw new IOException(\"malformed signature\");"
                            },
                            {
                                "285": "}"
                            },
                            {
                                "286": ""
                            },
                            {
                                "287": "if (!Arrays.areEqual(encoding, s.getEncoded(ASN1Encoding.DER))){"
                            },
                            {
                                "288": "throw new IOException(\"malformed signature\");"
                            },
                            {
                                "289": "}"
                            },
                            {
                                "290": ""
                            }
                        ],
                        "paramType": "(byte[] encoding)",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.ec.SignatureSpi$StdDSAEncoder.decode:java.math.BigInteger[](byte[])"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java",
                "addMethodBegin": {
                    "org.bouncycastle.asn1.ASN1Integer.<init>(byte[] bytes, boolean clone)": 50
                },
                "addMethodEnd": {
                    "org.bouncycastle.asn1.ASN1Integer.<init>(byte[] bytes, boolean clone)": 63
                },
                "addMethodFull": {
                    "org.bouncycastle.asn1.ASN1Integer.<init>(byte[] bytes, boolean clone)": {
                        "lineNumber": [
                            {
                                "51": "if (bytes.length > 1){"
                            },
                            {
                                "52": "if (bytes[0] == 0 && (bytes[1] & 0x80) == 0){"
                            },
                            {
                                "53": "throw new IllegalArgumentException(\"malformed integer\");"
                            },
                            {
                                "54": "}"
                            },
                            {
                                "55": ""
                            },
                            {
                                "56": "if (bytes[0] == (byte)0xff && (bytes[1] & 0x80) != 0){"
                            },
                            {
                                "57": "throw new IllegalArgumentException(\"malformed integer\");"
                            },
                            {
                                "58": "}"
                            },
                            {
                                "59": ""
                            },
                            {
                                "60": "}"
                            },
                            {
                                "61": ""
                            }
                        ],
                        "paramType": "(byte[] bytes, boolean clone)",
                        "originalFullName": "org.bouncycastle.asn1.ASN1Integer.<init>:void(byte[],boolean)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24197": {
        "old_methods_info": [
            {
                "oldFilePath": "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java",
                "deleteMethodBegin": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": 649,
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": 672
                },
                "deleteMethodEnd": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": 670,
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": 687
                },
                "deleteMethodFull": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": {
                        "lineNumber": [
                            {
                                "661": "tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);"
                            },
                            {
                                "663": "tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_CLOSE_BRACKET);"
                            }
                        ],
                        "paramType": "(boolean objStm)",
                        "originalFullName": "com.itextpdf.kernel.pdf.PdfReader.readDictionary:com.itextpdf.kernel.pdf.PdfDictionary(boolean)"
                    },
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": {
                        "lineNumber": [
                            {
                                "677": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)"
                            },
                            {
                                "679": "if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)"
                            },
                            {
                                "680": "tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);"
                            }
                        ],
                        "paramType": "(boolean objStm)",
                        "originalFullName": "com.itextpdf.kernel.pdf.PdfReader.readArray:com.itextpdf.kernel.pdf.PdfArray(boolean)"
                    }
                }
            },
            {
                "oldFilePath": "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java",
                "deleteMethodBegin": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": 78
                },
                "deleteMethodEnd": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": 90
                },
                "deleteMethodFull": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": {
                        "lineNumber": [
                            {
                                "82": "if (!obj.isArray() && tokeniser.getTokenType() == PdfTokenizer.TokenType.EndArray)"
                            },
                            {
                                "84": "if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic && obj.getType() != PdfObject.DICTIONARY)"
                            },
                            {
                                "85": "tokeniser.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray:com.itextpdf.kernel.pdf.PdfArray()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java",
                "addMethodBegin": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": 650,
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": 673,
                    "com.itextpdf.kernel.pdf.PdfReader.processArrayReadError()": 1063
                },
                "addMethodEnd": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": 671,
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": 689,
                    "com.itextpdf.kernel.pdf.PdfReader.processArrayReadError()": 1073
                },
                "addMethodFull": {
                    "com.itextpdf.kernel.pdf.PdfReader.readDictionary(boolean objStm)": {
                        "lineNumber": [
                            {
                                "662": "tokens.throwError(MessageFormatUtil. format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, \">>\"));"
                            },
                            {
                                "664": "tokens.throwError(MessageFormatUtil. format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, \"]\"));"
                            }
                        ],
                        "paramType": "(boolean objStm)",
                        "originalFullName": "com.itextpdf.kernel.pdf.PdfReader.readDictionary:com.itextpdf.kernel.pdf.PdfDictionary(boolean)"
                    },
                    "com.itextpdf.kernel.pdf.PdfReader.readArray(boolean objStm)": {
                        "lineNumber": [
                            {
                                "678": "if (tokens.getTokenType() != PdfTokenizer.TokenType.EndArray) {"
                            },
                            {
                                "679": "processArrayReadError();"
                            },
                            {
                                "680": "}"
                            },
                            {
                                "681": ""
                            }
                        ],
                        "paramType": "(boolean objStm)",
                        "originalFullName": "com.itextpdf.kernel.pdf.PdfReader.readArray:com.itextpdf.kernel.pdf.PdfArray(boolean)"
                    },
                    "com.itextpdf.kernel.pdf.PdfReader.processArrayReadError()": {
                        "lineNumber": [
                            {
                                "1063": "private void processArrayReadError() {"
                            },
                            {
                                "1064": "final String error = MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, new String(tokens.getByteContent(), StandardCharsets.UTF_8));"
                            },
                            {
                                "1065": "if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {"
                            },
                            {
                                "1066": "final Logger logger = LoggerFactory.getLogger(PdfReader.class);"
                            },
                            {
                                "1067": "logger.error(error);"
                            },
                            {
                                "1068": "}"
                            },
                            {
                                "1069": "else {"
                            },
                            {
                                "1070": "tokens.throwError(error);"
                            },
                            {
                                "1071": "}"
                            },
                            {
                                "1072": ""
                            },
                            {
                                "1073": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.itextpdf.kernel.pdf.PdfReader.processArrayReadError:void()"
                    }
                }
            },
            {
                "newFilePath": "kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java",
                "addMethodBegin": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": 79
                },
                "addMethodEnd": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": 95
                },
                "addMethodFull": {
                    "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray()": {
                        "lineNumber": [
                            {
                                "83": "if (!obj.isArray() && tokeniser.getTokenType() == PdfTokenizer.TokenType.EndArray) {"
                            },
                            {
                                "85": "}"
                            },
                            {
                                "86": ""
                            },
                            {
                                "87": "if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic && obj.getType() != PdfObject.DICTIONARY) {"
                            },
                            {
                                "88": "tokeniser.throwError(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, \">>\"));"
                            },
                            {
                                "89": "}"
                            },
                            {
                                "90": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.itextpdf.kernel.pdf.canvas.parser.util.PdfCanvasParser.readArray:com.itextpdf.kernel.pdf.PdfArray()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "iText"
            ],
            "classnamelst": [
                "StackOverflowException"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24816": {
        "old_methods_info": [
            {
                "oldFilePath": "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java",
                "deleteMethodBegin": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": 203,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": 207,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": 216,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": 278,
                    "it.geosolutions.jaiext.jiffle.Jiffle.stripComments(String theScript)": 290
                },
                "deleteMethodEnd": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": 205,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": 214,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": 254,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": 288,
                    "it.geosolutions.jaiext.jiffle.Jiffle.stripComments(String theScript)": 292
                },
                "deleteMethodFull": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": {
                        "lineNumber": [
                            {
                                "204": "return createRuntimeInstance(model, getRuntimeBaseClass(model), false);"
                            }
                        ],
                        "paramType": "(Jiffle.RuntimeModel model)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": {
                        "lineNumber": [
                            {
                                "213": "return (T) createRuntimeInstance(model, baseClass, false);"
                            }
                        ],
                        "paramType": "(Class<T> baseClass)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(java.lang.Class)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": {
                        "lineNumber": [
                            {
                                "251": "throw new it.geosolutions.jaiext.jiffle.JiffleException(\"Runtime source error for source: \" + runtimeSource, ex);"
                            }
                        ],
                        "paramType": "(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel,java.lang.Class,boolean)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": {
                        "lineNumber": [
                            {
                                "280": "throw new RuntimeException(\"Do no know how to clean the block comments yet\");"
                            },
                            {
                                "283": "SourceWriter writer = new SourceWriter(model);"
                            },
                            {
                                "284": "writer.setScript(stripComments(theScript));"
                            }
                        ],
                        "paramType": "(RuntimeModel model, String baseClassName, boolean scriptInDocs)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource:java.lang.String(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel,java.lang.String,boolean)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.stripComments(String theScript)": {
                        "lineNumber": [
                            {
                                "290": "private String stripComments(String theScript) {"
                            },
                            {
                                "291": "return BLOCK_COMMENT_STRIPPER.matcher(theScript).replaceAll(\"\");"
                            },
                            {
                                "292": "}"
                            }
                        ],
                        "paramType": "(String theScript)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.stripComments:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java",
                "deleteMethodBegin": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": 29
                },
                "deleteMethodEnd": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": 154
                },
                "deleteMethodFull": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": {
                        "lineNumber": [
                            {
                                "42": "w.line(\" *<code>\");"
                            },
                            {
                                "44": "w.append(\" * \").append(line).newLine();"
                            },
                            {
                                "47": "w.line(\" *</code>\");"
                            }
                        ],
                        "paramType": "(SourceWriter w)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.parser.node.Script.write:void(it.geosolutions.jaiext.jiffle.parser.node.SourceWriter)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/Jiffle.java",
                "addMethodBegin": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.isIncludeScript()": 93,
                    "it.geosolutions.jaiext.jiffle.Jiffle.setIncludeScript(boolean includeScript)": 97,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": 211,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": 215,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": 224,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": 294
                },
                "addMethodEnd": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.isIncludeScript()": 95,
                    "it.geosolutions.jaiext.jiffle.Jiffle.setIncludeScript(boolean includeScript)": 99,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": 213,
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": 222,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": 270,
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": 303
                },
                "addMethodFull": {
                    "it.geosolutions.jaiext.jiffle.Jiffle.isIncludeScript()": {
                        "lineNumber": [
                            {
                                "93": "public boolean isIncludeScript() {"
                            },
                            {
                                "94": "return includeScript;"
                            },
                            {
                                "95": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.isIncludeScript:boolean()"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.setIncludeScript(boolean includeScript)": {
                        "lineNumber": [
                            {
                                "97": "public void setIncludeScript(boolean includeScript) {"
                            },
                            {
                                "98": "this.includeScript = includeScript;"
                            },
                            {
                                "99": "}"
                            }
                        ],
                        "paramType": "(boolean includeScript)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.setIncludeScript:void(boolean)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Jiffle.RuntimeModel model)": {
                        "lineNumber": [
                            {
                                "212": "return createRuntimeInstance(model, getRuntimeBaseClass(model), includeScript);"
                            }
                        ],
                        "paramType": "(Jiffle.RuntimeModel model)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance(Class<T> baseClass)": {
                        "lineNumber": [
                            {
                                "221": "return (T) createRuntimeInstance(model, baseClass, includeScript);"
                            }
                        ],
                        "paramType": "(Class<T> baseClass)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.getRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(java.lang.Class)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)": {
                        "lineNumber": [
                            {
                                "259": "if (model == RuntimeModel.INDIRECT) {"
                            },
                            {
                                "260": "if (LOGGER.isLoggable(Level.FINE)) {"
                            },
                            {
                                "261": "LOGGER.fine(\"Runtime source error for source: \" + runtimeSource);"
                            },
                            {
                                "262": "}"
                            },
                            {
                                "263": ""
                            },
                            {
                                "264": "throw new JiffleException(\"Runtime source error\", ex);"
                            },
                            {
                                "265": "}"
                            },
                            {
                                "266": ""
                            },
                            {
                                "267": "throw new JiffleException(\"Runtime source error for source: \" + runtimeSource, ex);"
                            }
                        ],
                        "paramType": "(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeInstance:it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel,java.lang.Class,boolean)"
                    },
                    "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs)": {
                        "lineNumber": [
                            {
                                "295": "SourceWriter writer = new SourceWriter(model);"
                            },
                            {
                                "297": "writer.setScript(theScript);"
                            }
                        ],
                        "paramType": "(RuntimeModel model, String baseClassName, boolean scriptInDocs)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.Jiffle.createRuntimeSource:java.lang.String(it.geosolutions.jaiext.jiffle.Jiffle$RuntimeModel,java.lang.String,boolean)"
                    }
                }
            },
            {
                "newFilePath": "jt-jiffle/jt-jiffle-language/src/main/java/it/geosolutions/jaiext/jiffle/parser/node/Script.java",
                "addMethodBegin": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.<init>(Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer)": 21,
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.validate()": 31,
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": 48
                },
                "addMethodEnd": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.<init>(Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer)": 29,
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.validate()": 46,
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": 174
                },
                "addMethodFull": {
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.<init>(Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer)": {
                        "lineNumber": [
                            {
                                "28": "validate();"
                            },
                            {
                                "29": "}"
                            }
                        ],
                        "paramType": "(Map<String, String> options, Set<String> sourceImages, Set<String> destImages, GlobalVars globals, StatementList stmts, RepeatedReadOptimizer readOptimizer)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.parser.node.Script.<init>:void(java.util.Map,java.util.Set,java.util.Set,it.geosolutions.jaiext.jiffle.parser.node.GlobalVars,it.geosolutions.jaiext.jiffle.parser.node.StatementList,it.geosolutions.jaiext.jiffle.parser.RepeatedReadOptimizer)"
                    },
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.validate()": {
                        "lineNumber": [
                            {
                                "31": "private void validate() {"
                            },
                            {
                                "32": "for (String name : sourceImages) {"
                            },
                            {
                                "33": "if (!VALID_IDENTIFIER.matcher(name).matches()) {"
                            },
                            {
                                "34": "throw new JiffleParserException(\"Invalid source image name: \" + name);"
                            },
                            {
                                "35": "}"
                            },
                            {
                                "36": ""
                            },
                            {
                                "37": "}"
                            },
                            {
                                "38": ""
                            },
                            {
                                "39": "for (String name : destImages) {"
                            },
                            {
                                "40": "if (!VALID_IDENTIFIER.matcher(name).matches()) {"
                            },
                            {
                                "41": "throw new JiffleParserException(\"Invalid dest image name: \" + name);"
                            },
                            {
                                "42": "}"
                            },
                            {
                                "43": ""
                            },
                            {
                                "44": "}"
                            },
                            {
                                "45": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.parser.node.Script.validate:void()"
                    },
                    "it.geosolutions.jaiext.jiffle.parser.node.Script.write(SourceWriter w)": {
                        "lineNumber": [
                            {
                                "61": "w.line(\" *<pre>\");"
                            },
                            {
                                "63": "String escaped = line.replace(\"*/\", \"*&#47;\").replace(\"/*\", \"&#47;*\");"
                            },
                            {
                                "64": "w.append(\" * \").append(escaped).newLine();"
                            },
                            {
                                "67": "w.line(\" *</pre>\");"
                            }
                        ],
                        "paramType": "(SourceWriter w)",
                        "originalFullName": "it.geosolutions.jaiext.jiffle.parser.node.Script.write:void(it.geosolutions.jaiext.jiffle.parser.node.SourceWriter)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "GeoServer"
            ],
            "pathlst": [
                "x.y.z.jar"
            ],
            "langrelatedfiles": [
                "janino-x.y.z.jar"
            ]
        }
    },
    "CVE-2021-43859": {
        "old_methods_info": [
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "deleteMethodBegin": {
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, final DataHolder dataHolder)": 1220
                },
                "deleteMethodEnd": {
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, final DataHolder dataHolder)": 1247
                },
                "deleteMethodFull": {
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, final DataHolder dataHolder)": {
                        "lineNumber": [
                            {
                                "1220": "public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader reader, final DataHolder dataHolder) throws IOException {"
                            },
                            {
                                "1225": "final Object result = unmarshal(reader, null, dataHolder);"
                            }
                        ],
                        "paramType": "(final HierarchicalStreamReader reader, final DataHolder dataHolder)",
                        "originalFullName": "com.thoughtworks.xstream.XStream.createObjectInputStream:java.io.ObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
                    }
                }
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/collections/CollectionConverter.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.converters.collections.CollectionConverter.addCurrentElementToCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection, Collection target)": 66
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.converters.collections.CollectionConverter.addCurrentElementToCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection, Collection target)": 71
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.converters.collections.CollectionConverter.addCurrentElementToCollection(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection, Collection target)": {
                        "lineNumber": [
                            {
                                "68": "long now = System.currentTimeMillis();"
                            },
                            {
                                "70": "SecurityUtils.checkForCollectionDoSAttack(context, now);"
                            }
                        ],
                        "paramType": "(HierarchicalStreamReader reader, UnmarshallingContext context, Collection collection, Collection target)",
                        "originalFullName": "com.thoughtworks.xstream.converters.collections.CollectionConverter.addCurrentElementToCollection:void(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Collection,java.util.Collection)"
                    }
                }
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.XStream.setCollectionUpdateLimit(int maxSeconds)": 840,
                    "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder)": 935,
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder)": 1237
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.XStream.setCollectionUpdateLimit(int maxSeconds)": 842,
                    "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder)": 955,
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder)": 1274
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.XStream.setCollectionUpdateLimit(int maxSeconds)": {
                        "lineNumber": [
                            {
                                "840": "public void setCollectionUpdateLimit(int maxSeconds) {"
                            },
                            {
                                "841": "collectionUpdateLimit = maxSeconds;"
                            },
                            {
                                "842": "}"
                            }
                        ],
                        "paramType": "(int maxSeconds)",
                        "originalFullName": "com.thoughtworks.xstream.XStream.setCollectionUpdateLimit:void(int)"
                    },
                    "com.thoughtworks.xstream.XStream.unmarshal(HierarchicalStreamReader reader, Object root, DataHolder dataHolder)": {
                        "lineNumber": [
                            {
                                "937": "if (collectionUpdateLimit >= 0) {"
                            },
                            {
                                "938": "if (dataHolder == null) {"
                            },
                            {
                                "939": "dataHolder = new MapBackedDataHolder();"
                            },
                            {
                                "940": "}"
                            },
                            {
                                "941": ""
                            },
                            {
                                "942": "dataHolder.put(COLLECTION_UPDATE_LIMIT, new Integer(collectionUpdateLimit));"
                            },
                            {
                                "943": "dataHolder.put(COLLECTION_UPDATE_SECONDS, new Integer(0));"
                            },
                            {
                                "944": "}"
                            },
                            {
                                "945": ""
                            }
                        ],
                        "paramType": "(HierarchicalStreamReader reader, Object root, DataHolder dataHolder)",
                        "originalFullName": "com.thoughtworks.xstream.XStream.unmarshal:java.lang.Object(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
                    },
                    "com.thoughtworks.xstream.XStream.createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder)": {
                        "lineNumber": [
                            {
                                "1237": "public ObjectInputStream createObjectInputStream(final HierarchicalStreamReader reader, DataHolder dataHolder) throws IOException {"
                            },
                            {
                                "1238": "if (collectionUpdateLimit >= 0) {"
                            },
                            {
                                "1239": "if (dataHolder == null) {"
                            },
                            {
                                "1240": "dataHolder = new MapBackedDataHolder();"
                            },
                            {
                                "1241": "}"
                            },
                            {
                                "1242": ""
                            },
                            {
                                "1243": "dataHolder.put(COLLECTION_UPDATE_LIMIT, new Integer(collectionUpdateLimit));"
                            },
                            {
                                "1244": "dataHolder.put(COLLECTION_UPDATE_SECONDS, new Integer(0));"
                            },
                            {
                                "1245": "}"
                            },
                            {
                                "1246": ""
                            },
                            {
                                "1247": "final DataHolder dh = dataHolder;"
                            },
                            {
                                "1252": "final Object result = unmarshal(reader, null, dh);"
                            }
                        ],
                        "paramType": "(final HierarchicalStreamReader reader, DataHolder dataHolder)",
                        "originalFullName": "com.thoughtworks.xstream.XStream.createObjectInputStream:java.io.ObjectInputStream(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder)"
                    }
                }
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/security/ForbiddenClassException.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/collections/MapConverter.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.converters.collections.MapConverter.putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": 68
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.converters.collections.MapConverter.putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": 74
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.converters.collections.MapConverter.putCurrentEntryIntoMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": {
                        "lineNumber": [
                            {
                                "71": "long now = System.currentTimeMillis();"
                            },
                            {
                                "73": "SecurityUtils.checkForCollectionDoSAttack(context, now);"
                            }
                        ],
                        "paramType": "(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)",
                        "originalFullName": "com.thoughtworks.xstream.converters.collections.MapConverter.putCurrentEntryIntoMap:void(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
                    }
                }
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/core/TreeUnmarshaller.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.core.TreeUnmarshaller.convert(Object parent, Class type, Converter converter)": 54
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.core.TreeUnmarshaller.convert(Object parent, Class type, Converter converter)": 75
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.core.TreeUnmarshaller.convert(Object parent, Class type, Converter converter)": {
                        "lineNumber": [
                            {
                                "62": "}"
                            },
                            {
                                "63": "catch (AbstractSecurityException e) {"
                            },
                            {
                                "64": "throw e;"
                            }
                        ],
                        "paramType": "(Object parent, Class type, Converter converter)",
                        "originalFullName": "com.thoughtworks.xstream.core.TreeUnmarshaller.convert:java.lang.Object(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)"
                    }
                }
            },
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/converters/extended/NamedMapConverter.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.converters.extended.NamedMapConverter.populateMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": 133
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.converters.extended.NamedMapConverter.populateMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": 203
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.converters.extended.NamedMapConverter.populateMap(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)": {
                        "lineNumber": [
                            {
                                "194": "long now = System.currentTimeMillis();"
                            },
                            {
                                "196": "SecurityUtils.checkForCollectionDoSAttack(context, now);"
                            }
                        ],
                        "paramType": "(HierarchicalStreamReader reader, UnmarshallingContext context, Map map, Map target)",
                        "originalFullName": "com.thoughtworks.xstream.converters.extended.NamedMapConverter.populateMap:void(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext,java.util.Map,java.util.Map)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "NO_REFERENCE"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-27568": {
        "old_methods_info": [
            {
                "oldFilePath": "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java",
                "addMethodBegin": {
                    "net.minidev.json.parser.JSONParserBase.extractFloat()": 103
                },
                "addMethodEnd": {
                    "net.minidev.json.parser.JSONParserBase.extractFloat()": 117
                },
                "addMethodFull": {
                    "net.minidev.json.parser.JSONParserBase.extractFloat()": {
                        "lineNumber": [
                            {
                                "106": "try {"
                            },
                            {
                                "112": "}"
                            },
                            {
                                "113": "catch(Exception e){"
                            },
                            {
                                "114": "throw new ParseException(pos, ERROR_UNEXPECTED_TOKEN, xs);"
                            },
                            {
                                "115": "}"
                            },
                            {
                                "116": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "net.minidev.json.parser.JSONParserBase.extractFloat:java.lang.Number()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-10086": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/beanutils2/PropertyUtilsBean.java",
                "addMethodBegin": {
                    "org.apache.commons.beanutils2.PropertyUtilsBean.resetBeanIntrospectors()": 52
                },
                "addMethodEnd": {
                    "org.apache.commons.beanutils2.PropertyUtilsBean.resetBeanIntrospectors()": 56
                },
                "addMethodFull": {
                    "org.apache.commons.beanutils2.PropertyUtilsBean.resetBeanIntrospectors()": {
                        "lineNumber": [
                            {
                                "55": "introspectors.add(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.commons.beanutils2.PropertyUtilsBean.resetBeanIntrospectors:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "BeanIntrospector"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1002201": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/zeroturnaround/zip/ZipUtil.java",
                "addMethodBegin": {
                    "org.zeroturnaround.zip.ZipUtil$Unpacker.process(InputStream in, ZipEntry zipEntry)": 678,
                    "org.zeroturnaround.zip.ZipUtil$BackslashUnpacker.process(InputStream in, ZipEntry zipEntry)": 722,
                    "org.zeroturnaround.zip.ZipUtil$Unwraper.process(InputStream in, ZipEntry zipEntry)": 769
                },
                "addMethodEnd": {
                    "org.zeroturnaround.zip.ZipUtil$Unpacker.process(InputStream in, ZipEntry zipEntry)": 706,
                    "org.zeroturnaround.zip.ZipUtil$BackslashUnpacker.process(InputStream in, ZipEntry zipEntry)": 756,
                    "org.zeroturnaround.zip.ZipUtil$Unwraper.process(InputStream in, ZipEntry zipEntry)": 801
                },
                "addMethodFull": {
                    "org.zeroturnaround.zip.ZipUtil$Unpacker.process(InputStream in, ZipEntry zipEntry)": {
                        "lineNumber": [
                            {
                                "682": "if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {"
                            },
                            {
                                "683": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");"
                            },
                            {
                                "684": "}"
                            },
                            {
                                "685": ""
                            }
                        ],
                        "paramType": "(InputStream in, ZipEntry zipEntry)",
                        "originalFullName": "org.zeroturnaround.zip.ZipUtil$Unpacker.process:void(java.io.InputStream,java.util.zip.ZipEntry)"
                    },
                    "org.zeroturnaround.zip.ZipUtil$BackslashUnpacker.process(InputStream in, ZipEntry zipEntry)": {
                        "lineNumber": [
                            {
                                "738": "if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {"
                            },
                            {
                                "739": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");"
                            },
                            {
                                "740": "}"
                            },
                            {
                                "741": ""
                            },
                            {
                                "747": "if (name.indexOf(\"..\") != -1 && !destFile.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {"
                            },
                            {
                                "748": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");"
                            },
                            {
                                "749": "}"
                            },
                            {
                                "750": ""
                            }
                        ],
                        "paramType": "(InputStream in, ZipEntry zipEntry)",
                        "originalFullName": "org.zeroturnaround.zip.ZipUtil$BackslashUnpacker.process:void(java.io.InputStream,java.util.zip.ZipEntry)"
                    },
                    "org.zeroturnaround.zip.ZipUtil$Unwraper.process(InputStream in, ZipEntry zipEntry)": {
                        "lineNumber": [
                            {
                                "782": "if (name.indexOf(\"..\") != -1 && !file.getCanonicalPath().startsWith(outputDir.getCanonicalPath())) {"
                            },
                            {
                                "783": "throw new ZipException(\"The file \"+name+\" is trying to leave the target output directory of \"+outputDir+\". Ignoring this file.\");"
                            },
                            {
                                "784": "}"
                            },
                            {
                                "785": ""
                            }
                        ],
                        "paramType": "(InputStream in, ZipEntry zipEntry)",
                        "originalFullName": "org.zeroturnaround.zip.ZipUtil$Unwraper.process:void(java.io.InputStream,java.util.zip.ZipEntry)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-23899": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "deleteMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 277,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 803,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 808
                },
                "deleteMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 435,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 806,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 813
                },
                "deleteMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "316": "char c1 = jsonish.charAt(i + 1);"
                            },
                            {
                                "317": "char c2 = jsonish.charAt(i + 2);"
                            },
                            {
                                "318": "char c3 = jsonish.charAt(i + 3);"
                            },
                            {
                                "322": "if ( (c1 == '\\\\' || c2 == '\\\\' || c3 == '\\\\') || (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {"
                            },
                            {
                                "331": "int cm2 = jsonish.charAt(i - 2);"
                            },
                            {
                                "332": "int cm1 = jsonish.charAt(i - 1);"
                            },
                            {
                                "333": "if (('-' == cm2 || '\\\\' == cm2) && ('-' == cm1 || '\\\\' == cm1)) {"
                            },
                            {
                                "342": "char c1 = jsonish.charAt(i + 1);"
                            },
                            {
                                "343": "char c2 = jsonish.charAt(i + 2);"
                            },
                            {
                                "344": "if ((']' == c1 || '\\\\' == c1) && ('>' == c2 || '\\\\' == c2)) {"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    },
                    "com.google.json.JsonSanitizer.isOctAt(int i)": {
                        "lineNumber": [
                            {
                                "804": "char ch = jsonish.charAt(i);"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOctAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isHexAt(int i)": {
                        "lineNumber": [
                            {
                                "809": "char ch = jsonish.charAt(i);"
                            },
                            {
                                "811": "ch |= 32;"
                            },
                            {
                                "812": "return 'a' <= ch && ch <= 'f';"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHexAt:boolean(int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "addMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 277,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 817,
                    "com.google.json.JsonSanitizer.isOct(char ch)": 821,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 825,
                    "com.google.json.JsonSanitizer.isHex(char ch)": 829,
                    "com.google.json.JsonSanitizer.hexVal(char ch)": 835,
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": 892,
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": 966
                },
                "addMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 449,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 819,
                    "com.google.json.JsonSanitizer.isOct(char ch)": 823,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 827,
                    "com.google.json.JsonSanitizer.isHex(char ch)": 833,
                    "com.google.json.JsonSanitizer.hexVal(char ch)": 838,
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": 964,
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": 993
                },
                "addMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "316": "int la = i + 1;"
                            },
                            {
                                "317": "int c1AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "318": "char c1 = (char) c1AndDelta;"
                            },
                            {
                                "319": "la += c1AndDelta >>> 16;"
                            },
                            {
                                "320": "long c2AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "321": "char c2 = (char) c2AndDelta;"
                            },
                            {
                                "322": "la += c2AndDelta >>> 16;"
                            },
                            {
                                "323": "long c3AndEnd = unescapedChar(jsonish, la);"
                            },
                            {
                                "324": "char c3 = (char) c3AndEnd;"
                            },
                            {
                                "328": "if ( (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {"
                            },
                            {
                                "337": "int lb = i - 1;"
                            },
                            {
                                "338": "int cm1AndDelta = unescapedCharRev(jsonish, lb);"
                            },
                            {
                                "339": "char cm1 = (char) cm1AndDelta;"
                            },
                            {
                                "340": "lb -= cm1AndDelta >>> 16;"
                            },
                            {
                                "341": "int cm2AndDelta = unescapedCharRev(jsonish, lb);"
                            },
                            {
                                "342": "char cm2 = (char) cm2AndDelta;"
                            },
                            {
                                "343": "if ('-' == cm2 && '-' == cm1) {"
                            },
                            {
                                "352": "int la = i + 1;"
                            },
                            {
                                "353": "long c1AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "354": "char c1 = (char) c1AndDelta;"
                            },
                            {
                                "355": "la += c1AndDelta >>> 16;"
                            },
                            {
                                "356": "long c2AndEnd = unescapedChar(jsonish, la);"
                            },
                            {
                                "357": "char c2 = (char) c2AndEnd;"
                            },
                            {
                                "358": "if (']' == c1 && '>' == c2) {"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    },
                    "com.google.json.JsonSanitizer.isOctAt(int i)": {
                        "lineNumber": [
                            {
                                "818": "return isOct(jsonish.charAt(i));"
                            },
                            {
                                "819": "}"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOctAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isOct(char ch)": {
                        "lineNumber": [
                            {
                                "821": "private static boolean isOct(char ch) {"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOct:boolean(char)"
                    },
                    "com.google.json.JsonSanitizer.isHexAt(int i)": {
                        "lineNumber": [
                            {
                                "826": "return isHex(jsonish.charAt(i));"
                            },
                            {
                                "827": "}"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHexAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isHex(char ch)": {
                        "lineNumber": [
                            {
                                "829": "private static boolean isHex(char ch) {"
                            },
                            {
                                "831": "int lch = ch | 32;"
                            },
                            {
                                "832": "return 'a' <= lch && lch <= 'f';"
                            },
                            {
                                "833": "}"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHex:boolean(char)"
                    },
                    "com.google.json.JsonSanitizer.hexVal(char ch)": {
                        "lineNumber": [
                            {
                                "835": "private static int hexVal(char ch) {"
                            },
                            {
                                "836": "int lch = ch | 32;"
                            },
                            {
                                "837": "return lch - (lch <= '9' ? '0' : 'a' - 10);"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.hexVal:int(char)"
                    },
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": {
                        "lineNumber": [
                            {
                                "892": "private static int unescapedChar(String s, int left) {"
                            },
                            {
                                "893": "int n = s.length();"
                            },
                            {
                                "894": "if (left >= n) {"
                            },
                            {
                                "895": "return 0;"
                            },
                            {
                                "896": "}"
                            },
                            {
                                "897": ""
                            },
                            {
                                "898": "char c = s.charAt(left);"
                            },
                            {
                                "899": "if (c == '\\\\') {"
                            },
                            {
                                "900": "if (left + 1 == n) {"
                            },
                            {
                                "901": "return 0x10000;"
                            },
                            {
                                "902": "}"
                            },
                            {
                                "903": ""
                            },
                            {
                                "904": "char nc = s.charAt(left + 1);"
                            },
                            {
                                "905": "switch (nc) {"
                            },
                            {
                                "906": "case '0': case '1': case '2': case '3':"
                            },
                            {
                                "907": "case '4': case '5': case '6': case '7': {"
                            },
                            {
                                "908": "int octalStart = left + 1;"
                            },
                            {
                                "909": "int octalEnd = octalStart; ++octalEnd;"
                            },
                            {
                                "910": "if (octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;"
                            },
                            {
                                "911": "if (nc <= '3' && octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;"
                            },
                            {
                                "912": "}"
                            },
                            {
                                "913": ""
                            },
                            {
                                "914": "}"
                            },
                            {
                                "915": ""
                            },
                            {
                                "916": "int value = 0;"
                            },
                            {
                                "917": "for (int j = octalStart; j < octalEnd; ++j) {"
                            },
                            {
                                "918": "char digit = s.charAt(j);"
                            },
                            {
                                "919": "value = (value << 3) | (digit - '0');"
                            },
                            {
                                "920": "}"
                            },
                            {
                                "921": ""
                            },
                            {
                                "922": "return ((octalEnd - left) << 16) | value;"
                            },
                            {
                                "923": "}"
                            },
                            {
                                "924": ""
                            },
                            {
                                "925": "case 'x':"
                            },
                            {
                                "926": "if (left + 3 < n) {"
                            },
                            {
                                "927": "char d0 = s.charAt(left + 2);"
                            },
                            {
                                "928": "char d1 = s.charAt(left + 3);"
                            },
                            {
                                "929": "if (isHex(d0) && isHex(d1)) {"
                            },
                            {
                                "930": "return 0x4000 | (hexVal(d0) << 4) | hexVal(d1);"
                            },
                            {
                                "931": "}"
                            },
                            {
                                "932": ""
                            },
                            {
                                "933": "}"
                            },
                            {
                                "934": ""
                            },
                            {
                                "935": "break;"
                            },
                            {
                                "936": "case 'u':"
                            },
                            {
                                "937": "if (left + 5 < n) {"
                            },
                            {
                                "938": "char d0 = s.charAt(left + 2);"
                            },
                            {
                                "939": "char d1 = s.charAt(left + 3);"
                            },
                            {
                                "940": "char d2 = s.charAt(left + 4);"
                            },
                            {
                                "941": "char d3 = s.charAt(left + 5);"
                            },
                            {
                                "942": "if (isHex(d0) && isHex(d1) && isHex(d2) && isHex(d3)) {"
                            },
                            {
                                "943": "return 0x6000 | (hexVal(d0) << 12) | (hexVal(d1) << 8) | (hexVal(d2) << 4) | hexVal(d3);"
                            },
                            {
                                "944": "}"
                            },
                            {
                                "945": ""
                            },
                            {
                                "946": "}"
                            },
                            {
                                "947": ""
                            },
                            {
                                "948": "break;"
                            },
                            {
                                "949": "case 'b': return (0x20000 | '\\b');"
                            },
                            {
                                "950": "case 'f': return (0x20000 | '\\f');"
                            },
                            {
                                "951": "case 'n': return 0x2000A;"
                            },
                            {
                                "952": "case 'r': return 0x2000D;"
                            },
                            {
                                "953": "case 't': return 0x20009;"
                            },
                            {
                                "954": "case 'v': return 0x20008;"
                            },
                            {
                                "955": "default: break;"
                            },
                            {
                                "956": "}"
                            },
                            {
                                "957": ""
                            },
                            {
                                "958": "return (0x20000) | nc;"
                            },
                            {
                                "959": "}"
                            },
                            {
                                "960": "else {"
                            },
                            {
                                "961": "return 0x10000 | c;"
                            },
                            {
                                "962": "}"
                            },
                            {
                                "963": ""
                            },
                            {
                                "964": "}"
                            }
                        ],
                        "paramType": "(String s, int left)",
                        "originalFullName": "com.google.json.JsonSanitizer.unescapedChar:int(java.lang.String,int)"
                    },
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": {
                        "lineNumber": [
                            {
                                "966": "private static int unescapedCharRev(String s, int rightIncl) {"
                            },
                            {
                                "967": "if (rightIncl < 0) {"
                            },
                            {
                                "968": "return 0;"
                            },
                            {
                                "969": "}"
                            },
                            {
                                "970": ""
                            },
                            {
                                "971": "for (int i = 1; i < 6; ++i) {"
                            },
                            {
                                "972": "int left = rightIncl - i;"
                            },
                            {
                                "973": "if (left < 0) { break; }"
                            },
                            {
                                "974": "if (s.charAt(left) == '\\\\') {"
                            },
                            {
                                "975": "int n = 1;"
                            },
                            {
                                "976": "while (left - n >= 0 && s.charAt(left - n) == '\\\\') { ++n;"
                            },
                            {
                                "977": "}"
                            },
                            {
                                "978": ""
                            },
                            {
                                "979": "if ((n & 1) == 0) {"
                            },
                            {
                                "980": "int unescaped = unescapedChar(s, left);"
                            },
                            {
                                "981": "if ((unescaped >>> 16) == i) {"
                            },
                            {
                                "982": "return unescaped;"
                            },
                            {
                                "983": "}"
                            },
                            {
                                "984": ""
                            },
                            {
                                "985": "}"
                            },
                            {
                                "986": ""
                            },
                            {
                                "987": "break;"
                            },
                            {
                                "988": "}"
                            },
                            {
                                "989": ""
                            },
                            {
                                "990": "}"
                            },
                            {
                                "991": ""
                            },
                            {
                                "992": "return 0x10000 | s.charAt(rightIncl);"
                            },
                            {
                                "993": "}"
                            }
                        ],
                        "paramType": "(String s, int rightIncl)",
                        "originalFullName": "com.google.json.JsonSanitizer.unescapedCharRev:int(java.lang.String,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-1000340": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat128.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": 526,
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": 595
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": 593,
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": 661
                },
                "deleteMethodFull": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "570": "long zz_5 = zz[5] & M;"
                            },
                            {
                                "571": "long zz_6 = zz[6] & M;{"
                            },
                            {
                                "591": "w = zz[7] + (int)(zz_6 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat128.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "639": "long zz_5 = zz[zzOff + 5] & M;"
                            },
                            {
                                "640": "long zz_6 = zz[zzOff + 6] & M;{"
                            },
                            {
                                "659": "w = zz[zzOff + 7] + (int)(zz_6 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat128.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat224.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": 692,
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": 820
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": 818,
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": 946
                },
                "deleteMethodFull": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "736": "long zz_5 = zz[5] & M;"
                            },
                            {
                                "737": "long zz_6 = zz[6] & M;{"
                            },
                            {
                                "750": "long zz_7 = zz[7] & M;"
                            },
                            {
                                "751": "long zz_8 = zz[8] & M;{"
                            },
                            {
                                "766": "long zz_9 = zz[9] & M;"
                            },
                            {
                                "767": "long zz_10 = zz[10] & M;{"
                            },
                            {
                                "784": "long zz_11 = zz[11] & M;"
                            },
                            {
                                "785": "long zz_12 = zz[12] & M;{"
                            },
                            {
                                "816": "w = zz[13] + (int)(zz_12 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat224.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "864": "long zz_5 = zz[zzOff + 5] & M;"
                            },
                            {
                                "865": "long zz_6 = zz[zzOff + 6] & M;{"
                            },
                            {
                                "878": "long zz_7 = zz[zzOff + 7] & M;"
                            },
                            {
                                "879": "long zz_8 = zz[zzOff + 8] & M;{"
                            },
                            {
                                "894": "long zz_9 = zz[zzOff + 9] & M;"
                            },
                            {
                                "895": "long zz_10 = zz[zzOff + 10] & M;{"
                            },
                            {
                                "912": "long zz_11 = zz[zzOff + 11] & M;"
                            },
                            {
                                "913": "long zz_12 = zz[zzOff + 12] & M;{"
                            },
                            {
                                "944": "w = zz[zzOff + 13] + (int)(zz_12 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat224.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat192.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": 608,
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": 714
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": 712,
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": 818
                },
                "deleteMethodFull": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "652": "long zz_5 = zz[5] & M;"
                            },
                            {
                                "653": "long zz_6 = zz[6] & M;{"
                            },
                            {
                                "666": "long zz_7 = zz[7] & M;"
                            },
                            {
                                "667": "long zz_8 = zz[8] & M;{"
                            },
                            {
                                "682": "long zz_9 = zz[9] & M;"
                            },
                            {
                                "683": "long zz_10 = zz[10] & M;{"
                            },
                            {
                                "710": "w = zz[11] + (int)(zz_10 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat192.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "758": "long zz_5 = zz[zzOff + 5] & M;"
                            },
                            {
                                "759": "long zz_6 = zz[zzOff + 6] & M;{"
                            },
                            {
                                "772": "long zz_7 = zz[zzOff + 7] & M;"
                            },
                            {
                                "773": "long zz_8 = zz[zzOff + 8] & M;{"
                            },
                            {
                                "788": "long zz_9 = zz[zzOff + 9] & M;"
                            },
                            {
                                "789": "long zz_10 = zz[zzOff + 10] & M;{"
                            },
                            {
                                "816": "w = zz[zzOff + 11] + (int)(zz_10 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat192.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat160.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": 507,
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": 593
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": 591,
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": 677
                },
                "deleteMethodFull": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "551": "long zz_5 = zz[5] & M;"
                            },
                            {
                                "552": "long zz_6 = zz[6] & M;{"
                            },
                            {
                                "565": "long zz_7 = zz[7] & M;"
                            },
                            {
                                "566": "long zz_8 = zz[8] & M;{"
                            },
                            {
                                "589": "w = zz[9] + (int)(zz_8 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat160.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "637": "long zz_5 = zz[zzOff + 5] & M;"
                            },
                            {
                                "638": "long zz_6 = zz[zzOff + 6] & M;{"
                            },
                            {
                                "651": "long zz_7 = zz[zzOff + 7] & M;"
                            },
                            {
                                "652": "long zz_8 = zz[zzOff + 8] & M;{"
                            },
                            {
                                "675": "w = zz[zzOff + 9] + (int)(zz_8 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat160.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat256.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": 817,
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": 969
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": 967,
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": 1119
                },
                "deleteMethodFull": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "861": "long zz_5 = zz[5] & M;"
                            },
                            {
                                "862": "long zz_6 = zz[6] & M;{"
                            },
                            {
                                "875": "long zz_7 = zz[7] & M;"
                            },
                            {
                                "876": "long zz_8 = zz[8] & M;{"
                            },
                            {
                                "891": "long zz_9 = zz[9] & M;"
                            },
                            {
                                "892": "long zz_10 = zz[10] & M;{"
                            },
                            {
                                "909": "long zz_11 = zz[11] & M;"
                            },
                            {
                                "910": "long zz_12 = zz[12] & M;{"
                            },
                            {
                                "929": "long zz_13 = zz[13] & M;"
                            },
                            {
                                "930": "long zz_14 = zz[14] & M;{"
                            },
                            {
                                "965": "w = zz[15] + (int)(zz_14 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat256.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "1013": "long zz_5 = zz[zzOff + 5] & M;"
                            },
                            {
                                "1014": "long zz_6 = zz[zzOff + 6] & M;{"
                            },
                            {
                                "1027": "long zz_7 = zz[zzOff + 7] & M;"
                            },
                            {
                                "1028": "long zz_8 = zz[zzOff + 8] & M;{"
                            },
                            {
                                "1043": "long zz_9 = zz[zzOff + 9] & M;"
                            },
                            {
                                "1044": "long zz_10 = zz[zzOff + 10] & M;{"
                            },
                            {
                                "1061": "long zz_11 = zz[zzOff + 11] & M;"
                            },
                            {
                                "1062": "long zz_12 = zz[zzOff + 12] & M;{"
                            },
                            {
                                "1081": "long zz_13 = zz[zzOff + 13] & M;"
                            },
                            {
                                "1082": "long zz_14 = zz[zzOff + 14] & M;{"
                            },
                            {
                                "1117": "w = zz[zzOff + 15] + (int)(zz_14 >> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat256.square:void(int[],int,int[],int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat128.java",
                "addMethodBegin": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": 526,
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": 595
                },
                "addMethodEnd": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": 593,
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": 661
                },
                "addMethodFull": {
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "570": "long zz_5 = (zz[5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "571": "long zz_6 = (zz[6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "591": "w = zz[7] + (int)(zz_6 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat128.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat128.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "639": "long zz_5 = (zz[zzOff + 5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "640": "long zz_6 = (zz[zzOff + 6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "659": "w = zz[zzOff + 7] + (int)(zz_6 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat128.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat224.java",
                "addMethodBegin": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": 692,
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": 820
                },
                "addMethodEnd": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": 818,
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": 946
                },
                "addMethodFull": {
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "736": "long zz_5 = (zz[5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "737": "long zz_6 = (zz[6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "750": "long zz_7 = (zz[7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "751": "long zz_8 = (zz[8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "766": "long zz_9 = (zz[9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "767": "long zz_10 = (zz[10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "784": "long zz_11 = (zz[11] & M) + (zz_10 >>> 32); zz_10 &= M;"
                            },
                            {
                                "785": "long zz_12 = (zz[12] & M) + (zz_11 >>> 32); zz_11 &= M;{"
                            },
                            {
                                "816": "w = zz[13] + (int)(zz_12 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat224.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat224.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "864": "long zz_5 = (zz[zzOff + 5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "865": "long zz_6 = (zz[zzOff + 6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "878": "long zz_7 = (zz[zzOff + 7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "879": "long zz_8 = (zz[zzOff + 8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "894": "long zz_9 = (zz[zzOff + 9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "895": "long zz_10 = (zz[zzOff + 10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "912": "long zz_11 = (zz[zzOff + 11] & M) + (zz_10 >>> 32); zz_10 &= M;"
                            },
                            {
                                "913": "long zz_12 = (zz[zzOff + 12] & M) + (zz_11 >>> 32); zz_11 &= M;{"
                            },
                            {
                                "944": "w = zz[zzOff + 13] + (int)(zz_12 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat224.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat192.java",
                "addMethodBegin": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": 608,
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": 714
                },
                "addMethodEnd": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": 712,
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": 818
                },
                "addMethodFull": {
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "652": "long zz_5 = (zz[5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "653": "long zz_6 = (zz[6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "666": "long zz_7 = (zz[7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "667": "long zz_8 = (zz[8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "682": "long zz_9 = (zz[9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "683": "long zz_10 = (zz[10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "710": "w = zz[11] + (int)(zz_10 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat192.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat192.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "758": "long zz_5 = (zz[zzOff + 5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "759": "long zz_6 = (zz[zzOff + 6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "772": "long zz_7 = (zz[zzOff + 7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "773": "long zz_8 = (zz[zzOff + 8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "788": "long zz_9 = (zz[zzOff + 9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "789": "long zz_10 = (zz[zzOff + 10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "816": "w = zz[zzOff + 11] + (int)(zz_10 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat192.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat160.java",
                "addMethodBegin": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": 507,
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": 593
                },
                "addMethodEnd": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": 591,
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": 677
                },
                "addMethodFull": {
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "551": "long zz_5 = (zz[5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "552": "long zz_6 = (zz[6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "565": "long zz_7 = (zz[7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "566": "long zz_8 = (zz[8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "589": "w = zz[9] + (int)(zz_8 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat160.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat160.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "637": "long zz_5 = (zz[zzOff + 5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "638": "long zz_6 = (zz[zzOff + 6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "651": "long zz_7 = (zz[zzOff + 7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "652": "long zz_8 = (zz[zzOff + 8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "675": "w = zz[zzOff + 9] + (int)(zz_8 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat160.square:void(int[],int,int[],int)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/math/raw/Nat256.java",
                "addMethodBegin": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": 817,
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": 969
                },
                "addMethodEnd": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": 967,
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": 1119
                },
                "addMethodFull": {
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int[] zz)": {
                        "lineNumber": [
                            {
                                "861": "long zz_5 = (zz[5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "862": "long zz_6 = (zz[6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "875": "long zz_7 = (zz[7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "876": "long zz_8 = (zz[8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "891": "long zz_9 = (zz[9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "892": "long zz_10 = (zz[10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "909": "long zz_11 = (zz[11] & M) + (zz_10 >>> 32); zz_10 &= M;"
                            },
                            {
                                "910": "long zz_12 = (zz[12] & M) + (zz_11 >>> 32); zz_11 &= M;{"
                            },
                            {
                                "929": "long zz_13 = (zz[13] & M) + (zz_12 >>> 32); zz_12 &= M;"
                            },
                            {
                                "930": "long zz_14 = (zz[14] & M) + (zz_13 >>> 32); zz_13 &= M;{"
                            },
                            {
                                "965": "w = zz[15] + (int)(zz_14 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int[] zz)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat256.square:void(int[],int[])"
                    },
                    "org.bouncycastle.math.raw.Nat256.square(int[] x, int xOff, int[] zz, int zzOff)": {
                        "lineNumber": [
                            {
                                "1013": "long zz_5 = (zz[zzOff + 5] & M) + (zz_4 >>> 32); zz_4 &= M;"
                            },
                            {
                                "1014": "long zz_6 = (zz[zzOff + 6] & M) + (zz_5 >>> 32); zz_5 &= M;{"
                            },
                            {
                                "1027": "long zz_7 = (zz[zzOff + 7] & M) + (zz_6 >>> 32); zz_6 &= M;"
                            },
                            {
                                "1028": "long zz_8 = (zz[zzOff + 8] & M) + (zz_7 >>> 32); zz_7 &= M;{"
                            },
                            {
                                "1043": "long zz_9 = (zz[zzOff + 9] & M) + (zz_8 >>> 32); zz_8 &= M;"
                            },
                            {
                                "1044": "long zz_10 = (zz[zzOff + 10] & M) + (zz_9 >>> 32); zz_9 &= M;{"
                            },
                            {
                                "1061": "long zz_11 = (zz[zzOff + 11] & M) + (zz_10 >>> 32); zz_10 &= M;"
                            },
                            {
                                "1062": "long zz_12 = (zz[zzOff + 12] & M) + (zz_11 >>> 32); zz_11 &= M;{"
                            },
                            {
                                "1081": "long zz_13 = (zz[zzOff + 13] & M) + (zz_12 >>> 32); zz_12 &= M;"
                            },
                            {
                                "1082": "long zz_14 = (zz[zzOff + 14] & M) + (zz_13 >>> 32); zz_13 &= M;{"
                            },
                            {
                                "1117": "w = zz[zzOff + 15] + (int)(zz_14 >>> 32);"
                            }
                        ],
                        "paramType": "(int[] x, int xOff, int[] zz, int zzOff)",
                        "originalFullName": "org.bouncycastle.math.raw.Nat256.square:void(int[],int,int[],int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "org.bouncycastle.math.raw.Nat",
                "org.bouncycastle.math.ec.custom."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-7238": {
        "old_methods_info": [
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "deleteMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 399
                },
                "deleteMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 454
                },
                "deleteMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                        "lineNumber": [
                            {
                                "438": "State nextState;"
                            },
                            {
                                "441": "nextState = State.SKIP_CONTROL_CHARS;"
                            },
                            {
                                "444": "nextState = State.READ_CHUNK_SIZE;"
                            },
                            {
                                "447": "nextState = State.READ_FIXED_LENGTH_CONTENT;"
                            },
                            {
                                "450": "nextState = State.READ_VARIABLE_LENGTH_CONTENT;"
                            },
                            {
                                "453": "return nextState;"
                            }
                        ],
                        "paramType": "(ByteBuf buffer)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders:io.netty.handler.codec.http.HttpObjectDecoder$State(io.netty.buffer.ByteBuf)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 399
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": 466
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders(ByteBuf buffer)": {
                        "lineNumber": [
                            {
                                "438": "List<String> values = headers.getAll(HttpHeaderNames.CONTENT_LENGTH);"
                            },
                            {
                                "439": "int contentLengthValuesCount = values.size();"
                            },
                            {
                                "440": "if (contentLengthValuesCount > 0) {"
                            },
                            {
                                "441": "if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {"
                            },
                            {
                                "442": "throw new IllegalArgumentException(\"Multiple Content-Length headers found\");"
                            },
                            {
                                "443": "}"
                            },
                            {
                                "444": ""
                            },
                            {
                                "445": "contentLength = Long.parseLong(values.get(0));"
                            },
                            {
                                "446": "}"
                            },
                            {
                                "447": ""
                            },
                            {
                                "450": "return State.SKIP_CONTROL_CHARS;"
                            },
                            {
                                "453": "if (contentLengthValuesCount > 0 && message.protocolVersion() == HttpVersion.HTTP_1_1) {"
                            },
                            {
                                "454": "throw new IllegalArgumentException( \"Both 'Content-Length: \" + contentLength + \"' and 'Transfer-Encoding: chunked' found\");"
                            },
                            {
                                "455": "}"
                            },
                            {
                                "456": ""
                            },
                            {
                                "457": "return State.READ_CHUNK_SIZE;"
                            },
                            {
                                "460": "return State.READ_FIXED_LENGTH_CONTENT;"
                            },
                            {
                                "463": "return State.READ_VARIABLE_LENGTH_CONTENT;"
                            }
                        ],
                        "paramType": "(ByteBuf buffer)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.readHeaders:io.netty.handler.codec.http.HttpObjectDecoder$State(io.netty.buffer.ByteBuf)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "com/netty/netty/issues/9861Netty"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-25845": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
                "deleteMethodBegin": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": 1033
                },
                "deleteMethodEnd": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": 1251
                },
                "deleteMethodFull": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": {
                        "lineNumber": [
                            {
                                "1203": "final int mask = Feature.SupportAutoType.mask;"
                            },
                            {
                                "1204": "boolean autoTypeSupport = this.autoTypeSupport || (features & mask) != 0 || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;"
                            },
                            {
                                "1239": "if (typeName.endsWith(\"Exception\")) {"
                            }
                        ],
                        "paramType": "(String typeName, Class<?> expectClass, int features)",
                        "originalFullName": "com.alibaba.fastjson.parser.ParserConfig.checkAutoType:java.lang.Class(java.lang.String,java.lang.Class,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/alibaba/fastjson/parser/ParserConfig.java",
                "addMethodBegin": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": 1033
                },
                "addMethodEnd": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": 1264
                },
                "addMethodFull": {
                    "com.alibaba.fastjson.parser.ParserConfig.checkAutoType(String typeName, Class<?> expectClass, int features)": {
                        "lineNumber": [
                            {
                                "1055": "final int mask = Feature.SupportAutoType.mask;"
                            },
                            {
                                "1056": "boolean autoTypeSupport = this.autoTypeSupport || (features & mask) != 0 || (JSON.DEFAULT_PARSER_FEATURE & mask) != 0;"
                            },
                            {
                                "1160": "if (typeName.endsWith(\"Exception\") || typeName.endsWith(\"Error\")) {"
                            },
                            {
                                "1161": "return null;"
                            },
                            {
                                "1162": "}"
                            },
                            {
                                "1163": ""
                            },
                            {
                                "1216": "if (autoTypeSupport) {"
                            },
                            {
                                "1218": "}"
                            },
                            {
                                "1219": ""
                            },
                            {
                                "1229": "if (autoTypeSupport) {"
                            },
                            {
                                "1231": "}"
                            },
                            {
                                "1232": ""
                            },
                            {
                                "1249": "if (typeName.endsWith(\"Exception\") || typeName.endsWith(\"Error\")) {"
                            },
                            {
                                "1257": "if (autoTypeSupport) {"
                            },
                            {
                                "1261": "}"
                            },
                            {
                                "1262": ""
                            }
                        ],
                        "paramType": "(String typeName, Class<?> expectClass, int features)",
                        "originalFullName": "com.alibaba.fastjson.parser.ParserConfig.checkAutoType:java.lang.Class(java.lang.String,java.lang.Class,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "safeMode",
                "autoType"
            ],
            "classnamelst": [],
            "pathlst": [
                "com/alibaba/fastjson/wiki/fastjson_safemode"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-1000343": {
        "old_methods_info": [
            {
                "oldFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": 46
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": 59
                },
                "deleteMethodFull": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": {
                        "lineNumber": [
                            {
                                "48": "DSAParametersGenerator pGen = new DSAParametersGenerator();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair:java.security.KeyPair()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "prov/src/main/java/org/bouncycastle/jcajce/provider/asymmetric/dsa/KeyPairGeneratorSpi.java",
                "addMethodBegin": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.initialize(int strength, SecureRandom random)": 33,
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": 54
                },
                "addMethodEnd": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.initialize(int strength, SecureRandom random)": 41,
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": 110
                },
                "addMethodFull": {
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.initialize(int strength, SecureRandom random)": {
                        "lineNumber": [
                            {
                                "40": "this.initialised = false;"
                            }
                        ],
                        "paramType": "(int strength, SecureRandom random)",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.initialize:void(int,java.security.SecureRandom)"
                    },
                    "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair()": {
                        "lineNumber": [
                            {
                                "56": "Integer paramStrength = Integers.valueOf(strength);"
                            },
                            {
                                "57": "if (params.containsKey(paramStrength)){"
                            },
                            {
                                "58": "param = (DSAKeyGenerationParameters)params.get(paramStrength);"
                            },
                            {
                                "59": "}"
                            },
                            {
                                "60": ""
                            },
                            {
                                "61": "else{"
                            },
                            {
                                "62": "synchronized (lock) {"
                            },
                            {
                                "63": "if (params.containsKey(paramStrength)){"
                            },
                            {
                                "64": "param = (DSAKeyGenerationParameters)params.get(paramStrength);"
                            },
                            {
                                "65": "}"
                            },
                            {
                                "66": ""
                            },
                            {
                                "67": "else{"
                            },
                            {
                                "68": "DSAParametersGenerator pGen;"
                            },
                            {
                                "69": "DSAParameterGenerationParameters dsaParams;"
                            },
                            {
                                "70": "if (strength == 1024){"
                            },
                            {
                                "71": "pGen = new DSAParametersGenerator();"
                            },
                            {
                                "72": "if (Properties.isOverrideSet(\"org.bouncycastle.dsa.FIPS186-2for1024bits\")){"
                            },
                            {
                                "74": "}"
                            },
                            {
                                "75": ""
                            },
                            {
                                "76": "else{"
                            },
                            {
                                "77": "dsaParams = new DSAParameterGenerationParameters(1024, 160, certainty, random);"
                            },
                            {
                                "78": "pGen.init(dsaParams);"
                            },
                            {
                                "79": "}"
                            },
                            {
                                "80": ""
                            },
                            {
                                "81": "}"
                            },
                            {
                                "82": ""
                            },
                            {
                                "83": "else if (strength > 1024){"
                            },
                            {
                                "84": "dsaParams = new DSAParameterGenerationParameters(strength, 256, certainty, random);"
                            },
                            {
                                "85": "pGen = new DSAParametersGenerator(new SHA256Digest());"
                            },
                            {
                                "86": "pGen.init(dsaParams);"
                            },
                            {
                                "87": "}"
                            },
                            {
                                "88": ""
                            },
                            {
                                "89": "else{"
                            },
                            {
                                "90": "pGen = new DSAParametersGenerator();"
                            },
                            {
                                "91": "pGen.init(strength, certainty, random);"
                            },
                            {
                                "92": "}"
                            },
                            {
                                "93": ""
                            },
                            {
                                "95": "params.put(paramStrength, param);"
                            },
                            {
                                "96": "}"
                            },
                            {
                                "97": ""
                            },
                            {
                                "98": "}"
                            },
                            {
                                "99": ""
                            },
                            {
                                "100": "}"
                            },
                            {
                                "101": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bouncycastle.jcajce.provider.asymmetric.dsa.KeyPairGeneratorSpi.generateKeyPair:java.security.KeyPair()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-20444": {
        "old_methods_info": [
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 548
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 586
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                        "lineNumber": [
                            {
                                "564": "if (nameEnd == length) {"
                            },
                            {
                                "565": "throw new IllegalArgumentException(\"No colon found\");"
                            },
                            {
                                "566": "}"
                            },
                            {
                                "567": ""
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader:void(io.netty.util.internal.AppendableCharSequence)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "com/netty/netty/issues/9866HttpObjectDecoder.java"
            ],
            "langrelatedfiles": [
                "9866HttpObjectDecoder.java"
            ]
        }
    },
    "CVE-2022-26336": {
        "old_methods_info": [
            {
                "oldFilePath": "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java",
                "deleteMethodBegin": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": 63
                },
                "deleteMethodEnd": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": 157
                },
                "deleteMethodFull": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": {
                        "lineNumber": [
                            {
                                "100": "IOUtils.readFully(inp, guid);"
                            },
                            {
                                "111": "IOUtils.readFully(inp, mpdata);"
                            },
                            {
                                "135": "IOUtils.readFully(inp, data);"
                            }
                        ],
                        "paramType": "(TNEFAttribute parent)",
                        "originalFullName": "org.apache.poi.hmef.attribute.MAPIAttribute.create:java.util.List(org.apache.poi.hmef.attribute.TNEFAttribute)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "poi-scratchpad/src/main/java/org/apache/poi/hmef/attribute/MAPIAttribute.java",
                "addMethodBegin": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": 63
                },
                "addMethodEnd": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": 166
                },
                "addMethodFull": {
                    "org.apache.poi.hmef.attribute.MAPIAttribute.create(TNEFAttribute parent)": {
                        "lineNumber": [
                            {
                                "100": "if (IOUtils.readFully(inp, guid) < 0) {"
                            },
                            {
                                "101": "throw new IOException(\"Not enough data to read guid\");"
                            },
                            {
                                "102": "}"
                            },
                            {
                                "103": ""
                            },
                            {
                                "114": "if (IOUtils.readFully(inp, mpdata) < 0) {"
                            },
                            {
                                "115": "throw new IOException(\"Not enough data to read \" + mplen + \" bytes for attribute name\");"
                            },
                            {
                                "116": "}"
                            },
                            {
                                "117": ""
                            },
                            {
                                "141": "if (IOUtils.readFully(inp, data) < 0) {"
                            },
                            {
                                "142": "throw new IOException(\"Not enough data to read \" + len + \" bytes of attribute value\");"
                            },
                            {
                                "143": "}"
                            },
                            {
                                "144": ""
                            }
                        ],
                        "paramType": "(TNEFAttribute parent)",
                        "originalFullName": "org.apache.poi.hmef.attribute.MAPIAttribute.create:java.util.List(org.apache.poi.hmef.attribute.TNEFAttribute)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "org/repos/asf/poi/trunk",
                "svn.apache.org"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-23900": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "deleteMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 277,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 803,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 808
                },
                "deleteMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 435,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 806,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 813
                },
                "deleteMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "316": "char c1 = jsonish.charAt(i + 1);"
                            },
                            {
                                "317": "char c2 = jsonish.charAt(i + 2);"
                            },
                            {
                                "318": "char c3 = jsonish.charAt(i + 3);"
                            },
                            {
                                "322": "if ( (c1 == '\\\\' || c2 == '\\\\' || c3 == '\\\\') || (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {"
                            },
                            {
                                "331": "int cm2 = jsonish.charAt(i - 2);"
                            },
                            {
                                "332": "int cm1 = jsonish.charAt(i - 1);"
                            },
                            {
                                "333": "if (('-' == cm2 || '\\\\' == cm2) && ('-' == cm1 || '\\\\' == cm1)) {"
                            },
                            {
                                "342": "char c1 = jsonish.charAt(i + 1);"
                            },
                            {
                                "343": "char c2 = jsonish.charAt(i + 2);"
                            },
                            {
                                "344": "if ((']' == c1 || '\\\\' == c1) && ('>' == c2 || '\\\\' == c2)) {"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    },
                    "com.google.json.JsonSanitizer.isOctAt(int i)": {
                        "lineNumber": [
                            {
                                "804": "char ch = jsonish.charAt(i);"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOctAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isHexAt(int i)": {
                        "lineNumber": [
                            {
                                "809": "char ch = jsonish.charAt(i);"
                            },
                            {
                                "811": "ch |= 32;"
                            },
                            {
                                "812": "return 'a' <= ch && ch <= 'f';"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHexAt:boolean(int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/google/json/JsonSanitizer.java",
                "addMethodBegin": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 277,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 817,
                    "com.google.json.JsonSanitizer.isOct(char ch)": 821,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 825,
                    "com.google.json.JsonSanitizer.isHex(char ch)": 829,
                    "com.google.json.JsonSanitizer.hexVal(char ch)": 835,
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": 892,
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": 966
                },
                "addMethodEnd": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": 449,
                    "com.google.json.JsonSanitizer.isOctAt(int i)": 819,
                    "com.google.json.JsonSanitizer.isOct(char ch)": 823,
                    "com.google.json.JsonSanitizer.isHexAt(int i)": 827,
                    "com.google.json.JsonSanitizer.isHex(char ch)": 833,
                    "com.google.json.JsonSanitizer.hexVal(char ch)": 838,
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": 964,
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": 993
                },
                "addMethodFull": {
                    "com.google.json.JsonSanitizer.sanitizeString(int start, int end)": {
                        "lineNumber": [
                            {
                                "316": "int la = i + 1;"
                            },
                            {
                                "317": "int c1AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "318": "char c1 = (char) c1AndDelta;"
                            },
                            {
                                "319": "la += c1AndDelta >>> 16;"
                            },
                            {
                                "320": "long c2AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "321": "char c2 = (char) c2AndDelta;"
                            },
                            {
                                "322": "la += c2AndDelta >>> 16;"
                            },
                            {
                                "323": "long c3AndEnd = unescapedChar(jsonish, la);"
                            },
                            {
                                "324": "char c3 = (char) c3AndEnd;"
                            },
                            {
                                "328": "if ( (c1 == '!' && c2 == '-' && c3 == '-') || (lc1 == 's' && lc2 == 'c' && lc3 == 'r') || (c1 == '/' && lc2 == 's' && lc3 == 'c') ) {"
                            },
                            {
                                "337": "int lb = i - 1;"
                            },
                            {
                                "338": "int cm1AndDelta = unescapedCharRev(jsonish, lb);"
                            },
                            {
                                "339": "char cm1 = (char) cm1AndDelta;"
                            },
                            {
                                "340": "lb -= cm1AndDelta >>> 16;"
                            },
                            {
                                "341": "int cm2AndDelta = unescapedCharRev(jsonish, lb);"
                            },
                            {
                                "342": "char cm2 = (char) cm2AndDelta;"
                            },
                            {
                                "343": "if ('-' == cm2 && '-' == cm1) {"
                            },
                            {
                                "352": "int la = i + 1;"
                            },
                            {
                                "353": "long c1AndDelta = unescapedChar(jsonish, la);"
                            },
                            {
                                "354": "char c1 = (char) c1AndDelta;"
                            },
                            {
                                "355": "la += c1AndDelta >>> 16;"
                            },
                            {
                                "356": "long c2AndEnd = unescapedChar(jsonish, la);"
                            },
                            {
                                "357": "char c2 = (char) c2AndEnd;"
                            },
                            {
                                "358": "if (']' == c1 && '>' == c2) {"
                            }
                        ],
                        "paramType": "(int start, int end)",
                        "originalFullName": "com.google.json.JsonSanitizer.sanitizeString:void(int,int)"
                    },
                    "com.google.json.JsonSanitizer.isOctAt(int i)": {
                        "lineNumber": [
                            {
                                "818": "return isOct(jsonish.charAt(i));"
                            },
                            {
                                "819": "}"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOctAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isOct(char ch)": {
                        "lineNumber": [
                            {
                                "821": "private static boolean isOct(char ch) {"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.isOct:boolean(char)"
                    },
                    "com.google.json.JsonSanitizer.isHexAt(int i)": {
                        "lineNumber": [
                            {
                                "826": "return isHex(jsonish.charAt(i));"
                            },
                            {
                                "827": "}"
                            }
                        ],
                        "paramType": "(int i)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHexAt:boolean(int)"
                    },
                    "com.google.json.JsonSanitizer.isHex(char ch)": {
                        "lineNumber": [
                            {
                                "829": "private static boolean isHex(char ch) {"
                            },
                            {
                                "831": "int lch = ch | 32;"
                            },
                            {
                                "832": "return 'a' <= lch && lch <= 'f';"
                            },
                            {
                                "833": "}"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.isHex:boolean(char)"
                    },
                    "com.google.json.JsonSanitizer.hexVal(char ch)": {
                        "lineNumber": [
                            {
                                "835": "private static int hexVal(char ch) {"
                            },
                            {
                                "836": "int lch = ch | 32;"
                            },
                            {
                                "837": "return lch - (lch <= '9' ? '0' : 'a' - 10);"
                            }
                        ],
                        "paramType": "(char ch)",
                        "originalFullName": "com.google.json.JsonSanitizer.hexVal:int(char)"
                    },
                    "com.google.json.JsonSanitizer.unescapedChar(String s, int left)": {
                        "lineNumber": [
                            {
                                "892": "private static int unescapedChar(String s, int left) {"
                            },
                            {
                                "893": "int n = s.length();"
                            },
                            {
                                "894": "if (left >= n) {"
                            },
                            {
                                "895": "return 0;"
                            },
                            {
                                "896": "}"
                            },
                            {
                                "897": ""
                            },
                            {
                                "898": "char c = s.charAt(left);"
                            },
                            {
                                "899": "if (c == '\\\\') {"
                            },
                            {
                                "900": "if (left + 1 == n) {"
                            },
                            {
                                "901": "return 0x10000;"
                            },
                            {
                                "902": "}"
                            },
                            {
                                "903": ""
                            },
                            {
                                "904": "char nc = s.charAt(left + 1);"
                            },
                            {
                                "905": "switch (nc) {"
                            },
                            {
                                "906": "case '0': case '1': case '2': case '3':"
                            },
                            {
                                "907": "case '4': case '5': case '6': case '7': {"
                            },
                            {
                                "908": "int octalStart = left + 1;"
                            },
                            {
                                "909": "int octalEnd = octalStart; ++octalEnd;"
                            },
                            {
                                "910": "if (octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;"
                            },
                            {
                                "911": "if (nc <= '3' && octalEnd < n && isOct(s.charAt(octalEnd))) { ++octalEnd;"
                            },
                            {
                                "912": "}"
                            },
                            {
                                "913": ""
                            },
                            {
                                "914": "}"
                            },
                            {
                                "915": ""
                            },
                            {
                                "916": "int value = 0;"
                            },
                            {
                                "917": "for (int j = octalStart; j < octalEnd; ++j) {"
                            },
                            {
                                "918": "char digit = s.charAt(j);"
                            },
                            {
                                "919": "value = (value << 3) | (digit - '0');"
                            },
                            {
                                "920": "}"
                            },
                            {
                                "921": ""
                            },
                            {
                                "922": "return ((octalEnd - left) << 16) | value;"
                            },
                            {
                                "923": "}"
                            },
                            {
                                "924": ""
                            },
                            {
                                "925": "case 'x':"
                            },
                            {
                                "926": "if (left + 3 < n) {"
                            },
                            {
                                "927": "char d0 = s.charAt(left + 2);"
                            },
                            {
                                "928": "char d1 = s.charAt(left + 3);"
                            },
                            {
                                "929": "if (isHex(d0) && isHex(d1)) {"
                            },
                            {
                                "930": "return 0x4000 | (hexVal(d0) << 4) | hexVal(d1);"
                            },
                            {
                                "931": "}"
                            },
                            {
                                "932": ""
                            },
                            {
                                "933": "}"
                            },
                            {
                                "934": ""
                            },
                            {
                                "935": "break;"
                            },
                            {
                                "936": "case 'u':"
                            },
                            {
                                "937": "if (left + 5 < n) {"
                            },
                            {
                                "938": "char d0 = s.charAt(left + 2);"
                            },
                            {
                                "939": "char d1 = s.charAt(left + 3);"
                            },
                            {
                                "940": "char d2 = s.charAt(left + 4);"
                            },
                            {
                                "941": "char d3 = s.charAt(left + 5);"
                            },
                            {
                                "942": "if (isHex(d0) && isHex(d1) && isHex(d2) && isHex(d3)) {"
                            },
                            {
                                "943": "return 0x6000 | (hexVal(d0) << 12) | (hexVal(d1) << 8) | (hexVal(d2) << 4) | hexVal(d3);"
                            },
                            {
                                "944": "}"
                            },
                            {
                                "945": ""
                            },
                            {
                                "946": "}"
                            },
                            {
                                "947": ""
                            },
                            {
                                "948": "break;"
                            },
                            {
                                "949": "case 'b': return (0x20000 | '\\b');"
                            },
                            {
                                "950": "case 'f': return (0x20000 | '\\f');"
                            },
                            {
                                "951": "case 'n': return 0x2000A;"
                            },
                            {
                                "952": "case 'r': return 0x2000D;"
                            },
                            {
                                "953": "case 't': return 0x20009;"
                            },
                            {
                                "954": "case 'v': return 0x20008;"
                            },
                            {
                                "955": "default: break;"
                            },
                            {
                                "956": "}"
                            },
                            {
                                "957": ""
                            },
                            {
                                "958": "return (0x20000) | nc;"
                            },
                            {
                                "959": "}"
                            },
                            {
                                "960": "else {"
                            },
                            {
                                "961": "return 0x10000 | c;"
                            },
                            {
                                "962": "}"
                            },
                            {
                                "963": ""
                            },
                            {
                                "964": "}"
                            }
                        ],
                        "paramType": "(String s, int left)",
                        "originalFullName": "com.google.json.JsonSanitizer.unescapedChar:int(java.lang.String,int)"
                    },
                    "com.google.json.JsonSanitizer.unescapedCharRev(String s, int rightIncl)": {
                        "lineNumber": [
                            {
                                "966": "private static int unescapedCharRev(String s, int rightIncl) {"
                            },
                            {
                                "967": "if (rightIncl < 0) {"
                            },
                            {
                                "968": "return 0;"
                            },
                            {
                                "969": "}"
                            },
                            {
                                "970": ""
                            },
                            {
                                "971": "for (int i = 1; i < 6; ++i) {"
                            },
                            {
                                "972": "int left = rightIncl - i;"
                            },
                            {
                                "973": "if (left < 0) { break; }"
                            },
                            {
                                "974": "if (s.charAt(left) == '\\\\') {"
                            },
                            {
                                "975": "int n = 1;"
                            },
                            {
                                "976": "while (left - n >= 0 && s.charAt(left - n) == '\\\\') { ++n;"
                            },
                            {
                                "977": "}"
                            },
                            {
                                "978": ""
                            },
                            {
                                "979": "if ((n & 1) == 0) {"
                            },
                            {
                                "980": "int unescaped = unescapedChar(s, left);"
                            },
                            {
                                "981": "if ((unescaped >>> 16) == i) {"
                            },
                            {
                                "982": "return unescaped;"
                            },
                            {
                                "983": "}"
                            },
                            {
                                "984": ""
                            },
                            {
                                "985": "}"
                            },
                            {
                                "986": ""
                            },
                            {
                                "987": "break;"
                            },
                            {
                                "988": "}"
                            },
                            {
                                "989": ""
                            },
                            {
                                "990": "}"
                            },
                            {
                                "991": ""
                            },
                            {
                                "992": "return 0x10000 | s.charAt(rightIncl);"
                            },
                            {
                                "993": "}"
                            }
                        ],
                        "paramType": "(String s, int rightIncl)",
                        "originalFullName": "com.google.json.JsonSanitizer.unescapedCharRev:int(java.lang.String,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-20227": {
        "old_methods_info": [
            {
                "oldFilePath": "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java",
                "deleteMethodBegin": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": 35
                },
                "deleteMethodEnd": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": 49
                },
                "deleteMethodFull": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": {
                        "lineNumber": [
                            {
                                "40": ""
                            }
                        ],
                        "paramType": "(ZipFile zipFile, ZipEntry entry, File destDir)",
                        "originalFullName": "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry:void(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java",
                "addMethodBegin": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": 35
                },
                "addMethodEnd": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": 52
                },
                "addMethodFull": {
                    "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)": {
                        "lineNumber": [
                            {
                                "37": "if (! outFile.getCanonicalFile().toPath().startsWith(destDir.toPath())) {"
                            },
                            {
                                "38": "throw new IOException(\"Zip entry outside destination directory: \" + entry.getName());"
                            },
                            {
                                "39": "}"
                            },
                            {
                                "40": ""
                            }
                        ],
                        "paramType": "(ZipFile zipFile, ZipEntry entry, File destDir)",
                        "originalFullName": "org.eclipse.rdf4j.common.io.ZipUtil.writeEntry:void(java.util.zip.ZipFile,java.util.zip.ZipEntry,java.io.File)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "bosa.fgov.be"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-26217": {
        "old_methods_info": [
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "deleteMethodBegin": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": 338
                },
                "deleteMethodEnd": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": 348
                },
                "deleteMethodFull": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": {
                        "lineNumber": [
                            {
                                "344": "denyTypes(new String[]{\"java.beans.EventHandler\"});"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.thoughtworks.xstream.XStream.setupSecurity:void()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": 338
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": 348
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.XStream.setupSecurity()": {
                        "lineNumber": [
                            {
                                "344": "denyTypes(new String[]{\"java.beans.EventHandler\", \"javax.imageio.ImageIO$ContainsFilter\"});"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.thoughtworks.xstream.XStream.setupSecurity:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-17359": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java",
                "deleteMethodBegin": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": 12
                },
                "deleteMethodEnd": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": 50
                },
                "deleteMethodFull": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": {
                        "lineNumber": [
                            {
                                "18": "ASN1OctetStringParser s = (ASN1OctetStringParser)_parser.readObject();"
                            },
                            {
                                "19": "if (s == null){"
                            }
                        ],
                        "paramType": "(byte[] b, int off, int len)",
                        "originalFullName": "org.bouncycastle.asn1.ConstructedOctetStream.read:int(byte[],int,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java",
                "addMethodBegin": {
                    "org.bouncycastle.asn1.ASN1Integer.longValueExact()": 95,
                    "org.bouncycastle.asn1.ASN1Integer.longValue(byte[] bytes, int start, int signExt)": 144
                },
                "addMethodEnd": {
                    "org.bouncycastle.asn1.ASN1Integer.longValueExact()": 102,
                    "org.bouncycastle.asn1.ASN1Integer.longValue(byte[] bytes, int start, int signExt)": 153
                },
                "addMethodFull": {
                    "org.bouncycastle.asn1.ASN1Integer.longValueExact()": {
                        "lineNumber": [
                            {
                                "95": "public long longValueExact() {"
                            },
                            {
                                "96": "int count = bytes.length - start;"
                            },
                            {
                                "97": "if (count > 8){"
                            },
                            {
                                "98": "throw new ArithmeticException(\"ASN.1 Integer out of long range\");"
                            },
                            {
                                "99": "}"
                            },
                            {
                                "100": ""
                            },
                            {
                                "101": "return longValue(bytes, start, SIGN_EXT_SIGNED);"
                            },
                            {
                                "102": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bouncycastle.asn1.ASN1Integer.longValueExact:long()"
                    },
                    "org.bouncycastle.asn1.ASN1Integer.longValue(byte[] bytes, int start, int signExt)": {
                        "lineNumber": [
                            {
                                "144": "static long longValue(byte[] bytes, int start, int signExt) {"
                            },
                            {
                                "145": "int length = bytes.length;"
                            },
                            {
                                "146": "int pos = Math.max(start, length - 8);"
                            },
                            {
                                "147": "long val = bytes[pos] & signExt;"
                            },
                            {
                                "148": "while (++pos < length){"
                            },
                            {
                                "149": "val = (val << 8) | (bytes[pos] & SIGN_EXT_UNSIGNED);"
                            },
                            {
                                "150": "}"
                            },
                            {
                                "151": ""
                            },
                            {
                                "152": "return val;"
                            },
                            {
                                "153": "}"
                            }
                        ],
                        "paramType": "(byte[] bytes, int start, int signExt)",
                        "originalFullName": "org.bouncycastle.asn1.ASN1Integer.longValue:long(byte[],int,int)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java",
                "addMethodBegin": {
                    "org.bouncycastle.asn1.ASN1StreamParser.readObject()": 88
                },
                "addMethodEnd": {
                    "org.bouncycastle.asn1.ASN1StreamParser.readObject()": 160
                },
                "addMethodFull": {
                    "org.bouncycastle.asn1.ASN1StreamParser.readObject()": {
                        "lineNumber": [
                            {
                                "117": "if (length >= _limit)   {"
                            },
                            {
                                "118": "throw new IOException(\"corrupted stream - out of bounds length found: \" + length + \" >= \" + _limit);"
                            },
                            {
                                "119": "}"
                            },
                            {
                                "120": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bouncycastle.asn1.ASN1StreamParser.readObject:org.bouncycastle.asn1.ASN1Encodable()"
                    }
                }
            },
            {
                "newFilePath": "pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java",
                "addMethodBegin": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": 12
                },
                "addMethodEnd": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": 55
                },
                "addMethodFull": {
                    "org.bouncycastle.asn1.ConstructedOctetStream.read(byte[] b, int off, int len)": {
                        "lineNumber": [
                            {
                                "18": "ASN1Encodable asn1Obj = _parser.readObject();"
                            },
                            {
                                "19": "if (asn1Obj == null){"
                            },
                            {
                                "23": "if (!(asn1Obj instanceof ASN1OctetStringParser)){"
                            },
                            {
                                "24": "throw new IOException(\"unknown object encountered: \" + asn1Obj.getClass());"
                            },
                            {
                                "25": "}"
                            },
                            {
                                "26": ""
                            },
                            {
                                "27": "ASN1OctetStringParser s = (ASN1OctetStringParser)asn1Obj;"
                            }
                        ],
                        "paramType": "(byte[] b, int off, int len)",
                        "originalFullName": "org.bouncycastle.asn1.ConstructedOctetStream.read:int(byte[],int,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "OutOfMemoryError"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-0050": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/fileupload/FileUploadBase.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/apache/commons/fileupload/MultipartStream.java",
                "deleteMethodBegin": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": 69
                },
                "deleteMethodEnd": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": 81
                },
                "deleteMethodFull": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": {
                        "lineNumber": [
                            {
                                "74": "this.boundary = new byte[boundary.length + BOUNDARY_PREFIX.length];"
                            }
                        ],
                        "paramType": "(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)",
                        "originalFullName": "org.apache.commons.fileupload.MultipartStream.<init>:void(java.io.InputStream,byte[],int,org.apache.commons.fileupload.MultipartStream$ProgressNotifier)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/fileupload/FileUploadBase.java",
                "addMethodBegin": {
                    "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl.<init>(RequestContext ctx)": 434,
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>()": 610,
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>(String msg, Throwable cause)": 618
                },
                "addMethodEnd": {
                    "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl.<init>(RequestContext ctx)": 484,
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>()": 612,
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>(String msg, Throwable cause)": 620
                },
                "addMethodFull": {
                    "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl.<init>(RequestContext ctx)": {
                        "lineNumber": [
                            {
                                "474": "try {"
                            },
                            {
                                "476": "}"
                            },
                            {
                                "477": "catch (IllegalArgumentException iae) {"
                            },
                            {
                                "478": "throw new InvalidContentTypeException( format(\"The boundary specified in the %s header is too long\", CONTENT_TYPE), iae);"
                            },
                            {
                                "479": "}"
                            },
                            {
                                "480": ""
                            }
                        ],
                        "paramType": "(RequestContext ctx)",
                        "originalFullName": "org.apache.commons.fileupload.FileUploadBase$FileItemIteratorImpl.<init>:void(org.apache.commons.fileupload.RequestContext)"
                    },
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>()": {
                        "lineNumber": [
                            {
                                "611": "super();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>:void()"
                    },
                    "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>(String msg, Throwable cause)": {
                        "lineNumber": [
                            {
                                "618": "public InvalidContentTypeException(String msg, Throwable cause) {"
                            },
                            {
                                "619": "super(msg, cause);"
                            },
                            {
                                "620": "}"
                            }
                        ],
                        "paramType": "(String msg, Throwable cause)",
                        "originalFullName": "org.apache.commons.fileupload.FileUploadBase$InvalidContentTypeException.<init>:void(java.lang.String,java.lang.Throwable)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/apache/commons/fileupload/MultipartStream.java",
                "addMethodBegin": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": 69
                },
                "addMethodEnd": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": 85
                },
                "addMethodFull": {
                    "org.apache.commons.fileupload.MultipartStream.<init>(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)": {
                        "lineNumber": [
                            {
                                "75": "if (bufSize < this.boundaryLength + 1) {"
                            },
                            {
                                "76": "throw new IllegalArgumentException( \"The buffer size specified for the MultipartStream is too small\");"
                            },
                            {
                                "77": "}"
                            },
                            {
                                "78": ""
                            },
                            {
                                "79": "this.boundary = new byte[this.boundaryLength];"
                            }
                        ],
                        "paramType": "(InputStream input, byte[] boundary, int bufSize, ProgressNotifier pNotifier)",
                        "originalFullName": "org.apache.commons.fileupload.MultipartStream.<init>:void(java.io.InputStream,byte[],int,org.apache.commons.fileupload.MultipartStream$ProgressNotifier)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "FileUpload"
            ],
            "pathlst": [
                "org/repos/asf/commons/proper/fileupload/trunk",
                "svn.apache.org"
            ],
            "langrelatedfiles": [
                "MultipartStream.java"
            ]
        }
    },
    "CVE-2017-7525": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java",
                "addMethodBegin": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": 51,
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": 593
                },
                "addMethodEnd": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": 84,
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": 599
                },
                "addMethodFull": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": {
                        "lineNumber": [
                            {
                                "82": "checkIllegalTypes(ctxt, type, beanDesc);"
                            }
                        ],
                        "paramType": "(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)",
                        "originalFullName": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.createBeanDeserializer:com.fasterxml.jackson.databind.JsonDeserializer(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)"
                    },
                    "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)": {
                        "lineNumber": [
                            {
                                "593": "protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {"
                            },
                            {
                                "594": "String full = type.getRawClass().getName();"
                            },
                            {
                                "595": "if (_cfgIllegalClassNames.contains(full)) {"
                            },
                            {
                                "596": "ctxt.reportBadTypeDefinition(beanDesc, \"Illegal type (%s) to deserialize: prevented for security reasons\", full);"
                            },
                            {
                                "597": "}"
                            },
                            {
                                "598": ""
                            },
                            {
                                "599": "}"
                            }
                        ],
                        "paramType": "(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc)",
                        "originalFullName": "com.fasterxml.jackson.databind.deser.BeanDeserializerFactory.checkIllegalTypes:void(com.fasterxml.jackson.databind.DeserializationContext,com.fasterxml.jackson.databind.JavaType,com.fasterxml.jackson.databind.BeanDescription)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "readValue"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1274": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/springframework/data/mapping/PropertyPath.java",
                "addMethodBegin": {
                    "org.springframework.data.mapping.PropertyPath.create(String source, TypeInformation<?> type, String addTail, List<PropertyPath> base)": 195
                },
                "addMethodEnd": {
                    "org.springframework.data.mapping.PropertyPath.create(String source, TypeInformation<?> type, String addTail, List<PropertyPath> base)": 240
                },
                "addMethodFull": {
                    "org.springframework.data.mapping.PropertyPath.create(String source, TypeInformation<?> type, String addTail, List<PropertyPath> base)": {
                        "lineNumber": [
                            {
                                "196": "if (base.size() > 1000) {"
                            },
                            {
                                "197": "throw new IllegalArgumentException(PARSE_DEPTH_EXCEEDED);"
                            },
                            {
                                "198": "}"
                            },
                            {
                                "199": ""
                            }
                        ],
                        "paramType": "(String source, TypeInformation<?> type, String addTail, List<PropertyPath> base)",
                        "originalFullName": "org.springframework.data.mapping.PropertyPath.create:org.springframework.data.mapping.PropertyPath(java.lang.String,org.springframework.data.util.TypeInformation,java.lang.String,java.util.List)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PropertyPath"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-16869": {
        "old_methods_info": [
            {
                "oldFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "deleteMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 552
                },
                "deleteMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 586
                },
                "deleteMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                        "lineNumber": [
                            {
                                "562": "if (ch == ':' || Character.isWhitespace(ch)) {"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader:void(io.netty.util.internal.AppendableCharSequence)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java",
                "addMethodBegin": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 552
                },
                "addMethodEnd": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": 586
                },
                "addMethodFull": {
                    "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader(AppendableCharSequence sb)": {
                        "lineNumber": [
                            {
                                "562": "if (ch == ':' || (!isDecodingRequest() && Character.isWhitespace(ch))) {"
                            }
                        ],
                        "paramType": "(AppendableCharSequence sb)",
                        "originalFullName": "io.netty.handler.codec.http.HttpObjectDecoder.splitHeader:void(io.netty.util.internal.AppendableCharSequence)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "com/netty/netty/issues/9571Netty"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-1000031": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java",
                "addMethodBegin": {
                    "org.apache.commons.fileupload.disk.DiskFileItem.readObject(ObjectInputStream in)": 309
                },
                "addMethodEnd": {
                    "org.apache.commons.fileupload.disk.DiskFileItem.readObject(ObjectInputStream in)": 341
                },
                "addMethodFull": {
                    "org.apache.commons.fileupload.disk.DiskFileItem.readObject(ObjectInputStream in)": {
                        "lineNumber": [
                            {
                                "310": "if (!Boolean.getBoolean(SERIALIZABLE_PROPERTY)) {"
                            },
                            {
                                "311": "throw new IllegalStateException(\"Property \" + SERIALIZABLE_PROPERTY + \" is not true, rejecting to deserialize a DiskFileItem.\");"
                            },
                            {
                                "312": "}"
                            },
                            {
                                "313": ""
                            }
                        ],
                        "paramType": "(ObjectInputStream in)",
                        "originalFullName": "org.apache.commons.fileupload.disk.DiskFileItem.readObject:void(java.io.ObjectInputStream)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "FileUpload",
                "DiskFileItem"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-13956": {
        "old_methods_info": [
            {
                "oldFilePath": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "deleteMethodBegin": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": 232
                },
                "deleteMethodEnd": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": 301
                },
                "deleteMethodFull": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": {
                        "lineNumber": [
                            {
                                "237": "HttpHost target = null;"
                            },
                            {
                                "239": "int port = uri.getPort();"
                            },
                            {
                                "240": "String host = uri.getHost();"
                            },
                            {
                                "241": "if (host == null) {"
                            },
                            {
                                "242": "host = uri.getAuthority();"
                            },
                            {
                                "243": "if (host != null) {"
                            },
                            {
                                "244": "final int at = host.indexOf('@');"
                            },
                            {
                                "245": "if (at >= 0) {"
                            },
                            {
                                "246": "if (host.length() > at+1 ) {"
                            },
                            {
                                "247": "host = host.substring(at+1);"
                            },
                            {
                                "248": "}"
                            },
                            {
                                "249": "else {"
                            },
                            {
                                "250": "host = null;"
                            },
                            {
                                "253": "}"
                            },
                            {
                                "254": ""
                            },
                            {
                                "255": "if (host != null) {"
                            },
                            {
                                "256": "final int colon = host.indexOf(':');"
                            },
                            {
                                "257": "if (colon >= 0) {"
                            },
                            {
                                "258": "final int pos = colon + 1;"
                            },
                            {
                                "259": "int len = 0;"
                            },
                            {
                                "260": "for (int i = pos; i < host.length(); i++) {"
                            },
                            {
                                "261": "if (Character.isDigit(host.charAt(i))) {"
                            },
                            {
                                "262": "len++;"
                            },
                            {
                                "263": "}"
                            },
                            {
                                "264": "else {"
                            },
                            {
                                "265": "break;"
                            },
                            {
                                "266": "}"
                            },
                            {
                                "267": ""
                            },
                            {
                                "268": "}"
                            },
                            {
                                "269": ""
                            },
                            {
                                "270": "if (len > 0) {"
                            },
                            {
                                "272": "port = Integer.parseInt(host.substring(pos, pos + len));"
                            },
                            {
                                "278": ""
                            },
                            {
                                "279": "host = host.substring(0, colon);"
                            },
                            {
                                "283": ""
                            },
                            {
                                "288": "final String scheme = uri.getScheme();"
                            },
                            {
                                "289": "if (!TextUtils.isBlank(host)) {"
                            },
                            {
                                "290": "try {"
                            },
                            {
                                "291": "target = new HttpHost(host, port, scheme);"
                            },
                            {
                                "292": "}"
                            },
                            {
                                "293": "catch (final IllegalArgumentException ignore) {"
                            },
                            {
                                "295": ""
                            },
                            {
                                "300": "return target;"
                            }
                        ],
                        "paramType": "(final URI uri)",
                        "originalFullName": "org.apache.http.client.utils.URIUtils.extractHost:org.apache.http.HttpHost(java.net.URI)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "httpclient/src/main/java/org/apache/http/client/utils/URIUtils.java",
                "addMethodBegin": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": 232
                },
                "addMethodEnd": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": 283
                },
                "addMethodFull": {
                    "org.apache.http.client.utils.URIUtils.extractHost(final URI uri)": {
                        "lineNumber": [
                            {
                                "238": "if (uri.getHost() == null) {"
                            },
                            {
                                "239": "if (uri.getAuthority() != null) {"
                            },
                            {
                                "240": "String content = uri.getAuthority();"
                            },
                            {
                                "241": "int at = content.indexOf('@');"
                            },
                            {
                                "242": "if (at != -1) {"
                            },
                            {
                                "243": "content = content.substring(at + 1);"
                            },
                            {
                                "246": "final String scheme = uri.getScheme();"
                            },
                            {
                                "247": "final String hostname;"
                            },
                            {
                                "248": "final int port;"
                            },
                            {
                                "249": "at = content.indexOf(\":\");"
                            },
                            {
                                "250": "if (at != -1) {"
                            },
                            {
                                "251": "hostname = content.substring(0, at);"
                            },
                            {
                                "253": "final String portText = content.substring(at + 1);"
                            },
                            {
                                "254": "port = !TextUtils.isEmpty(portText) ? Integer.parseInt(portText) : -1;"
                            },
                            {
                                "257": "return null;"
                            },
                            {
                                "261": "else {"
                            },
                            {
                                "262": "hostname = content;"
                            },
                            {
                                "263": "port = -1;"
                            },
                            {
                                "266": "try {"
                            },
                            {
                                "267": "return new HttpHost(hostname, port, scheme);"
                            },
                            {
                                "269": "catch (final IllegalArgumentException ex) {"
                            },
                            {
                                "270": "return null;"
                            },
                            {
                                "276": "else {"
                            },
                            {
                                "277": "return new HttpHost(uri.getHost(), uri.getPort(), uri.getScheme());"
                            },
                            {
                                "282": "return null;"
                            }
                        ],
                        "paramType": "(final URI uri)",
                        "originalFullName": "org.apache.http.client.utils.URIUtils.extractHost:org.apache.http.HttpHost(java.net.URI)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "extractHost"
            ],
            "classnamelst": [
                "HttpClient"
            ],
            "pathlst": [
                "java.net.URI"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-34454": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/Snappy.java",
                "deleteMethodBegin": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": 61,
                    "org.xerial.snappy.Snappy.compress(double[] input)": 65,
                    "org.xerial.snappy.Snappy.compress(float[] input)": 69,
                    "org.xerial.snappy.Snappy.compress(int[] input)": 73,
                    "org.xerial.snappy.Snappy.compress(long[] input)": 77,
                    "org.xerial.snappy.Snappy.compress(short[] input)": 81
                },
                "deleteMethodEnd": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": 63,
                    "org.xerial.snappy.Snappy.compress(double[] input)": 67,
                    "org.xerial.snappy.Snappy.compress(float[] input)": 71,
                    "org.xerial.snappy.Snappy.compress(int[] input)": 75,
                    "org.xerial.snappy.Snappy.compress(long[] input)": 79,
                    "org.xerial.snappy.Snappy.compress(short[] input)": 83
                },
                "deleteMethodFull": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": {
                        "lineNumber": [
                            {
                                "62": "return rawCompress(input, input.length * 2);"
                            }
                        ],
                        "paramType": "(char[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](char[])"
                    },
                    "org.xerial.snappy.Snappy.compress(double[] input)": {
                        "lineNumber": [
                            {
                                "66": "return rawCompress(input, input.length * 8);"
                            }
                        ],
                        "paramType": "(double[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](double[])"
                    },
                    "org.xerial.snappy.Snappy.compress(float[] input)": {
                        "lineNumber": [
                            {
                                "70": "return rawCompress(input, input.length * 4);"
                            }
                        ],
                        "paramType": "(float[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](float[])"
                    },
                    "org.xerial.snappy.Snappy.compress(int[] input)": {
                        "lineNumber": [
                            {
                                "74": "return rawCompress(input, input.length * 4);"
                            }
                        ],
                        "paramType": "(int[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](int[])"
                    },
                    "org.xerial.snappy.Snappy.compress(long[] input)": {
                        "lineNumber": [
                            {
                                "78": "return rawCompress(input, input.length * 8);"
                            }
                        ],
                        "paramType": "(long[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](long[])"
                    },
                    "org.xerial.snappy.Snappy.compress(short[] input)": {
                        "lineNumber": [
                            {
                                "82": "return rawCompress(input, input.length * 2);"
                            }
                        ],
                        "paramType": "(short[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](short[])"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/xerial/snappy/Snappy.java",
                "addMethodBegin": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": 61,
                    "org.xerial.snappy.Snappy.compress(double[] input)": 70,
                    "org.xerial.snappy.Snappy.compress(float[] input)": 79,
                    "org.xerial.snappy.Snappy.compress(int[] input)": 88,
                    "org.xerial.snappy.Snappy.compress(long[] input)": 97,
                    "org.xerial.snappy.Snappy.compress(short[] input)": 106
                },
                "addMethodEnd": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": 68,
                    "org.xerial.snappy.Snappy.compress(double[] input)": 77,
                    "org.xerial.snappy.Snappy.compress(float[] input)": 86,
                    "org.xerial.snappy.Snappy.compress(int[] input)": 95,
                    "org.xerial.snappy.Snappy.compress(long[] input)": 104,
                    "org.xerial.snappy.Snappy.compress(short[] input)": 113
                },
                "addMethodFull": {
                    "org.xerial.snappy.Snappy.compress(char[] input)": {
                        "lineNumber": [
                            {
                                "62": "int byteSize = input.length * 2;"
                            },
                            {
                                "63": "if (byteSize < input.length) {"
                            },
                            {
                                "64": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "65": "}"
                            },
                            {
                                "66": ""
                            },
                            {
                                "67": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(char[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](char[])"
                    },
                    "org.xerial.snappy.Snappy.compress(double[] input)": {
                        "lineNumber": [
                            {
                                "71": "int byteSize = input.length * 8;"
                            },
                            {
                                "72": "if (byteSize < input.length) {"
                            },
                            {
                                "73": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "74": "}"
                            },
                            {
                                "75": ""
                            },
                            {
                                "76": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(double[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](double[])"
                    },
                    "org.xerial.snappy.Snappy.compress(float[] input)": {
                        "lineNumber": [
                            {
                                "80": "int byteSize = input.length * 4;"
                            },
                            {
                                "81": "if (byteSize < input.length) {"
                            },
                            {
                                "82": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "83": "}"
                            },
                            {
                                "84": ""
                            },
                            {
                                "85": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(float[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](float[])"
                    },
                    "org.xerial.snappy.Snappy.compress(int[] input)": {
                        "lineNumber": [
                            {
                                "89": "int byteSize = input.length * 4;"
                            },
                            {
                                "90": "if (byteSize < input.length) {"
                            },
                            {
                                "91": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "92": "}"
                            },
                            {
                                "93": ""
                            },
                            {
                                "94": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(int[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](int[])"
                    },
                    "org.xerial.snappy.Snappy.compress(long[] input)": {
                        "lineNumber": [
                            {
                                "98": "int byteSize = input.length * 8;"
                            },
                            {
                                "99": "if (byteSize < input.length) {"
                            },
                            {
                                "100": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "101": "}"
                            },
                            {
                                "102": ""
                            },
                            {
                                "103": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(long[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](long[])"
                    },
                    "org.xerial.snappy.Snappy.compress(short[] input)": {
                        "lineNumber": [
                            {
                                "107": "int byteSize = input.length * 2;"
                            },
                            {
                                "108": "if (byteSize < input.length) {"
                            },
                            {
                                "109": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "110": "}"
                            },
                            {
                                "111": ""
                            },
                            {
                                "112": "return rawCompress(input, byteSize);"
                            }
                        ],
                        "paramType": "(short[] input)",
                        "originalFullName": "org.xerial.snappy.Snappy.compress:byte[](short[])"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "rawCompress"
            ],
            "classnamelst": [
                "INPUT_TOO_LARGE",
                "SnappyError",
                "ILLEGAL_ARGUMENT"
            ],
            "pathlst": [
                "java.lang.NegativeArraySizeException"
            ],
            "langrelatedfiles": [
                "SnappyErrorCode.java",
                "SnappyTest.java",
                "SnappyErrorCode.java",
                "Snappy.java",
                "Snappy.java"
            ]
        }
    },
    "CVE-2022-42004": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/fasterxml/jackson/databind/DeserializationFeature.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializer.java",
                "addMethodBegin": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(JsonParser p, DeserializationContext ctxt)": 474
                },
                "addMethodEnd": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(JsonParser p, DeserializationContext ctxt)": 518
                },
                "addMethodFull": {
                    "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray(JsonParser p, DeserializationContext ctxt)": {
                        "lineNumber": [
                            {
                                "502": "if (p.nextToken() == JsonToken.START_ARRAY) {"
                            },
                            {
                                "503": "JavaType targetType = getValueType(ctxt);"
                            },
                            {
                                "504": "return ctxt.handleUnexpectedToken(targetType, JsonToken.START_ARRAY, p, \"Cannot deserialize value of type %s from deeply-nested JSON Array: only single wrapper allowed with `%s`\", ClassUtil.getTypeDescription(targetType), \"DeserializationFeature.UNWRAP_SINGLE_VALUE_ARRAYS\");"
                            },
                            {
                                "505": "}"
                            },
                            {
                                "506": ""
                            }
                        ],
                        "paramType": "(JsonParser p, DeserializationContext ctxt)",
                        "originalFullName": "com.fasterxml.jackson.databind.deser.BeanDeserializer._deserializeFromArray:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "FasterXML"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2017-1000487": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/codehaus/plexus/util/cli/Commandline.java",
                "deleteMethodBegin": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": 94,
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": 234,
                    "org.codehaus.plexus.util.cli.Commandline.execute()": 322,
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": 353
                },
                "deleteMethodEnd": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": 105,
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": 245,
                    "org.codehaus.plexus.util.cli.Commandline.execute()": 351,
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": 362
                },
                "deleteMethodFull": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": {
                        "lineNumber": [
                            {
                                "96": "realPos = ( getExecutable() == null ? 0 : 1 );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition:int()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": {
                        "lineNumber": [
                            {
                                "236": "String executable = getExecutable();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.getCommandline:java.lang.String[]()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.execute()": {
                        "lineNumber": [
                            {
                                "329": "process = Runtime.getRuntime().exec( getShellCommandline(), environment );"
                            },
                            {
                                "341": "process = Runtime.getRuntime().exec( getShellCommandline(), environment, workingDir );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.execute:java.lang.Process()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": {
                        "lineNumber": [
                            {
                                "358": "if ( shell.getExecutable() == null ){"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.verifyShellState:void()"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/codehaus/plexus/util/cli/shell/BourneShell.java",
                "deleteMethodBegin": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": 13,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": 27,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": 62,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getQuotingTriggerChars()": 75,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.unifyQuotes(String path)": 79
                },
                "deleteMethodEnd": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": 25,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": 33,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": 73,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getQuotingTriggerChars()": 77,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.unifyQuotes(String path)": 89
                },
                "deleteMethodFull": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": {
                        "lineNumber": [
                            {
                                "16": "setExecutableQuoteDelimiter( '\\\"' );"
                            }
                        ],
                        "paramType": "(boolean isLoginShell)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.<init>:void(boolean)"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": {
                        "lineNumber": [
                            {
                                "32": "return unifyQuotes( super.getExecutable());"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable:java.lang.String()"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": {
                        "lineNumber": [
                            {
                                "70": "sb.append( unifyQuotes( dir ) );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble:java.lang.String()"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getQuotingTriggerChars()": {
                        "lineNumber": [
                            {
                                "75": "protected char[] getQuotingTriggerChars() {"
                            },
                            {
                                "76": "return BASH_QUOTING_TRIGGER_CHARS;"
                            },
                            {
                                "77": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.getQuotingTriggerChars:char[]()"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.unifyQuotes(String path)": {
                        "lineNumber": [
                            {
                                "79": "protected static String unifyQuotes( String path ) {"
                            },
                            {
                                "84": "if ( path.indexOf( \" \" ) == -1 && path.indexOf( \"'\" ) != -1 && path.indexOf( \"\\\"\" ) == -1 ){"
                            },
                            {
                                "85": "return StringUtils.escape( path );"
                            },
                            {
                                "86": "}"
                            },
                            {
                                "87": ""
                            },
                            {
                                "88": "return StringUtils.quoteAndEscape( path, '\\\"', BASH_QUOTING_TRIGGER_CHARS );"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.unifyQuotes:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/codehaus/plexus/util/cli/shell/Shell.java",
                "deleteMethodBegin": {
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": 50,
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": 153
                },
                "deleteMethodEnd": {
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": 88,
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": 165
                },
                "deleteMethodFull": {
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": {
                        "lineNumber": [
                            {
                                "60": "char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );"
                            },
                            {
                                "61": "sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', false ) );"
                            },
                            {
                                "76": "char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );"
                            },
                            {
                                "77": "sb.append( StringUtils.quoteAndEscape( arguments[i], getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), getArgumentEscapePattern(), false ) );"
                            }
                        ],
                        "paramType": "(String executable, String[] arguments)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine:java.util.List(java.lang.String,java.lang.String[])"
                    },
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": {
                        "lineNumber": [
                            {
                                "163": "commandLine.addAll( getCommandLine( getExecutable(), arguments ) );"
                            }
                        ],
                        "paramType": "(String[] arguments)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine:java.util.List(java.lang.String[])"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/codehaus/plexus/util/cli/Commandline.java",
                "addMethodBegin": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": 94,
                    "org.codehaus.plexus.util.cli.Commandline.getLiteralExecutable()": 181,
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": 238,
                    "org.codehaus.plexus.util.cli.Commandline.execute()": 326,
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": 357
                },
                "addMethodEnd": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": 105,
                    "org.codehaus.plexus.util.cli.Commandline.getLiteralExecutable()": 183,
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": 249,
                    "org.codehaus.plexus.util.cli.Commandline.execute()": 355,
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": 366
                },
                "addMethodFull": {
                    "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition()": {
                        "lineNumber": [
                            {
                                "96": "realPos = ( getLiteralExecutable() == null ? 0 : 1 );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline$Marker.getPosition:int()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.getLiteralExecutable()": {
                        "lineNumber": [
                            {
                                "181": "public String getLiteralExecutable() {"
                            },
                            {
                                "182": "return executable;"
                            },
                            {
                                "183": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.getLiteralExecutable:java.lang.String()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.getCommandline()": {
                        "lineNumber": [
                            {
                                "240": "String executable = getLiteralExecutable();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.getCommandline:java.lang.String[]()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.execute()": {
                        "lineNumber": [
                            {
                                "333": "process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );"
                            },
                            {
                                "345": "process = Runtime.getRuntime().exec( getCommandline(), environment, workingDir );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.execute:java.lang.Process()"
                    },
                    "org.codehaus.plexus.util.cli.Commandline.verifyShellState()": {
                        "lineNumber": [
                            {
                                "362": "if ( shell.getOriginalExecutable() == null ){"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.Commandline.verifyShellState:void()"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/codehaus/plexus/util/cli/shell/BourneShell.java",
                "addMethodBegin": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": 10,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": 25,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": 60,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": 73
                },
                "addMethodEnd": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": 23,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": 31,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": 71,
                    "org.codehaus.plexus.util.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": 83
                },
                "addMethodFull": {
                    "org.codehaus.plexus.util.cli.shell.BourneShell.<init>(boolean isLoginShell)": {
                        "lineNumber": [
                            {
                                "11": "setUnconditionalQuoting( true );"
                            },
                            {
                                "14": "setExecutableQuoteDelimiter( '\\'' );"
                            }
                        ],
                        "paramType": "(boolean isLoginShell)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.<init>:void(boolean)"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable()": {
                        "lineNumber": [
                            {
                                "30": "return quoteOneItem( super.getOriginalExecutable(), true );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutable:java.lang.String()"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble()": {
                        "lineNumber": [
                            {
                                "68": "sb.append( quoteOneItem( dir, false ) );"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.getExecutionPreamble:java.lang.String()"
                    },
                    "org.codehaus.plexus.util.cli.shell.BourneShell.quoteOneItem(String path, boolean isExecutable)": {
                        "lineNumber": [
                            {
                                "73": "protected String quoteOneItem( String path, boolean isExecutable ) {"
                            },
                            {
                                "78": "StringBuilder sb = new StringBuilder();"
                            },
                            {
                                "79": "sb.append( \"'\" );"
                            },
                            {
                                "80": "sb.append( path.replace( \"'\", \"'\\\"'\\\"'\" ) );"
                            },
                            {
                                "81": "sb.append( \"'\" );"
                            },
                            {
                                "82": "return sb.toString();"
                            }
                        ],
                        "paramType": "(String path, boolean isExecutable)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.BourneShell.quoteOneItem:java.lang.String(java.lang.String,boolean)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/codehaus/plexus/util/cli/shell/Shell.java",
                "addMethodBegin": {
                    "org.codehaus.plexus.util.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionallyQuote)": 23,
                    "org.codehaus.plexus.util.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": 55,
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": 60,
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": 161
                },
                "addMethodEnd": {
                    "org.codehaus.plexus.util.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionallyQuote)": 25,
                    "org.codehaus.plexus.util.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": 58,
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": 96,
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": 173
                },
                "addMethodFull": {
                    "org.codehaus.plexus.util.cli.shell.Shell.setUnconditionalQuoting(boolean unconditionallyQuote)": {
                        "lineNumber": [
                            {
                                "23": "public void setUnconditionalQuoting(boolean unconditionallyQuote) {"
                            },
                            {
                                "24": "this.unconditionallyQuote = unconditionallyQuote;"
                            },
                            {
                                "25": "}"
                            }
                        ],
                        "paramType": "(boolean unconditionallyQuote)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.setUnconditionalQuoting:void(boolean)"
                    },
                    "org.codehaus.plexus.util.cli.shell.Shell.quoteOneItem(String inputString, boolean isExecutable)": {
                        "lineNumber": [
                            {
                                "55": "protected String quoteOneItem(String inputString, boolean isExecutable) {"
                            },
                            {
                                "56": "char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );"
                            },
                            {
                                "57": "return StringUtils.quoteAndEscape( inputString, isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\\\', unconditionallyQuote );"
                            },
                            {
                                "58": "}"
                            }
                        ],
                        "paramType": "(String inputString, boolean isExecutable)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.quoteOneItem:java.lang.String(java.lang.String,boolean)"
                    },
                    "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine(String executable, String[] arguments)": {
                        "lineNumber": [
                            {
                                "70": "sb.append( quoteOneItem( getOriginalExecutable(), true ) );"
                            },
                            {
                                "85": "sb.append( quoteOneItem( arguments[i], false ) );"
                            }
                        ],
                        "paramType": "(String executable, String[] arguments)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.getRawCommandLine:java.util.List(java.lang.String,java.lang.String[])"
                    },
                    "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine(String[] arguments)": {
                        "lineNumber": [
                            {
                                "171": "commandLine.addAll( getCommandLine( getOriginalExecutable(), arguments ) );"
                            }
                        ],
                        "paramType": "(String[] arguments)",
                        "originalFullName": "org.codehaus.plexus.util.cli.shell.Shell.getShellCommandLine:java.util.List(java.lang.String[])"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-13692": {
        "old_methods_info": [
            {
                "oldFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
                "deleteMethodBegin": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": 240,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 285,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 397,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 401
                },
                "deleteMethodEnd": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": 277,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 350,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 399,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 403
                },
                "deleteMethodFull": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)": {
                        "lineNumber": [
                            {
                                "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety) {"
                            },
                            {
                                "241": "int rounds, i, j;"
                            },
                            {
                                "244": "byte ret[];"
                            },
                            {
                                "249": "rounds = 1 << log_rounds;"
                            },
                            {
                                "256": "for (i = 0; i < rounds; i++) {"
                            },
                            {
                                "261": "for (i = 0; i < 64; i++) {"
                            },
                            {
                                "262": "for (j = 0; j < (clen >> 1); j++) {"
                            },
                            {
                                "268": "ret = new byte[clen * 4];"
                            },
                            {
                                "269": "for (i = 0, j = 0; i < clen; i++) {"
                            }
                        ],
                        "paramType": "(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw:byte[](byte[],byte[],int,boolean,int)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "334": "hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0);"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": {
                        "lineNumber": [
                            {
                                "398": "return equalsNoEarlyReturn(hashed, hashpw(plaintext, hashed));"
                            }
                        ],
                        "paramType": "(String plaintext, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(java.lang.String,java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": {
                        "lineNumber": [
                            {
                                "402": "return equalsNoEarlyReturn(hashed, hashpw(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(byte[],java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCrypt.java",
                "addMethodBegin": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": 240,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": 293,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 303,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": 307,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 419,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 424
                },
                "addMethodEnd": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": 291,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": 295,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": 305,
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": 372,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": 422,
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": 426
                },
                "addMethodFull": {
                    "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)": {
                        "lineNumber": [
                            {
                                "240": "private byte[] crypt_raw(byte password[], byte salt[], int log_rounds, boolean sign_ext_bug, int safety, boolean for_check) {"
                            },
                            {
                                "243": "long rounds;"
                            },
                            {
                                "245": "if (!for_check) {"
                            },
                            {
                                "246": "throw new IllegalArgumentException(\"Bad number of rounds\");"
                            },
                            {
                                "247": "}"
                            },
                            {
                                "248": ""
                            },
                            {
                                "249": "if (log_rounds != 0) {"
                            },
                            {
                                "250": "throw new IllegalArgumentException(\"Bad number of rounds\");"
                            },
                            {
                                "251": "}"
                            },
                            {
                                "252": ""
                            },
                            {
                                "253": "rounds = 0;"
                            },
                            {
                                "254": "}"
                            },
                            {
                                "255": ""
                            },
                            {
                                "256": "else {"
                            },
                            {
                                "257": "rounds = roundsForLogRounds(log_rounds);"
                            },
                            {
                                "258": "if (rounds < 16 || rounds > Integer.MAX_VALUE) {"
                            },
                            {
                                "262": "}"
                            },
                            {
                                "263": ""
                            },
                            {
                                "270": "for (int i = 0; i < rounds; i++) {"
                            },
                            {
                                "275": "for (int i = 0; i < 64; i++) {"
                            },
                            {
                                "276": "for (int j = 0; j < (clen >> 1); j++) {"
                            },
                            {
                                "282": "byte[] ret = new byte[clen * 4];"
                            },
                            {
                                "283": "for (int i = 0, j = 0; i < clen; i++) {"
                            }
                        ],
                        "paramType": "(byte[] password, byte[] salt, int log_rounds, boolean sign_ext_bug, int safety, boolean for_check)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.crypt_raw:byte[](byte[],byte[],int,boolean,int,boolean)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "293": "private static String hashpwforcheck(byte[] passwordb, String salt) {"
                            },
                            {
                                "294": "return hashpw(passwordb, salt, true);"
                            },
                            {
                                "295": "}"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpwforcheck:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt)": {
                        "lineNumber": [
                            {
                                "304": "return hashpw(passwordb, salt, false);"
                            },
                            {
                                "305": "}"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.hashpw(byte[] passwordb, String salt, boolean for_check)": {
                        "lineNumber": [
                            {
                                "307": "private static String hashpw(byte passwordb[], String salt, boolean for_check) {"
                            },
                            {
                                "356": "hashed = B.crypt_raw(passwordb, saltb, rounds, minor == 'x', minor == 'a' ? 0x10000 : 0, for_check);"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String salt, boolean for_check)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.hashpw:java.lang.String(byte[],java.lang.String,boolean)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(String plaintext, String hashed)": {
                        "lineNumber": [
                            {
                                "420": "byte[] passwordb = plaintext.getBytes(StandardCharsets.UTF_8);"
                            },
                            {
                                "421": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(String plaintext, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(java.lang.String,java.lang.String)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCrypt.checkpw(byte[] passwordb, String hashed)": {
                        "lineNumber": [
                            {
                                "425": "return equalsNoEarlyReturn(hashed, hashpwforcheck(passwordb, hashed));"
                            }
                        ],
                        "paramType": "(byte[] passwordb, String hashed)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCrypt.checkpw:boolean(byte[],java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PostgreSQL",
                "PgJDBC"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-31197": {
        "old_methods_info": [
            {
                "oldFilePath": "pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "deleteMethodBegin": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": 1392
                },
                "deleteMethodEnd": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": 1463
                },
                "deleteMethodFull": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": {
                        "lineNumber": [
                            {
                                "1412": "selectSQL.append(pgmd.getBaseColumnName(i));"
                            },
                            {
                                "1422": "selectSQL.append(primaryKey.name).append(\" = ?\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.postgresql.jdbc.PgResultSet.refreshRow:void()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "pgjdbc/src/main/java/org/postgresql/jdbc/PgResultSet.java",
                "addMethodBegin": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": 1392
                },
                "addMethodEnd": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": 1464
                },
                "addMethodFull": {
                    "org.postgresql.jdbc.PgResultSet.refreshRow()": {
                        "lineNumber": [
                            {
                                "1412": "Utils.escapeIdentifier(selectSQL, pgmd.getBaseColumnName(i));"
                            },
                            {
                                "1422": "Utils.escapeIdentifier(selectSQL, primaryKey.name);"
                            },
                            {
                                "1423": "selectSQL.append(\" = ?\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.postgresql.jdbc.PgResultSet.refreshRow:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "ResultSet.refreshRow",
                "java.sql.ResultRow.refreshRow",
                "refreshRow"
            ],
            "classnamelst": [
                "PostgreSQL",
                "PgJDBC",
                "ResultSetRefreshTest"
            ],
            "pathlst": [
                "java.sql.ResultRow.refreshRow",
                "e.g."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-8929": {
        "old_methods_info": [
            {
                "oldFilePath": "java_src/src/main/java/com/google/crypto/tink/PrimitiveSet.java",
                "deleteMethodBegin": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": 66,
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": 107
                },
                "deleteMethodEnd": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": 69,
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": 125
                },
                "deleteMethodFull": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": {
                        "lineNumber": [
                            {
                                "67": "List<Entry<P>> found = primitives.get(new String(identifier, UTF_8));"
                            }
                        ],
                        "paramType": "(final byte[] identifier)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet.getPrimitive:java.util.List(byte[])"
                    },
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": {
                        "lineNumber": [
                            {
                                "115": "String identifier = new String(entry.getIdentifier(), UTF_8);"
                            }
                        ],
                        "paramType": "(final P primitive, Keyset.Key key)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet.addPrimitive:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "java_src/src/main/java/com/google/crypto/tink/PrimitiveSet.java",
                "addMethodBegin": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": 65,
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": 106,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.<init>(byte[] prefix)": 132,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.hashCode()": 136,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.equals(Object o)": 141,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.compareTo(Prefix o)": 151,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.toString()": 167
                },
                "addMethodEnd": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": 68,
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": 124,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.<init>(byte[] prefix)": 134,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.hashCode()": 139,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.equals(Object o)": 149,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.compareTo(Prefix o)": 165,
                    "com.google.crypto.tink.PrimitiveSet$Prefix.toString()": 170
                },
                "addMethodFull": {
                    "com.google.crypto.tink.PrimitiveSet.getPrimitive(final byte[] identifier)": {
                        "lineNumber": [
                            {
                                "66": "List<Entry<P>> found = primitives.get(new Prefix(identifier));"
                            }
                        ],
                        "paramType": "(final byte[] identifier)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet.getPrimitive:java.util.List(byte[])"
                    },
                    "com.google.crypto.tink.PrimitiveSet.addPrimitive(final P primitive, Keyset.Key key)": {
                        "lineNumber": [
                            {
                                "114": "Prefix identifier = new Prefix(entry.getIdentifier());"
                            }
                        ],
                        "paramType": "(final P primitive, Keyset.Key key)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet.addPrimitive:<unresolvedSignature>(2)"
                    },
                    "com.google.crypto.tink.PrimitiveSet$Prefix.<init>(byte[] prefix)": {
                        "lineNumber": [
                            {
                                "132": "private Prefix(byte[] prefix) {"
                            },
                            {
                                "133": "this.prefix = Arrays.copyOf(prefix, prefix.length);"
                            },
                            {
                                "134": "}"
                            }
                        ],
                        "paramType": "(byte[] prefix)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet$Prefix.<init>:void(byte[])"
                    },
                    "com.google.crypto.tink.PrimitiveSet$Prefix.hashCode()": {
                        "lineNumber": [
                            {
                                "136": "@Override"
                            },
                            {
                                "137": "public int hashCode() {"
                            },
                            {
                                "138": "return Arrays.hashCode(prefix);"
                            },
                            {
                                "139": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet$Prefix.hashCode:int()"
                    },
                    "com.google.crypto.tink.PrimitiveSet$Prefix.equals(Object o)": {
                        "lineNumber": [
                            {
                                "141": "@Override"
                            },
                            {
                                "142": "public boolean equals(Object o) {"
                            },
                            {
                                "143": "if (!(o instanceof Prefix)) {"
                            },
                            {
                                "144": "return false;"
                            },
                            {
                                "145": "}"
                            },
                            {
                                "146": ""
                            },
                            {
                                "147": "Prefix other = (Prefix) o;"
                            },
                            {
                                "148": "return Arrays.equals(prefix, other.prefix);"
                            },
                            {
                                "149": "}"
                            }
                        ],
                        "paramType": "(Object o)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet$Prefix.equals:boolean(java.lang.Object)"
                    },
                    "com.google.crypto.tink.PrimitiveSet$Prefix.compareTo(Prefix o)": {
                        "lineNumber": [
                            {
                                "151": "@Override"
                            },
                            {
                                "152": "public int compareTo(Prefix o) {"
                            },
                            {
                                "153": "if (prefix.length != o.prefix.length) {"
                            },
                            {
                                "154": "return prefix.length - o.prefix.length;"
                            },
                            {
                                "155": "}"
                            },
                            {
                                "156": ""
                            },
                            {
                                "157": "for (int i = 0; i < prefix.length; i++) {"
                            },
                            {
                                "158": "if (prefix[i] != o.prefix[i]) {"
                            },
                            {
                                "159": "return prefix[i] - o.prefix[i];"
                            },
                            {
                                "160": "}"
                            },
                            {
                                "161": ""
                            },
                            {
                                "162": "}"
                            },
                            {
                                "163": ""
                            },
                            {
                                "164": "return 0;"
                            },
                            {
                                "165": "}"
                            }
                        ],
                        "paramType": "(Prefix o)",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet$Prefix.compareTo:int(com.google.crypto.tink.PrimitiveSet$Prefix)"
                    },
                    "com.google.crypto.tink.PrimitiveSet$Prefix.toString()": {
                        "lineNumber": [
                            {
                                "167": "@Override"
                            },
                            {
                                "168": "public String toString() {"
                            },
                            {
                                "169": "return Hex.encode(prefix);"
                            },
                            {
                                "170": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.google.crypto.tink.PrimitiveSet$Prefix.toString:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-29567": {
        "old_methods_info": [
            {
                "oldFilePath": "vaadin-grid-flow-parent/vaadin-grid-flow/src/main/java/com/vaadin/flow/component/treegrid/TreeGrid.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "vaadin-grid-flow-parent/vaadin-grid-flow/src/main/java/com/vaadin/flow/component/treegrid/TreeGrid.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [
                "getId",
                "toString"
            ],
            "classnamelst": [
                "TreeGrid"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-5245": {
        "old_methods_info": [
            {
                "oldFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
                "deleteMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String msg)": 10
                },
                "deleteMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String msg)": 13
                },
                "deleteMethodFull": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String msg)": {
                        "lineNumber": [
                            {
                                "10": "public void addViolation(String msg) {"
                            },
                            {
                                "12": "context.buildConstraintViolationWithTemplate(msg) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String msg)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
                "addMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 14,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 20,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 26,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 32,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": 38
                },
                "addMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 18,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 24,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 30,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 36,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": 52
                },
                "addMethodFull": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": {
                        "lineNumber": [
                            {
                                "14": "public void addViolation(String message) {"
                            },
                            {
                                "16": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "17": "context.buildConstraintViolationWithTemplate(messageTemplate) .addConstraintViolation();"
                            },
                            {
                                "18": "}"
                            }
                        ],
                        "paramType": "(String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": {
                        "lineNumber": [
                            {
                                "20": "public void addViolation(String propertyName, String message) {"
                            },
                            {
                                "21": "violationOccurred = true;"
                            },
                            {
                                "22": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "23": "context.buildConstraintViolationWithTemplate(messageTemplate) .addPropertyNode(propertyName) .addConstraintViolation();"
                            },
                            {
                                "24": "}"
                            }
                        ],
                        "paramType": "(String propertyName, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": {
                        "lineNumber": [
                            {
                                "26": "public void addViolation(String propertyName, Integer index, String message) {"
                            },
                            {
                                "27": "violationOccurred = true;"
                            },
                            {
                                "28": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "29": "context.buildConstraintViolationWithTemplate(messageTemplate) .addPropertyNode(propertyName) .addBeanNode().inIterable().atIndex(index) .addConstraintViolation();"
                            },
                            {
                                "30": "}"
                            }
                        ],
                        "paramType": "(String propertyName, Integer index, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.Integer,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": {
                        "lineNumber": [
                            {
                                "32": "public void addViolation(String propertyName, String key, String message) {"
                            },
                            {
                                "33": "violationOccurred = true;"
                            },
                            {
                                "34": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "35": "context.buildConstraintViolationWithTemplate(messageTemplate) .addPropertyNode(propertyName) .addBeanNode().inIterable().atKey(key) .addConstraintViolation();"
                            },
                            {
                                "36": "}"
                            }
                        ],
                        "paramType": "(String propertyName, String key, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": {
                        "lineNumber": [
                            {
                                "38": "@Nullable"
                            },
                            {
                                "39": "private String escapeEl(@Nullable String s) {"
                            },
                            {
                                "40": "if (s == null || s.isEmpty()) {"
                            },
                            {
                                "41": "return s;"
                            },
                            {
                                "42": "}"
                            },
                            {
                                "43": ""
                            },
                            {
                                "44": "final Matcher m = ESCAPE_PATTERN.matcher(s);"
                            },
                            {
                                "45": "final StringBuffer sb = new StringBuffer(s.length() + 16);"
                            },
                            {
                                "46": "while (m.find()) {"
                            },
                            {
                                "47": "m.appendReplacement(sb, \"\\\\\\\\\\\\${\");"
                            },
                            {
                                "48": "}"
                            },
                            {
                                "49": ""
                            },
                            {
                                "50": "m.appendTail(sb);"
                            },
                            {
                                "51": "return sb.toString();"
                            }
                        ],
                        "paramType": "(@Nullable String s)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ViolationCollector"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-11002": {
        "old_methods_info": [
            {
                "oldFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
                "deleteMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext context)": 10,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 14,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 20,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 26,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 32,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": 38,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": 54
                },
                "deleteMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext context)": 12,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 18,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 24,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 30,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 36,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": 52,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": 56
                },
                "deleteMethodFull": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext context)": {
                        "lineNumber": [
                            {
                                "10": "public ViolationCollector(ConstraintValidatorContext context) {"
                            },
                            {
                                "11": "this.context = context;"
                            }
                        ],
                        "paramType": "(ConstraintValidatorContext context)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>:<unresolvedSignature>(1)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": {
                        "lineNumber": [
                            {
                                "16": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "17": "context.buildConstraintViolationWithTemplate(messageTemplate) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": {
                        "lineNumber": [
                            {
                                "22": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "23": "context.buildConstraintViolationWithTemplate(messageTemplate) .addPropertyNode(propertyName) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String propertyName, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": {
                        "lineNumber": [
                            {
                                "28": "String messageTemplate = escapeEl(message);"
                            },
                            {
                                "29": "context.buildConstraintViolationWithTemplate(messageTemplate) .addPropertyNode(propertyName) .addBeanNode().inIterable().atIndex(index) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String propertyName, Integer index, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.Integer,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": {
                        "lineNumber": [
                            {
                                "34": "String messageTemplate = escapeEl(message);"
                            }
                        ],
                        "paramType": "(String propertyName, String key, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl(@Nullable String s)": {
                        "lineNumber": [
                            {
                                "38": "@Nullable"
                            },
                            {
                                "39": "private String escapeEl(@Nullable String s) {"
                            },
                            {
                                "40": "if (s == null || s.isEmpty()) {"
                            },
                            {
                                "41": "return s;"
                            },
                            {
                                "44": "final Matcher m = ESCAPE_PATTERN.matcher(s);"
                            },
                            {
                                "45": "final StringBuffer sb = new StringBuffer(s.length() + 16);"
                            },
                            {
                                "46": "while (m.find()) {"
                            },
                            {
                                "47": "m.appendReplacement(sb, \"\\\\\\\\\\\\${\");"
                            },
                            {
                                "50": "m.appendTail(sb);"
                            },
                            {
                                "51": "return sb.toString();"
                            }
                        ],
                        "paramType": "(@Nullable String s)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.escapeEl:java.lang.String(java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": {
                        "lineNumber": [
                            {
                                "55": "return context;"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext:javax.validation.ConstraintValidatorContext()"
                    }
                }
            },
            {
                "oldFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
                "deleteMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": 29
                },
                "deleteMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": 40
                },
                "deleteMethodFull": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": {
                        "lineNumber": [
                            {
                                "32": "final ViolationCollector collector = new ViolationCollector(context);"
                            }
                        ],
                        "paramType": "(Object value, ConstraintValidatorContext context)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidating.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/ViolationCollector.java",
                "addMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext)": 12,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions)": 16,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 21,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message, Map<String, Object> messageParameters)": 25,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 30,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message, Map<String, Object> messageParameters)": 34,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 39,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters)": 43,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 48,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters)": 52,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContextWithMessageParameters(Map<String, Object> messageParameters)": 59,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.sanitizeTemplate(@Nullable String message)": 70,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": 75
                },
                "addMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext)": 14,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions)": 19,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": 23,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message, Map<String, Object> messageParameters)": 28,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": 32,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message, Map<String, Object> messageParameters)": 37,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": 41,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters)": 46,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": 50,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters)": 57,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContextWithMessageParameters(Map<String, Object> messageParameters)": 68,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.sanitizeTemplate(@Nullable String message)": 73,
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": 77
                },
                "addMethodFull": {
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext)": {
                        "lineNumber": [
                            {
                                "12": "public ViolationCollector(ConstraintValidatorContext constraintValidatorContext) {"
                            },
                            {
                                "13": "this(constraintValidatorContext, true);"
                            },
                            {
                                "14": "}"
                            }
                        ],
                        "paramType": "(ConstraintValidatorContext constraintValidatorContext)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>:<unresolvedSignature>(1)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions)": {
                        "lineNumber": [
                            {
                                "16": "public ViolationCollector(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions) {"
                            },
                            {
                                "17": "this.constraintValidatorContext = constraintValidatorContext;"
                            },
                            {
                                "18": "this.escapeExpressions = escapeExpressions;"
                            }
                        ],
                        "paramType": "(ConstraintValidatorContext constraintValidatorContext, boolean escapeExpressions)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.<init>:<unresolvedSignature>(2)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message)": {
                        "lineNumber": [
                            {
                                "22": "addViolation(message, Collections.emptyMap());"
                            },
                            {
                                "23": "}"
                            }
                        ],
                        "paramType": "(String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String message, Map<String, Object> messageParameters)": {
                        "lineNumber": [
                            {
                                "25": "public void addViolation(String message, Map<String, Object> messageParameters) {"
                            },
                            {
                                "27": "getContextWithMessageParameters(messageParameters) .buildConstraintViolationWithTemplate(sanitizeTemplate(message)) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String message, Map<String, Object> messageParameters)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.util.Map)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message)": {
                        "lineNumber": [
                            {
                                "31": "addViolation(propertyName, message, Collections.emptyMap());"
                            },
                            {
                                "32": "}"
                            }
                        ],
                        "paramType": "(String propertyName, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String message, Map<String, Object> messageParameters)": {
                        "lineNumber": [
                            {
                                "34": "public void addViolation(String propertyName, String message, Map<String, Object> messageParameters) {"
                            },
                            {
                                "36": "getContextWithMessageParameters(messageParameters) .buildConstraintViolationWithTemplate(sanitizeTemplate(message)) .addPropertyNode(propertyName) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String propertyName, String message, Map<String, Object> messageParameters)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String,java.util.Map)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message)": {
                        "lineNumber": [
                            {
                                "40": "addViolation(propertyName, index, message, Collections.emptyMap());"
                            },
                            {
                                "41": "}"
                            }
                        ],
                        "paramType": "(String propertyName, Integer index, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.Integer,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters)": {
                        "lineNumber": [
                            {
                                "43": "public void addViolation(String propertyName, Integer index, String message, Map<String, Object> messageParameters) {"
                            },
                            {
                                "45": "getContextWithMessageParameters(messageParameters) .buildConstraintViolationWithTemplate(sanitizeTemplate(message)) .addPropertyNode(propertyName) .addBeanNode().inIterable().atIndex(index) .addConstraintViolation();"
                            }
                        ],
                        "paramType": "(String propertyName, Integer index, String message, Map<String, Object> messageParameters)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.Integer,java.lang.String,java.util.Map)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message)": {
                        "lineNumber": [
                            {
                                "49": "addViolation(propertyName, key, message, Collections.emptyMap());"
                            },
                            {
                                "50": "}"
                            }
                        ],
                        "paramType": "(String propertyName, String key, String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String,java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters)": {
                        "lineNumber": [
                            {
                                "52": "public void addViolation(String propertyName, String key, String message, Map<String, Object> messageParameters) {"
                            },
                            {
                                "54": "final String messageTemplate = sanitizeTemplate(message);"
                            },
                            {
                                "55": "final HibernateConstraintValidatorContext context = getContextWithMessageParameters(messageParameters);"
                            }
                        ],
                        "paramType": "(String propertyName, String key, String message, Map<String, Object> messageParameters)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.addViolation:void(java.lang.String,java.lang.String,java.lang.String,java.util.Map)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContextWithMessageParameters(Map<String, Object> messageParameters)": {
                        "lineNumber": [
                            {
                                "59": "private HibernateConstraintValidatorContext getContextWithMessageParameters(Map<String, Object> messageParameters) {"
                            },
                            {
                                "60": "final HibernateConstraintValidatorContext context = constraintValidatorContext.unwrap(HibernateConstraintValidatorContext.class);"
                            },
                            {
                                "61": "for (Map.Entry<String, Object> messageParameter : messageParameters.entrySet()) {"
                            },
                            {
                                "62": "final Object value = messageParameter.getValue();"
                            },
                            {
                                "63": "final String escapedValue = value == null ? null : escapeMessageParameter(value.toString());"
                            },
                            {
                                "64": "context.addMessageParameter(messageParameter.getKey(), escapedValue);"
                            },
                            {
                                "67": "return context;"
                            }
                        ],
                        "paramType": "(Map<String, Object> messageParameters)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.getContextWithMessageParameters:org.hibernate.validator.constraintvalidation.HibernateConstraintValidatorContext(java.util.Map)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.sanitizeTemplate(@Nullable String message)": {
                        "lineNumber": [
                            {
                                "70": "@Nullable"
                            },
                            {
                                "71": "private String sanitizeTemplate(@Nullable String message) {"
                            },
                            {
                                "72": "return escapeExpressions ? escapeMessageParameter(message) : message;"
                            }
                        ],
                        "paramType": "(@Nullable String message)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.sanitizeTemplate:java.lang.String(java.lang.String)"
                    },
                    "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext()": {
                        "lineNumber": [
                            {
                                "76": "return constraintValidatorContext;"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.ViolationCollector.getContext:javax.validation.ConstraintValidatorContext()"
                    }
                }
            },
            {
                "newFilePath": "dropwizard-validation/src/main/java/io/dropwizard/validation/selfvalidating/SelfValidatingValidator.java",
                "addMethodBegin": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.initialize(SelfValidating constraintAnnotation)": 26,
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": 31
                },
                "addMethodEnd": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.initialize(SelfValidating constraintAnnotation)": 29,
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": 42
                },
                "addMethodFull": {
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.initialize(SelfValidating constraintAnnotation)": {
                        "lineNumber": [
                            {
                                "28": "escapeExpressions = constraintAnnotation.escapeExpressions();"
                            }
                        ],
                        "paramType": "(SelfValidating constraintAnnotation)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.initialize:void(io.dropwizard.validation.selfvalidating.SelfValidating)"
                    },
                    "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid(Object value, ConstraintValidatorContext context)": {
                        "lineNumber": [
                            {
                                "34": "final ViolationCollector collector = new ViolationCollector(context, escapeExpressions);"
                            }
                        ],
                        "paramType": "(Object value, ConstraintValidatorContext context)",
                        "originalFullName": "io.dropwizard.validation.selfvalidating.SelfValidatingValidator.isValid:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "escapeExpressions"
            ],
            "classnamelst": [
                "ConstraintViolations"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-10219": {
        "old_methods_info": [
            {
                "oldFilePath": "engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/SafeHtmlValidator.java",
                "deleteMethodBegin": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": 64
                },
                "deleteMethodEnd": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": 73
                },
                "deleteMethodFull": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": {
                        "lineNumber": [
                            {
                                "67": "Iterator<Element> nodes = fragment.children().iterator();"
                            },
                            {
                                "68": "while ( nodes.hasNext() ) {"
                            },
                            {
                                "69": "document.body().appendChild( nodes.next() );"
                            }
                        ],
                        "paramType": "(CharSequence value)",
                        "originalFullName": "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument:org.jsoup.nodes.Document(java.lang.CharSequence)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "engine/src/main/java/org/hibernate/validator/internal/constraintvalidators/hv/SafeHtmlValidator.java",
                "addMethodBegin": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": 64
                },
                "addMethodEnd": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": 73
                },
                "addMethodFull": {
                    "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument(CharSequence value)": {
                        "lineNumber": [
                            {
                                "67": "List<Node> childNodes = fragment.childNodes();"
                            },
                            {
                                "68": "for ( Node node : childNodes ) {"
                            },
                            {
                                "69": "document.body().appendChild( node.clone() );"
                            }
                        ],
                        "paramType": "(CharSequence value)",
                        "originalFullName": "org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator.getFragmentAsDocument:org.jsoup.nodes.Document(java.lang.CharSequence)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SafeHtml"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-36320": {
        "old_methods_info": [
            {
                "oldFilePath": "server/src/main/java/com/vaadin/data/validator/EmailValidator.java",
                "deleteMethodBegin": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": 4
                },
                "deleteMethodEnd": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": 6
                },
                "deleteMethodFull": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": {
                        "lineNumber": [
                            {
                                "5": "super(\"^([a-zA-Z0-9_\\\\.\\\\-+])+@(([a-zA-Z0-9-])+\\\\.)+([a-zA-Z0-9]{2,4})+$\", true, errorMessage);"
                            }
                        ],
                        "paramType": "(String errorMessage)",
                        "originalFullName": "com.vaadin.data.validator.EmailValidator.<init>:void(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "server/src/main/java/com/vaadin/data/validator/EmailValidator.java",
                "addMethodBegin": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": 5
                },
                "addMethodEnd": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": 7
                },
                "addMethodFull": {
                    "com.vaadin.data.validator.EmailValidator.<init>(String errorMessage)": {
                        "lineNumber": [
                            {
                                "6": "super(PATTERN, true, errorMessage);"
                            }
                        ],
                        "paramType": "(String errorMessage)",
                        "originalFullName": "com.vaadin.data.validator.EmailValidator.<init>:void(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "EmailValidator",
                "RegEx"
            ],
            "pathlst": [
                "com/vaadin/framework/issues/7757Unsafe"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-41966": {
        "old_methods_info": [
            {
                "oldFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xstream/src/java/com/thoughtworks/xstream/XStream.java",
                "addMethodBegin": {
                    "com.thoughtworks.xstream.XStream.unmarshal(final HierarchicalStreamReader reader, final T root, DataHolder dataHolder)": 945
                },
                "addMethodEnd": {
                    "com.thoughtworks.xstream.XStream.unmarshal(final HierarchicalStreamReader reader, final T root, DataHolder dataHolder)": 970
                },
                "addMethodFull": {
                    "com.thoughtworks.xstream.XStream.unmarshal(final HierarchicalStreamReader reader, final T root, DataHolder dataHolder)": {
                        "lineNumber": [
                            {
                                "959": "}"
                            },
                            {
                                "960": "catch (final StackOverflowError e) {"
                            },
                            {
                                "961": "throw new InputManipulationException(\"Possible Denial of Service attack by Stack Overflow\");"
                            }
                        ],
                        "paramType": "(final HierarchicalStreamReader reader, final T root, DataHolder dataHolder)",
                        "originalFullName": "com.thoughtworks.xstream.XStream.unmarshal:java.lang.Object(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "HashSet",
                "InputManipulationException",
                "HashMap"
            ],
            "pathlst": [
                "java.util.Map"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-30468": {
        "old_methods_info": [
            {
                "oldFilePath": "rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "deleteMethodBegin": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": 235
                },
                "deleteMethodEnd": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": 262
                },
                "deleteMethodFull": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": {
                        "lineNumber": [
                            {
                                "257": "if (value instanceof String) {"
                            }
                        ],
                        "paramType": "(String name, String json, int from, int to)",
                        "originalFullName": "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue:java.lang.Object(java.lang.String,java.lang.String,int,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "addMethodBegin": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readJsonObjectAsSettable(Settable values, String json)": 169,
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": 239
                },
                "addMethodEnd": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readJsonObjectAsSettable(Settable values, String json)": 211,
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": 266
                },
                "addMethodFull": {
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readJsonObjectAsSettable(Settable values, String json)": {
                        "lineNumber": [
                            {
                                "179": "if (sepIndex == -1) {"
                            },
                            {
                                "180": "throw new UncheckedIOException(new IOException(\"Error in parsing json\"));"
                            },
                            {
                                "181": "}"
                            },
                            {
                                "182": ""
                            }
                        ],
                        "paramType": "(Settable values, String json)",
                        "originalFullName": "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readJsonObjectAsSettable:void(org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter$Settable,java.lang.String)"
                    },
                    "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue(String name, String json, int from, int to)": {
                        "lineNumber": [
                            {
                                "261": "if (value instanceof String && ((String)value).contains(\"\\\\/\")) {"
                            }
                        ],
                        "paramType": "(String name, String json, int from, int to)",
                        "originalFullName": "org.apache.cxf.jaxrs.json.basic.JsonMapObjectReaderWriter.readPrimitiveValue:java.lang.Object(java.lang.String,java.lang.String,int,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "JsonMapObjectReaderWriter"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24615": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/net/lingala/zip4j/io/inputstream/AesCipherInputStream.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/net/lingala/zip4j/io/inputstream/AesCipherInputStream.java",
                "addMethodBegin": {
                    "net.lingala.zip4j.io.inputstream.AesCipherInputStream.getSalt(LocalFileHeader localFileHeader)": 136
                },
                "addMethodEnd": {
                    "net.lingala.zip4j.io.inputstream.AesCipherInputStream.getSalt(LocalFileHeader localFileHeader)": 149
                },
                "addMethodFull": {
                    "net.lingala.zip4j.io.inputstream.AesCipherInputStream.getSalt(LocalFileHeader localFileHeader)": {
                        "lineNumber": [
                            {
                                "142": "if (aesExtraDataRecord.getAesKeyStrength() == null) {"
                            },
                            {
                                "143": "throw new IOException(\"Invalid aes key strength in aes extra data record\");"
                            },
                            {
                                "144": "}"
                            },
                            {
                                "145": ""
                            }
                        ],
                        "paramType": "(LocalFileHeader localFileHeader)",
                        "originalFullName": "net.lingala.zip4j.io.inputstream.AesCipherInputStream.getSalt:byte[](net.lingala.zip4j.model.LocalFileHeader)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-43642": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/SnappyOutputStream.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/SnappyInputStream.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/SnappyHadoopCompatibleOutputStream.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/xerial/snappy/SnappyOutputStream.java",
                "addMethodBegin": {
                    "org.xerial.snappy.SnappyOutputStream.<init>(OutputStream out, int blockSize, BufferAllocatorFactory bufferAllocatorFactory)": 29
                },
                "addMethodEnd": {
                    "org.xerial.snappy.SnappyOutputStream.<init>(OutputStream out, int blockSize, BufferAllocatorFactory bufferAllocatorFactory)": 42
                },
                "addMethodFull": {
                    "org.xerial.snappy.SnappyOutputStream.<init>(OutputStream out, int blockSize, BufferAllocatorFactory bufferAllocatorFactory)": {
                        "lineNumber": [
                            {
                                "32": "if (this.blockSize > MAX_BLOCK_SIZE){"
                            },
                            {
                                "33": "throw new IllegalArgumentException(String.format(\"Provided chunk size %,d larger than max %,d\", this.blockSize, MAX_BLOCK_SIZE));"
                            },
                            {
                                "34": "}"
                            },
                            {
                                "35": ""
                            }
                        ],
                        "paramType": "(OutputStream out, int blockSize, BufferAllocatorFactory bufferAllocatorFactory)",
                        "originalFullName": "org.xerial.snappy.SnappyOutputStream.<init>:void(java.io.OutputStream,int,org.xerial.snappy.buffer.BufferAllocatorFactory)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/xerial/snappy/SnappyInputStream.java",
                "addMethodBegin": {
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input)": 15,
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input, int maxChunkSize)": 19,
                    "org.xerial.snappy.SnappyInputStream.hasNextChunk()": 202
                },
                "addMethodEnd": {
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input)": 17,
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input, int maxChunkSize)": 23,
                    "org.xerial.snappy.SnappyInputStream.hasNextChunk()": 277
                },
                "addMethodFull": {
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input)": {
                        "lineNumber": [
                            {
                                "16": "this(input, MAX_CHUNK_SIZE);"
                            },
                            {
                                "17": "}"
                            }
                        ],
                        "paramType": "(InputStream input)",
                        "originalFullName": "org.xerial.snappy.SnappyInputStream.<init>:void(java.io.InputStream)"
                    },
                    "org.xerial.snappy.SnappyInputStream.<init>(InputStream input, int maxChunkSize)": {
                        "lineNumber": [
                            {
                                "19": "public SnappyInputStream(InputStream input, int maxChunkSize) throws IOException {"
                            },
                            {
                                "20": "this.maxChunkSize = maxChunkSize;"
                            }
                        ],
                        "paramType": "(InputStream input, int maxChunkSize)",
                        "originalFullName": "org.xerial.snappy.SnappyInputStream.<init>:void(java.io.InputStream,int)"
                    },
                    "org.xerial.snappy.SnappyInputStream.hasNextChunk()": {
                        "lineNumber": [
                            {
                                "236": "if (chunkSize > maxChunkSize) {"
                            },
                            {
                                "237": "throw new SnappyError(SnappyErrorCode.FAILED_TO_UNCOMPRESS, String.format(\"Received chunkSize %,d is greater than max configured chunk size %,d\", chunkSize, maxChunkSize));"
                            },
                            {
                                "238": "}"
                            },
                            {
                                "239": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.xerial.snappy.SnappyInputStream.hasNextChunk:boolean()"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/xerial/snappy/SnappyHadoopCompatibleOutputStream.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SnappyInputStream"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-1370": {
        "old_methods_info": [
            {
                "oldFilePath": "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "json-smart/src/main/java/net/minidev/json/parser/JSONParserBase.java",
                "addMethodBegin": {
                    "net.minidev.json.parser.JSONParserBase.readObject(JsonReaderI<T> mapper)": 473
                },
                "addMethodEnd": {
                    "net.minidev.json.parser.JSONParserBase.readObject(JsonReaderI<T> mapper)": 550
                },
                "addMethodFull": {
                    "net.minidev.json.parser.JSONParserBase.readObject(JsonReaderI<T> mapper)": {
                        "lineNumber": [
                            {
                                "535": "this.depth--;"
                            }
                        ],
                        "paramType": "(JsonReaderI<T> mapper)",
                        "originalFullName": "net.minidev.json.parser.JSONParserBase.readObject:java.lang.Object(net.minidev.json.writer.JsonReaderI)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "netplex.github.io"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-5408": {
        "old_methods_info": [
            {
                "oldFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "crypto/src/main/java/org/springframework/security/crypto/bcrypt/BCryptPasswordEncoder.java",
                "addMethodBegin": {
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence rawPassword)": 48,
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence rawPassword, String encodedPassword)": 64
                },
                "addMethodEnd": {
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence rawPassword)": 62,
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence rawPassword, String encodedPassword)": 80
                },
                "addMethodFull": {
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode(CharSequence rawPassword)": {
                        "lineNumber": [
                            {
                                "49": "if (rawPassword == null) {"
                            },
                            {
                                "50": "throw new IllegalArgumentException(\"rawPassword cannot be null\");"
                            },
                            {
                                "51": "}"
                            },
                            {
                                "52": ""
                            }
                        ],
                        "paramType": "(CharSequence rawPassword)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.encode:java.lang.String(java.lang.CharSequence)"
                    },
                    "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches(CharSequence rawPassword, String encodedPassword)": {
                        "lineNumber": [
                            {
                                "65": "if (rawPassword == null) {"
                            },
                            {
                                "66": "throw new IllegalArgumentException(\"rawPassword cannot be null\");"
                            },
                            {
                                "67": "}"
                            },
                            {
                                "68": ""
                            }
                        ],
                        "paramType": "(CharSequence rawPassword, String encodedPassword)",
                        "originalFullName": "org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder.matches:boolean(java.lang.CharSequence,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "rawPassword"
            ],
            "classnamelst": [
                "BCryptPasswordEncoder"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-34453": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/BitShuffle.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/org/xerial/snappy/SnappyErrorCode.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/xerial/snappy/BitShuffle.java",
                "addMethodBegin": {
                    "org.xerial.snappy.BitShuffle.shuffle(short[] input)": 43,
                    "org.xerial.snappy.BitShuffle.shuffle(int[] input)": 54,
                    "org.xerial.snappy.BitShuffle.shuffle(long[] input)": 65,
                    "org.xerial.snappy.BitShuffle.shuffle(float[] input)": 76,
                    "org.xerial.snappy.BitShuffle.shuffle(double[] input)": 87
                },
                "addMethodEnd": {
                    "org.xerial.snappy.BitShuffle.shuffle(short[] input)": 52,
                    "org.xerial.snappy.BitShuffle.shuffle(int[] input)": 63,
                    "org.xerial.snappy.BitShuffle.shuffle(long[] input)": 74,
                    "org.xerial.snappy.BitShuffle.shuffle(float[] input)": 85,
                    "org.xerial.snappy.BitShuffle.shuffle(double[] input)": 96
                },
                "addMethodFull": {
                    "org.xerial.snappy.BitShuffle.shuffle(short[] input)": {
                        "lineNumber": [
                            {
                                "44": "if (input.length * 2 < input.length) {"
                            },
                            {
                                "45": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "46": "}"
                            },
                            {
                                "47": ""
                            }
                        ],
                        "paramType": "(short[] input)",
                        "originalFullName": "org.xerial.snappy.BitShuffle.shuffle:byte[](short[])"
                    },
                    "org.xerial.snappy.BitShuffle.shuffle(int[] input)": {
                        "lineNumber": [
                            {
                                "55": "if (input.length * 4 < input.length) {"
                            },
                            {
                                "56": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "57": "}"
                            },
                            {
                                "58": ""
                            }
                        ],
                        "paramType": "(int[] input)",
                        "originalFullName": "org.xerial.snappy.BitShuffle.shuffle:byte[](int[])"
                    },
                    "org.xerial.snappy.BitShuffle.shuffle(long[] input)": {
                        "lineNumber": [
                            {
                                "66": "if (input.length * 8 < input.length) {"
                            },
                            {
                                "67": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "68": "}"
                            },
                            {
                                "69": ""
                            }
                        ],
                        "paramType": "(long[] input)",
                        "originalFullName": "org.xerial.snappy.BitShuffle.shuffle:byte[](long[])"
                    },
                    "org.xerial.snappy.BitShuffle.shuffle(float[] input)": {
                        "lineNumber": [
                            {
                                "77": "if (input.length * 4 < input.length) {"
                            },
                            {
                                "78": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "79": "}"
                            },
                            {
                                "80": ""
                            }
                        ],
                        "paramType": "(float[] input)",
                        "originalFullName": "org.xerial.snappy.BitShuffle.shuffle:byte[](float[])"
                    },
                    "org.xerial.snappy.BitShuffle.shuffle(double[] input)": {
                        "lineNumber": [
                            {
                                "88": "if (input.length * 8 < input.length) {"
                            },
                            {
                                "89": "throw new SnappyError(SnappyErrorCode.TOO_LARGE_INPUT, \"input array size is too large: \" + input.length);"
                            },
                            {
                                "90": "}"
                            },
                            {
                                "91": ""
                            }
                        ],
                        "paramType": "(double[] input)",
                        "originalFullName": "org.xerial.snappy.BitShuffle.shuffle:byte[](double[])"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/xerial/snappy/SnappyErrorCode.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SnappyError",
                "ILLEGAL_ARGUMENT"
            ],
            "pathlst": [
                "java.lang.NegativeArraySizeException",
                "java.lang.ArrayIndexOutOfBoundsException"
            ],
            "langrelatedfiles": [
                "SnappyTest.java",
                "SnappyErrorCode.java",
                "Snappy.java",
                "SnappyTest.java",
                "BitShuffle.java"
            ]
        }
    },
    "CVE-2018-20000": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/bedework/webdav/servlet/common/MethodBase.java",
                "deleteMethodBegin": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int len, final Reader rdr)": 229
                },
                "deleteMethodEnd": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int len, final Reader rdr)": 251
                },
                "deleteMethodFull": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int len, final Reader rdr)": {
                        "lineNumber": [
                            {
                                "229": "protected Document parseContent(final int len, final Reader rdr) throws WebdavException{"
                            },
                            {
                                "230": "if (len == 0) {"
                            },
                            {
                                "231": "return null;"
                            },
                            {
                                "232": "}"
                            },
                            {
                                "233": ""
                            },
                            {
                                "234": "if (rdr == null) {"
                            },
                            {
                                "235": "return null;"
                            },
                            {
                                "236": "}"
                            },
                            {
                                "237": ""
                            },
                            {
                                "238": "try {"
                            },
                            {
                                "239": "DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();"
                            },
                            {
                                "240": "factory.setNamespaceAware(true);"
                            },
                            {
                                "241": "DocumentBuilder builder = factory.newDocumentBuilder();"
                            },
                            {
                                "242": "return builder.parse(new InputSource(rdr));"
                            },
                            {
                                "243": "}"
                            },
                            {
                                "244": "catch (SAXException e) {"
                            },
                            {
                                "245": "throw new WebdavBadRequest();"
                            },
                            {
                                "246": "}"
                            },
                            {
                                "247": "catch (Throwable t) {"
                            },
                            {
                                "248": "throw new WebdavException(t);"
                            },
                            {
                                "249": "}"
                            },
                            {
                                "250": ""
                            }
                        ],
                        "paramType": "(final int len, final Reader rdr)",
                        "originalFullName": "org.bedework.webdav.servlet.common.MethodBase.parseContent:org.w3c.dom.Document(int,java.io.Reader)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/bedework/webdav/servlet/common/PostRequestPars.java",
                "deleteMethodBegin": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": 59,
                    "org.bedework.webdav.servlet.common.PostRequestPars.parseXml(final Reader rdr)": 131
                },
                "deleteMethodEnd": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": 74,
                    "org.bedework.webdav.servlet.common.PostRequestPars.parseXml(final Reader rdr)": 149
                },
                "deleteMethodFull": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": {
                        "lineNumber": [
                            {
                                "71": "xmlDoc = parseXml(reqRdr);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bedework.webdav.servlet.common.PostRequestPars.processXml:boolean()"
                    },
                    "org.bedework.webdav.servlet.common.PostRequestPars.parseXml(final Reader rdr)": {
                        "lineNumber": [
                            {
                                "131": "private Document parseXml(final Reader rdr) throws WebdavException{"
                            },
                            {
                                "132": "if (rdr == null) {"
                            },
                            {
                                "133": "return null;"
                            },
                            {
                                "134": "}"
                            },
                            {
                                "135": ""
                            },
                            {
                                "136": "try {"
                            },
                            {
                                "137": "final DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();"
                            },
                            {
                                "138": "factory.setNamespaceAware(true);"
                            },
                            {
                                "139": "final DocumentBuilder builder = factory.newDocumentBuilder();"
                            },
                            {
                                "140": "return builder.parse(new InputSource(rdr));"
                            },
                            {
                                "141": "}"
                            },
                            {
                                "142": "catch (final SAXException e) {"
                            },
                            {
                                "143": "throw new WebdavBadRequest();"
                            },
                            {
                                "144": "}"
                            },
                            {
                                "145": "catch (final Throwable t) {"
                            },
                            {
                                "146": "throw new WebdavException(t);"
                            },
                            {
                                "147": "}"
                            },
                            {
                                "148": ""
                            },
                            {
                                "149": "}"
                            }
                        ],
                        "paramType": "(final Reader rdr)",
                        "originalFullName": "org.bedework.webdav.servlet.common.PostRequestPars.parseXml:org.w3c.dom.Document(java.io.Reader)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/bedework/webdav/servlet/common/MethodBase.java",
                "addMethodBegin": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int contentLength, final Reader reader)": 229
                },
                "addMethodEnd": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int contentLength, final Reader reader)": 231
                },
                "addMethodFull": {
                    "org.bedework.webdav.servlet.common.MethodBase.parseContent(final int contentLength, final Reader reader)": {
                        "lineNumber": [
                            {
                                "229": "protected Document parseContent(final int contentLength, final Reader reader) throws WebdavException{"
                            },
                            {
                                "230": "return parseXmlSafely(contentLength, reader);"
                            }
                        ],
                        "paramType": "(final int contentLength, final Reader reader)",
                        "originalFullName": "org.bedework.webdav.servlet.common.MethodBase.parseContent:org.w3c.dom.Document(int,java.io.Reader)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/bedework/webdav/servlet/common/PostRequestPars.java",
                "addMethodBegin": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": 54
                },
                "addMethodEnd": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": 69
                },
                "addMethodFull": {
                    "org.bedework.webdav.servlet.common.PostRequestPars.processXml()": {
                        "lineNumber": [
                            {
                                "66": "xmlDoc = parseXmlSafely(req.getContentLength(), reqRdr);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.bedework.webdav.servlet.common.PostRequestPars.processXml:boolean()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "xmlApereo"
            ],
            "classnamelst": [],
            "pathlst": [
                "webdav/servlet/common/MethodBase.java",
                "PostRequestPars.java.",
                "webdav/servlet/common/PostRequestPars.java"
            ],
            "langrelatedfiles": [
                "MethodBase.java",
                "PostRequestPars.java"
            ]
        }
    },
    "CVE-2022-23082": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/io/whitesource/cure/FileSecurityUtils.java",
                "deleteMethodBegin": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": 7
                },
                "deleteMethodEnd": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": 11
                },
                "deleteMethodFull": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": {
                        "lineNumber": [
                            {
                                "10": "return !file.getCanonicalPath().startsWith(baseDir.getCanonicalPath());"
                            }
                        ],
                        "paramType": "(@NonNull final String filePath, @NonNull final String baseDirPath)",
                        "originalFullName": "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir:boolean(java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/io/whitesource/cure/FileSecurityUtils.java",
                "addMethodBegin": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": 7
                },
                "addMethodEnd": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": 11
                },
                "addMethodFull": {
                    "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir(@NonNull final String filePath, @NonNull final String baseDirPath)": {
                        "lineNumber": [
                            {
                                "10": "return !file.getCanonicalFile().toPath().startsWith(baseDir.getCanonicalFile().toPath());"
                            }
                        ],
                        "paramType": "(@NonNull final String filePath, @NonNull final String baseDirPath)",
                        "originalFullName": "io.whitesource.cure.FileSecurityUtils.isFileOutsideDir:boolean(java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "CureKit"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-44228": {
        "old_methods_info": [
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 89
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 106
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": {
                        "lineNumber": [
                            {
                                "91": "if (JndiManager.isJndiEnabled()) {"
                            },
                            {
                                "101": "else {"
                            },
                            {
                                "102": "logger().error(\"Jndi has not been enabled. The log4j2.enableJndi property must be set to true\");"
                            },
                            {
                                "103": "return null;"
                            },
                            {
                                "104": "}"
                            },
                            {
                                "105": ""
                            },
                            {
                                "106": "}"
                            }
                        ],
                        "paramType": "(final String name, final JmsManagerConfiguration data)",
                        "originalFullName": "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager:org.apache.logging.log4j.core.appender.mom.JmsManager(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 19
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 24
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": {
                        "lineNumber": [
                            {
                                "19": "public JndiContextSelector() {"
                            },
                            {
                                "20": "if (!JndiManager.isJndiEnabled()) {"
                            },
                            {
                                "21": "throw new IllegalStateException(\"JNDI must be enabled by setting log4j2.enableJndi=true\");"
                            },
                            {
                                "22": "}"
                            },
                            {
                                "23": ""
                            },
                            {
                                "24": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>:void()"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 16,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 87,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 109
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 18,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 106,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 125
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": {
                        "lineNumber": [
                            {
                                "16": "public static boolean isJndiEnabled() {"
                            },
                            {
                                "17": "return PropertiesUtil.getProperties().getBooleanProperty(\"log4j2.enableJndi\", false);"
                            },
                            {
                                "18": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": {
                        "lineNumber": [
                            {
                                "89": "if (context == null) {"
                            },
                            {
                                "90": "return null;"
                            },
                            {
                                "91": "}"
                            },
                            {
                                "92": ""
                            },
                            {
                                "93": "try {"
                            },
                            {
                                "94": "URI uri = new URI(name);"
                            },
                            {
                                "95": "if (uri.getScheme() == null || uri.getScheme().equals(\"java\")) {"
                            },
                            {
                                "99": "LOGGER.warn(\"Unsupported JNDI URI - {}\", name);"
                            },
                            {
                                "100": "}"
                            },
                            {
                                "101": "catch (URISyntaxException ex) {"
                            },
                            {
                                "102": "LOGGER.warn(\"Invalid  JNDI URI - {}\", name);"
                            },
                            {
                                "103": "}"
                            },
                            {
                                "104": ""
                            },
                            {
                                "105": "return null;"
                            },
                            {
                                "106": "}"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.lookup:java.lang.Object(java.lang.String)"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": {
                        "lineNumber": [
                            {
                                "111": "if (isJndiEnabled()) {"
                            },
                            {
                                "121": "else {"
                            },
                            {
                                "122": "return new JndiManager(name, null);"
                            },
                            {
                                "123": "}"
                            },
                            {
                                "124": ""
                            },
                            {
                                "125": "}"
                            }
                        ],
                        "paramType": "(final String name, final Properties data)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager:org.apache.logging.log4j.core.net.JndiManager(java.lang.String,java.util.Properties)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-44832": {
        "old_methods_info": [
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 89
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 106
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": {
                        "lineNumber": [
                            {
                                "91": "if (JndiManager.isJndiEnabled()) {"
                            },
                            {
                                "101": "else {"
                            },
                            {
                                "102": "logger().error(\"Jndi has not been enabled. The log4j2.enableJndi property must be set to true\");"
                            },
                            {
                                "103": "return null;"
                            },
                            {
                                "104": "}"
                            }
                        ],
                        "paramType": "(final String name, final JmsManagerConfiguration data)",
                        "originalFullName": "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager:org.apache.logging.log4j.core.appender.mom.JmsManager(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)"
                    }
                }
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": 10
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": 14
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": {
                        "lineNumber": [
                            {
                                "12": "LOGGER.warn(\"Attempt to use JNDI Lookup\");"
                            },
                            {
                                "13": "return RESULT;"
                            }
                        ],
                        "paramType": "(final LogEvent event, final String key)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.JndiLookup.lookup:java.lang.String(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 16,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 87,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 109
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 18,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 106,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 125
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": {
                        "lineNumber": [
                            {
                                "17": "return PropertiesUtil.getProperties().getBooleanProperty(\"log4j2.enableJndi\", false);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": {
                        "lineNumber": [
                            {
                                "95": "if (uri.getScheme() == null || uri.getScheme().equals(\"java\")) {"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.lookup:java.lang.Object(java.lang.String)"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": {
                        "lineNumber": [
                            {
                                "111": "if (isJndiEnabled()) {"
                            },
                            {
                                "116": "LOGGER.error(\"Error creating JNDI InitialContext.\", e);"
                            },
                            {
                                "121": "else {"
                            },
                            {
                                "122": "return new JndiManager(name, null);"
                            },
                            {
                                "123": "}"
                            },
                            {
                                "124": ""
                            },
                            {
                                "125": "}"
                            }
                        ],
                        "paramType": "(final String name, final Properties data)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager:org.apache.logging.log4j.core.net.JndiManager(java.lang.String,java.util.Properties)"
                    }
                }
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": 51
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": 76
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": {
                        "lineNumber": [
                            {
                                "58": "manager = factory.createManager(name, data);"
                            }
                        ],
                        "paramType": "(final String name, final ManagerFactory<M, T> factory, final T data)",
                        "originalFullName": "org.apache.logging.log4j.core.appender.AbstractManager.getManager:org.apache.logging.log4j.core.appender.AbstractManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
                    }
                }
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": 28
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": 47
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": {
                        "lineNumber": [
                            {
                                "36": "if (!clazz.getName().equals(\"org.apache.logging.log4j.core.lookup.JndiLookup\")) {"
                            }
                        ],
                        "paramType": "(final StrLookup defaultLookup, final List<String> pluginPackages)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.Interpolator.<init>:void(org.apache.logging.log4j.core.lookup.StrLookup,java.util.List)"
                    }
                }
            },
            {
                "oldFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java",
                "deleteMethodBegin": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 19
                },
                "deleteMethodEnd": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 24
                },
                "deleteMethodFull": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": {
                        "lineNumber": [
                            {
                                "20": "if (!JndiManager.isJndiEnabled()) {"
                            },
                            {
                                "21": "throw new IllegalStateException(\"JNDI must be enabled by setting log4j2.enableJndi=true\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>:void()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/mom/JmsManager.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 89
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": 104
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager(final String name, final JmsManagerConfiguration data)": {
                        "lineNumber": [
                            {
                                "91": "if (JndiManager.isJndiJmsEnabled()) {"
                            },
                            {
                                "102": "logger().error(\"JNDI must be enabled by setting log4j2.enableJndiJms=true\");"
                            },
                            {
                                "103": "return null;"
                            }
                        ],
                        "paramType": "(final String name, final JmsManagerConfiguration data)",
                        "originalFullName": "org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerFactory.createManager:org.apache.logging.log4j.core.appender.mom.JmsManager(java.lang.String,org.apache.logging.log4j.core.appender.mom.JmsManager$JmsManagerConfiguration)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/JndiLookup.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.<init>()": 16,
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": 23,
                    "org.apache.logging.log4j.core.lookup.JndiLookup.convertJndiName(final String jndiName)": 40
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.<init>()": 21,
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": 38,
                    "org.apache.logging.log4j.core.lookup.JndiLookup.convertJndiName(final String jndiName)": 46
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.lookup.JndiLookup.<init>()": {
                        "lineNumber": [
                            {
                                "16": "public JndiLookup() {"
                            },
                            {
                                "17": "if (!JndiManager.isJndiLookupEnabled()) {"
                            },
                            {
                                "18": "throw new IllegalStateException(\"JNDI must be enabled by setting log4j2.enableJndiLookup=true\");"
                            },
                            {
                                "19": "}"
                            },
                            {
                                "20": ""
                            },
                            {
                                "21": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.JndiLookup.<init>:void()"
                    },
                    "org.apache.logging.log4j.core.lookup.JndiLookup.lookup(final LogEvent event, final String key)": {
                        "lineNumber": [
                            {
                                "25": "if (key == null) {"
                            },
                            {
                                "26": "return null;"
                            },
                            {
                                "27": "}"
                            },
                            {
                                "28": ""
                            },
                            {
                                "29": "final String jndiName = convertJndiName(key);"
                            },
                            {
                                "30": "try (final JndiManager jndiManager = JndiManager.getDefaultManager()) {"
                            },
                            {
                                "31": "return Objects.toString(jndiManager.lookup(jndiName), null);"
                            },
                            {
                                "32": "}"
                            },
                            {
                                "33": "catch (final NamingException e) {"
                            },
                            {
                                "34": "LOGGER.warn(LOOKUP, \"Error looking up JNDI resource [{}].\", jndiName, e);"
                            },
                            {
                                "35": "return null;"
                            },
                            {
                                "36": "}"
                            },
                            {
                                "37": ""
                            },
                            {
                                "38": "}"
                            }
                        ],
                        "paramType": "(final LogEvent event, final String key)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.JndiLookup.lookup:java.lang.String(org.apache.logging.log4j.core.LogEvent,java.lang.String)"
                    },
                    "org.apache.logging.log4j.core.lookup.JndiLookup.convertJndiName(final String jndiName)": {
                        "lineNumber": [
                            {
                                "40": "private String convertJndiName(final String jndiName) {"
                            },
                            {
                                "41": "if (!jndiName.startsWith(CONTAINER_JNDI_RESOURCE_PATH_PREFIX) && jndiName.indexOf(':') == -1) {"
                            },
                            {
                                "42": "return CONTAINER_JNDI_RESOURCE_PATH_PREFIX + jndiName;"
                            },
                            {
                                "43": "}"
                            },
                            {
                                "44": ""
                            },
                            {
                                "45": "return jndiName;"
                            }
                        ],
                        "paramType": "(final String jndiName)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.JndiLookup.convertJndiName:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/net/JndiManager.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled(final String subKey)": 18,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 22,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiContextSelectorEnabled()": 26,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiJmsEnabled()": 30,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiLookupEnabled()": 34,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 105,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 127
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled(final String subKey)": 20,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": 24,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiContextSelectorEnabled()": 28,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiJmsEnabled()": 32,
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiLookupEnabled()": 36,
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": 124,
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": 141
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled(final String subKey)": {
                        "lineNumber": [
                            {
                                "18": "private static boolean isJndiEnabled(final String subKey) {"
                            },
                            {
                                "19": "return PropertiesUtil.getProperties().getBooleanProperty(PREFIX + subKey, false);"
                            },
                            {
                                "20": "}"
                            }
                        ],
                        "paramType": "(final String subKey)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled:boolean(java.lang.String)"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled()": {
                        "lineNumber": [
                            {
                                "23": "return isJndiContextSelectorEnabled() || isJndiJmsEnabled() || isJndiLookupEnabled();"
                            },
                            {
                                "24": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiContextSelectorEnabled()": {
                        "lineNumber": [
                            {
                                "26": "public static boolean isJndiContextSelectorEnabled() {"
                            },
                            {
                                "27": "return isJndiEnabled(\"ContextSelector\");"
                            },
                            {
                                "28": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiContextSelectorEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiJmsEnabled()": {
                        "lineNumber": [
                            {
                                "30": "public static boolean isJndiJmsEnabled() {"
                            },
                            {
                                "31": "return isJndiEnabled(\"Jms\");"
                            },
                            {
                                "32": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiJmsEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.isJndiLookupEnabled()": {
                        "lineNumber": [
                            {
                                "34": "public static boolean isJndiLookupEnabled() {"
                            },
                            {
                                "35": "return isJndiEnabled(\"Lookup\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.isJndiLookupEnabled:boolean()"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager.lookup(final String name)": {
                        "lineNumber": [
                            {
                                "113": "if (uri.getScheme() == null || uri.getScheme().equals(JAVA_SCHEME)) {"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager.lookup:java.lang.Object(java.lang.String)"
                    },
                    "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager(final String name, final Properties data)": {
                        "lineNumber": [
                            {
                                "129": "if (!isJndiEnabled()) {"
                            },
                            {
                                "130": "throw new IllegalStateException(String.format(\"JNDI must be enabled by setting one of the %s* properties to true\", PREFIX));"
                            },
                            {
                                "131": "}"
                            },
                            {
                                "132": ""
                            },
                            {
                                "137": "LOGGER.error(\"Error creating JNDI InitialContext for '{}'.\", name, e);"
                            }
                        ],
                        "paramType": "(final String name, final Properties data)",
                        "originalFullName": "org.apache.logging.log4j.core.net.JndiManager$JndiManagerFactory.createManager:org.apache.logging.log4j.core.net.JndiManager(java.lang.String,java.util.Properties)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/appender/AbstractManager.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": 52
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": 77
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.appender.AbstractManager.getManager(final String name, final ManagerFactory<M, T> factory, final T data)": {
                        "lineNumber": [
                            {
                                "59": "manager = Objects.requireNonNull(factory, \"factory\").createManager(name, data);"
                            }
                        ],
                        "paramType": "(final String name, final ManagerFactory<M, T> factory, final T data)",
                        "originalFullName": "org.apache.logging.log4j.core.appender.AbstractManager.getManager:org.apache.logging.log4j.core.appender.AbstractManager(java.lang.String,org.apache.logging.log4j.core.appender.ManagerFactory,java.lang.Object)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/lookup/Interpolator.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": 29,
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final Map<String, String> properties)": 54
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": 48,
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final Map<String, String> properties)": 101
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final StrLookup defaultLookup, final List<String> pluginPackages)": {
                        "lineNumber": [
                            {
                                "37": "if (!clazz.getName().equals(\"org.apache.logging.log4j.core.lookup.JndiLookup\") || JndiManager.isJndiLookupEnabled()) {"
                            }
                        ],
                        "paramType": "(final StrLookup defaultLookup, final List<String> pluginPackages)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.Interpolator.<init>:void(org.apache.logging.log4j.core.lookup.StrLookup,java.util.List)"
                    },
                    "org.apache.logging.log4j.core.lookup.Interpolator.<init>(final Map<String, String> properties)": {
                        "lineNumber": [
                            {
                                "62": "if (JndiManager.isJndiLookupEnabled()) {"
                            },
                            {
                                "63": "try {"
                            },
                            {
                                "64": "strLookupMap.put(LOOKUP_KEY_JNDI, Loader.newCheckedInstanceOf(\"org.apache.logging.log4j.core.lookup.JndiLookup\", StrLookup.class));"
                            },
                            {
                                "65": "}"
                            },
                            {
                                "66": "catch (final LinkageError | Exception e) {"
                            },
                            {
                                "67": "handleError(LOOKUP_KEY_JNDI, e);"
                            },
                            {
                                "68": "}"
                            },
                            {
                                "69": ""
                            },
                            {
                                "70": "}"
                            },
                            {
                                "71": ""
                            }
                        ],
                        "paramType": "(final Map<String, String> properties)",
                        "originalFullName": "org.apache.logging.log4j.core.lookup.Interpolator.<init>:void(java.util.Map)"
                    }
                }
            },
            {
                "newFilePath": "log4j-core/src/main/java/org/apache/logging/log4j/core/selector/JndiContextSelector.java",
                "addMethodBegin": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 19
                },
                "addMethodEnd": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": 24
                },
                "addMethodFull": {
                    "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>()": {
                        "lineNumber": [
                            {
                                "20": "if (!JndiManager.isJndiContextSelectorEnabled()) {"
                            },
                            {
                                "21": "throw new IllegalStateException(\"JNDI must be enabled by setting log4j2.enableJndiContextSelector=true\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.logging.log4j.core.selector.JndiContextSelector.<init>:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-41973": {
        "old_methods_info": [],
        "new_methods_info": [],
        "commit_message_info": {
            "method_names": [
                "checkIn"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2013-2055": {
        "old_methods_info": [
            {
                "oldFilePath": "wicket/src/main/java/org/apache/wicket/markup/html/PackageResourceGuard.java",
                "deleteMethodBegin": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": 26
                },
                "deleteMethodEnd": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": 63
                },
                "deleteMethodFull": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": {
                        "lineNumber": [
                            {
                                "38": "if (\"html\".equals(ext) && getClass().getClassLoader().getResource(path.replaceAll(\"\\\\.html\", \".class\")) != null){"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath:boolean(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "wicket/src/main/java/org/apache/wicket/markup/html/PackageResourceGuard.java",
                "addMethodBegin": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": 26
                },
                "addMethodEnd": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": 77
                },
                "addMethodFull": {
                    "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath(String path)": {
                        "lineNumber": [
                            {
                                "38": "if (\"html\".equals(ext)){"
                            },
                            {
                                "39": "String prefix = path.substring(0, ixExtension);"
                            },
                            {
                                "40": "ClassLoader classLoader = getClass().getClassLoader();"
                            },
                            {
                                "41": "while (true){"
                            },
                            {
                                "42": "if (classLoader.getResource(prefix + \".class\") != null){"
                            },
                            {
                                "47": "int ixUnderscore = prefix.lastIndexOf('_');"
                            },
                            {
                                "48": "if (ixUnderscore == -1){"
                            },
                            {
                                "49": "break;"
                            },
                            {
                                "50": "}"
                            },
                            {
                                "51": ""
                            },
                            {
                                "52": "prefix = prefix.substring(0, ixUnderscore);"
                            },
                            {
                                "53": "}"
                            },
                            {
                                "54": ""
                            },
                            {
                                "55": "}"
                            },
                            {
                                "56": ""
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.apache.wicket.markup.html.PackageResourceGuard.acceptAbsolutePath:boolean(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PackageResource"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-29546": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/net/sourceforge/htmlunit/cyberneko/HTMLScanner.java",
                "deleteMethodBegin": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": 2094
                },
                "deleteMethodEnd": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": 2237
                },
                "deleteMethodFull": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": {
                        "lineNumber": [
                            {
                                "2138": "if (c == '>') {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI:void()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/net/sourceforge/htmlunit/cyberneko/HTMLScanner.java",
                "addMethodBegin": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": 2094
                },
                "addMethodEnd": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": 2237
                },
                "addMethodFull": {
                    "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI()": {
                        "lineNumber": [
                            {
                                "2138": "if (c == -1 || c == '>') {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "net.sourceforge.htmlunit.cyberneko.HTMLScanner$ContentScanner.scanPI:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "HtmlUnit",
                "NekoHtml"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-33813": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/java/org/jdom2/input/SAXBuilder.java",
                "deleteMethodBegin": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": 277
                },
                "deleteMethodEnd": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": 348
                },
                "deleteMethodFull": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": {
                        "lineNumber": [
                            {
                                "317": "}"
                            },
                            {
                                "318": ""
                            },
                            {
                                "319": "for (final Map.Entry<String, Boolean> me : features.entrySet()) {"
                            },
                            {
                                "320": "internalSetFeature(parser, me.getKey(), me.getValue().booleanValue(), me.getKey());"
                            }
                        ],
                        "paramType": "(final XMLReader parser, final SAXHandler contentHandler)",
                        "originalFullName": "org.jdom2.input.SAXBuilder.configureParser:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/java/org/jdom2/input/SAXBuilder.java",
                "addMethodBegin": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": 277
                },
                "addMethodEnd": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": 348
                },
                "addMethodFull": {
                    "org.jdom2.input.SAXBuilder.configureParser(final XMLReader parser, final SAXHandler contentHandler)": {
                        "lineNumber": [
                            {
                                "344": "for (final Map.Entry<String, Boolean> me : features.entrySet()) {"
                            },
                            {
                                "345": "internalSetFeature(parser, me.getKey(), me.getValue().booleanValue(), me.getKey());"
                            },
                            {
                                "346": "}"
                            },
                            {
                                "347": ""
                            }
                        ],
                        "paramType": "(final XMLReader parser, final SAXHandler contentHandler)",
                        "originalFullName": "org.jdom2.input.SAXBuilder.configureParser:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "setFeature",
                "caseAn"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-16771": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": 141,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": 151,
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": 157
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": 149,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": 155,
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": 159
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": {
                        "lineNumber": [
                            {
                                "148": "return cached != null ? cached : AsciiString.cached(lowerCased);"
                            }
                        ],
                        "paramType": "(CharSequence name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.of:io.netty.util.AsciiString(java.lang.CharSequence)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": {
                        "lineNumber": [
                            {
                                "154": "return cached != null ? cached : lowerCased;"
                            }
                        ],
                        "paramType": "(AsciiString name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.of:<unresolvedSignature>(1)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": {
                        "lineNumber": [
                            {
                                "157": "private static AsciiString create(String name) {"
                            },
                            {
                                "158": "return AsciiString.cached(Ascii.toLowerCase(name));"
                            }
                        ],
                        "paramType": "(String name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.create:io.netty.util.AsciiString(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": 496,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": 504,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": 516,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": 544,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": 554,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": 595,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": 604,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": 617,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": 694,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": 707,
                    "com.linecorp.armeria.common.HttpHeadersBase.normalizeName(CharSequence name)": 768
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": 502,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": 514,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": 526,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": 552,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": 562,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": 602,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": 615,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": 628,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": 705,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": 718,
                    "com.linecorp.armeria.common.HttpHeadersBase.normalizeName(CharSequence name)": 771
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": {
                        "lineNumber": [
                            {
                                "497": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": {
                        "lineNumber": [
                            {
                                "505": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<String> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": {
                        "lineNumber": [
                            {
                                "517": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.String[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": {
                        "lineNumber": [
                            {
                                "545": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<?> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.addObject:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": {
                        "lineNumber": [
                            {
                                "555": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Object... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.addObject:void(java.lang.CharSequence,java.lang.Object[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": {
                        "lineNumber": [
                            {
                                "596": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": {
                        "lineNumber": [
                            {
                                "605": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<String> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": {
                        "lineNumber": [
                            {
                                "618": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.String[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": {
                        "lineNumber": [
                            {
                                "695": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<?> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.setObject:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": {
                        "lineNumber": [
                            {
                                "708": "final AsciiString normalizedName = normalizeName(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Object... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.setObject:void(java.lang.CharSequence,java.lang.Object[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.normalizeName(CharSequence name)": {
                        "lineNumber": [
                            {
                                "768": "private static AsciiString normalizeName(CharSequence name) {"
                            },
                            {
                                "769": "checkArgument(requireNonNull(name, \"name\").length() > 0, \"name is empty.\");"
                            },
                            {
                                "770": "return HttpHeaderNames.of(name);"
                            },
                            {
                                "771": "}"
                            }
                        ],
                        "paramType": "(CharSequence name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.normalizeName:io.netty.util.AsciiString(java.lang.CharSequence)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": 472
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": 499
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": {
                        "lineNumber": [
                            {
                                "475": "final AsciiString lowerCased = HttpHeaderNames.of(valuesIter.next()).toLowerCase();"
                            }
                        ],
                        "paramType": "(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)",
                        "originalFullName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap:com.linecorp.armeria.internal.ArmeriaHttpUtil$CharSequenceMap(java.util.Iterator,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/common/HttpHeaderNames.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": 171,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": 175,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": 189,
                    "com.linecorp.armeria.common.HttpHeaderNames.validate(AsciiString name)": 199,
                    "com.linecorp.armeria.common.HttpHeaderNames.malformedHeaderNameMessage(AsciiString name)": 227
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": 173,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": 187,
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": 197,
                    "com.linecorp.armeria.common.HttpHeaderNames.validate(AsciiString name)": 225,
                    "com.linecorp.armeria.common.HttpHeaderNames.malformedHeaderNameMessage(AsciiString name)": 243
                },
                "addMethodFull": {
                    "com.linecorp.armeria.common.HttpHeaderNames.create(String name)": {
                        "lineNumber": [
                            {
                                "171": "private static AsciiString create(String name) {"
                            },
                            {
                                "172": "return AsciiString.cached(Ascii.toLowerCase(name));"
                            },
                            {
                                "173": "}"
                            }
                        ],
                        "paramType": "(String name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.create:io.netty.util.AsciiString(java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.of(CharSequence name)": {
                        "lineNumber": [
                            {
                                "182": "if (cached != null) {"
                            },
                            {
                                "183": "return cached;"
                            },
                            {
                                "184": "}"
                            },
                            {
                                "185": ""
                            },
                            {
                                "186": "return validate(AsciiString.cached(lowerCased));"
                            }
                        ],
                        "paramType": "(CharSequence name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.of:io.netty.util.AsciiString(java.lang.CharSequence)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.of(AsciiString name)": {
                        "lineNumber": [
                            {
                                "192": "if (cached != null) {"
                            },
                            {
                                "193": "return cached;"
                            },
                            {
                                "196": "return validate(lowerCased);"
                            },
                            {
                                "197": "}"
                            }
                        ],
                        "paramType": "(AsciiString name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.of:<unresolvedSignature>(1)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.validate(AsciiString name)": {
                        "lineNumber": [
                            {
                                "199": "private static AsciiString validate(AsciiString name) {"
                            },
                            {
                                "200": "if (name.isEmpty()) {"
                            },
                            {
                                "201": "throw new IllegalArgumentException(\"malformed header name: <EMPTY>\");"
                            },
                            {
                                "202": "}"
                            },
                            {
                                "203": ""
                            },
                            {
                                "204": "final int lastIndex;"
                            },
                            {
                                "205": "try {"
                            },
                            {
                                "206": "lastIndex = name.forEachByte(value -> {"
                            },
                            {
                                "207": "if ((value & PROHIBITED_NAME_CHAR_MASK) != 0) {"
                            },
                            {
                                "208": "return true;"
                            },
                            {
                                "209": "}"
                            },
                            {
                                "210": ""
                            },
                            {
                                "211": "return !PROHIBITED_NAME_CHARS.get(value);"
                            },
                            {
                                "212": "}"
                            },
                            {
                                "213": ""
                            },
                            {
                                "214": ");"
                            },
                            {
                                "215": "}"
                            },
                            {
                                "216": "catch (Exception e) {"
                            },
                            {
                                "217": "throw new Error(e);"
                            },
                            {
                                "218": "}"
                            },
                            {
                                "219": ""
                            },
                            {
                                "220": "if (lastIndex >= 0) {"
                            },
                            {
                                "221": "throw new IllegalArgumentException(malformedHeaderNameMessage(name));"
                            },
                            {
                                "222": "}"
                            },
                            {
                                "223": ""
                            },
                            {
                                "224": "return name;"
                            },
                            {
                                "225": "}"
                            }
                        ],
                        "paramType": "(AsciiString name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.validate:<unresolvedSignature>(1)"
                    },
                    "com.linecorp.armeria.common.HttpHeaderNames.malformedHeaderNameMessage(AsciiString name)": {
                        "lineNumber": [
                            {
                                "227": "private static String malformedHeaderNameMessage(AsciiString name) {"
                            },
                            {
                                "228": "final StringBuilder buf = new StringBuilder(IntMath.saturatedAdd(name.length(), 64));"
                            },
                            {
                                "229": "buf.append(\"malformed header name: \");"
                            },
                            {
                                "230": "final int nameLength = name.length();"
                            },
                            {
                                "231": "for (int i = 0; i < nameLength; i++) {"
                            },
                            {
                                "232": "final char ch = name.charAt(i);"
                            },
                            {
                                "233": "if (PROHIBITED_NAME_CHARS.get(ch)) {"
                            },
                            {
                                "234": "buf.append(PROHIBITED_NAME_CHAR_NAMES[ch]);"
                            },
                            {
                                "235": "}"
                            },
                            {
                                "236": "else {"
                            },
                            {
                                "237": "buf.append(ch);"
                            },
                            {
                                "238": "}"
                            },
                            {
                                "239": ""
                            },
                            {
                                "240": "}"
                            },
                            {
                                "241": ""
                            },
                            {
                                "242": "return buf.toString();"
                            }
                        ],
                        "paramType": "(AsciiString name)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeaderNames.malformedHeaderNameMessage:<unresolvedSignature>(1)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/common/HttpHeadersBase.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": 513,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": 521,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": 533,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": 561,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": 571,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": 612,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": 621,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": 634,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": 711,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": 724,
                    "com.linecorp.armeria.common.HttpHeadersBase.add0(int h, int i, AsciiString name, String value)": 796,
                    "com.linecorp.armeria.common.HttpHeadersBase.validateValue(String value)": 801,
                    "com.linecorp.armeria.common.HttpHeadersBase.malformedHeaderValueMessage(String value)": 817
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": 519,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": 531,
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": 543,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": 569,
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": 579,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": 619,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": 632,
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": 645,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": 722,
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": 735,
                    "com.linecorp.armeria.common.HttpHeadersBase.add0(int h, int i, AsciiString name, String value)": 799,
                    "com.linecorp.armeria.common.HttpHeadersBase.validateValue(String value)": 815,
                    "com.linecorp.armeria.common.HttpHeadersBase.malformedHeaderValueMessage(String value)": 833
                },
                "addMethodFull": {
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String value)": {
                        "lineNumber": [
                            {
                                "514": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, Iterable<String> values)": {
                        "lineNumber": [
                            {
                                "522": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<String> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.add(CharSequence name, String... values)": {
                        "lineNumber": [
                            {
                                "534": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add:void(java.lang.CharSequence,java.lang.String[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Iterable<?> values)": {
                        "lineNumber": [
                            {
                                "562": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<?> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.addObject:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.addObject(CharSequence name, Object... values)": {
                        "lineNumber": [
                            {
                                "572": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Object... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.addObject:void(java.lang.CharSequence,java.lang.Object[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String value)": {
                        "lineNumber": [
                            {
                                "613": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, Iterable<String> values)": {
                        "lineNumber": [
                            {
                                "622": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<String> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.set(CharSequence name, String... values)": {
                        "lineNumber": [
                            {
                                "635": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, String... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.set:void(java.lang.CharSequence,java.lang.String[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Iterable<?> values)": {
                        "lineNumber": [
                            {
                                "712": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Iterable<?> values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.setObject:void(java.lang.CharSequence,java.lang.Iterable)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.setObject(CharSequence name, Object... values)": {
                        "lineNumber": [
                            {
                                "725": "final AsciiString normalizedName = HttpHeaderNames.of(name);"
                            }
                        ],
                        "paramType": "(CharSequence name, Object... values)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.setObject:void(java.lang.CharSequence,java.lang.Object[])"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.add0(int h, int i, AsciiString name, String value)": {
                        "lineNumber": [
                            {
                                "797": "validateValue(value);"
                            }
                        ],
                        "paramType": "(int h, int i, AsciiString name, String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.add0:<unresolvedSignature>(4)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.validateValue(String value)": {
                        "lineNumber": [
                            {
                                "801": "private static void validateValue(String value) {"
                            },
                            {
                                "802": "final int valueLength = value.length();"
                            },
                            {
                                "803": "for (int i = 0; i < valueLength; i++) {"
                            },
                            {
                                "804": "final char ch = value.charAt(i);"
                            },
                            {
                                "805": "if ((ch & PROHIBITED_VALUE_CHAR_MASK) != 0) {"
                            },
                            {
                                "806": "continue;"
                            },
                            {
                                "807": "}"
                            },
                            {
                                "808": ""
                            },
                            {
                                "809": "if (PROHIBITED_VALUE_CHARS.get(ch)) {"
                            },
                            {
                                "810": "throw new IllegalArgumentException(malformedHeaderValueMessage(value));"
                            },
                            {
                                "811": "}"
                            },
                            {
                                "812": ""
                            },
                            {
                                "813": "}"
                            },
                            {
                                "814": ""
                            },
                            {
                                "815": "}"
                            }
                        ],
                        "paramType": "(String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.validateValue:void(java.lang.String)"
                    },
                    "com.linecorp.armeria.common.HttpHeadersBase.malformedHeaderValueMessage(String value)": {
                        "lineNumber": [
                            {
                                "817": "private static String malformedHeaderValueMessage(String value) {"
                            },
                            {
                                "818": "final StringBuilder buf = new StringBuilder(IntMath.saturatedAdd(value.length(), 64));"
                            },
                            {
                                "819": "buf.append(\"malformed header value: \");"
                            },
                            {
                                "820": "final int valueLength = value.length();"
                            },
                            {
                                "821": "for (int i = 0; i < valueLength; i++) {"
                            },
                            {
                                "822": "final char ch = value.charAt(i);"
                            },
                            {
                                "823": "if (PROHIBITED_VALUE_CHARS.get(ch)) {"
                            },
                            {
                                "824": "buf.append(PROHIBITED_VALUE_CHAR_NAMES[ch]);"
                            },
                            {
                                "825": "}"
                            },
                            {
                                "826": "else {"
                            },
                            {
                                "827": "buf.append(ch);"
                            },
                            {
                                "828": "}"
                            },
                            {
                                "829": ""
                            },
                            {
                                "830": "}"
                            },
                            {
                                "831": ""
                            },
                            {
                                "832": "return buf.toString();"
                            },
                            {
                                "833": "}"
                            }
                        ],
                        "paramType": "(String value)",
                        "originalFullName": "com.linecorp.armeria.common.HttpHeadersBase.malformedHeaderValueMessage:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/internal/ArmeriaHttpUtil.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": 472
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": 499
                },
                "addMethodFull": {
                    "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)": {
                        "lineNumber": [
                            {
                                "475": "final AsciiString lowerCased = AsciiString.of(valuesIter.next()).toLowerCase();"
                            }
                        ],
                        "paramType": "(Iterator<? extends CharSequence> valuesIter, int arraySizeHint)",
                        "originalFullName": "com.linecorp.armeria.internal.ArmeriaHttpUtil.toLowercaseMap:com.linecorp.armeria.internal.ArmeriaHttpUtil$CharSequenceMap(java.util.Iterator,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-43795": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/server/RoutingResultBuilder.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": 47
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": 50
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": {
                        "lineNumber": [
                            {
                                "48": "pathParams().put(requireNonNull(name, \"name\"), ArmeriaHttpUtil.decodePath(requireNonNull(value, \"value\")));"
                            }
                        ],
                        "paramType": "(String name, String value)",
                        "originalFullName": "com.linecorp.armeria.server.RoutingResultBuilder.rawParam:com.linecorp.armeria.server.RoutingResultBuilder(java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": 170
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": 206
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": {
                        "lineNumber": [
                            {
                                "198": "buf[dstLen++] = (byte) ((digit1 << 4) | digit2);"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "core/src/main/java/com/linecorp/armeria/internal/common/PathAndQuery.java",
                "deleteMethodBegin": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": 127,
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": 136,
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": 174,
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": 328,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeToPercents(Bytes value, boolean isPath)": 347,
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendHexNibble(StringBuilder buf, int nibble)": 400,
                    "com.linecorp.armeria.internal.common.PathAndQuery$ReservedChar.<init>(int rawChar, String percentEncodedChar, byte marker)": 482
                },
                "deleteMethodEnd": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": 134,
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": 172,
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": 294,
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": 345,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeToPercents(Bytes value, boolean isPath)": 398,
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendHexNibble(StringBuilder buf, int nibble)": 408,
                    "com.linecorp.armeria.internal.common.PathAndQuery$ReservedChar.<init>(int rawChar, String percentEncodedChar, byte marker)": 486
                },
                "deleteMethodFull": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": {
                        "lineNumber": [
                            {
                                "133": "return path + \"?\" + query;"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.toString:java.lang.String()"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": {
                        "lineNumber": [
                            {
                                "163": "if (path.data[0] != '/') {"
                            },
                            {
                                "167": "if (pathContainsDoubleDots(path)) {"
                            },
                            {
                                "171": "return new PathAndQuery(encodeToPercents(path, true), query != null ? encodeToPercents(query, false) : null);"
                            }
                        ],
                        "paramType": "(@Nullable final String pathAndQuery)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery:com.linecorp.armeria.internal.common.PathAndQuery(java.lang.String)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": {
                        "lineNumber": [
                            {
                                "200": "final byte marker = RAW_CHAR_TO_MARKER['/'];"
                            },
                            {
                                "201": "buf.ensure(2);"
                            },
                            {
                                "202": "buf.add((byte) PERCENT_ENCODING_MARKER);"
                            },
                            {
                                "203": "buf.add(marker);"
                            },
                            {
                                "218": "final byte marker = RAW_CHAR_TO_MARKER[decoded];"
                            },
                            {
                                "219": "if (marker != 0) {"
                            },
                            {
                                "220": "buf.ensure(2);"
                            },
                            {
                                "221": "buf.add((byte) PERCENT_ENCODING_MARKER);"
                            },
                            {
                                "222": "buf.add(marker);"
                            },
                            {
                                "240": "buf.add((byte) ' ');"
                            },
                            {
                                "256": "buf.add((byte) ((cp >>> 6) | 0b110_00000));"
                            },
                            {
                                "257": "buf.add((byte) (cp & 0b111111 | 0b10_000000));"
                            },
                            {
                                "261": "buf.add((byte) ((cp >>> 12) | 0b1110_0000));"
                            },
                            {
                                "262": "buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "263": "buf.add((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "267": "buf.add((byte) ((cp >>> 18) | 0b11110_000));"
                            },
                            {
                                "268": "buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "269": "buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "270": "buf.add((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "274": "buf.add((byte) ((cp >>> 24) | 0b111110_00));"
                            },
                            {
                                "275": "buf.add((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "276": "buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "277": "buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "278": "buf.add((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "282": "buf.add((byte) ((cp >>> 30) | 0b1111110_0));"
                            },
                            {
                                "283": "buf.add((byte) (((cp >>> 24) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "284": "buf.add((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "285": "buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "286": "buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "287": "buf.add((byte) ((cp & 0b111111) | 0b10_000000));"
                            }
                        ],
                        "paramType": "(String value, int start, int end, boolean isPath)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8:com.linecorp.armeria.internal.common.PathAndQuery$Bytes(java.lang.String,int,int,boolean)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": {
                        "lineNumber": [
                            {
                                "335": "if (b3 == '/' && b2 == '.' && b1 == '.' && b0 == '/') {"
                            },
                            {
                                "344": "return b0 == '/' && b1 == '.' && b2 == '.';"
                            }
                        ],
                        "paramType": "(Bytes path)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots:boolean(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeToPercents(Bytes value, boolean isPath)": {
                        "lineNumber": [
                            {
                                "347": "private static String encodeToPercents(Bytes value, boolean isPath) {"
                            },
                            {
                                "348": "final BitSet allowedChars = isPath ? ALLOWED_PATH_CHARS : ALLOWED_QUERY_CHARS;"
                            },
                            {
                                "349": "final int length = value.length;"
                            },
                            {
                                "350": "boolean needsEncoding = false;"
                            },
                            {
                                "352": "if (!allowedChars.get(value.data[i] & 0xFF)) {"
                            },
                            {
                                "353": "needsEncoding = true;"
                            },
                            {
                                "359": "if (!needsEncoding) {"
                            },
                            {
                                "360": "return new String(value.data, 0, 0, length);"
                            },
                            {
                                "363": "final StringBuilder buf = new StringBuilder(length);"
                            },
                            {
                                "364": "for (int i = 0; i < length; i++) {"
                            },
                            {
                                "365": "final int b = value.data[i] & 0xFF;"
                            },
                            {
                                "366": "if (b == PERCENT_ENCODING_MARKER && (i + 1) < length) {"
                            },
                            {
                                "367": "final int marker = value.data[i + 1] & 0xFF;"
                            },
                            {
                                "368": "final String percentEncodedChar = MARKER_TO_PERCENT_ENCODED_CHAR[marker];"
                            },
                            {
                                "369": "if (percentEncodedChar != null) {"
                            },
                            {
                                "370": "buf.append(percentEncodedChar);"
                            },
                            {
                                "371": "i++;"
                            },
                            {
                                "372": "continue;"
                            },
                            {
                                "377": "if (allowedChars.get(b)) {"
                            },
                            {
                                "378": "buf.append((char) b);"
                            },
                            {
                                "380": "else if (b == ' ') {"
                            },
                            {
                                "381": "if (isPath) {"
                            },
                            {
                                "382": "buf.append(\"%20\");"
                            },
                            {
                                "384": "else {"
                            },
                            {
                                "385": "buf.append('+');"
                            },
                            {
                                "389": "else {"
                            },
                            {
                                "390": "buf.append('%');"
                            },
                            {
                                "391": "appendHexNibble(buf, b >>> 4);"
                            },
                            {
                                "392": "appendHexNibble(buf, b & 0xF);"
                            }
                        ],
                        "paramType": "(Bytes value, boolean isPath)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.encodeToPercents:java.lang.String(com.linecorp.armeria.internal.common.PathAndQuery$Bytes,boolean)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendHexNibble(StringBuilder buf, int nibble)": {
                        "lineNumber": [
                            {
                                "400": "private static void appendHexNibble(StringBuilder buf, int nibble) {"
                            },
                            {
                                "401": "if (nibble < 10) {"
                            },
                            {
                                "402": "buf.append((char) ('0' + nibble));"
                            },
                            {
                                "405": "buf.append((char) ('A' + nibble - 10));"
                            }
                        ],
                        "paramType": "(StringBuilder buf, int nibble)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.appendHexNibble:void(java.lang.StringBuilder,int)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery$ReservedChar.<init>(int rawChar, String percentEncodedChar, byte marker)": {
                        "lineNumber": [
                            {
                                "482": "ReservedChar(int rawChar, String percentEncodedChar, byte marker) {"
                            },
                            {
                                "483": "this.rawChar = rawChar;"
                            },
                            {
                                "484": "this.percentEncodedChar = percentEncodedChar;"
                            },
                            {
                                "485": "this.marker = marker;"
                            },
                            {
                                "486": "}"
                            }
                        ],
                        "paramType": "(int rawChar, String percentEncodedChar, byte marker)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery$ReservedChar.<init>:void(int,java.lang.String,byte)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/server/RoutingResultBuilder.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": 47
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": 50
                },
                "addMethodFull": {
                    "com.linecorp.armeria.server.RoutingResultBuilder.rawParam(String name, String value)": {
                        "lineNumber": [
                            {
                                "48": "pathParams().put(requireNonNull(name, \"name\"), ArmeriaHttpUtil.decodePathParam(requireNonNull(value, \"value\")));"
                            }
                        ],
                        "paramType": "(String name, String value)",
                        "originalFullName": "com.linecorp.armeria.server.RoutingResultBuilder.rawParam:com.linecorp.armeria.server.RoutingResultBuilder(java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/internal/common/ArmeriaHttpUtil.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": 170,
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePathParam(String pathParam)": 178,
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.slowDecodePath(String path, boolean decodeSlash)": 186
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": 176,
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePathParam(String pathParam)": 184,
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.slowDecodePath(String path, boolean decodeSlash)": 227
                },
                "addMethodFull": {
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath(String path)": {
                        "lineNumber": [
                            {
                                "175": "return slowDecodePath(path, false);"
                            },
                            {
                                "176": "}"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePath:java.lang.String(java.lang.String)"
                    },
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePathParam(String pathParam)": {
                        "lineNumber": [
                            {
                                "178": "public static String decodePathParam(String pathParam) {"
                            },
                            {
                                "179": "if (pathParam.indexOf('%') < 0) {"
                            },
                            {
                                "180": "return pathParam;"
                            },
                            {
                                "181": "}"
                            },
                            {
                                "182": ""
                            },
                            {
                                "183": "return slowDecodePath(pathParam, true);"
                            },
                            {
                                "184": "}"
                            }
                        ],
                        "paramType": "(String pathParam)",
                        "originalFullName": "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.decodePathParam:java.lang.String(java.lang.String)"
                    },
                    "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.slowDecodePath(String path, boolean decodeSlash)": {
                        "lineNumber": [
                            {
                                "186": "private static String slowDecodePath(String path, boolean decodeSlash) {"
                            },
                            {
                                "210": "final byte decoded = (byte) ((digit1 << 4) | digit2);"
                            },
                            {
                                "211": "if (decodeSlash || decoded != 0x2F) {"
                            },
                            {
                                "212": "buf[dstLen++] = decoded;"
                            },
                            {
                                "213": "}"
                            },
                            {
                                "214": "else {"
                            },
                            {
                                "215": "buf[dstLen++] = '%';"
                            },
                            {
                                "216": "buf[dstLen++] = '2';"
                            },
                            {
                                "217": "buf[dstLen++] = (byte) path.charAt(i);"
                            },
                            {
                                "218": "}"
                            },
                            {
                                "219": ""
                            }
                        ],
                        "paramType": "(String path, boolean decodeSlash)",
                        "originalFullName": "com.linecorp.armeria.internal.common.ArmeriaHttpUtil.slowDecodePath:java.lang.String(java.lang.String,boolean)"
                    }
                }
            },
            {
                "newFilePath": "core/src/main/java/com/linecorp/armeria/internal/common/PathAndQuery.java",
                "addMethodBegin": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": 130,
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": 139,
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": 177,
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendOneByte(Bytes buf, int cp, boolean wasSlash, boolean isPath)": 295,
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": 334,
                    "com.linecorp.armeria.internal.common.PathAndQuery.queryContainsDoubleDots(@Nullable Bytes query)": 353,
                    "com.linecorp.armeria.internal.common.PathAndQuery.isSlash(byte b)": 392,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodePathToPercents(Bytes value)": 402,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeQueryToPercents(@Nullable Bytes value)": 410,
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodePathToPercents(Bytes value)": 423,
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodeQueryToPercents(Bytes value)": 439,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.addEncoded(byte b)": 480,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.isEncoded(int index)": 490,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.hasEncodedBytes()": 494,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.numEncodedBytes()": 498
                },
                "addMethodEnd": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": 137,
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": 175,
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": 293,
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendOneByte(Bytes buf, int cp, boolean wasSlash, boolean isPath)": 332,
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": 351,
                    "com.linecorp.armeria.internal.common.PathAndQuery.queryContainsDoubleDots(@Nullable Bytes query)": 390,
                    "com.linecorp.armeria.internal.common.PathAndQuery.isSlash(byte b)": 400,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodePathToPercents(Bytes value)": 408,
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeQueryToPercents(@Nullable Bytes value)": 421,
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodePathToPercents(Bytes value)": 437,
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodeQueryToPercents(Bytes value)": 459,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.addEncoded(byte b)": 488,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.isEncoded(int index)": 492,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.hasEncodedBytes()": 496,
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.numEncodedBytes()": 500
                },
                "addMethodFull": {
                    "com.linecorp.armeria.internal.common.PathAndQuery.toString()": {
                        "lineNumber": [
                            {
                                "136": "return path + '?' + query;"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.toString:java.lang.String()"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery(@Nullable final String pathAndQuery)": {
                        "lineNumber": [
                            {
                                "166": "if (path.data[0] != '/' || path.isEncoded(0)) {"
                            },
                            {
                                "170": "if (pathContainsDoubleDots(path) || queryContainsDoubleDots(query)) {"
                            },
                            {
                                "174": "return new PathAndQuery(encodePathToPercents(path), encodeQueryToPercents(query));"
                            }
                        ],
                        "paramType": "(@Nullable final String pathAndQuery)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.splitPathAndQuery:com.linecorp.armeria.internal.common.PathAndQuery(java.lang.String)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8(String value, int start, int end, boolean isPath)": {
                        "lineNumber": [
                            {
                                "203": "buf.ensure(1);"
                            },
                            {
                                "204": "buf.addEncoded((byte) '/');"
                            },
                            {
                                "219": "if (RESERVED_CHARS.get(decoded)) {"
                            },
                            {
                                "220": "buf.ensure(1);"
                            },
                            {
                                "221": "buf.addEncoded((byte) decoded);"
                            },
                            {
                                "239": "buf.addEncoded((byte) ' ');"
                            },
                            {
                                "255": "buf.addEncoded((byte) ((cp >>> 6) | 0b110_00000));"
                            },
                            {
                                "256": "buf.addEncoded((byte) (cp & 0b111111 | 0b10_000000));"
                            },
                            {
                                "260": "buf.addEncoded((byte) ((cp >>> 12) | 0b1110_0000));"
                            },
                            {
                                "261": "buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "262": "buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "266": "buf.addEncoded((byte) ((cp >>> 18) | 0b11110_000));"
                            },
                            {
                                "267": "buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "268": "buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "269": "buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "273": "buf.addEncoded((byte) ((cp >>> 24) | 0b111110_00));"
                            },
                            {
                                "274": "buf.addEncoded((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "275": "buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "276": "buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "277": "buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));"
                            },
                            {
                                "281": "buf.addEncoded((byte) ((cp >>> 30) | 0b1111110_0));"
                            },
                            {
                                "282": "buf.addEncoded((byte) (((cp >>> 24) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "283": "buf.addEncoded((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "284": "buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "285": "buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));"
                            },
                            {
                                "286": "buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));"
                            }
                        ],
                        "paramType": "(String value, int start, int end, boolean isPath)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.decodePercentsAndEncodeToUtf8:com.linecorp.armeria.internal.common.PathAndQuery$Bytes(java.lang.String,int,int,boolean)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.appendOneByte(Bytes buf, int cp, boolean wasSlash, boolean isPath)": {
                        "lineNumber": [
                            {
                                "320": "final BitSet allowedChars = isPath ? ALLOWED_PATH_CHARS : ALLOWED_QUERY_CHARS;"
                            },
                            {
                                "322": "if (allowedChars.get(cp)) {"
                            },
                            {
                                "324": "}"
                            },
                            {
                                "325": "else {"
                            },
                            {
                                "326": "buf.addEncoded((byte) cp);"
                            },
                            {
                                "327": "}"
                            },
                            {
                                "328": ""
                            }
                        ],
                        "paramType": "(Bytes buf, int cp, boolean wasSlash, boolean isPath)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.appendOneByte:boolean(com.linecorp.armeria.internal.common.PathAndQuery$Bytes,int,boolean,boolean)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots(Bytes path)": {
                        "lineNumber": [
                            {
                                "341": "if (b1 == '.' && b2 == '.' && isSlash(b0) && isSlash(b3)) {"
                            },
                            {
                                "350": "return b1 == '.' && b2 == '.' && isSlash(b0);"
                            }
                        ],
                        "paramType": "(Bytes path)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.pathContainsDoubleDots:boolean(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.queryContainsDoubleDots(@Nullable Bytes query)": {
                        "lineNumber": [
                            {
                                "353": "private static boolean queryContainsDoubleDots(@Nullable Bytes query) {"
                            },
                            {
                                "354": "if (query == null) {"
                            },
                            {
                                "355": "return false;"
                            },
                            {
                                "356": "}"
                            },
                            {
                                "357": ""
                            },
                            {
                                "358": "final int length = query.length;"
                            },
                            {
                                "359": "boolean lookingForEquals = true;"
                            },
                            {
                                "360": "byte b0 = 0;"
                            },
                            {
                                "361": "byte b1 = 0;"
                            },
                            {
                                "362": "byte b2 = '/';"
                            },
                            {
                                "364": "byte b3 = query.data[i];"
                            },
                            {
                                "365": "switch (b3) {"
                            },
                            {
                                "366": "case '=':"
                            },
                            {
                                "367": "if (lookingForEquals) {"
                            },
                            {
                                "368": "lookingForEquals = false;"
                            },
                            {
                                "369": "b3 = '/';"
                            },
                            {
                                "370": "}"
                            },
                            {
                                "371": ""
                            },
                            {
                                "372": "break;"
                            },
                            {
                                "373": "case '&':"
                            },
                            {
                                "374": "case ';':"
                            },
                            {
                                "375": "b3 = '/';"
                            },
                            {
                                "376": "lookingForEquals = true;"
                            },
                            {
                                "380": "if (b1 == '.' && b2 == '.' && isSlash(b0) && isSlash(b3)) {"
                            },
                            {
                                "381": "return true;"
                            },
                            {
                                "384": "b0 = b1;"
                            },
                            {
                                "385": "b1 = b2;"
                            },
                            {
                                "386": "b2 = b3;"
                            },
                            {
                                "389": "return b1 == '.' && b2 == '.' && isSlash(b0);"
                            }
                        ],
                        "paramType": "(@Nullable Bytes query)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.queryContainsDoubleDots:boolean(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.isSlash(byte b)": {
                        "lineNumber": [
                            {
                                "392": "private static boolean isSlash(byte b) {"
                            },
                            {
                                "393": "switch (b) {"
                            },
                            {
                                "394": "case '/':"
                            },
                            {
                                "395": "case '\\\\':"
                            },
                            {
                                "396": "return true;"
                            },
                            {
                                "397": "default: return false;"
                            }
                        ],
                        "paramType": "(byte b)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.isSlash:boolean(byte)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodePathToPercents(Bytes value)": {
                        "lineNumber": [
                            {
                                "402": "private static String encodePathToPercents(Bytes value) {"
                            },
                            {
                                "403": "if (!value.hasEncodedBytes()) {"
                            },
                            {
                                "404": "return new String(value.data, 0, 0, value.length);"
                            },
                            {
                                "406": ""
                            },
                            {
                                "407": "return slowEncodePathToPercents(value);"
                            }
                        ],
                        "paramType": "(Bytes value)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.encodePathToPercents:java.lang.String(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.encodeQueryToPercents(@Nullable Bytes value)": {
                        "lineNumber": [
                            {
                                "410": "@Nullable"
                            },
                            {
                                "411": "private static String encodeQueryToPercents(@Nullable Bytes value) {"
                            },
                            {
                                "412": "if (value == null) {"
                            },
                            {
                                "413": "return null;"
                            },
                            {
                                "415": ""
                            },
                            {
                                "416": "if (!value.hasEncodedBytes()) {"
                            },
                            {
                                "417": "return new String(value.data, 0, 0, value.length);"
                            },
                            {
                                "420": "return slowEncodeQueryToPercents(value);"
                            },
                            {
                                "421": "}"
                            }
                        ],
                        "paramType": "(@Nullable Bytes value)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.encodeQueryToPercents:java.lang.String(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodePathToPercents(Bytes value)": {
                        "lineNumber": [
                            {
                                "423": "private static String slowEncodePathToPercents(Bytes value) {"
                            },
                            {
                                "424": "final int length = value.length;"
                            },
                            {
                                "425": "final StringBuilder buf = new StringBuilder(length + value.numEncodedBytes() * 2);"
                            },
                            {
                                "426": "for (int i = 0; i < length; i++) {"
                            },
                            {
                                "427": "final int b = value.data[i] & 0xFF;"
                            },
                            {
                                "428": "if (value.isEncoded(i)) {"
                            },
                            {
                                "429": "buf.append(TO_PERCENT_ENCODED_CHARS[b]);"
                            },
                            {
                                "430": "continue;"
                            },
                            {
                                "431": "}"
                            },
                            {
                                "432": ""
                            },
                            {
                                "433": "buf.append((char) b);"
                            }
                        ],
                        "paramType": "(Bytes value)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodePathToPercents:java.lang.String(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodeQueryToPercents(Bytes value)": {
                        "lineNumber": [
                            {
                                "439": "private static String slowEncodeQueryToPercents(Bytes value) {"
                            },
                            {
                                "440": "final int length = value.length;"
                            },
                            {
                                "441": "final StringBuilder buf = new StringBuilder(length + value.numEncodedBytes() * 2);"
                            },
                            {
                                "442": "for (int i = 0; i < length; i++) {"
                            },
                            {
                                "443": "final int b = value.data[i] & 0xFF;"
                            },
                            {
                                "444": "if (value.isEncoded(i)) {"
                            },
                            {
                                "445": "if (b == ' ') {"
                            },
                            {
                                "446": "buf.append('+');"
                            },
                            {
                                "449": "buf.append(TO_PERCENT_ENCODED_CHARS[b]);"
                            },
                            {
                                "450": "}"
                            },
                            {
                                "451": ""
                            },
                            {
                                "452": "continue;"
                            },
                            {
                                "453": "}"
                            },
                            {
                                "454": ""
                            },
                            {
                                "455": "buf.append((char) b);"
                            },
                            {
                                "458": "return buf.toString();"
                            }
                        ],
                        "paramType": "(Bytes value)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery.slowEncodeQueryToPercents:java.lang.String(com.linecorp.armeria.internal.common.PathAndQuery$Bytes)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.addEncoded(byte b)": {
                        "lineNumber": [
                            {
                                "480": "void addEncoded(byte b) {"
                            },
                            {
                                "481": "if (encoded == null) {"
                            },
                            {
                                "482": "encoded = new BitSet();"
                            },
                            {
                                "483": "}"
                            },
                            {
                                "484": ""
                            },
                            {
                                "485": "encoded.set(length);"
                            },
                            {
                                "486": "data[length++] = b;"
                            },
                            {
                                "487": "numEncodedBytes++;"
                            },
                            {
                                "488": "}"
                            }
                        ],
                        "paramType": "(byte b)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.addEncoded:void(byte)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.isEncoded(int index)": {
                        "lineNumber": [
                            {
                                "490": "boolean isEncoded(int index) {"
                            },
                            {
                                "491": "return encoded != null && encoded.get(index);"
                            },
                            {
                                "492": "}"
                            }
                        ],
                        "paramType": "(int index)",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.isEncoded:boolean(int)"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.hasEncodedBytes()": {
                        "lineNumber": [
                            {
                                "494": "boolean hasEncodedBytes() {"
                            },
                            {
                                "495": "return encoded != null;"
                            },
                            {
                                "496": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.hasEncodedBytes:boolean()"
                    },
                    "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.numEncodedBytes()": {
                        "lineNumber": [
                            {
                                "498": "int numEncodedBytes() {"
                            },
                            {
                                "499": "return numEncodedBytes;"
                            },
                            {
                                "500": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.linecorp.armeria.internal.common.PathAndQuery$Bytes.numEncodedBytes:int()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "decodePath",
                "RoutingResultBuilder.rawParam",
                "ArmeriaHttpUtil.decodePath"
            ],
            "classnamelst": [],
            "pathlst": [
                "/files/.."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-11974": {
        "old_methods_info": [
            {
                "oldFilePath": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java",
                "deleteMethodBegin": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": 57
                },
                "deleteMethodEnd": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": 81
                },
                "deleteMethodFull": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": {
                        "lineNumber": [
                            {
                                "58": "if (StringUtils.isNotEmpty(getOther())) {"
                            },
                            {
                                "78": "jdbcUrl.append(separator).append(getOther());"
                            }
                        ],
                        "paramType": "(StringBuilder jdbcUrl)",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther:void(java.lang.StringBuilder)"
                    }
                }
            },
            {
                "oldFilePath": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/BaseDataSource.java",
                "addMethodBegin": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": 57,
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.filterOther(String otherParams)": 84
                },
                "addMethodEnd": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": 82,
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.filterOther(String otherParams)": 86
                },
                "addMethodFull": {
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther(StringBuilder jdbcUrl)": {
                        "lineNumber": [
                            {
                                "58": "String otherParams = filterOther(getOther());"
                            },
                            {
                                "59": "if (StringUtils.isNotEmpty(otherParams)) {"
                            },
                            {
                                "79": "jdbcUrl.append(separator).append(otherParams);"
                            }
                        ],
                        "paramType": "(StringBuilder jdbcUrl)",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.appendOther:void(java.lang.StringBuilder)"
                    },
                    "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.filterOther(String otherParams)": {
                        "lineNumber": [
                            {
                                "84": "protected String filterOther(String otherParams){"
                            },
                            {
                                "85": "return otherParams;"
                            },
                            {
                                "86": "}"
                            }
                        ],
                        "paramType": "(String otherParams)",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.BaseDataSource.filterOther:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "dolphinscheduler-dao/src/main/java/org/apache/dolphinscheduler/dao/datasource/MySQLDataSource.java",
                "addMethodBegin": {
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.filterOther(String other)": 20,
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getUser()": 40,
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getPassword()": 51
                },
                "addMethodEnd": {
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.filterOther(String other)": 38,
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getUser()": 49,
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getPassword()": 59
                },
                "addMethodFull": {
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.filterOther(String other)": {
                        "lineNumber": [
                            {
                                "20": "@Override"
                            },
                            {
                                "21": "protected String filterOther(String other){"
                            },
                            {
                                "22": "if(other.contains(sensitiveParam)){"
                            },
                            {
                                "23": "int index = other.indexOf(sensitiveParam);"
                            },
                            {
                                "24": "String tmp = sensitiveParam;"
                            },
                            {
                                "25": "if(index == 0 || other.charAt(index + 1) == symbol){"
                            },
                            {
                                "26": "tmp = tmp + symbol;"
                            },
                            {
                                "27": "}"
                            },
                            {
                                "28": "else if(other.charAt(index - 1) == symbol){"
                            },
                            {
                                "29": "tmp = symbol + tmp;"
                            },
                            {
                                "30": "}"
                            },
                            {
                                "31": ""
                            },
                            {
                                "32": "logger.warn(\"sensitive param : {} in otherParams field is filtered\", tmp);"
                            },
                            {
                                "33": "other = other.replace(tmp, \"\");"
                            },
                            {
                                "34": "}"
                            },
                            {
                                "35": ""
                            },
                            {
                                "36": "logger.debug(\"other : {}\", other);"
                            },
                            {
                                "37": "return other;"
                            },
                            {
                                "38": "}"
                            }
                        ],
                        "paramType": "(String other)",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.filterOther:java.lang.String(java.lang.String)"
                    },
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getUser()": {
                        "lineNumber": [
                            {
                                "40": "@Override"
                            },
                            {
                                "41": "public String getUser() {"
                            },
                            {
                                "42": "if(user.contains(sensitiveParam)){"
                            },
                            {
                                "43": "logger.warn(\"sensitive param : {} in username field is filtered\", sensitiveParam);"
                            },
                            {
                                "44": "user = user.replace(sensitiveParam, \"\");"
                            },
                            {
                                "45": "}"
                            },
                            {
                                "46": ""
                            },
                            {
                                "47": "logger.debug(\"username : {}\", user);"
                            },
                            {
                                "48": "return user;"
                            },
                            {
                                "49": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getUser:java.lang.String()"
                    },
                    "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getPassword()": {
                        "lineNumber": [
                            {
                                "51": "@Override"
                            },
                            {
                                "52": "public String getPassword() {"
                            },
                            {
                                "53": "if(password.contains(sensitiveParam)){"
                            },
                            {
                                "54": "logger.warn(\"sensitive param : {} in password field is filtered\", sensitiveParam);"
                            },
                            {
                                "55": "password = password.replace(sensitiveParam, \"\");"
                            },
                            {
                                "56": "}"
                            },
                            {
                                "57": ""
                            },
                            {
                                "58": "return password;"
                            },
                            {
                                "59": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.dolphinscheduler.dao.datasource.MySQLDataSource.getPassword:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "autoDeserialize"
            ],
            "classnamelst": [
                "DolphinScheduler",
                "MySQLDataSourceTestIn"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-21234": {
        "old_methods_info": [
            {
                "oldFilePath": "lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java",
                "deleteMethodBegin": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": 46,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": 107,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(String filename)": 149
                },
                "deleteMethodEnd": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": 61,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": 121,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(String filename)": 151
                },
                "deleteMethodFull": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": {
                        "lineNumber": [
                            {
                                "49": "securityCheck(base);"
                            }
                        ],
                        "paramType": "(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list:<unresolvedSignature>(4)"
                    },
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "109": "securityCheck(filename);"
                            },
                            {
                                "110": "response.setContentType(MediaType.TEXT_PLAIN_VALUE);"
                            }
                        ],
                        "paramType": "(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view:<unresolvedSignature>(4)"
                    },
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(String filename)": {
                        "lineNumber": [
                            {
                                "149": "private void securityCheck(String filename) {"
                            },
                            {
                                "150": "Assert.doesNotContain(filename, \"..\");"
                            }
                        ],
                        "paramType": "(String filename)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck:void(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java",
                "addMethodBegin": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": 46,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": 107,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(Path base, String filename)": 149
                },
                "addMethodEnd": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": 61,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": 121,
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(Path base, String filename)": 160
                },
                "addMethodFull": {
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)": {
                        "lineNumber": [
                            {
                                "50": "securityCheck(currentFolder, null);"
                            }
                        ],
                        "paramType": "(Model model, @RequestParam(required = false, defaultValue = \"FILENAME\") SortBy sortBy, @RequestParam(required = false, defaultValue = \"false\") boolean desc, @RequestParam(required = false) String base)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.list:<unresolvedSignature>(4)"
                    },
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "110": "securityCheck(path, filename);"
                            },
                            {
                                "111": "response.setContentType(MediaType.TEXT_PLAIN_VALUE);"
                            }
                        ],
                        "paramType": "(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.view:<unresolvedSignature>(4)"
                    },
                    "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck(Path base, String filename)": {
                        "lineNumber": [
                            {
                                "149": "private void securityCheck(Path base, String filename) {"
                            },
                            {
                                "150": "try {"
                            },
                            {
                                "151": "String canonicalLoggingPath = (filename != null ? new File(base.toFile().toString(), filename) : new File(base.toFile().toString())).getCanonicalPath();"
                            },
                            {
                                "152": "String baseCanonicalPath = new File(loggingPath).getCanonicalPath();"
                            },
                            {
                                "153": "String errorMessage = \"File \" + base.toString() + \"/\" + filename + \" may not be located outside base path \" + loggingPath;"
                            },
                            {
                                "154": "Assert.isTrue(canonicalLoggingPath.startsWith(baseCanonicalPath), errorMessage);"
                            },
                            {
                                "155": "}"
                            },
                            {
                                "156": "catch (IOException e) {"
                            },
                            {
                                "157": "throw new IllegalStateException(e);"
                            },
                            {
                                "158": "}"
                            },
                            {
                                "159": ""
                            }
                        ],
                        "paramType": "(Path base, String filename)",
                        "originalFullName": "eu.hinsch.spring.boot.actuator.logview.LogViewEndpoint.securityCheck:void(java.nio.file.Path,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-22978": {
        "old_methods_info": [
            {
                "oldFilePath": "web/src/main/java/org/springframework/security/web/util/matcher/RegexRequestMatcher.java",
                "deleteMethodBegin": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": 18
                },
                "deleteMethodEnd": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": 21
                },
                "deleteMethodFull": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": {
                        "lineNumber": [
                            {
                                "19": "this.pattern = Pattern.compile(pattern, caseInsensitive ? Pattern.CASE_INSENSITIVE : DEFAULT);"
                            }
                        ],
                        "paramType": "(String pattern, String httpMethod, boolean caseInsensitive)",
                        "originalFullName": "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>:void(java.lang.String,java.lang.String,boolean)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "web/src/main/java/org/springframework/security/web/util/matcher/RegexRequestMatcher.java",
                "addMethodBegin": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": 19
                },
                "addMethodEnd": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": 22
                },
                "addMethodFull": {
                    "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>(String pattern, String httpMethod, boolean caseInsensitive)": {
                        "lineNumber": [
                            {
                                "20": "this.pattern = Pattern.compile(pattern, caseInsensitive ? CASE_INSENSITIVE : DEFAULT);"
                            }
                        ],
                        "paramType": "(String pattern, String httpMethod, boolean caseInsensitive)",
                        "originalFullName": "org.springframework.security.web.util.matcher.RegexRequestMatcher.<init>:void(java.lang.String,java.lang.String,boolean)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "AntRegexRequestMatcher",
                "RegexRequestMatcher"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-0097": {
        "old_methods_info": [
            {
                "oldFilePath": "ldap/src/main/java/org/springframework/security/ldap/authentication/AbstractLdapAuthenticationProvider.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "ldap/src/main/java/org/springframework/security/ldap/authentication/AbstractLdapAuthenticationProvider.java",
                "addMethodBegin": {
                    "org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider.authenticate(Authentication authentication)": 29
                },
                "addMethodEnd": {
                    "org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider.authenticate(Authentication authentication)": 50
                },
                "addMethodFull": {
                    "org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider.authenticate(Authentication authentication)": {
                        "lineNumber": [
                            {
                                "42": "if (!StringUtils.hasLength(password)) {"
                            },
                            {
                                "43": "throw new BadCredentialsException(messages.getMessage(\"AbstractLdapAuthenticationProvider.emptyPassword\", \"Empty Password\"));"
                            },
                            {
                                "44": "}"
                            },
                            {
                                "45": ""
                            }
                        ],
                        "paramType": "(Authentication authentication)",
                        "originalFullName": "org.springframework.security.ldap.authentication.AbstractLdapAuthenticationProvider.authenticate:org.springframework.security.core.Authentication(org.springframework.security.core.Authentication)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ActiveDirectoryLdapAuthenticator"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2011-2732": {
        "old_methods_info": [
            {
                "oldFilePath": "web/src/main/java/org/springframework/security/web/firewall/DefaultHttpFirewall.java",
                "deleteMethodBegin": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": 14
                },
                "deleteMethodEnd": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": 16
                },
                "deleteMethodFull": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "15": "return response;"
                            }
                        ],
                        "paramType": "(HttpServletResponse response)",
                        "originalFullName": "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "web/src/main/java/org/springframework/security/web/firewall/DefaultHttpFirewall.java",
                "addMethodBegin": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": 14
                },
                "addMethodEnd": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": 16
                },
                "addMethodFull": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse(HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "15": "return new FirewalledResponse(response);"
                            }
                        ],
                        "paramType": "(HttpServletResponse response)",
                        "originalFullName": "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledResponse:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SpringSource"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2012-5055": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/springframework/security/providers/dao/DaoAuthenticationProvider.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/springframework/security/providers/dao/DaoAuthenticationProvider.java",
                "addMethodBegin": {
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.<init>()": 21,
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)": 46,
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder passwordEncoder)": 72
                },
                "addMethodEnd": {
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.<init>()": 23,
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)": 70,
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder passwordEncoder)": 75
                },
                "addMethodFull": {
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.<init>()": {
                        "lineNumber": [
                            {
                                "21": "public DaoAuthenticationProvider() {"
                            },
                            {
                                "22": "setPasswordEncoder(new PlaintextPasswordEncoder());"
                            },
                            {
                                "23": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.security.providers.dao.DaoAuthenticationProvider.<init>:void()"
                    },
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.retrieveUser(String username, UsernamePasswordAuthenticationToken authentication)": {
                        "lineNumber": [
                            {
                                "56": "catch (UsernameNotFoundException notFound) {"
                            },
                            {
                                "57": "if(authentication.getCredentials() != null) {"
                            },
                            {
                                "58": "String presentedPassword = authentication.getCredentials().toString();"
                            },
                            {
                                "59": "passwordEncoder.isPasswordValid(userNotFoundEncodedPassword, presentedPassword, null);"
                            },
                            {
                                "60": "}"
                            },
                            {
                                "61": ""
                            },
                            {
                                "62": "throw notFound;"
                            },
                            {
                                "63": "}"
                            },
                            {
                                "64": ""
                            }
                        ],
                        "paramType": "(String username, UsernamePasswordAuthenticationToken authentication)",
                        "originalFullName": "org.springframework.security.providers.dao.DaoAuthenticationProvider.retrieveUser:org.springframework.security.userdetails.UserDetails(java.lang.String,org.springframework.security.providers.UsernamePasswordAuthenticationToken)"
                    },
                    "org.springframework.security.providers.dao.DaoAuthenticationProvider.setPasswordEncoder(PasswordEncoder passwordEncoder)": {
                        "lineNumber": [
                            {
                                "73": "this.userNotFoundEncodedPassword = passwordEncoder.encodePassword(USER_NOT_FOUND_PASSWORD, null);"
                            }
                        ],
                        "paramType": "(PasswordEncoder passwordEncoder)",
                        "originalFullName": "org.springframework.security.providers.dao.DaoAuthenticationProvider.setPasswordEncoder:void(org.springframework.security.providers.encoding.PasswordEncoder)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "DaoAuthenticationProvider",
                "SpringSource"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-9879": {
        "old_methods_info": [
            {
                "oldFilePath": "web/src/main/java/org/springframework/security/web/firewall/DefaultHttpFirewall.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "web/src/main/java/org/springframework/security/web/firewall/DefaultHttpFirewall.java",
                "addMethodBegin": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledRequest(HttpServletRequest request)": 6,
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash)": 24,
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.containsInvalidUrlEncodedSlash(String uri)": 28
                },
                "addMethodEnd": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledRequest(HttpServletRequest request)": 18,
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash)": 26,
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.containsInvalidUrlEncodedSlash(String uri)": 38
                },
                "addMethodFull": {
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledRequest(HttpServletRequest request)": {
                        "lineNumber": [
                            {
                                "12": "String requestURI = fwr.getRequestURI();"
                            },
                            {
                                "13": "if (containsInvalidUrlEncodedSlash(requestURI)) {"
                            },
                            {
                                "14": "throw new RequestRejectedException(\"The requestURI cannot contain encoded slash. Got \" + requestURI);"
                            },
                            {
                                "15": "}"
                            },
                            {
                                "16": ""
                            }
                        ],
                        "paramType": "(HttpServletRequest request)",
                        "originalFullName": "org.springframework.security.web.firewall.DefaultHttpFirewall.getFirewalledRequest:<unresolvedSignature>(1)"
                    },
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash)": {
                        "lineNumber": [
                            {
                                "24": "public void setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash) {"
                            },
                            {
                                "25": "this.allowUrlEncodedSlash = allowUrlEncodedSlash;"
                            },
                            {
                                "26": "}"
                            }
                        ],
                        "paramType": "(boolean allowUrlEncodedSlash)",
                        "originalFullName": "org.springframework.security.web.firewall.DefaultHttpFirewall.setAllowUrlEncodedSlash:void(boolean)"
                    },
                    "org.springframework.security.web.firewall.DefaultHttpFirewall.containsInvalidUrlEncodedSlash(String uri)": {
                        "lineNumber": [
                            {
                                "28": "private boolean containsInvalidUrlEncodedSlash(String uri) {"
                            },
                            {
                                "29": "if (this.allowUrlEncodedSlash || uri == null) {"
                            },
                            {
                                "30": "return false;"
                            },
                            {
                                "31": "}"
                            },
                            {
                                "32": ""
                            },
                            {
                                "33": "if (uri.contains(\"%2f\") || uri.contains(\"%2F\")) {"
                            },
                            {
                                "34": "return true;"
                            },
                            {
                                "35": "}"
                            },
                            {
                                "36": ""
                            },
                            {
                                "37": "return false;"
                            },
                            {
                                "38": "}"
                            }
                        ],
                        "paramType": "(String uri)",
                        "originalFullName": "org.springframework.security.web.firewall.DefaultHttpFirewall.containsInvalidUrlEncodedSlash:boolean(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "WebSphere",
                "DefaultHttpFirewall"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2017-4995": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java",
                "deleteMethodBegin": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": 18
                },
                "deleteMethodEnd": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": 27
                },
                "deleteMethodFull": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": {
                        "lineNumber": [
                            {
                                "22": "mapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL, JsonTypeInfo.As.PROPERTY);"
                            }
                        ],
                        "paramType": "(ObjectMapper mapper)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/springframework/security/jackson2/SecurityJackson2Modules.java",
                "addMethodBegin": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": 19,
                    "org.springframework.security.jackson2.SecurityJackson2Modules.createWhitelistedDefaultTyping()": 67,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.<init>(ObjectMapper.DefaultTyping defaultTyping)": 75,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)": 79,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.<init>(TypeIdResolver delegate)": 89,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.init(JavaType baseType)": 93,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValue(Object value)": 98,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValueAndType(Object value, Class<?> suggestedType)": 103,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromBaseType()": 108,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.typeFromId(DatabindContext context, String id)": 113,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.isWhitelisted(String id)": 135,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getDescForKnownTypeIds()": 139,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getMechanism()": 144
                },
                "addMethodEnd": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": 28,
                    "org.springframework.security.jackson2.SecurityJackson2Modules.createWhitelistedDefaultTyping()": 72,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.<init>(ObjectMapper.DefaultTyping defaultTyping)": 77,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)": 82,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.<init>(TypeIdResolver delegate)": 91,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.init(JavaType baseType)": 96,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValue(Object value)": 101,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValueAndType(Object value, Class<?> suggestedType)": 106,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromBaseType()": 111,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.typeFromId(DatabindContext context, String id)": 133,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.isWhitelisted(String id)": 137,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getDescForKnownTypeIds()": 142,
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getMechanism()": 147
                },
                "addMethodFull": {
                    "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping(ObjectMapper mapper)": {
                        "lineNumber": [
                            {
                                "23": "mapper.setDefaultTyping(createWhitelistedDefaultTyping());"
                            }
                        ],
                        "paramType": "(ObjectMapper mapper)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules.enableDefaultTyping:<unresolvedSignature>(1)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules.createWhitelistedDefaultTyping()": {
                        "lineNumber": [
                            {
                                "67": "private static TypeResolverBuilder<? extends TypeResolverBuilder> createWhitelistedDefaultTyping() {"
                            },
                            {
                                "68": "TypeResolverBuilder<? extends TypeResolverBuilder>  result = new WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping.NON_FINAL);"
                            },
                            {
                                "69": "result = result.init(JsonTypeInfo.Id.CLASS, null);"
                            },
                            {
                                "70": "result = result.inclusion(JsonTypeInfo.As.PROPERTY);"
                            },
                            {
                                "71": "return result;"
                            },
                            {
                                "72": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules.createWhitelistedDefaultTyping:<unresolvedSignature>(0)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.<init>(ObjectMapper.DefaultTyping defaultTyping)": {
                        "lineNumber": [
                            {
                                "75": "public WhitelistTypeResolverBuilder(ObjectMapper.DefaultTyping defaultTyping) {"
                            },
                            {
                                "76": "super(defaultTyping);"
                            },
                            {
                                "77": "}"
                            }
                        ],
                        "paramType": "(ObjectMapper.DefaultTyping defaultTyping)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.<init>:<unresolvedSignature>(1)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)": {
                        "lineNumber": [
                            {
                                "79": "protected TypeIdResolver idResolver(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser) {"
                            },
                            {
                                "80": "TypeIdResolver result = super.idResolver(config, baseType, subtypes, forSer, forDeser);"
                            },
                            {
                                "81": "return new WhitelistTypeIdResolver(result);"
                            },
                            {
                                "82": "}"
                            }
                        ],
                        "paramType": "(MapperConfig<?> config, JavaType baseType, Collection<NamedType> subtypes, boolean forSer, boolean forDeser)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeResolverBuilder.idResolver:<unresolvedSignature>(5)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.<init>(TypeIdResolver delegate)": {
                        "lineNumber": [
                            {
                                "89": "WhitelistTypeIdResolver(TypeIdResolver delegate) {"
                            },
                            {
                                "90": "this.delegate = delegate;"
                            },
                            {
                                "91": "}"
                            }
                        ],
                        "paramType": "(TypeIdResolver delegate)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.<init>:<unresolvedSignature>(1)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.init(JavaType baseType)": {
                        "lineNumber": [
                            {
                                "93": "@Override"
                            },
                            {
                                "94": "public void init(JavaType baseType) {"
                            },
                            {
                                "95": "delegate.init(baseType);"
                            },
                            {
                                "96": "}"
                            }
                        ],
                        "paramType": "(JavaType baseType)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.init:<unresolvedSignature>(1)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValue(Object value)": {
                        "lineNumber": [
                            {
                                "98": "@Override"
                            },
                            {
                                "99": "public String idFromValue(Object value) {"
                            },
                            {
                                "100": "return delegate.idFromValue(value);"
                            },
                            {
                                "101": "}"
                            }
                        ],
                        "paramType": "(Object value)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValue:java.lang.String(java.lang.Object)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValueAndType(Object value, Class<?> suggestedType)": {
                        "lineNumber": [
                            {
                                "103": "@Override"
                            },
                            {
                                "104": "public String idFromValueAndType(Object value, Class<?> suggestedType) {"
                            },
                            {
                                "105": "return delegate.idFromValueAndType(value, suggestedType);"
                            },
                            {
                                "106": "}"
                            }
                        ],
                        "paramType": "(Object value, Class<?> suggestedType)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromValueAndType:java.lang.String(java.lang.Object,java.lang.Class)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromBaseType()": {
                        "lineNumber": [
                            {
                                "108": "@Override"
                            },
                            {
                                "109": "public String idFromBaseType() {"
                            },
                            {
                                "110": "return delegate.idFromBaseType();"
                            },
                            {
                                "111": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.idFromBaseType:java.lang.String()"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.typeFromId(DatabindContext context, String id)": {
                        "lineNumber": [
                            {
                                "113": "@Override"
                            },
                            {
                                "114": "public JavaType typeFromId(DatabindContext context, String id) throws IOException {"
                            },
                            {
                                "115": "DeserializationConfig config = (DeserializationConfig) context.getConfig();"
                            },
                            {
                                "116": "JavaType result = delegate.typeFromId(context, id);"
                            },
                            {
                                "117": "String className = result.getRawClass().getName();"
                            },
                            {
                                "118": "if(isWhitelisted(className)) {"
                            },
                            {
                                "119": "return delegate.typeFromId(context, id);"
                            },
                            {
                                "120": "}"
                            },
                            {
                                "121": ""
                            },
                            {
                                "122": "boolean isExplicitMixin = config.findMixInClassFor(result.getRawClass()) != null;"
                            },
                            {
                                "123": "if(isExplicitMixin) {"
                            },
                            {
                                "124": "return result;"
                            },
                            {
                                "125": "}"
                            },
                            {
                                "126": ""
                            },
                            {
                                "127": "JacksonAnnotation jacksonAnnotation = AnnotationUtils.findAnnotation(result.getRawClass(), JacksonAnnotation.class);"
                            },
                            {
                                "128": "if(jacksonAnnotation != null) {"
                            },
                            {
                                "129": "return result;"
                            },
                            {
                                "130": "}"
                            },
                            {
                                "131": ""
                            },
                            {
                                "132": "throw new IllegalArgumentException(\"The class with \" + id + \" and name of \" + className + \" is not whitelisted. \" + \"If you believe this class is safe to deserialize, please provide an explicit mapping using Jackson annotations or by providing a Mixin. \" + \"If the serialization is only done by a trusted source, you can also enable default typing. \" + \"See https://github.com/spring-projects/spring-security/issues/4370 for details\");"
                            },
                            {
                                "133": "}"
                            }
                        ],
                        "paramType": "(DatabindContext context, String id)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.typeFromId:<unresolvedSignature>(2)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.isWhitelisted(String id)": {
                        "lineNumber": [
                            {
                                "135": "private boolean isWhitelisted(String id) {"
                            },
                            {
                                "136": "return WHITELIST_CLASS_NAMES.contains(id);"
                            },
                            {
                                "137": "}"
                            }
                        ],
                        "paramType": "(String id)",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.isWhitelisted:boolean(java.lang.String)"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getDescForKnownTypeIds()": {
                        "lineNumber": [
                            {
                                "139": "@Override"
                            },
                            {
                                "140": "public String getDescForKnownTypeIds() {"
                            },
                            {
                                "141": "return delegate.getDescForKnownTypeIds();"
                            },
                            {
                                "142": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getDescForKnownTypeIds:java.lang.String()"
                    },
                    "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getMechanism()": {
                        "lineNumber": [
                            {
                                "144": "@Override"
                            },
                            {
                                "145": "public JsonTypeInfo.Id getMechanism() {"
                            },
                            {
                                "146": "return delegate.getMechanism();"
                            },
                            {
                                "147": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.security.jackson2.SecurityJackson2Modules$WhitelistTypeIdResolver.getMechanism:<unresolvedSignature>(0)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "SecurityJackson2Modules.getModules"
            ],
            "classnamelst": [
                "SecurityJackson2Modules"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-11272": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/springframework/security/authentication/encoding/PlaintextPasswordEncoder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/springframework/security/authentication/encoding/PlaintextPasswordEncoder.java",
                "addMethodBegin": {
                    "org.springframework.security.authentication.encoding.PlaintextPasswordEncoder.isPasswordValid(String encPass, String rawPass, Object salt)": 14
                },
                "addMethodEnd": {
                    "org.springframework.security.authentication.encoding.PlaintextPasswordEncoder.isPasswordValid(String encPass, String rawPass, Object salt)": 27
                },
                "addMethodFull": {
                    "org.springframework.security.authentication.encoding.PlaintextPasswordEncoder.isPasswordValid(String encPass, String rawPass, Object salt)": {
                        "lineNumber": [
                            {
                                "15": "if (encPass == null) {"
                            },
                            {
                                "16": "return false;"
                            },
                            {
                                "17": "}"
                            },
                            {
                                "18": ""
                            }
                        ],
                        "paramType": "(String encPass, String rawPass, Object salt)",
                        "originalFullName": "org.springframework.security.authentication.encoding.PlaintextPasswordEncoder.isPasswordValid:boolean(java.lang.String,java.lang.String,java.lang.Object)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PlaintextPasswordEncoder"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-11343": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/ConditionBuilder.java",
                "deleteMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": 183
                },
                "deleteMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": 191
                },
                "deleteMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": {
                        "lineNumber": [
                            {
                                "185": "return new NotLikeCondition(type, selector, toMatch);"
                            },
                            {
                                "188": "return new LikeCondition(type, selector, toMatch);"
                            }
                        ],
                        "paramType": "(Type type, String toMatch)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike:org.torpedoquery.jpa.internal.conditions.LikeCondition(org.torpedoquery.jpa.internal.conditions.LikeCondition$Type,java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/NotLikeCondition.java",
                "deleteMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Type type, Selector selector, String toMatch)": 4,
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getLike()": 8
                },
                "deleteMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Type type, Selector selector, String toMatch)": 6,
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getLike()": 11
                },
                "deleteMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Type type, Selector selector, String toMatch)": {
                        "lineNumber": [
                            {
                                "4": "public NotLikeCondition(Type type, Selector selector, String toMatch) {"
                            },
                            {
                                "5": "super(type, selector, toMatch);"
                            }
                        ],
                        "paramType": "(Type type, Selector selector, String toMatch)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>:void(org.torpedoquery.jpa.internal.conditions.LikeCondition$Type,org.torpedoquery.jpa.internal.Selector,java.lang.String)"
                    },
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getLike()": {
                        "lineNumber": [
                            {
                                "9": "protected String getLike() {"
                            },
                            {
                                "10": "return \"not \" + super.getLike();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getLike:java.lang.String()"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/LikeCondition.java",
                "deleteMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Type type, Selector selector, String toMatch)": 41,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.createQueryFragment(AtomicInteger incrementor)": 47,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getLike()": 52,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getParameters()": 56
                },
                "deleteMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Type type, Selector selector, String toMatch)": 45,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.createQueryFragment(AtomicInteger incrementor)": 50,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getLike()": 54,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getParameters()": 59
                },
                "deleteMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Type type, Selector selector, String toMatch)": {
                        "lineNumber": [
                            {
                                "41": "public LikeCondition(Type type, Selector selector, String toMatch) {"
                            },
                            {
                                "42": "this.type = type;"
                            },
                            {
                                "43": "this.selector = selector;"
                            },
                            {
                                "44": "this.toMatch = toMatch;"
                            }
                        ],
                        "paramType": "(Type type, Selector selector, String toMatch)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>:void(org.torpedoquery.jpa.internal.conditions.LikeCondition$Type,org.torpedoquery.jpa.internal.Selector,java.lang.String)"
                    },
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.createQueryFragment(AtomicInteger incrementor)": {
                        "lineNumber": [
                            {
                                "48": "public String createQueryFragment(AtomicInteger incrementor) {"
                            },
                            {
                                "49": "return selector.createQueryFragment(incrementor) + \" \" + getLike() + \" '\" + type.wrap(toMatch) + \"' \";"
                            },
                            {
                                "50": "}"
                            }
                        ],
                        "paramType": "(AtomicInteger incrementor)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.createQueryFragment:java.lang.String(java.util.concurrent.atomic.AtomicInteger)"
                    },
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getLike()": {
                        "lineNumber": [
                            {
                                "52": "protected String getLike() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.getLike:java.lang.String()"
                    },
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getParameters()": {
                        "lineNumber": [
                            {
                                "56": "@Override"
                            },
                            {
                                "57": "public List<Parameter> getParameters() {"
                            },
                            {
                                "58": "return Collections.emptyList();"
                            },
                            {
                                "59": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.getParameters:java.util.List()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/ConditionBuilder.java",
                "addMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": 183
                },
                "addMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": 191
                },
                "addMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike(Type type, String toMatch)": {
                        "lineNumber": [
                            {
                                "185": "return new NotLikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));"
                            },
                            {
                                "188": "return new LikeCondition(selector, selector.generateParameter(type.wrap(toMatch)));"
                            }
                        ],
                        "paramType": "(Type type, String toMatch)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.ConditionBuilder.createLike:org.torpedoquery.jpa.internal.conditions.LikeCondition(org.torpedoquery.jpa.internal.conditions.LikeCondition$Type,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/NotLikeCondition.java",
                "addMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Selector selector, Parameter<T> parameter)": 5,
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getComparator()": 9
                },
                "addMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Selector selector, Parameter<T> parameter)": 7,
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getComparator()": 12
                },
                "addMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>(Selector selector, Parameter<T> parameter)": {
                        "lineNumber": [
                            {
                                "5": "public NotLikeCondition(Selector selector, Parameter<T> parameter) {"
                            },
                            {
                                "6": "super(selector,parameter);"
                            }
                        ],
                        "paramType": "(Selector selector, Parameter<T> parameter)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.<init>:void(org.torpedoquery.jpa.internal.Selector,org.torpedoquery.jpa.internal.Parameter)"
                    },
                    "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getComparator()": {
                        "lineNumber": [
                            {
                                "10": "protected String getComparator() {"
                            },
                            {
                                "11": "return \"not \" + super.getComparator();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.NotLikeCondition.getComparator:java.lang.String()"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/torpedoquery/jpa/internal/conditions/LikeCondition.java",
                "addMethodBegin": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Selector selector, Parameter<T> parameter)": 34,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getComparator()": 38
                },
                "addMethodEnd": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Selector selector, Parameter<T> parameter)": 36,
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getComparator()": 41
                },
                "addMethodFull": {
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>(Selector selector, Parameter<T> parameter)": {
                        "lineNumber": [
                            {
                                "34": "public LikeCondition(Selector selector, Parameter<T> parameter) {"
                            },
                            {
                                "35": "super(selector, parameter);"
                            }
                        ],
                        "paramType": "(Selector selector, Parameter<T> parameter)",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.<init>:void(org.torpedoquery.jpa.internal.Selector,org.torpedoquery.jpa.internal.Parameter)"
                    },
                    "org.torpedoquery.jpa.internal.conditions.LikeCondition.getComparator()": {
                        "lineNumber": [
                            {
                                "39": "protected String getComparator() {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.torpedoquery.jpa.internal.conditions.LikeCondition.getComparator:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "NotLikeCondition.java."
            ],
            "langrelatedfiles": [
                "ConditionBuilder.java",
                "LikeCondition.java",
                "NotLikeCondition.java"
            ]
        }
    },
    "CVE-2015-6748": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/jsoup/parser/TokeniserState.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/jsoup/parser/TokeniserState.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24897": {
        "old_methods_info": [
            {
                "oldFilePath": "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
                "deleteMethodBegin": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": 8,
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": 35
                },
                "deleteMethodEnd": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": 33,
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": 44
                },
                "deleteMethodFull": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": {
                        "lineNumber": [
                            {
                                "10": "this.secureClassMethods.add(\"getname\");"
                            },
                            {
                                "11": "this.secureClassMethods.add(\"getName\");"
                            },
                            {
                                "12": "this.secureClassMethods.add(\"getsimpleName\");"
                            },
                            {
                                "13": "this.secureClassMethods.add(\"getSimpleName\");"
                            },
                            {
                                "14": "this.secureClassMethods.add(\"isarray\");"
                            },
                            {
                                "15": "this.secureClassMethods.add(\"isArray\");"
                            },
                            {
                                "16": "this.secureClassMethods.add(\"isassignablefrom\");"
                            },
                            {
                                "17": "this.secureClassMethods.add(\"isAssignableFrom\");"
                            },
                            {
                                "18": "this.secureClassMethods.add(\"isenum\");"
                            },
                            {
                                "19": "this.secureClassMethods.add(\"isEnum\");"
                            },
                            {
                                "20": "this.secureClassMethods.add(\"isinstance\");"
                            },
                            {
                                "21": "this.secureClassMethods.add(\"isInstance\");"
                            },
                            {
                                "22": "this.secureClassMethods.add(\"isinterface\");"
                            },
                            {
                                "23": "this.secureClassMethods.add(\"isInterface\");"
                            },
                            {
                                "24": "this.secureClassMethods.add(\"islocalClass\");"
                            },
                            {
                                "25": "this.secureClassMethods.add(\"isLocalClass\");"
                            },
                            {
                                "26": "this.secureClassMethods.add(\"ismemberclass\");"
                            },
                            {
                                "27": "this.secureClassMethods.add(\"isMemberClass\");"
                            },
                            {
                                "28": "this.secureClassMethods.add(\"isprimitive\");"
                            },
                            {
                                "29": "this.secureClassMethods.add(\"isPrimitive\");"
                            },
                            {
                                "30": "this.secureClassMethods.add(\"issynthetic\");"
                            },
                            {
                                "31": "this.secureClassMethods.add(\"isSynthetic\");"
                            },
                            {
                                "32": "this.secureClassMethods.add(\"getEnumConstants\");"
                            }
                        ],
                        "paramType": "(String[] badClasses, String[] badPackages, Logger log)",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.<init>:<unresolvedSignature>(3)"
                    },
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": {
                        "lineNumber": [
                            {
                                "37": "if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {"
                            },
                            {
                                "38": "return true;"
                            },
                            {
                                "40": "else {"
                            },
                            {
                                "41": "return super.checkObjectExecutePermission(clazz, methodName);"
                            }
                        ],
                        "paramType": "(Class clazz, String methodName)",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission:boolean(java.lang.Class,java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xwiki-commons-core/xwiki-commons-velocity/src/main/java/org/xwiki/velocity/introspection/SecureIntrospector.java",
                "addMethodBegin": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": 13,
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhitelistClass()": 20,
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhiteListFile()": 25,
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": 30
                },
                "addMethodEnd": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": 18,
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhitelistClass()": 23,
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhiteListFile()": 28,
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": 49
                },
                "addMethodFull": {
                    "org.xwiki.velocity.introspection.SecureIntrospector.<init>(String[] badClasses, String[] badPackages, Logger log)": {
                        "lineNumber": [
                            {
                                "15": "this.whitelistedMethods = new HashMap<>();"
                            },
                            {
                                "16": "this.prepareWhitelistClass();"
                            },
                            {
                                "17": "this.prepareWhiteListFile();"
                            },
                            {
                                "18": "}"
                            }
                        ],
                        "paramType": "(String[] badClasses, String[] badPackages, Logger log)",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.<init>:<unresolvedSignature>(3)"
                    },
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhitelistClass()": {
                        "lineNumber": [
                            {
                                "20": "private void prepareWhitelistClass() {"
                            },
                            {
                                "21": "Set<String> whitelist = new HashSet<>(Arrays.asList( GETNAME, \"getsimpleName\", \"isarray\", \"isassignablefrom\", \"isenum\", \"isinstance\", \"isinterface\", \"islocalclass\", \"ismemberclass\", \"isprimitive\", \"issynthetic\", \"getenumconstants\" ));"
                            },
                            {
                                "22": "this.whitelistedMethods.put(Class.class, whitelist);"
                            },
                            {
                                "23": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhitelistClass:void()"
                    },
                    "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhiteListFile()": {
                        "lineNumber": [
                            {
                                "25": "private void prepareWhiteListFile() {"
                            },
                            {
                                "26": "Set<String> whitelist = new HashSet<>(Arrays.asList( \"canexecute\", \"canread\", \"canwrite\", \"compareto\", \"createtempfile\", \"equals\", \"getabsolutefile\", \"getabsolutepath\", \"getcanonicalfile\", \"getcanonicalpath\", \"getfreespace\", GETNAME, \"getparent\", \"getparentfile\", \"getpath\", \"gettotalspace\", \"getusablespace\", \"hashcode\", \"isabsolute\", \"isdirectory\", \"isfile\", \"ishidden\", \"lastmodified\", \"length\", \"topath\", \"tostring\", \"touri\", \"tourl\", \"getclass\" ));"
                            },
                            {
                                "27": "this.whitelistedMethods.put(File.class, whitelist);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.prepareWhiteListFile:void()"
                    },
                    "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission(Class clazz, String methodName)": {
                        "lineNumber": [
                            {
                                "32": "Boolean result = null;"
                            },
                            {
                                "33": "if (methodName != null) {"
                            },
                            {
                                "34": "for (Map.Entry<Class, Set<String>> classSetEntry : this.whitelistedMethods.entrySet()) {"
                            },
                            {
                                "35": "if (classSetEntry.getKey().isAssignableFrom(clazz)) {"
                            },
                            {
                                "36": "result = classSetEntry.getValue().contains(methodName.toLowerCase());"
                            },
                            {
                                "37": "break;"
                            },
                            {
                                "39": ""
                            },
                            {
                                "40": "}"
                            },
                            {
                                "41": ""
                            },
                            {
                                "42": "}"
                            },
                            {
                                "43": ""
                            },
                            {
                                "44": "if (result == null) {"
                            },
                            {
                                "45": "result = super.checkObjectExecutePermission(clazz, methodName);"
                            },
                            {
                                "48": "return result;"
                            }
                        ],
                        "paramType": "(Class clazz, String methodName)",
                        "originalFullName": "org.xwiki.velocity.introspection.SecureIntrospector.checkObjectExecutePermission:boolean(java.lang.Class,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-15250": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/junit/rules/TemporaryFolder.java",
                "deleteMethodBegin": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": 124
                },
                "deleteMethodEnd": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": 141
                },
                "deleteMethodFull": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": {
                        "lineNumber": [
                            {
                                "124": "private File createTemporaryFolderIn(File parentFolder) throws IOException {"
                            }
                        ],
                        "paramType": "(File parentFolder)",
                        "originalFullName": "org.junit.rules.TemporaryFolder.createTemporaryFolderIn:java.io.File(java.io.File)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/junit/rules/TemporaryFolder.java",
                "addMethodBegin": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": 127,
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithNioApi(File parentFolder)": 154,
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithFileApi(File parentFolder)": 172
                },
                "addMethodEnd": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": 152,
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithNioApi(File parentFolder)": 170,
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithFileApi(File parentFolder)": 189
                },
                "addMethodFull": {
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderIn(File parentFolder)": {
                        "lineNumber": [
                            {
                                "127": "private static File createTemporaryFolderIn(File parentFolder) throws IOException {"
                            },
                            {
                                "128": "try {"
                            },
                            {
                                "129": "return createTemporaryFolderWithNioApi(parentFolder);"
                            },
                            {
                                "130": "}"
                            },
                            {
                                "131": "catch (ClassNotFoundException ignore) {"
                            },
                            {
                                "132": "return createTemporaryFolderWithFileApi(parentFolder);"
                            },
                            {
                                "133": "}"
                            },
                            {
                                "134": "catch (InvocationTargetException e) {"
                            },
                            {
                                "135": "Throwable cause = e.getCause();"
                            },
                            {
                                "136": "if (cause instanceof IOException) {"
                            },
                            {
                                "137": "throw (IOException) cause;"
                            },
                            {
                                "138": "}"
                            },
                            {
                                "139": ""
                            },
                            {
                                "140": "if (cause instanceof RuntimeException) {"
                            },
                            {
                                "141": "throw (RuntimeException) cause;"
                            },
                            {
                                "142": "}"
                            },
                            {
                                "143": ""
                            },
                            {
                                "144": "IOException exception = new IOException(\"Failed to create temporary folder in \" + parentFolder);"
                            },
                            {
                                "145": "exception.initCause(cause);"
                            },
                            {
                                "146": "throw exception;"
                            },
                            {
                                "147": "}"
                            },
                            {
                                "148": "catch (Exception e) {"
                            },
                            {
                                "149": "throw new RuntimeException(\"Failed to create temporary folder in \" + parentFolder, e);"
                            },
                            {
                                "150": "}"
                            },
                            {
                                "151": ""
                            },
                            {
                                "152": "}"
                            }
                        ],
                        "paramType": "(File parentFolder)",
                        "originalFullName": "org.junit.rules.TemporaryFolder.createTemporaryFolderIn:java.io.File(java.io.File)"
                    },
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithNioApi(File parentFolder)": {
                        "lineNumber": [
                            {
                                "154": "private static File createTemporaryFolderWithNioApi(File parentFolder) throws ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException {"
                            },
                            {
                                "155": "Class<?> filesClass = Class.forName(\"java.nio.file.Files\");"
                            },
                            {
                                "156": "Object fileAttributeArray = Array.newInstance(Class.forName(\"java.nio.file.attribute.FileAttribute\"), 0);"
                            },
                            {
                                "157": "Class<?> pathClass = Class.forName(\"java.nio.file.Path\");"
                            },
                            {
                                "158": "Object tempDir;"
                            },
                            {
                                "159": "if (parentFolder != null) {"
                            },
                            {
                                "160": "Method createTempDirectoryMethod = filesClass.getDeclaredMethod(\"createTempDirectory\", pathClass, String.class, fileAttributeArray.getClass());"
                            },
                            {
                                "161": "Object parentPath = File.class.getDeclaredMethod(\"toPath\").invoke(parentFolder);"
                            },
                            {
                                "162": "tempDir = createTempDirectoryMethod.invoke(null, parentPath, TMP_PREFIX, fileAttributeArray);"
                            },
                            {
                                "163": "}"
                            },
                            {
                                "164": "else {"
                            },
                            {
                                "165": "Method createTempDirectoryMethod = filesClass.getDeclaredMethod(\"createTempDirectory\", String.class, fileAttributeArray.getClass());"
                            },
                            {
                                "166": "tempDir = createTempDirectoryMethod.invoke(null, TMP_PREFIX, fileAttributeArray);"
                            },
                            {
                                "167": "}"
                            },
                            {
                                "168": ""
                            },
                            {
                                "169": "return (File) pathClass.getDeclaredMethod(\"toFile\").invoke(tempDir);"
                            },
                            {
                                "170": "}"
                            }
                        ],
                        "paramType": "(File parentFolder)",
                        "originalFullName": "org.junit.rules.TemporaryFolder.createTemporaryFolderWithNioApi:java.io.File(java.io.File)"
                    },
                    "org.junit.rules.TemporaryFolder.createTemporaryFolderWithFileApi(File parentFolder)": {
                        "lineNumber": [
                            {
                                "172": "private static File createTemporaryFolderWithFileApi(File parentFolder) throws IOException {"
                            }
                        ],
                        "paramType": "(File parentFolder)",
                        "originalFullName": "org.junit.rules.TemporaryFolder.createTemporaryFolderWithFileApi:java.io.File(java.io.File)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "TemporaryFolder"
            ],
            "pathlst": [
                "java.io.tmpdir"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-22980": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-data-mongodb/src/main/java/org/springframework/data/mongodb/util/json/ParameterBindingContext.java",
                "deleteMethodBegin": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": 19,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": 36
                },
                "deleteMethodEnd": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": 29,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": 49
                },
                "deleteMethodFull": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": {
                        "lineNumber": [
                            {
                                "20": "this(valueProvider, new SpELExpressionEvaluator() {"
                            },
                            {
                                "21": "@Override"
                            },
                            {
                                "22": "public <T> T evaluate(String expressionString) {"
                            },
                            {
                                "23": "return (T) expressionParser.parseExpression(expressionString).getValue(evaluationContext.get(), Object.class);"
                            },
                            {
                                "24": "}"
                            },
                            {
                                "25": ""
                            },
                            {
                                "26": "}"
                            },
                            {
                                "27": ""
                            },
                            {
                                "28": ");"
                            }
                        ],
                        "paramType": "(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": {
                        "lineNumber": [
                            {
                                "37": "return new ParameterBindingContext(valueProvider, new SpELExpressionEvaluator() {"
                            },
                            {
                                "39": "public <T> T evaluate(String expressionString) {"
                            },
                            {
                                "40": "Expression expression = expressionParser.parseExpression(expressionString);"
                            },
                            {
                                "42": "EvaluationContext evaluationContext = contextFunction.apply(dependencies);"
                            },
                            {
                                "43": "return (T) expression.getValue(evaluationContext, Object.class);"
                            }
                        ],
                        "paramType": "(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions:<unresolvedSignature>(3)"
                    }
                }
            },
            {
                "oldFilePath": "spring-data-mongodb/src/main/java/org/springframework/data/mongodb/util/json/ParameterBindingJsonReader.java",
                "deleteMethodBegin": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": 292,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": 373,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": 430
                },
                "deleteMethodEnd": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": 363,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": 375,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": 433
                },
                "deleteMethodFull": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": {
                        "lineNumber": [
                            {
                                "306": "Matcher inSpelMatcher = PARAMETER_BINDING_PATTERN.matcher(expression);"
                            },
                            {
                                "308": "int index = computeParameterIndex(inSpelMatcher.group());"
                            },
                            {
                                "309": "expression = expression.replace(inSpelMatcher.group(), getBindableValueForIndex(index).toString());"
                            },
                            {
                                "312": "Object value = evaluateExpression(expression);"
                            },
                            {
                                "335": "Matcher inSpelMatcher = PARAMETER_BINDING_PATTERN.matcher(expression);"
                            },
                            {
                                "337": "int index = computeParameterIndex(inSpelMatcher.group());"
                            },
                            {
                                "338": "expression = expression.replace(inSpelMatcher.group(), getBindableValueForIndex(index).toString());"
                            },
                            {
                                "341": "computedValue = computedValue.replace(binding, nullSafeToString(evaluateExpression(expression)));"
                            }
                        ],
                        "paramType": "(JsonToken token)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor:org.springframework.data.mongodb.util.json.ParameterBindingJsonReader$BindableValue(org.springframework.data.mongodb.util.json.JsonToken)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": {
                        "lineNumber": [
                            {
                                "374": "return NumberUtils.parseNumber(parameter.replace(\"?\", \"\"), Integer.class);"
                            }
                        ],
                        "paramType": "(String parameter)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex:int(java.lang.String)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": {
                        "lineNumber": [
                            {
                                "432": "return bindingContext.evaluateExpression(expressionString);"
                            }
                        ],
                        "paramType": "(String expressionString)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression:java.lang.Object(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-data-mongodb/src/main/java/org/springframework/data/mongodb/util/json/ParameterBindingContext.java",
                "addMethodBegin": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": 20,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": 29,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.evaluateExpression(String expressionString, Map<String, Object> variables)": 54
                },
                "addMethodEnd": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": 22,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": 42,
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.evaluateExpression(String expressionString, Map<String, Object> variables)": 61
                },
                "addMethodFull": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)": {
                        "lineNumber": [
                            {
                                "21": "this(valueProvider, new EvaluationContextExpressionEvaluator(valueProvider, expressionParser, evaluationContext));"
                            }
                        ],
                        "paramType": "(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingContext.<init>:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)": {
                        "lineNumber": [
                            {
                                "30": "return new ParameterBindingContext(valueProvider, new EvaluationContextExpressionEvaluator(valueProvider, expressionParser, null) {"
                            },
                            {
                                "31": ""
                            },
                            {
                                "33": "public EvaluationContext getEvaluationContext(String expressionString) {"
                            },
                            {
                                "34": "Expression expression = getParsedExpression(expressionString);"
                            },
                            {
                                "36": "return contextFunction.apply(dependencies);"
                            }
                        ],
                        "paramType": "(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingContext.forExpressions:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingContext.evaluateExpression(String expressionString, Map<String, Object> variables)": {
                        "lineNumber": [
                            {
                                "54": "@Nullable"
                            },
                            {
                                "55": "public Object evaluateExpression(String expressionString, Map<String, Object> variables) {"
                            },
                            {
                                "56": "if (expressionEvaluator instanceof EvaluationContextExpressionEvaluator) {"
                            },
                            {
                                "57": "return ((EvaluationContextExpressionEvaluator) expressionEvaluator).evaluateExpression(expressionString, variables);"
                            },
                            {
                                "58": "}"
                            },
                            {
                                "59": ""
                            },
                            {
                                "60": "return expressionEvaluator.evaluate(expressionString);"
                            },
                            {
                                "61": "}"
                            }
                        ],
                        "paramType": "(String expressionString, Map<String, Object> variables)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingContext.evaluateExpression:java.lang.Object(java.lang.String,java.util.Map)"
                    }
                }
            },
            {
                "newFilePath": "spring-data-mongodb/src/main/java/org/springframework/data/mongodb/util/json/ParameterBindingJsonReader.java",
                "addMethodBegin": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": 297,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": 400,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": 457,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString, Map<String, Object> variables)": 462
                },
                "addMethodEnd": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": 390,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": 402,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": 460,
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString, Map<String, Object> variables)": 465
                },
                "addMethodFull": {
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor(JsonToken token)": {
                        "lineNumber": [
                            {
                                "311": "Matcher inSpelMatcher = SPEL_PARAMETER_BINDING_PATTERN.matcher(expression);"
                            },
                            {
                                "312": "Map<String, Object> innerSpelVariables = new HashMap<>();"
                            },
                            {
                                "314": "String group = inSpelMatcher.group();"
                            },
                            {
                                "315": "int index = computeParameterIndex(group);"
                            },
                            {
                                "316": "Object value = getBindableValueForIndex(index);"
                            },
                            {
                                "317": "String varName = \"__QVar\" + innerSpelVariables.size();"
                            },
                            {
                                "318": "expression = expression.replace(group, \"#\" + varName);"
                            },
                            {
                                "319": "if(group.startsWith(\"'\")) {"
                            },
                            {
                                "320": "innerSpelVariables.put(varName, nullSafeToString(value));"
                            },
                            {
                                "321": "}"
                            },
                            {
                                "322": "else {"
                            },
                            {
                                "323": "innerSpelVariables.put(varName, value);"
                            },
                            {
                                "326": "}"
                            },
                            {
                                "327": ""
                            },
                            {
                                "328": "Object value = evaluateExpression(expression, innerSpelVariables);"
                            },
                            {
                                "351": "Matcher inSpelMatcher = SPEL_PARAMETER_BINDING_PATTERN.matcher(expression);"
                            },
                            {
                                "352": "Map<String, Object> innerSpelVariables = new HashMap<>();"
                            },
                            {
                                "354": "String group = inSpelMatcher.group();"
                            },
                            {
                                "355": "int index = computeParameterIndex(group);"
                            },
                            {
                                "356": "Object value = getBindableValueForIndex(index);"
                            },
                            {
                                "357": "String varName = \"__QVar\" + innerSpelVariables.size();"
                            },
                            {
                                "358": "expression = expression.replace(group, \"#\" + varName);"
                            },
                            {
                                "359": "if(group.startsWith(\"'\")) {"
                            },
                            {
                                "360": "innerSpelVariables.put(varName, nullSafeToString(value));"
                            },
                            {
                                "361": "}"
                            },
                            {
                                "362": "else {"
                            },
                            {
                                "363": "innerSpelVariables.put(varName, value);"
                            },
                            {
                                "364": "}"
                            },
                            {
                                "365": ""
                            },
                            {
                                "368": "computedValue = computedValue.replace(binding, nullSafeToString(evaluateExpression(expression, innerSpelVariables)));"
                            }
                        ],
                        "paramType": "(JsonToken token)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.bindableValueFor:org.springframework.data.mongodb.util.json.ParameterBindingJsonReader$BindableValue(org.springframework.data.mongodb.util.json.JsonToken)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex(String parameter)": {
                        "lineNumber": [
                            {
                                "401": "return NumberUtils.parseNumber(parameter.replace(\"?\", \"\").replace(\"'\", \"\"), Integer.class);"
                            }
                        ],
                        "paramType": "(String parameter)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.computeParameterIndex:int(java.lang.String)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString)": {
                        "lineNumber": [
                            {
                                "459": "return bindingContext.evaluateExpression(expressionString, Collections.emptyMap());"
                            },
                            {
                                "460": "}"
                            }
                        ],
                        "paramType": "(String expressionString)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression:java.lang.Object(java.lang.String)"
                    },
                    "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression(String expressionString, Map<String, Object> variables)": {
                        "lineNumber": [
                            {
                                "462": "@Nullable"
                            },
                            {
                                "463": "private Object evaluateExpression(String expressionString, Map<String,Object> variables) {"
                            },
                            {
                                "464": "return bindingContext.evaluateExpression(expressionString, variables);"
                            }
                        ],
                        "paramType": "(String expressionString, Map<String, Object> variables)",
                        "originalFullName": "org.springframework.data.mongodb.util.json.ParameterBindingJsonReader.evaluateExpression:java.lang.Object(java.lang.String,java.util.Map)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "MongoDB",
                "SpEL"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1000844": {
        "old_methods_info": [
            {
                "oldFilePath": "retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "retrofit-converters/jaxb/src/main/java/retrofit2/converter/jaxb/JaxbResponseConverter.java",
                "addMethodBegin": {
                    "retrofit2.converter.jaxb.JaxbResponseConverter.<init>(JAXBContext context, Class<T> type)": 15
                },
                "addMethodEnd": {
                    "retrofit2.converter.jaxb.JaxbResponseConverter.<init>(JAXBContext context, Class<T> type)": 20
                },
                "addMethodFull": {
                    "retrofit2.converter.jaxb.JaxbResponseConverter.<init>(JAXBContext context, Class<T> type)": {
                        "lineNumber": [
                            {
                                "18": "xmlInputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, false);"
                            },
                            {
                                "19": "xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);"
                            }
                        ],
                        "paramType": "(JAXBContext context, Class<T> type)",
                        "originalFullName": "retrofit2.converter.jaxb.JaxbResponseConverter.<init>:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "www.owasp.org"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-6652": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/springframework/data/jpa/repository/query/QueryUtils.java",
                "deleteMethodBegin": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": 126,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, String alias, Order order)": 149
                },
                "deleteMethodEnd": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": 147,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, String alias, Order order)": 163
                },
                "deleteMethodFull": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": {
                        "lineNumber": [
                            {
                                "142": "builder.append(getOrderClause(aliases, alias, order)).append(\", \");"
                            }
                        ],
                        "paramType": "(String query, Sort sort, String alias)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.applySorting:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, String alias, Order order)": {
                        "lineNumber": [
                            {
                                "149": "private static String getOrderClause(Set<String> joinAliases, String alias, Order order) {"
                            }
                        ],
                        "paramType": "(Set<String> joinAliases, String alias, Order order)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause:<unresolvedSignature>(3)"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/springframework/data/jpa/domain/JpaSort.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/springframework/data/jpa/repository/query/QueryUtils.java",
                "addMethodBegin": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": 136,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order)": 160,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getFunctionAliases(String query)": 195,
                    "org.springframework.data.jpa.repository.query.QueryUtils.checkSortExpression(Order order)": 407
                },
                "addMethodEnd": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": 158,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order)": 179,
                    "org.springframework.data.jpa.repository.query.QueryUtils.getFunctionAliases(String query)": 207,
                    "org.springframework.data.jpa.repository.query.QueryUtils.checkSortExpression(Order order)": 416
                },
                "addMethodFull": {
                    "org.springframework.data.jpa.repository.query.QueryUtils.applySorting(String query, Sort sort, String alias)": {
                        "lineNumber": [
                            {
                                "151": "Set<String> functionAliases = getFunctionAliases(query);"
                            },
                            {
                                "153": "builder.append(getOrderClause(aliases, functionAliases, alias, order)).append(\", \");"
                            }
                        ],
                        "paramType": "(String query, Sort sort, String alias)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.applySorting:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order)": {
                        "lineNumber": [
                            {
                                "160": "private static String getOrderClause(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order) {"
                            },
                            {
                                "162": "checkSortExpression(order);"
                            },
                            {
                                "163": "if (functionAlias.contains(property)) {"
                            },
                            {
                                "164": "return String.format(\"%s %s\", property, toJpaDirection(order));"
                            },
                            {
                                "165": "}"
                            },
                            {
                                "166": ""
                            }
                        ],
                        "paramType": "(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.getOrderClause:<unresolvedSignature>(4)"
                    },
                    "org.springframework.data.jpa.repository.query.QueryUtils.getFunctionAliases(String query)": {
                        "lineNumber": [
                            {
                                "195": "static Set<String> getFunctionAliases(String query) {"
                            },
                            {
                                "196": "Set<String> result = new HashSet<String>();"
                            },
                            {
                                "197": "Matcher matcher = FUNCTION_PATTERN.matcher(query);"
                            },
                            {
                                "198": "while (matcher.find()) {"
                            },
                            {
                                "199": "String alias = matcher.group(FUNCTION_ALIAS_GROUP_NAME);"
                            },
                            {
                                "200": "if (StringUtils.hasText(alias)) {"
                            },
                            {
                                "201": "result.add(alias);"
                            },
                            {
                                "202": "}"
                            },
                            {
                                "203": ""
                            },
                            {
                                "204": "}"
                            },
                            {
                                "205": ""
                            },
                            {
                                "206": "return result;"
                            },
                            {
                                "207": "}"
                            }
                        ],
                        "paramType": "(String query)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.getFunctionAliases:java.util.Set(java.lang.String)"
                    },
                    "org.springframework.data.jpa.repository.query.QueryUtils.checkSortExpression(Order order)": {
                        "lineNumber": [
                            {
                                "407": "private static void checkSortExpression(Order order) {"
                            },
                            {
                                "408": "if (order instanceof JpaOrder && ((JpaOrder) order).isUnsafe()) {"
                            },
                            {
                                "409": "return;"
                            },
                            {
                                "410": "}"
                            },
                            {
                                "411": ""
                            },
                            {
                                "412": "if (PUNCTATION_PATTERN.matcher(order.getProperty()).find()) {"
                            },
                            {
                                "413": "throw new InvalidDataAccessApiUsageException(String .format(\"Sort expression '%s' must not contain functions or expressions. Please use JpaSort.unsafe.\", order));"
                            },
                            {
                                "414": "}"
                            },
                            {
                                "415": ""
                            },
                            {
                                "416": "}"
                            }
                        ],
                        "paramType": "(Order order)",
                        "originalFullName": "org.springframework.data.jpa.repository.query.QueryUtils.checkSortExpression:<unresolvedSignature>(1)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/springframework/data/jpa/domain/JpaSort.java",
                "addMethodBegin": {
                    "org.springframework.data.jpa.domain.JpaSort.<init>(List<Order> orders)": 37,
                    "org.springframework.data.jpa.domain.JpaSort.andUnsafe(Direction direction, String... properties)": 56,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(String... properties)": 102,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, String... properties)": 106,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, List<String> properties)": 113,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property)": 160,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandlingHint)": 164,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe)": 168,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(Direction order)": 174,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(NullHandling nullHandling)": 179,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsFirst()": 184,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsLast()": 189,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsNative()": 194,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.withUnsafe(String... properties)": 198,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.ignoreCase()": 209,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isIgnoreCase()": 214,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isUnsafe()": 219
                },
                "addMethodEnd": {
                    "org.springframework.data.jpa.domain.JpaSort.<init>(List<Order> orders)": 39,
                    "org.springframework.data.jpa.domain.JpaSort.andUnsafe(Direction direction, String... properties)": 68,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(String... properties)": 104,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, String... properties)": 111,
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, List<String> properties)": 121,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property)": 162,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandlingHint)": 166,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe)": 172,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(Direction order)": 177,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(NullHandling nullHandling)": 182,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsFirst()": 187,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsLast()": 192,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsNative()": 196,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.withUnsafe(String... properties)": 207,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.ignoreCase()": 212,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isIgnoreCase()": 217,
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isUnsafe()": 221
                },
                "addMethodFull": {
                    "org.springframework.data.jpa.domain.JpaSort.<init>(List<Order> orders)": {
                        "lineNumber": [
                            {
                                "37": "private JpaSort(List<Order> orders) {"
                            },
                            {
                                "38": "super(orders);"
                            },
                            {
                                "39": "}"
                            }
                        ],
                        "paramType": "(List<Order> orders)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort.<init>:<unresolvedSignature>(1)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort.andUnsafe(Direction direction, String... properties)": {
                        "lineNumber": [
                            {
                                "56": "public JpaSort andUnsafe(Direction direction, String... properties) {"
                            },
                            {
                                "57": "Assert.notEmpty(properties, \"Properties must not be null!\");"
                            },
                            {
                                "58": "List<Order> orders = new ArrayList<Order>();"
                            },
                            {
                                "59": "for (Order order : this) {"
                            },
                            {
                                "60": "orders.add(order);"
                            },
                            {
                                "61": "}"
                            },
                            {
                                "62": ""
                            },
                            {
                                "63": "for (String property : properties) {"
                            },
                            {
                                "64": "orders.add(new JpaOrder(direction, property));"
                            },
                            {
                                "65": "}"
                            },
                            {
                                "66": ""
                            },
                            {
                                "67": "return new JpaSort(orders, direction, Collections.<Path<?, ?>> emptyList());"
                            },
                            {
                                "68": "}"
                            }
                        ],
                        "paramType": "(Direction direction, String... properties)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort.andUnsafe:<unresolvedSignature>(2)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(String... properties)": {
                        "lineNumber": [
                            {
                                "102": "public static JpaSort unsafe(String... properties) {"
                            },
                            {
                                "103": "return unsafe(Sort.DEFAULT_DIRECTION, properties);"
                            },
                            {
                                "104": "}"
                            }
                        ],
                        "paramType": "(String... properties)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort.unsafe:org.springframework.data.jpa.domain.JpaSort(java.lang.String[])"
                    },
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, String... properties)": {
                        "lineNumber": [
                            {
                                "106": "public static JpaSort unsafe(Direction direction, String... properties) {"
                            },
                            {
                                "107": "Assert.notNull(direction, \"Direction must not be null!\");"
                            },
                            {
                                "108": "Assert.notEmpty(properties, \"Properties must not be empty!\");"
                            },
                            {
                                "109": "Assert.noNullElements(properties, \"Properties must not contain null values!\");"
                            },
                            {
                                "110": "return unsafe(direction, Arrays.asList(properties));"
                            },
                            {
                                "111": "}"
                            }
                        ],
                        "paramType": "(Direction direction, String... properties)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort.unsafe:<unresolvedSignature>(2)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort.unsafe(Direction direction, List<String> properties)": {
                        "lineNumber": [
                            {
                                "113": "public static JpaSort unsafe(Direction direction, List<String> properties) {"
                            },
                            {
                                "114": "Assert.notEmpty(properties, \"Properties must not be empty!\");"
                            },
                            {
                                "115": "List<Order> orders = new ArrayList<Order>();"
                            },
                            {
                                "116": "for (String property : properties) {"
                            },
                            {
                                "117": "orders.add(new JpaOrder(direction, property));"
                            },
                            {
                                "118": "}"
                            },
                            {
                                "119": ""
                            },
                            {
                                "120": "return new JpaSort(orders);"
                            },
                            {
                                "121": "}"
                            }
                        ],
                        "paramType": "(Direction direction, List<String> properties)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort.unsafe:<unresolvedSignature>(2)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property)": {
                        "lineNumber": [
                            {
                                "160": "private JpaOrder(Direction direction, String property) {"
                            },
                            {
                                "161": "this(direction, property, NullHandling.NATIVE);"
                            },
                            {
                                "162": "}"
                            }
                        ],
                        "paramType": "(Direction direction, String property)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>:<unresolvedSignature>(2)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandlingHint)": {
                        "lineNumber": [
                            {
                                "164": "private JpaOrder(Direction direction, String property, NullHandling nullHandlingHint) {"
                            },
                            {
                                "165": "this(direction, property, nullHandlingHint, false, true);"
                            },
                            {
                                "166": "}"
                            }
                        ],
                        "paramType": "(Direction direction, String property, NullHandling nullHandlingHint)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>:<unresolvedSignature>(3)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe)": {
                        "lineNumber": [
                            {
                                "168": "private JpaOrder(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe) {"
                            },
                            {
                                "169": "super(direction, property, nullHandling);"
                            },
                            {
                                "170": "this.ignoreCase = ignoreCase;"
                            },
                            {
                                "171": "this.unsafe = unsafe;"
                            },
                            {
                                "172": "}"
                            }
                        ],
                        "paramType": "(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.<init>:<unresolvedSignature>(5)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(Direction order)": {
                        "lineNumber": [
                            {
                                "174": "@Override"
                            },
                            {
                                "175": "public JpaOrder with(Direction order) {"
                            },
                            {
                                "176": "return new JpaOrder(order, getProperty(), getNullHandling(), isIgnoreCase(), this.unsafe);"
                            },
                            {
                                "177": "}"
                            }
                        ],
                        "paramType": "(Direction order)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with:<unresolvedSignature>(1)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with(NullHandling nullHandling)": {
                        "lineNumber": [
                            {
                                "179": "@Override"
                            },
                            {
                                "180": "public JpaOrder with(NullHandling nullHandling) {"
                            },
                            {
                                "181": "return new JpaOrder(getDirection(), getProperty(), nullHandling, isIgnoreCase(), this.unsafe);"
                            },
                            {
                                "182": "}"
                            }
                        ],
                        "paramType": "(NullHandling nullHandling)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.with:<unresolvedSignature>(1)"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsFirst()": {
                        "lineNumber": [
                            {
                                "184": "@Override"
                            },
                            {
                                "185": "public JpaOrder nullsFirst() {"
                            },
                            {
                                "186": "return with(NullHandling.NULLS_FIRST);"
                            },
                            {
                                "187": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsFirst:org.springframework.data.jpa.domain.JpaSort$JpaOrder()"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsLast()": {
                        "lineNumber": [
                            {
                                "189": "@Override"
                            },
                            {
                                "190": "public JpaOrder nullsLast() {"
                            },
                            {
                                "191": "return with(NullHandling.NULLS_LAST);"
                            },
                            {
                                "192": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsLast:org.springframework.data.jpa.domain.JpaSort$JpaOrder()"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsNative()": {
                        "lineNumber": [
                            {
                                "194": "public JpaOrder nullsNative() {"
                            },
                            {
                                "195": "return with(NullHandling.NATIVE);"
                            },
                            {
                                "196": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.nullsNative:org.springframework.data.jpa.domain.JpaSort$JpaOrder()"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.withUnsafe(String... properties)": {
                        "lineNumber": [
                            {
                                "198": "public Sort withUnsafe(String... properties) {"
                            },
                            {
                                "199": "Assert.notEmpty(properties, \"Properties must not be empty!\");"
                            },
                            {
                                "200": "Assert.noNullElements(properties, \"Properties must not contain null values!\");"
                            },
                            {
                                "201": "List<Order> orders = new ArrayList<Order>();"
                            },
                            {
                                "202": "for (String property : properties) {"
                            },
                            {
                                "203": "orders.add(new JpaOrder(getDirection(), property, getNullHandling(), isIgnoreCase(), this.unsafe));"
                            },
                            {
                                "204": "}"
                            },
                            {
                                "205": ""
                            },
                            {
                                "206": "return new Sort(orders);"
                            },
                            {
                                "207": "}"
                            }
                        ],
                        "paramType": "(String... properties)",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.withUnsafe:org.springframework.data.domain.Sort(java.lang.String[])"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.ignoreCase()": {
                        "lineNumber": [
                            {
                                "209": "@Override"
                            },
                            {
                                "210": "public JpaOrder ignoreCase() {"
                            },
                            {
                                "211": "return new JpaOrder(getDirection(), getProperty(), getNullHandling(), true, this.unsafe);"
                            },
                            {
                                "212": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.ignoreCase:org.springframework.data.jpa.domain.JpaSort$JpaOrder()"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isIgnoreCase()": {
                        "lineNumber": [
                            {
                                "214": "@Override"
                            },
                            {
                                "215": "public boolean isIgnoreCase() {"
                            },
                            {
                                "216": "return super.isIgnoreCase() || ignoreCase;"
                            },
                            {
                                "217": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isIgnoreCase:boolean()"
                    },
                    "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isUnsafe()": {
                        "lineNumber": [
                            {
                                "219": "public boolean isUnsafe() {"
                            },
                            {
                                "220": "return unsafe;"
                            },
                            {
                                "221": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.jpa.domain.JpaSort$JpaOrder.isUnsafe:boolean()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-29631": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/jodd/http/HttpRequest.java",
                "deleteMethodBegin": {
                    "jodd.http.HttpRequest.path(String path)": 195
                },
                "deleteMethodEnd": {
                    "jodd.http.HttpRequest.path(String path)": 225
                },
                "deleteMethodFull": {
                    "jodd.http.HttpRequest.path(String path)": {
                        "lineNumber": [
                            {
                                "200": "try {"
                            },
                            {
                                "203": "this.fragment = URLEncoder.encode(path.substring(fragmentIndex + 1), StandardCharsets.UTF_8.name());"
                            },
                            {
                                "210": "path = URLEncoder.encode(path.substring(0, ndx), StandardCharsets.UTF_8.name());"
                            },
                            {
                                "217": "this.path = URLEncoder.encode(path, StandardCharsets.UTF_8.name());"
                            },
                            {
                                "218": ";"
                            },
                            {
                                "219": "}"
                            },
                            {
                                "220": "catch (UnsupportedEncodingException e) {"
                            },
                            {
                                "221": "return null;"
                            },
                            {
                                "222": "}"
                            },
                            {
                                "223": ""
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "jodd.http.HttpRequest.path:jodd.http.HttpRequest(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/jodd/http/HttpRequest.java",
                "addMethodBegin": {
                    "jodd.http.HttpRequest.path(String path)": 195
                },
                "addMethodEnd": {
                    "jodd.http.HttpRequest.path(String path)": 218
                },
                "addMethodFull": {
                    "jodd.http.HttpRequest.path(String path)": {
                        "lineNumber": [
                            {
                                "202": "this.fragment = URLCoder.encodePath(path.substring(fragmentIndex + 1), StandardCharsets.UTF_8);"
                            },
                            {
                                "209": "path = URLCoder.encodePath(path.substring(0, ndx), StandardCharsets.UTF_8);"
                            },
                            {
                                "216": "this.path = URLCoder.encodePath(path, StandardCharsets.UTF_8);"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "jodd.http.HttpRequest.path:jodd.http.HttpRequest(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "jodd.http.HttpRequest"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-8009": {
        "old_methods_info": [
            {
                "oldFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/RunJar.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-1848": {
        "old_methods_info": [
            {
                "oldFilePath": "para-core/src/main/java/com/erudika/para/core/User.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "para-core/src/main/java/com/erudika/para/core/validation/ValidationUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "para-core/src/main/java/com/erudika/para/core/User.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "para-core/src/main/java/com/erudika/para/core/validation/ValidationUtils.java",
                "addMethodBegin": {
                    "com.erudika.para.core.validation.ValidationUtils.validateObject(ParaObject content)": 73
                },
                "addMethodEnd": {
                    "com.erudika.para.core.validation.ValidationUtils.validateObject(ParaObject content)": 95
                },
                "addMethodFull": {
                    "com.erudika.para.core.validation.ValidationUtils.validateObject(ParaObject content)": {
                        "lineNumber": [
                            {
                                "85": "if (content instanceof User && StringUtils.length(((User) content).getPassword()) > User.MAX_PASSWORD_LENGTH) {"
                            },
                            {
                                "86": "list.add(Utils.formatMessage(\"{0} must not be longer than {1}.\", Config._PASSWORD, User.MAX_PASSWORD_LENGTH));"
                            },
                            {
                                "87": "}"
                            },
                            {
                                "88": ""
                            }
                        ],
                        "paramType": "(ParaObject content)",
                        "originalFullName": "com.erudika.para.core.validation.ValidationUtils.validateObject:java.lang.String[](com.erudika.para.core.ParaObject)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-31412": {
        "old_methods_info": [
            {
                "oldFilePath": "flow-server/src/main/java/com/vaadin/flow/router/RouteNotFoundError.java",
                "deleteMethodBegin": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": 21
                },
                "deleteMethodEnd": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": 41
                },
                "deleteMethodFull": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": {
                        "lineNumber": [
                            {
                                "33": "template = template.replace(\"{{path}}\", path);"
                            },
                            {
                                "34": "template = template.replace(\"{{additionalInfo}}\", additionalInfo);"
                            }
                        ],
                        "paramType": "(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)",
                        "originalFullName": "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter:int(com.vaadin.flow.router.BeforeEnterEvent,com.vaadin.flow.router.ErrorParameter)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "flow-server/src/main/java/com/vaadin/flow/router/RouteNotFoundError.java",
                "addMethodBegin": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": 21
                },
                "addMethodEnd": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": 41
                },
                "addMethodFull": {
                    "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)": {
                        "lineNumber": [
                            {
                                "37": "template = template.replace(\"{{additionalInfo}}\", additionalInfo);"
                            },
                            {
                                "38": "template = template.replace(\"{{path}}\", path);"
                            }
                        ],
                        "paramType": "(BeforeEnterEvent event, ErrorParameter<NotFoundException> parameter)",
                        "originalFullName": "com.vaadin.flow.router.RouteNotFoundError.setErrorParameter:int(com.vaadin.flow.router.BeforeEnterEvent,com.vaadin.flow.router.ErrorParameter)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "RouteNotFoundError",
                "NotFoundException"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-40111": {
        "old_methods_info": [
            {
                "oldFilePath": "protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java",
                "addMethodBegin": {
                    "org.apache.james.imap.decode.ImapRequestLineReader.flagList()": 330
                },
                "addMethodEnd": {
                    "org.apache.james.imap.decode.ImapRequestLineReader.flagList()": 355
                },
                "addMethodFull": {
                    "org.apache.james.imap.decode.ImapRequestLineReader.flagList()": {
                        "lineNumber": [
                            {
                                "339": "if (nextWord.isEmpty()) {"
                            },
                            {
                                "340": "throw new DecodingException(HumanReadableText.FAILED, \"Empty word encountered\");"
                            },
                            {
                                "341": "}"
                            },
                            {
                                "342": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.james.imap.decode.ImapRequestLineReader.flagList:javax.mail.Flags()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "OutOfMemory"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-40110": {
        "old_methods_info": [
            {
                "oldFilePath": "mailbox/api/src/main/java/org/apache/james/mailbox/model/search/PrefixedRegex.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "mailbox/api/src/main/java/org/apache/james/mailbox/model/search/PrefixedRegex.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PrefixedRegex",
                "RE2J"
            ],
            "pathlst": [
                "com/google/re2j"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-0114": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/beanutils/PropertyUtilsBean.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/beanutils/PropertyUtilsBean.java",
                "addMethodBegin": {
                    "org.apache.commons.beanutils.PropertyUtilsBean.resetBeanIntrospectors()": 54
                },
                "addMethodEnd": {
                    "org.apache.commons.beanutils.PropertyUtilsBean.resetBeanIntrospectors()": 58
                },
                "addMethodFull": {
                    "org.apache.commons.beanutils.PropertyUtilsBean.resetBeanIntrospectors()": {
                        "lineNumber": [
                            {
                                "57": "introspectors.add(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.commons.beanutils.PropertyUtilsBean.resetBeanIntrospectors:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "getClass"
            ],
            "classnamelst": [
                "ClassLoader",
                "ActionForm",
                "BeanUtils"
            ],
            "pathlst": [],
            "langrelatedfiles": [
                "commons-beanutils-1.8.0.jar"
            ]
        }
    },
    "CVE-2022-32549": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/sling/api/request/builder/impl/RequestProgressTrackerImpl.java",
                "deleteMethodBegin": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": 46,
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": 57
                },
                "deleteMethodEnd": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": 55,
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": 67
                },
                "deleteMethodFull": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": {
                        "lineNumber": [
                            {
                                "53": "sb.append(offsetStr).append(' ').append(message).append('\\n');"
                            }
                        ],
                        "paramType": "(final long offset, final String message)",
                        "originalFullName": "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage:java.lang.String(long,java.lang.String)"
                    },
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": {
                        "lineNumber": [
                            {
                                "60": "final StringBuilder sb = new StringBuilder();"
                            },
                            {
                                "63": "sb.append(messages.next());"
                            },
                            {
                                "66": "writer.print(sb.toString());"
                            }
                        ],
                        "paramType": "(final PrintWriter writer)",
                        "originalFullName": "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump:void(java.io.PrintWriter)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/sling/api/request/builder/impl/RequestProgressTrackerImpl.java",
                "addMethodBegin": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": 46,
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": 57
                },
                "addMethodEnd": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": 55,
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": 65
                },
                "addMethodFull": {
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage(final long offset, final String message)": {
                        "lineNumber": [
                            {
                                "53": "sb.append(offsetStr).append(' ') .append(message.replace('\\n', '_').replace('\\r', '_')) .append('\\n');"
                            }
                        ],
                        "paramType": "(final long offset, final String message)",
                        "originalFullName": "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.formatMessage:java.lang.String(long,java.lang.String)"
                    },
                    "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump(final PrintWriter writer)": {
                        "lineNumber": [
                            {
                                "62": "writer.print(messages.next());"
                            }
                        ],
                        "paramType": "(final PrintWriter writer)",
                        "originalFullName": "org.apache.sling.api.request.builder.impl.RequestProgressTrackerImpl.dump:void(java.io.PrintWriter)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-22095": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
                "deleteMethodBegin": {
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 50
                },
                "deleteMethodEnd": {
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 73
                },
                "deleteMethodFull": {
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": {
                        "lineNumber": [
                            {
                                "63": "if (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType) || MessageProperties.CONTENT_TYPE_XML.equals(contentType)) {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.amqp.core.Message.getBodyContentAsString:java.lang.String()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
                "addMethodBegin": {
                    "org.springframework.amqp.core.Message.setMaxBodyLength(int length)": 34,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 56
                },
                "addMethodEnd": {
                    "org.springframework.amqp.core.Message.setMaxBodyLength(int length)": 36,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 79
                },
                "addMethodFull": {
                    "org.springframework.amqp.core.Message.setMaxBodyLength(int length)": {
                        "lineNumber": [
                            {
                                "34": "public static void setMaxBodyLength(int length) {"
                            },
                            {
                                "35": "maxBodyLength = length;"
                            },
                            {
                                "36": "}"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.springframework.amqp.core.Message.setMaxBodyLength:void(int)"
                    },
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": {
                        "lineNumber": [
                            {
                                "69": "if (this.body.length <= maxBodyLength && (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType) || MessageProperties.CONTENT_TYPE_XML.equals(contentType))) {"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.amqp.core.Message.getBodyContentAsString:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "toString"
            ],
            "classnamelst": [],
            "pathlst": [
                "amqp/src/main/java/org/springframework/amqp/core/Message.java"
            ],
            "langrelatedfiles": [
                "Message.java"
            ]
        }
    },
    "CVE-2017-8045": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
                "deleteMethodBegin": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": 29,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 57
                },
                "deleteMethodEnd": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": 32,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 75
                },
                "deleteMethodFull": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": {
                        "lineNumber": [
                            {
                                "30": "Assert.notNull(patterns, \"'patterns' cannot be null\");"
                            },
                            {
                                "31": "ALLOWED_LIST_PATTERNS.addAll(Arrays.asList(patterns));"
                            }
                        ],
                        "paramType": "(String... patterns)",
                        "originalFullName": "org.springframework.amqp.core.Message.addAllowedListPatterns:void(java.lang.String[])"
                    },
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": {
                        "lineNumber": [
                            {
                                "61": "return SerializationUtils.deserialize(new ByteArrayInputStream(this.body), ALLOWED_LIST_PATTERNS, ClassUtils.getDefaultClassLoader()).toString();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.amqp.core.Message.getBodyContentAsString:java.lang.String()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-amqp/src/main/java/org/springframework/amqp/core/Message.java",
                "addMethodBegin": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": 23,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 50
                },
                "addMethodEnd": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": 25,
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": 68
                },
                "addMethodFull": {
                    "org.springframework.amqp.core.Message.addAllowedListPatterns(String... patterns)": {
                        "lineNumber": [
                            {
                                "23": "@Deprecated"
                            }
                        ],
                        "paramType": "(String... patterns)",
                        "originalFullName": "org.springframework.amqp.core.Message.addAllowedListPatterns:void(java.lang.String[])"
                    },
                    "org.springframework.amqp.core.Message.getBodyContentAsString()": {
                        "lineNumber": [
                            {
                                "54": "return \"[serialized object]\";"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.amqp.core.Message.getBodyContentAsString:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "Message.toString"
            ],
            "classnamelst": [],
            "pathlst": [
                "org.springframework.amqp.core.Message"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-25867": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/io/socket/parser/IOParser.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "src/main/java/io/socket/client/Manager.java",
                "deleteMethodBegin": {
                    "io.socket.client.Manager.onopen()": 283,
                    "io.socket.client.Manager.ondata(String data)": 334,
                    "io.socket.client.Manager.ondata(byte[] data)": 344
                },
                "deleteMethodEnd": {
                    "io.socket.client.Manager.onopen()": 332,
                    "io.socket.client.Manager.ondata(String data)": 342,
                    "io.socket.client.Manager.ondata(byte[] data)": 352
                },
                "deleteMethodFull": {
                    "io.socket.client.Manager.onopen()": {
                        "lineNumber": [
                            {
                                "294": "Manager.this.ondata((String)data);"
                            },
                            {
                                "297": "Manager.this.ondata((byte[])data);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "io.socket.client.Manager.onopen:void()"
                    },
                    "io.socket.client.Manager.ondata(String data)": {
                        "lineNumber": [
                            {
                                "334": "private void ondata(String data) {"
                            },
                            {
                                "335": "try {"
                            },
                            {
                                "336": "this.decoder.add(data);"
                            },
                            {
                                "337": "}"
                            },
                            {
                                "338": "catch (DecodingException e) {"
                            },
                            {
                                "339": "this.onerror(e);"
                            },
                            {
                                "340": "}"
                            },
                            {
                                "341": ""
                            },
                            {
                                "342": "}"
                            }
                        ],
                        "paramType": "(String data)",
                        "originalFullName": "io.socket.client.Manager.ondata:void(java.lang.String)"
                    },
                    "io.socket.client.Manager.ondata(byte[] data)": {
                        "lineNumber": [
                            {
                                "344": "private void ondata(byte[] data) {"
                            },
                            {
                                "345": "try {"
                            },
                            {
                                "346": "this.decoder.add(data);"
                            },
                            {
                                "347": "}"
                            },
                            {
                                "348": "catch (DecodingException e) {"
                            },
                            {
                                "349": "this.onerror(e);"
                            },
                            {
                                "350": "}"
                            },
                            {
                                "351": ""
                            },
                            {
                                "352": "}"
                            }
                        ],
                        "paramType": "(byte[] data)",
                        "originalFullName": "io.socket.client.Manager.ondata:void(byte[])"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/io/socket/parser/IOParser.java",
                "addMethodBegin": {
                    "io.socket.parser.IOParser$Decoder.decodeString(String str)": 122,
                    "io.socket.parser.IOParser$Decoder.isPayloadValid(int type, Object payload)": 206
                },
                "addMethodEnd": {
                    "io.socket.parser.IOParser$Decoder.decodeString(String str)": 204,
                    "io.socket.parser.IOParser$Decoder.isPayloadValid(int type, Object payload)": 222
                },
                "addMethodFull": {
                    "io.socket.parser.IOParser$Decoder.decodeString(String str)": {
                        "lineNumber": [
                            {
                                "193": "if (!isPayloadValid(p.type, p.data)) {"
                            },
                            {
                                "194": "throw new DecodingException(\"invalid payload\");"
                            },
                            {
                                "195": "}"
                            },
                            {
                                "196": ""
                            }
                        ],
                        "paramType": "(String str)",
                        "originalFullName": "io.socket.parser.IOParser$Decoder.decodeString:io.socket.parser.Packet(java.lang.String)"
                    },
                    "io.socket.parser.IOParser$Decoder.isPayloadValid(int type, Object payload)": {
                        "lineNumber": [
                            {
                                "206": "private static boolean isPayloadValid(int type, Object payload) {"
                            },
                            {
                                "207": "switch (type) {"
                            },
                            {
                                "208": "case Parser.CONNECT:"
                            },
                            {
                                "209": "case Parser.CONNECT_ERROR:"
                            },
                            {
                                "210": "return payload instanceof JSONObject;"
                            },
                            {
                                "211": "case Parser.DISCONNECT:"
                            },
                            {
                                "212": "return payload == null;"
                            },
                            {
                                "213": "case Parser.EVENT:"
                            },
                            {
                                "214": "case Parser.BINARY_EVENT:"
                            },
                            {
                                "215": "return payload instanceof JSONArray && ((JSONArray) payload).length() > 0 && !((JSONArray) payload).isNull(0);"
                            },
                            {
                                "216": "case Parser.ACK:"
                            },
                            {
                                "217": "case Parser.BINARY_ACK:"
                            },
                            {
                                "218": "return payload instanceof JSONArray;"
                            },
                            {
                                "219": "default: return false;"
                            },
                            {
                                "220": "}"
                            },
                            {
                                "221": ""
                            },
                            {
                                "222": "}"
                            }
                        ],
                        "paramType": "(int type, Object payload)",
                        "originalFullName": "io.socket.parser.IOParser$Decoder.isPayloadValid:boolean(int,java.lang.Object)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/io/socket/client/Manager.java",
                "addMethodBegin": {
                    "io.socket.client.Manager.onopen()": 283
                },
                "addMethodEnd": {
                    "io.socket.client.Manager.onopen()": 338
                },
                "addMethodFull": {
                    "io.socket.client.Manager.onopen()": {
                        "lineNumber": [
                            {
                                "293": "try {"
                            },
                            {
                                "295": "Manager.this.decoder.add((String) data);"
                            },
                            {
                                "298": "Manager.this.decoder.add((byte[]) data);"
                            },
                            {
                                "299": "}"
                            },
                            {
                                "300": ""
                            },
                            {
                                "301": "}"
                            },
                            {
                                "302": "catch (DecodingException e) {"
                            },
                            {
                                "303": "logger.fine(\"error while decoding the packet: \" + e.getMessage());"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "io.socket.client.Manager.onopen:void()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "java/issues/505",
                "com/socketio/socket.io",
                "java/issues/609",
                "java/issues/642"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24898": {
        "old_methods_info": [
            {
                "oldFilePath": "xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xwiki-commons-core/xwiki-commons-xml/src/main/java/org/xwiki/xml/XMLUtils.java",
                "addMethodBegin": {
                    "org.xwiki.xml.XMLUtils.parse(LSInput source)": 274
                },
                "addMethodEnd": {
                    "org.xwiki.xml.XMLUtils.parse(LSInput source)": 301
                },
                "addMethodFull": {
                    "org.xwiki.xml.XMLUtils.parse(LSInput source)": {
                        "lineNumber": [
                            {
                                "282": "if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_DOCTYPE_DECLARATION, false)) {"
                            },
                            {
                                "283": "p.getDomConfig().setParameter(DISABLE_EXTERNAL_DOCTYPE_DECLARATION, false);"
                            },
                            {
                                "284": "}"
                            },
                            {
                                "285": ""
                            },
                            {
                                "286": "if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_PARAMETER_ENTITIES, false)) {"
                            },
                            {
                                "287": "p.getDomConfig().setParameter(DISABLE_EXTERNAL_PARAMETER_ENTITIES, false);"
                            },
                            {
                                "288": "}"
                            },
                            {
                                "289": ""
                            },
                            {
                                "290": "if (p.getDomConfig().canSetParameter(DISABLE_EXTERNAL_GENERAL_ENTITIES, false)) {"
                            },
                            {
                                "291": "p.getDomConfig().setParameter(DISABLE_EXTERNAL_GENERAL_ENTITIES, false);"
                            },
                            {
                                "292": "}"
                            },
                            {
                                "293": ""
                            }
                        ],
                        "paramType": "(LSInput source)",
                        "originalFullName": "org.xwiki.xml.XMLUtils.parse:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "org.xwiki.commons"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-24827": {
        "old_methods_info": [
            {
                "oldFilePath": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/enums/ValueType.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "elide-datastore/elide-datastore-aggregation/src/main/java/com/yahoo/elide/datastores/aggregation/metadata/enums/ValueType.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-22979": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java",
                "deleteMethodBegin": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": 206
                },
                "deleteMethodEnd": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": 240
                },
                "deleteMethodFull": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": {
                        "lineNumber": [
                            {
                                "206": "private synchronized FunctionInvocationWrapper compose(Class<?> type, String functionDefinition) {"
                            }
                        ],
                        "paramType": "(Class<?> type, String functionDefinition)",
                        "originalFullName": "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose:org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry$FunctionInvocationWrapper(java.lang.Class,java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/BeanFactoryAwareFunctionRegistry.java",
                "addMethodBegin": {
                    "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)": 61
                },
                "addMethodEnd": {
                    "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)": 132
                },
                "addMethodFull": {
                    "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)": {
                        "lineNumber": [
                            {
                                "72": "Object syncInstance = functionDefinition == null ? this : functionDefinition;"
                            },
                            {
                                "73": "synchronized (syncInstance) {"
                            },
                            {
                                "129": "}"
                            },
                            {
                                "130": ""
                            }
                        ],
                        "paramType": "(Class<?> type, String functionDefinition, String... expectedOutputMimeTypes)",
                        "originalFullName": "org.springframework.cloud.function.context.catalog.BeanFactoryAwareFunctionRegistry.lookup:java.lang.Object(java.lang.Class,java.lang.String,java.lang.String[])"
                    }
                }
            },
            {
                "newFilePath": "spring-cloud-function-context/src/main/java/org/springframework/cloud/function/context/catalog/SimpleFunctionRegistry.java",
                "addMethodBegin": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": 206
                },
                "addMethodEnd": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": 240
                },
                "addMethodFull": {
                    "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose(Class<?> type, String functionDefinition)": {
                        "lineNumber": [
                            {
                                "206": "private FunctionInvocationWrapper compose(Class<?> type, String functionDefinition) {"
                            }
                        ],
                        "paramType": "(Class<?> type, String functionDefinition)",
                        "originalFullName": "org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry.compose:org.springframework.cloud.function.context.catalog.SimpleFunctionRegistry$FunctionInvocationWrapper(java.lang.Class,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-1953": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java",
                "deleteMethodBegin": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": 22,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": 36,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": 61,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": 75
                },
                "deleteMethodEnd": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": 34,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": 47,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": 73,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": 86
                },
                "deleteMethodFull": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": {
                        "lineNumber": [
                            {
                                "25": "final Yaml yaml = new Yaml();"
                            }
                        ],
                        "paramType": "(final Reader in)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:void(java.io.Reader)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": {
                        "lineNumber": [
                            {
                                "38": "final Yaml yaml = new Yaml(options);"
                            }
                        ],
                        "paramType": "(final Reader in, final LoaderOptions options)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:<unresolvedSignature>(2)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": {
                        "lineNumber": [
                            {
                                "64": "final Yaml yaml = new Yaml();"
                            }
                        ],
                        "paramType": "(final InputStream in)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:void(java.io.InputStream)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": {
                        "lineNumber": [
                            {
                                "77": "final Yaml yaml = new Yaml(options);"
                            }
                        ],
                        "paramType": "(final InputStream in, final LoaderOptions options)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/configuration2/YAMLConfiguration.java",
                "addMethodBegin": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": 25,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": 39,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": 64,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": 78,
                    "org.apache.commons.configuration2.YAMLConfiguration.createYamlForReading(LoaderOptions options)": 91,
                    "org.apache.commons.configuration2.YAMLConfiguration.createClassLoadingDisablingConstructor()": 95
                },
                "addMethodEnd": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": 37,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": 50,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": 76,
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": 89,
                    "org.apache.commons.configuration2.YAMLConfiguration.createYamlForReading(LoaderOptions options)": 93,
                    "org.apache.commons.configuration2.YAMLConfiguration.createClassLoadingDisablingConstructor()": 103
                },
                "addMethodFull": {
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in)": {
                        "lineNumber": [
                            {
                                "28": "final Yaml yaml = createYamlForReading(new LoaderOptions());"
                            }
                        ],
                        "paramType": "(final Reader in)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:void(java.io.Reader)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final Reader in, final LoaderOptions options)": {
                        "lineNumber": [
                            {
                                "41": "final Yaml yaml = createYamlForReading(options);"
                            }
                        ],
                        "paramType": "(final Reader in, final LoaderOptions options)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:<unresolvedSignature>(2)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in)": {
                        "lineNumber": [
                            {
                                "67": "final Yaml yaml = createYamlForReading(new LoaderOptions());"
                            }
                        ],
                        "paramType": "(final InputStream in)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:void(java.io.InputStream)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.read(final InputStream in, final LoaderOptions options)": {
                        "lineNumber": [
                            {
                                "80": "final Yaml yaml = createYamlForReading(options);"
                            }
                        ],
                        "paramType": "(final InputStream in, final LoaderOptions options)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.read:<unresolvedSignature>(2)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.createYamlForReading(LoaderOptions options)": {
                        "lineNumber": [
                            {
                                "91": "private static Yaml createYamlForReading(LoaderOptions options) {"
                            },
                            {
                                "92": "return new Yaml(createClassLoadingDisablingConstructor(), new Representer(), new DumperOptions(), options);"
                            },
                            {
                                "93": "}"
                            }
                        ],
                        "paramType": "(LoaderOptions options)",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.createYamlForReading:<unresolvedSignature>(1)"
                    },
                    "org.apache.commons.configuration2.YAMLConfiguration.createClassLoadingDisablingConstructor()": {
                        "lineNumber": [
                            {
                                "95": "private static Constructor createClassLoadingDisablingConstructor() {"
                            },
                            {
                                "96": "return new Constructor() {"
                            },
                            {
                                "97": "@Override"
                            },
                            {
                                "98": "protected Class<?> getClassForName(String name) {"
                            },
                            {
                                "99": "throw new ConfigurationRuntimeException(\"Class loading is disabled.\");"
                            },
                            {
                                "100": "}"
                            },
                            {
                                "101": ""
                            },
                            {
                                "102": "};"
                            },
                            {
                                "103": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.commons.configuration2.YAMLConfiguration.createClassLoadingDisablingConstructor:org.yaml.snakeyaml.constructor.Constructor()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SnakeYaml"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-33609": {
        "old_methods_info": [
            {
                "oldFilePath": "server/src/main/java/com/vaadin/data/provider/DataCommunicator.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "server/src/main/java/com/vaadin/data/provider/DataCommunicator.java",
                "addMethodBegin": {
                    "com.vaadin.data.provider.DataCommunicator.onRequestRows(int firstRowIndex, int numberOfRows, int firstCachedRowIndex, int cacheSize)": 150,
                    "com.vaadin.data.provider.DataCommunicator.getMaximumAllowedRows()": 159
                },
                "addMethodEnd": {
                    "com.vaadin.data.provider.DataCommunicator.onRequestRows(int firstRowIndex, int numberOfRows, int firstCachedRowIndex, int cacheSize)": 157,
                    "com.vaadin.data.provider.DataCommunicator.getMaximumAllowedRows()": 161
                },
                "addMethodFull": {
                    "com.vaadin.data.provider.DataCommunicator.onRequestRows(int firstRowIndex, int numberOfRows, int firstCachedRowIndex, int cacheSize)": {
                        "lineNumber": [
                            {
                                "151": "if (numberOfRows > getMaximumAllowedRows()) {"
                            },
                            {
                                "152": "throw new IllegalStateException( \"Client tried fetch more rows than allowed. This is denied to prevent denial of service.\");"
                            },
                            {
                                "153": "}"
                            },
                            {
                                "154": ""
                            }
                        ],
                        "paramType": "(int firstRowIndex, int numberOfRows, int firstCachedRowIndex, int cacheSize)",
                        "originalFullName": "com.vaadin.data.provider.DataCommunicator.onRequestRows:void(int,int,int,int)"
                    },
                    "com.vaadin.data.provider.DataCommunicator.getMaximumAllowedRows()": {
                        "lineNumber": [
                            {
                                "159": "protected int getMaximumAllowedRows() {"
                            },
                            {
                                "160": "return MAXIMUM_ALLOWED_ROWS;"
                            },
                            {
                                "161": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.vaadin.data.provider.DataCommunicator.getMaximumAllowedRows:int()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "testMissing"
            ],
            "classnamelst": [
                "DataCommunicator"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-10241": {
        "old_methods_info": [
            {
                "oldFilePath": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java",
                "deleteMethodBegin": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": 232
                },
                "deleteMethodEnd": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": 277
                },
                "deleteMethodFull": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": {
                        "lineNumber": [
                            {
                                "237": "if (ls==null)"
                            },
                            {
                                "243": "buf.append(\"<HTML><HEAD>\");"
                            },
                            {
                                "244": "buf.append(\"<LINK HREF=\\\"\").append(\"jetty-dir.css\").append(\"\\\" REL=\\\"stylesheet\\\" TYPE=\\\"text/css\\\"/><TITLE>\");"
                            },
                            {
                                "246": "buf.append(\"</TITLE></HEAD><BODY>\\n<H1>\");"
                            },
                            {
                                "247": "buf.append(title);"
                            },
                            {
                                "248": "buf.append(\"</H1>\\n<TABLE BORDER=0>\\n\");"
                            },
                            {
                                "249": "if (parent){"
                            },
                            {
                                "250": "buf.append(\"<TR><TD><A HREF=\\\"\");"
                            },
                            {
                                "251": "buf.append(URIUtil.addPaths(base,\"../\"));"
                            },
                            {
                                "252": "buf.append(\"\\\">Parent Directory</A></TD><TD></TD><TD></TD></TR>\\n\");"
                            },
                            {
                                "257": "for (int i=0 ; i< ls.length ; i++){"
                            },
                            {
                                "258": "Resource item = addPath(ls[i]);"
                            },
                            {
                                "259": "buf.append(\"\\n<TR><TD><A HREF=\\\"\");"
                            },
                            {
                                "260": "String path=URIUtil.addPaths(encodedBase,URIUtil.encodePath(ls[i]));"
                            },
                            {
                                "262": "if (item.isDirectory() && !path.endsWith(\"/\"))"
                            },
                            {
                                "265": "buf.append(deTag(ls[i]));"
                            },
                            {
                                "267": "buf.append(\"</A></TD><TD ALIGN=right>\");"
                            },
                            {
                                "268": "buf.append(item.length());"
                            },
                            {
                                "269": "buf.append(\" bytes&nbsp;</TD><TD>\");"
                            },
                            {
                                "271": "buf.append(\"</TD></TR>\");"
                            },
                            {
                                "274": "buf.append(\"</TABLE>\\n\");"
                            },
                            {
                                "275": "buf.append(\"</BODY></HTML>\\n\");"
                            }
                        ],
                        "paramType": "(String base, boolean parent)",
                        "originalFullName": "org.eclipse.jetty.util.resource.Resource.getListHTML:java.lang.String(java.lang.String,boolean)"
                    }
                }
            },
            {
                "oldFilePath": "examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java",
                "deleteMethodBegin": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": 43
                },
                "deleteMethodEnd": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": 97
                },
                "deleteMethodFull": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "57": "String listing = Resource.newResource(file).getListHTML( request.getRequestURI(), request.getPathInfo().lastIndexOf(\"/\") > 0);"
                            }
                        ],
                        "paramType": "(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)",
                        "originalFullName": "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle:<unresolvedSignature>(4)"
                    }
                }
            },
            {
                "oldFilePath": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java",
                "deleteMethodBegin": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": 379
                },
                "deleteMethodEnd": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": 388
                },
                "deleteMethodFull": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": {
                        "lineNumber": [
                            {
                                "381": "String listing = resource.getListHTML(request.getRequestURI(),request.getPathInfo().lastIndexOf(\"/\") > 0);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, Resource resource)",
                        "originalFullName": "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory:<unresolvedSignature>(3)"
                    }
                }
            },
            {
                "oldFilePath": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java",
                "deleteMethodBegin": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": 570
                },
                "deleteMethodEnd": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": 595
                },
                "deleteMethodFull": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": {
                        "lineNumber": [
                            {
                                "585": "String dir = resource.getListHTML(base,pathInContext.length()>1);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)",
                        "originalFullName": "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory:<unresolvedSignature>(4)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java",
                "addMethodBegin": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": 237,
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent, String query)": 241
                },
                "addMethodEnd": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": 239,
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent, String query)": 418
                },
                "addMethodFull": {
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent)": {
                        "lineNumber": [
                            {
                                "238": "return getListHTML(base, parent, null);"
                            },
                            {
                                "239": "}"
                            }
                        ],
                        "paramType": "(String base, boolean parent)",
                        "originalFullName": "org.eclipse.jetty.util.resource.Resource.getListHTML:java.lang.String(java.lang.String,boolean)"
                    },
                    "org.eclipse.jetty.util.resource.Resource.getListHTML(String base, boolean parent, String query)": {
                        "lineNumber": [
                            {
                                "241": "public String getListHTML(String base, boolean parent, String query) throws IOException {"
                            },
                            {
                                "246": "if (ls == null){"
                            },
                            {
                                "248": "}"
                            },
                            {
                                "249": ""
                            },
                            {
                                "250": "boolean sortOrderAscending = true;"
                            },
                            {
                                "251": "String sortColumn = \"N\";"
                            },
                            {
                                "252": "if (query != null){"
                            },
                            {
                                "253": "MultiMap<String> params = new MultiMap<>();"
                            },
                            {
                                "254": "byte[] rawQuery = query.getBytes(UTF_8);"
                            },
                            {
                                "255": "UrlEncoded.decodeUtf8To(rawQuery, 0, query.length(), params);"
                            },
                            {
                                "256": "String paramO = params.getString(\"O\");"
                            },
                            {
                                "257": "String paramC = params.getString(\"C\");"
                            },
                            {
                                "258": "if (StringUtil.isNotBlank(paramO)){"
                            },
                            {
                                "259": "if (paramO.equals(\"A\")){"
                            },
                            {
                                "260": "sortOrderAscending = true;"
                            },
                            {
                                "261": "}"
                            },
                            {
                                "262": ""
                            },
                            {
                                "263": "else if (paramO.equals(\"D\")){"
                            },
                            {
                                "264": "sortOrderAscending = false;"
                            },
                            {
                                "265": "}"
                            },
                            {
                                "266": ""
                            },
                            {
                                "267": "}"
                            },
                            {
                                "268": ""
                            },
                            {
                                "269": "if (StringUtil.isNotBlank(paramC)){"
                            },
                            {
                                "270": "if (paramC.equals(\"N\") || paramC.equals(\"M\") || paramC.equals(\"S\")){"
                            },
                            {
                                "271": "sortColumn = paramC;"
                            },
                            {
                                "272": "}"
                            },
                            {
                                "273": ""
                            },
                            {
                                "274": "}"
                            },
                            {
                                "275": ""
                            },
                            {
                                "276": "}"
                            },
                            {
                                "277": ""
                            },
                            {
                                "278": "List<Resource> items = new ArrayList<>();"
                            },
                            {
                                "279": "for (int i=0 ; i< ls.length ; i++){"
                            },
                            {
                                "280": "Resource item = addPath(ls[i]);"
                            },
                            {
                                "281": "items.add(item);"
                            },
                            {
                                "282": "}"
                            },
                            {
                                "283": ""
                            },
                            {
                                "284": "if (sortColumn.equals(\"M\")){"
                            },
                            {
                                "285": "Collections.sort(items, ResourceCollators.byLastModified(sortOrderAscending));"
                            },
                            {
                                "286": "}"
                            },
                            {
                                "287": ""
                            },
                            {
                                "288": "else if (sortColumn.equals(\"S\")){"
                            },
                            {
                                "289": "Collections.sort(items, ResourceCollators.bySize(sortOrderAscending));"
                            },
                            {
                                "290": "}"
                            },
                            {
                                "291": ""
                            },
                            {
                                "292": "else{"
                            },
                            {
                                "293": "Collections.sort(items, ResourceCollators.byName(sortOrderAscending));"
                            },
                            {
                                "294": "}"
                            },
                            {
                                "295": ""
                            },
                            {
                                "300": "buf.append(\"<!DOCTYPE html>\\n\");"
                            },
                            {
                                "301": "buf.append(\"<html lang=\\\"en\\\">\\n\");"
                            },
                            {
                                "302": "buf.append(\"<head>\\n\");"
                            },
                            {
                                "303": "buf.append(\"<meta charset=\\\"utf-8\\\">\\n\");"
                            },
                            {
                                "304": "buf.append(\"<link href=\\\"jetty-dir.css\\\" rel=\\\"stylesheet\\\" />\\n\");"
                            },
                            {
                                "305": "buf.append(\"<title>\");"
                            },
                            {
                                "307": "buf.append(\"</title>\\n\");"
                            },
                            {
                                "308": "buf.append(\"</head>\\n\");"
                            },
                            {
                                "309": "buf.append(\"<body>\\n\");"
                            },
                            {
                                "310": "buf.append(\"<h1 class=\\\"title\\\">\").append(title).append(\"</h1>\\n\");"
                            },
                            {
                                "311": "final String ARROW_DOWN = \"&nbsp; &#8681;\";"
                            },
                            {
                                "312": "final String ARROW_UP = \"&nbsp; &#8679;\";"
                            },
                            {
                                "313": "String arrow;"
                            },
                            {
                                "314": "String order;"
                            },
                            {
                                "315": "buf.append(\"<table class=\\\"listing\\\">\\n\");"
                            },
                            {
                                "316": "buf.append(\"<thead>\\n\");"
                            },
                            {
                                "317": "arrow = \"\";"
                            },
                            {
                                "318": "order = \"A\";"
                            },
                            {
                                "319": "if (sortColumn.equals(\"N\")){"
                            },
                            {
                                "320": "if(sortOrderAscending) {"
                            },
                            {
                                "321": "order = \"D\";"
                            },
                            {
                                "322": "arrow = ARROW_UP;"
                            },
                            {
                                "323": "}"
                            },
                            {
                                "324": ""
                            },
                            {
                                "325": "else{"
                            },
                            {
                                "326": "order = \"A\";"
                            },
                            {
                                "327": "arrow = ARROW_DOWN;"
                            },
                            {
                                "328": "}"
                            },
                            {
                                "329": ""
                            },
                            {
                                "330": "}"
                            },
                            {
                                "331": ""
                            },
                            {
                                "332": "buf.append(\"<tr><th class=\\\"name\\\"><a href=\\\"?C=N&O=\").append(order).append(\"\\\">\");"
                            },
                            {
                                "333": "buf.append(\"Name\").append(arrow);"
                            },
                            {
                                "334": "buf.append(\"</a></th>\");"
                            },
                            {
                                "335": "arrow = \"\";"
                            },
                            {
                                "336": "order = \"A\";"
                            },
                            {
                                "337": "if (sortColumn.equals(\"M\")){"
                            },
                            {
                                "338": "if(sortOrderAscending) {"
                            },
                            {
                                "339": "order = \"D\";"
                            },
                            {
                                "340": "arrow = ARROW_UP;"
                            },
                            {
                                "341": "}"
                            },
                            {
                                "342": ""
                            },
                            {
                                "343": "else{"
                            },
                            {
                                "344": "order = \"A\";"
                            },
                            {
                                "345": "arrow = ARROW_DOWN;"
                            },
                            {
                                "346": "}"
                            },
                            {
                                "347": ""
                            },
                            {
                                "348": "}"
                            },
                            {
                                "349": ""
                            },
                            {
                                "350": "buf.append(\"<th class=\\\"lastmodified\\\"><a href=\\\"?C=M&O=\").append(order).append(\"\\\">\");"
                            },
                            {
                                "351": "buf.append(\"Last Modified\").append(arrow);"
                            },
                            {
                                "352": "buf.append(\"</a></th>\");"
                            },
                            {
                                "353": "arrow = \"\";"
                            },
                            {
                                "354": "order = \"A\";"
                            },
                            {
                                "355": "if (sortColumn.equals(\"S\")){"
                            },
                            {
                                "356": "if(sortOrderAscending) {"
                            },
                            {
                                "357": "order = \"D\";"
                            },
                            {
                                "358": "arrow = ARROW_UP;"
                            },
                            {
                                "359": "}"
                            },
                            {
                                "360": ""
                            },
                            {
                                "361": "else{"
                            },
                            {
                                "362": "order = \"A\";"
                            },
                            {
                                "363": "arrow = ARROW_DOWN;"
                            },
                            {
                                "364": "}"
                            },
                            {
                                "365": ""
                            },
                            {
                                "368": "buf.append(\"<th class=\\\"size\\\"><a href=\\\"?C=S&O=\").append(order).append(\"\\\">\");"
                            },
                            {
                                "369": "buf.append(\"Size\").append(arrow);"
                            },
                            {
                                "370": "buf.append(\"</a></th></tr>\\n\");"
                            },
                            {
                                "371": "buf.append(\"</thead>\\n\");"
                            },
                            {
                                "372": "buf.append(\"<tbody>\\n\");"
                            },
                            {
                                "374": "if (parent){"
                            },
                            {
                                "375": "buf.append(\"<tr><td class=\\\"name\\\"><a href=\\\"\");"
                            },
                            {
                                "376": "buf.append(URIUtil.addPaths(encodedBase,\"../\"));"
                            },
                            {
                                "377": "buf.append(\"\\\">Parent Directory</a></td>\");"
                            },
                            {
                                "378": "buf.append(\"<td class=\\\"lastmodified\\\">-</td>\");"
                            },
                            {
                                "379": "buf.append(\"<td>-</td>\");"
                            },
                            {
                                "380": "buf.append(\"</tr>\\n\");"
                            },
                            {
                                "381": "}"
                            },
                            {
                                "382": ""
                            },
                            {
                                "384": "for (Resource item: items){"
                            },
                            {
                                "385": "String name = item.getName();"
                            },
                            {
                                "386": "int slashIdx = name.lastIndexOf('/');"
                            },
                            {
                                "387": "if (slashIdx != -1){"
                            },
                            {
                                "388": "name = name.substring(slashIdx + 1);"
                            },
                            {
                                "389": "}"
                            },
                            {
                                "390": ""
                            },
                            {
                                "391": "buf.append(\"<tr><td class=\\\"name\\\"><a href=\\\"\");"
                            },
                            {
                                "392": "String path=URIUtil.addPaths(encodedBase,URIUtil.encodePath(name));"
                            },
                            {
                                "394": "if (item.isDirectory() && !path.endsWith(\"/\")){"
                            },
                            {
                                "396": "}"
                            },
                            {
                                "397": ""
                            },
                            {
                                "399": "buf.append(deTag(name));"
                            },
                            {
                                "400": "if (item.isDirectory() && !path.endsWith(\"/\")){"
                            },
                            {
                                "401": "buf.append(URIUtil.SLASH);"
                            },
                            {
                                "402": "}"
                            },
                            {
                                "403": ""
                            },
                            {
                                "405": "buf.append(\"</a></td>\");"
                            },
                            {
                                "406": "buf.append(\"<td class=\\\"lastmodified\\\">\");"
                            },
                            {
                                "408": "buf.append(\"</td>\");"
                            },
                            {
                                "409": "buf.append(\"<td class=\\\"size\\\">\");"
                            },
                            {
                                "410": "buf.append(String.format(\"%,d\", item.length()));"
                            },
                            {
                                "411": "buf.append(\" bytes&nbsp;</td></tr>\\n\");"
                            },
                            {
                                "414": "buf.append(\"</tbody>\\n\");"
                            },
                            {
                                "415": "buf.append(\"</table>\\n\");"
                            },
                            {
                                "416": "buf.append(\"</body></html>\\n\");"
                            }
                        ],
                        "paramType": "(String base, boolean parent, String query)",
                        "originalFullName": "org.eclipse.jetty.util.resource.Resource.getListHTML:java.lang.String(java.lang.String,boolean,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java",
                "addMethodBegin": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": 43
                },
                "addMethodEnd": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": 97
                },
                "addMethodFull": {
                    "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "57": "String listing = Resource.newResource(file).getListHTML( request.getRequestURI(), request.getPathInfo().lastIndexOf(\"/\") > 0, request.getQueryString());"
                            }
                        ],
                        "paramType": "(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)",
                        "originalFullName": "org.eclipse.jetty.embedded.FastFileServer$FastFileHandler.handle:<unresolvedSignature>(4)"
                    }
                }
            },
            {
                "newFilePath": "jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java",
                "addMethodBegin": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": 379
                },
                "addMethodEnd": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": 388
                },
                "addMethodFull": {
                    "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource)": {
                        "lineNumber": [
                            {
                                "381": "String listing = resource.getListHTML(request.getRequestURI(),request.getPathInfo().lastIndexOf(\"/\") > 0, request.getQueryString());"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, Resource resource)",
                        "originalFullName": "org.eclipse.jetty.server.handler.ResourceHandler.doDirectory:<unresolvedSignature>(3)"
                    }
                }
            },
            {
                "newFilePath": "jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java",
                "addMethodBegin": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": 570
                },
                "addMethodEnd": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": 595
                },
                "addMethodFull": {
                    "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)": {
                        "lineNumber": [
                            {
                                "585": "String dir = resource.getListHTML(base,pathInContext.length()>1, request.getQueryString());"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, Resource resource, String pathInContext)",
                        "originalFullName": "org.eclipse.jetty.servlet.DefaultServlet.sendDirectory:<unresolvedSignature>(4)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "DefaultServlet",
                "ResourceHandler"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-3584": {
        "old_methods_info": [
            {
                "oldFilePath": "rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/saml/DeflateEncoderDecoder.java",
                "deleteMethodBegin": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": 34
                },
                "deleteMethodEnd": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": 43
                },
                "deleteMethodFull": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": {
                        "lineNumber": [
                            {
                                "38": "byte[] output = new byte[tokenBytes.length];"
                            }
                        ],
                        "paramType": "(byte[] tokenBytes)",
                        "originalFullName": "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken:byte[](byte[])"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "rt/rs/security/xml/src/main/java/org/apache/cxf/rs/security/saml/DeflateEncoderDecoder.java",
                "addMethodBegin": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.inflateToken(byte[] deflatedToken)": 9,
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": 44
                },
                "addMethodEnd": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.inflateToken(byte[] deflatedToken)": 42,
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": 53
                },
                "addMethodFull": {
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.inflateToken(byte[] deflatedToken)": {
                        "lineNumber": [
                            {
                                "19": "if (inputLen == 0) {"
                            },
                            {
                                "20": "if (inflater.needsInput()) {"
                            },
                            {
                                "21": "throw new DataFormatException(\"Inflater can not inflate all the token bytes\");"
                            },
                            {
                                "22": "}"
                            },
                            {
                                "23": "else {"
                            },
                            {
                                "24": "break;"
                            },
                            {
                                "25": "}"
                            },
                            {
                                "26": ""
                            },
                            {
                                "27": "}"
                            },
                            {
                                "28": ""
                            }
                        ],
                        "paramType": "(byte[] deflatedToken)",
                        "originalFullName": "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.inflateToken:java.io.InputStream(byte[])"
                    },
                    "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken(byte[] tokenBytes)": {
                        "lineNumber": [
                            {
                                "48": "byte[] output = new byte[tokenBytes.length * 2];"
                            }
                        ],
                        "paramType": "(byte[] tokenBytes)",
                        "originalFullName": "org.apache.cxf.rs.security.saml.DeflateEncoderDecoder.deflateToken:byte[](byte[])"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "DeflaterEncoderDecoder",
                "SamlHeaderInHandler"
            ],
            "pathlst": [
                "org/repos/asf/cxf/trunk",
                "svn.apache.org"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-4465": {
        "old_methods_info": [
            {
                "oldFilePath": "xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/URLValidator.java",
                "deleteMethodBegin": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": 21
                },
                "deleteMethodEnd": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": 32
                },
                "deleteMethodFull": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": {
                        "lineNumber": [
                            {
                                "29": "return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + \")(((\\\\/+([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" + \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\";"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex:java.lang.String()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "xwork-core/src/main/java/com/opensymphony/xwork2/validator/validators/URLValidator.java",
                "addMethodBegin": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": 21
                },
                "addMethodEnd": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": 32
                },
                "addMethodFull": {
                    "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex()": {
                        "lineNumber": [
                            {
                                "29": "return \"^(https?|ftp):\\\\/\\\\/\" + \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" + \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" + \"@)?(#?\" + \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" + \"[a-z][a-z0-9-]*[a-z0-9]\" + \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" + \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" + \")(:\\\\d+)?\" + \")(((\\\\/{0,1}([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" + \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" + \"?)?)?\" + \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" + \"$\";"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "com.opensymphony.xwork2.validator.validators.URLValidator.getUrlRegex:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "RegEx"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1260": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/client/DefaultOAuth2RequestAuthenticator.java",
                "addMethodBegin": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(OAuth2ProtectedResourceDetails resource, OAuth2ClientContext clientContext, ClientHttpRequest request)": 8
                },
                "addMethodEnd": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(OAuth2ProtectedResourceDetails resource, OAuth2ClientContext clientContext, ClientHttpRequest request)": 24
                },
                "addMethodFull": {
                    "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate(OAuth2ProtectedResourceDetails resource, OAuth2ClientContext clientContext, ClientHttpRequest request)": {
                        "lineNumber": [
                            {
                                "19": "else if (tokenType.equalsIgnoreCase(OAuth2AccessToken.BEARER_TYPE)) {"
                            },
                            {
                                "20": "tokenType = OAuth2AccessToken.BEARER_TYPE;"
                            },
                            {
                                "21": "}"
                            }
                        ],
                        "paramType": "(OAuth2ProtectedResourceDetails resource, OAuth2ClientContext clientContext, ClientHttpRequest request)",
                        "originalFullName": "org.springframework.security.oauth2.client.DefaultOAuth2RequestAuthenticator.authenticate:<unresolvedSignature>(3)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "DefaultOAuth2RequestAuthenticator"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2019-11269": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [
                "matchSubdomains"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-7051": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java",
                "addMethodBegin": {
                    "com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem)": 41
                },
                "addMethodEnd": {
                    "com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem)": 59
                },
                "addMethodFull": {
                    "com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem)": {
                        "lineNumber": [
                            {
                                "49": "xmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);"
                            }
                        ],
                        "paramType": "(ObjectCodec oc, int xpFeatures, int xgFeatures, XMLInputFactory xmlIn, XMLOutputFactory xmlOut, String nameForTextElem)",
                        "originalFullName": "com.fasterxml.jackson.dataformat.xml.XmlFactory.<init>:<unresolvedSignature>(6)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "XmlMapper"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2017-8046": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/patch/AddOperation.java",
                "deleteMethodBegin": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 15
                },
                "deleteMethodEnd": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 31
                },
                "deleteMethodFull": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": {
                        "lineNumber": [
                            {
                                "21": "List<String> segments = new ArrayList<String>();"
                            },
                            {
                                "22": "for (String segment : path.split(\"/\")) {"
                            },
                            {
                                "23": "if (!(segment.matches(\"\\\\d+\") || segment.equals(\"-\") || segment.isEmpty())) {"
                            },
                            {
                                "24": "segments.add(segment);"
                            },
                            {
                                "25": "}"
                            },
                            {
                                "26": ""
                            },
                            {
                                "27": "}"
                            },
                            {
                                "28": ""
                            },
                            {
                                "29": "PropertyPath propertyPath = PropertyPath.from(StringUtils.collectionToDelimitedString(segments, \".\"), entityType);"
                            },
                            {
                                "30": "return value instanceof LateObjectEvaluator ? ((LateObjectEvaluator) value).evaluate(propertyPath.getType()) : value;"
                            }
                        ],
                        "paramType": "(Object targetObject, Class<T> entityType)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget:java.lang.Object(java.lang.Object,java.lang.Class)"
                    }
                }
            },
            {
                "oldFilePath": "spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/patch/PatchOperation.java",
                "deleteMethodBegin": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 102
                },
                "deleteMethodEnd": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 104
                },
                "deleteMethodFull": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": {
                        "lineNumber": [
                            {
                                "103": "return value instanceof LateObjectEvaluator ? ((LateObjectEvaluator) value).evaluate(spelExpression.getValueType(targetObject)) : value;"
                            }
                        ],
                        "paramType": "(Object targetObject, Class<T> entityType)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget:java.lang.Object(java.lang.Object,java.lang.Class)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/patch/AddOperation.java",
                "addMethodBegin": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 12
                },
                "addMethodEnd": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 20
                },
                "addMethodFull": {
                    "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": {
                        "lineNumber": [
                            {
                                "18": "PropertyPath path = verifyPath(entityType);"
                            },
                            {
                                "19": "return evaluate(path == null ? entityType : path.getType());"
                            }
                        ],
                        "paramType": "(Object targetObject, Class<T> entityType)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.AddOperation.evaluateValueFromTarget:java.lang.Object(java.lang.Object,java.lang.Class)"
                    }
                }
            },
            {
                "newFilePath": "spring-data-rest-webmvc/src/main/java/org/springframework/data/rest/webmvc/json/patch/PatchOperation.java",
                "addMethodBegin": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 107,
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluate(Class<T> targetType)": 112,
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.verifyPath(Class<?> type)": 133
                },
                "addMethodEnd": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": 110,
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluate(Class<T> targetType)": 114,
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.verifyPath(Class<?> type)": 154
                },
                "addMethodFull": {
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget(Object targetObject, Class<T> entityType)": {
                        "lineNumber": [
                            {
                                "108": "verifyPath(entityType);"
                            },
                            {
                                "109": "return evaluate(spelExpression.getValueType(targetObject));"
                            },
                            {
                                "110": "}"
                            }
                        ],
                        "paramType": "(Object targetObject, Class<T> entityType)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluateValueFromTarget:java.lang.Object(java.lang.Object,java.lang.Class)"
                    },
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluate(Class<T> targetType)": {
                        "lineNumber": [
                            {
                                "112": "protected final <T> Object evaluate(Class<T> targetType) {"
                            },
                            {
                                "113": "return value instanceof LateObjectEvaluator ? ((LateObjectEvaluator) value).evaluate(targetType) : value;"
                            }
                        ],
                        "paramType": "(Class<T> targetType)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.PatchOperation.evaluate:java.lang.Object(java.lang.Class)"
                    },
                    "org.springframework.data.rest.webmvc.json.patch.PatchOperation.verifyPath(Class<?> type)": {
                        "lineNumber": [
                            {
                                "133": "protected PropertyPath verifyPath(Class<?> type) {"
                            },
                            {
                                "134": "List<String> segments = new ArrayList<String>();"
                            },
                            {
                                "135": "for (String segment : path.split(\"/\")) {"
                            },
                            {
                                "136": "if (!(segment.matches(\"\\\\d+\") || segment.equals(\"-\") || segment.isEmpty())) {"
                            },
                            {
                                "137": "segments.add(segment);"
                            },
                            {
                                "138": "}"
                            },
                            {
                                "139": ""
                            },
                            {
                                "140": "}"
                            },
                            {
                                "141": ""
                            },
                            {
                                "142": "if (segments.isEmpty()) {"
                            },
                            {
                                "143": "return null;"
                            },
                            {
                                "144": "}"
                            },
                            {
                                "145": ""
                            },
                            {
                                "146": "String pathSource = StringUtils.collectionToDelimitedString(segments, \".\");"
                            },
                            {
                                "147": "try {"
                            },
                            {
                                "148": "return PropertyPath.from(pathSource, type);"
                            },
                            {
                                "149": "}"
                            },
                            {
                                "150": "catch (PropertyReferenceException o_O) {"
                            },
                            {
                                "151": "throw new PatchException(String.format(INVALID_PATH_REFERENCE, pathSource, type, path), o_O);"
                            },
                            {
                                "152": "}"
                            },
                            {
                                "153": ""
                            },
                            {
                                "154": "}"
                            }
                        ],
                        "paramType": "(Class<?> type)",
                        "originalFullName": "org.springframework.data.rest.webmvc.json.patch.PatchOperation.verifyPath:org.springframework.data.mapping.PropertyPath(java.lang.Class)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SpEL"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-11771": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "deleteMethodBegin": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": 313
                },
                "deleteMethodEnd": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": 347
                },
                "deleteMethodFull": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": {
                        "lineNumber": [
                            {
                                "331": "return -1;"
                            }
                        ],
                        "paramType": "(final byte[] buffer, final int offset, final int length)",
                        "originalFullName": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored:int(byte[],int,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java",
                "addMethodBegin": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": 313
                },
                "addMethodEnd": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": 348
                },
                "addMethodFull": {
                    "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored(final byte[] buffer, final int offset, final int length)": {
                        "lineNumber": [
                            {
                                "331": "buf.limit(0);"
                            },
                            {
                                "332": "throw new IOException(\"Truncated ZIP file\");"
                            }
                        ],
                        "paramType": "(final byte[] buffer, final int offset, final int length)",
                        "originalFullName": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStream.readStored:int(byte[],int,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ZipArchiveInputStream"
            ],
            "pathlst": [
                "java.io.InputStreamReader"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1259": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/springframework/data/web/XmlBeamHttpMessageConverter.java",
                "deleteMethodBegin": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": 19
                },
                "deleteMethodEnd": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": 22
                },
                "deleteMethodFull": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": {
                        "lineNumber": [
                            {
                                "21": "this.projectionFactory = new XBProjector();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>:void()"
                    }
                }
            },
            {
                "oldFilePath": "src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "deleteMethodBegin": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": 87
                },
                "deleteMethodEnd": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": 101
                },
                "deleteMethodFull": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": {
                        "lineNumber": [
                            {
                                "98": "converters.add(0, new XmlBeamHttpMessageConverter());"
                            }
                        ],
                        "paramType": "(List<HttpMessageConverter<?>> converters)",
                        "originalFullName": "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/springframework/data/web/XmlBeamHttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": 23,
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>(XBProjector projector)": 39,
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage)": 63
                },
                "addMethodEnd": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": 37,
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>(XBProjector projector)": 43,
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage)": 79
                },
                "addMethodFull": {
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>()": {
                        "lineNumber": [
                            {
                                "24": "this(new XBProjector(new DefaultXMLFactoriesConfig() {"
                            },
                            {
                                "25": "private static final long serialVersionUID = -1324345769124477493L;"
                            },
                            {
                                "26": "@Override"
                            },
                            {
                                "27": "public DocumentBuilderFactory createDocumentBuilderFactory() {"
                            },
                            {
                                "28": "DocumentBuilderFactory factory = super.createDocumentBuilderFactory();"
                            },
                            {
                                "29": "factory.setAttribute(\"http://apache.org/xml/features/disallow-doctype-decl\", true);"
                            },
                            {
                                "30": "factory.setAttribute(\"http://xml.org/sax/features/external-general-entities\", false);"
                            },
                            {
                                "31": "return factory;"
                            },
                            {
                                "32": "}"
                            },
                            {
                                "33": ""
                            },
                            {
                                "34": "}"
                            },
                            {
                                "35": ""
                            },
                            {
                                "36": "));"
                            },
                            {
                                "37": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>:void()"
                    },
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>(XBProjector projector)": {
                        "lineNumber": [
                            {
                                "39": "public XmlBeamHttpMessageConverter(XBProjector projector) {"
                            },
                            {
                                "41": "Assert.notNull(projector, \"XBProjector must not be null!\");"
                            },
                            {
                                "42": "this.projectionFactory = projector;"
                            }
                        ],
                        "paramType": "(XBProjector projector)",
                        "originalFullName": "org.springframework.data.web.XmlBeamHttpMessageConverter.<init>:<unresolvedSignature>(1)"
                    },
                    "org.springframework.data.web.XmlBeamHttpMessageConverter.readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage)": {
                        "lineNumber": [
                            {
                                "65": "try {"
                            },
                            {
                                "67": "}"
                            },
                            {
                                "68": "catch (RuntimeException o_O) {"
                            },
                            {
                                "69": "Throwable cause = o_O.getCause();"
                            },
                            {
                                "70": "if (SAXParseException.class.isInstance(cause)) {"
                            },
                            {
                                "71": "throw new HttpMessageNotReadableException(\"Cannot read input message!\", cause);"
                            },
                            {
                                "72": "}"
                            },
                            {
                                "73": "else {"
                            },
                            {
                                "74": "throw o_O;"
                            },
                            {
                                "75": "}"
                            },
                            {
                                "76": ""
                            },
                            {
                                "77": "}"
                            },
                            {
                                "78": ""
                            }
                        ],
                        "paramType": "(Class<? extends Object> clazz, HttpInputMessage inputMessage)",
                        "originalFullName": "org.springframework.data.web.XmlBeamHttpMessageConverter.readInternal:<unresolvedSignature>(2)"
                    }
                }
            },
            {
                "newFilePath": "src/main/java/org/springframework/data/web/config/SpringDataWebConfiguration.java",
                "addMethodBegin": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": 88
                },
                "addMethodEnd": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": 102
                },
                "addMethodFull": {
                    "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters(List<HttpMessageConverter<?>> converters)": {
                        "lineNumber": [
                            {
                                "99": "converters.add(0, xmlBeamHttpMessageConverter.orElseGet(() -> new XmlBeamHttpMessageConverter()));"
                            }
                        ],
                        "paramType": "(List<HttpMessageConverter<?>> converters)",
                        "originalFullName": "org.springframework.data.web.config.SpringDataWebConfiguration.extendMessageConverters:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "XmlBeamHttpMessageConverter",
                "DocumentBuilderFactory"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1261": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/UnZipTransformer.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/UnZipTransformer.java",
                "addMethodBegin": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 26
                },
                "addMethodEnd": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 157
                },
                "addMethodFull": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": {
                        "lineNumber": [
                            {
                                "75": "if (zipEntryName.contains(\"..\") && !destinationFile.getCanonicalPath().startsWith(workDirectory.getCanonicalPath())) {"
                            },
                            {
                                "76": "throw new ZipException(\"The file \" + zipEntryName + \" is trying to leave the target output directory of \" + workDirectory);"
                            },
                            {
                                "77": "}"
                            },
                            {
                                "78": ""
                            }
                        ],
                        "paramType": "(final Message<?> message)",
                        "originalFullName": "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-1263": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/UnZipTransformer.java",
                "deleteMethodBegin": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 26
                },
                "deleteMethodEnd": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 157
                },
                "deleteMethodFull": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": {
                        "lineNumber": [
                            {
                                "72": "final File tempDir = new File(workDirectory, message.getHeaders().getId().toString());"
                            },
                            {
                                "73": "tempDir.mkdirs();"
                            },
                            {
                                "74": "final File destinationFile = new File(tempDir, zipEntryName);"
                            },
                            {
                                "75": "if (!destinationFile.getCanonicalPath().startsWith(workDirectory.getCanonicalPath())) {"
                            },
                            {
                                "76": "throw new ZipException(\"The file \" + zipEntryName + \" is trying to leave the target output directory of \" + workDirectory);"
                            },
                            {
                                "77": "}"
                            },
                            {
                                "78": ""
                            }
                        ],
                        "paramType": "(final Message<?> message)",
                        "originalFullName": "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-integration-zip/src/main/java/org/springframework/integration/zip/transformer/UnZipTransformer.java",
                "addMethodBegin": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 26
                },
                "addMethodEnd": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": 163
                },
                "addMethodFull": {
                    "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform(final Message<?> message)": {
                        "lineNumber": [
                            {
                                "72": "final File destinationFile = checkPath(message, zipEntryName);"
                            },
                            {
                                "86": "checkPath(message, zipEntryName);"
                            },
                            {
                                "99": "public File checkPath(final Message<?> message, final String zipEntryName) throws IOException {"
                            },
                            {
                                "100": "final File tempDir = new File(workDirectory, message.getHeaders().getId().toString());"
                            },
                            {
                                "101": "tempDir.mkdirs();"
                            },
                            {
                                "102": "final File destinationFile = new File(tempDir, zipEntryName);"
                            },
                            {
                                "103": "if (!destinationFile.getCanonicalPath().startsWith(workDirectory.getCanonicalPath())) {"
                            },
                            {
                                "104": "throw new ZipException(\"The file \" + zipEntryName + \" is trying to leave the target output directory of \" + workDirectory);"
                            },
                            {
                                "105": "}"
                            },
                            {
                                "106": ""
                            },
                            {
                                "107": "return destinationFile;"
                            },
                            {
                                "108": "}"
                            },
                            {
                                "109": ""
                            }
                        ],
                        "paramType": "(final Message<?> message)",
                        "originalFullName": "org.springframework.integration.zip.transformer.UnZipTransformer.doZipTransform:<unresolvedSignature>(1)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-31860": {
        "old_methods_info": [
            {
                "oldFilePath": "zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "zeppelin-server/src/main/java/org/apache/zeppelin/service/NotebookService.java",
                "addMethodBegin": {
                    "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": 155
                },
                "addMethodEnd": {
                    "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": 180
                },
                "addMethodFull": {
                    "org.apache.zeppelin.service.NotebookService.normalizeNotePath(String notePath)": {
                        "lineNumber": [
                            {
                                "165": "notePath = URLDecoder.decode(notePath, StandardCharsets.UTF_8.toString());"
                            },
                            {
                                "166": "if (notePath.endsWith(\"/\")) {"
                            },
                            {
                                "167": "throw new IOException(\"Note name shouldn't end with '/'\");"
                            },
                            {
                                "168": "}"
                            },
                            {
                                "169": ""
                            }
                        ],
                        "paramType": "(String notePath)",
                        "originalFullName": "org.apache.zeppelin.service.NotebookService.normalizeNotePath:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [
                "server/src/test/java/org/apache/zeppelin/service/NotebookServiceTest.java",
                "server/src/main/java/org/apache/zeppelin/service/NotebookService.java"
            ],
            "langrelatedfiles": [
                "NotebookServiceTest.java",
                "NotebookService.java"
            ]
        }
    },
    "CVE-2016-6814": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/org/codehaus/groovy/runtime/MethodClosure.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/org/codehaus/groovy/runtime/MethodClosure.java",
                "addMethodBegin": {
                    "org.codehaus.groovy.runtime.MethodClosure.readObject(java.io.ObjectInputStream stream)": 44
                },
                "addMethodEnd": {
                    "org.codehaus.groovy.runtime.MethodClosure.readObject(java.io.ObjectInputStream stream)": 50
                },
                "addMethodFull": {
                    "org.codehaus.groovy.runtime.MethodClosure.readObject(java.io.ObjectInputStream stream)": {
                        "lineNumber": [
                            {
                                "44": "private void readObject(java.io.ObjectInputStream stream) throws IOException, ClassNotFoundException {"
                            },
                            {
                                "45": "if (ALLOW_RESOLVE) {"
                            },
                            {
                                "46": "stream.defaultReadObject();"
                            },
                            {
                                "47": "}"
                            },
                            {
                                "48": ""
                            },
                            {
                                "49": "throw new UnsupportedOperationException();"
                            },
                            {
                                "50": "}"
                            }
                        ],
                        "paramType": "(java.io.ObjectInputStream stream)",
                        "originalFullName": "org.codehaus.groovy.runtime.MethodClosure.readObject:void(java.io.ObjectInputStream)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "readObject"
            ],
            "classnamelst": [],
            "pathlst": [
                "e.g."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-29131": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java",
                "deleteMethodBegin": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": 13
                },
                "deleteMethodEnd": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": 39
                },
                "deleteMethodFull": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": {
                        "lineNumber": [
                            {
                                "19": "if (value instanceof Iterable) {"
                            }
                        ],
                        "paramType": "(final Object value, final int limit)",
                        "originalFullName": "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten:java.util.Collection(java.lang.Object,int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/configuration2/convert/ListDelimiterHandler.java",
                "addMethodBegin": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": 14
                },
                "addMethodEnd": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": 43
                },
                "addMethodFull": {
                    "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten(final Object value, final int limit)": {
                        "lineNumber": [
                            {
                                "20": "if (value instanceof Path) {"
                            },
                            {
                                "21": "result.add(value);"
                            },
                            {
                                "22": "}"
                            },
                            {
                                "23": "else if (value instanceof Iterable) {"
                            }
                        ],
                        "paramType": "(final Object value, final int limit)",
                        "originalFullName": "org.apache.commons.configuration2.convert.ListDelimiterHandler.flatten:java.util.Collection(java.lang.Object,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "AbstractListDelimiterHandler.flattenIterator"
            ],
            "classnamelst": [
                "StackOverflowError"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-22257": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/springframework/security/access/vote/AuthenticatedVoter.java",
                "deleteMethodBegin": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": 14
                },
                "deleteMethodEnd": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": 16
                },
                "deleteMethodFull": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": {
                        "lineNumber": [
                            {
                                "15": "return (!this.authenticationTrustResolver.isAnonymous(authentication) && !this.authenticationTrustResolver.isRememberMe(authentication));"
                            }
                        ],
                        "paramType": "(Authentication authentication)",
                        "originalFullName": "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated:boolean(org.springframework.security.core.Authentication)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/springframework/security/access/vote/AuthenticatedVoter.java",
                "addMethodBegin": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": 14
                },
                "addMethodEnd": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": 16
                },
                "addMethodFull": {
                    "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated(Authentication authentication)": {
                        "lineNumber": [
                            {
                                "15": "return authentication != null && (!this.authenticationTrustResolver.isAnonymous(authentication) && !this.authenticationTrustResolver.isRememberMe(authentication));"
                            }
                        ],
                        "paramType": "(Authentication authentication)",
                        "originalFullName": "org.springframework.security.access.vote.AuthenticatedVoter.isFullyAuthenticated:boolean(org.springframework.security.core.Authentication)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-21742": {
        "old_methods_info": [
            {
                "oldFilePath": "core/src/main/java/org/apache/james/mime4j/stream/RawField.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "core/src/main/java/org/apache/james/mime4j/stream/RawField.java",
                "addMethodBegin": {
                    "org.apache.james.mime4j.stream.RawField.<init>(String name, String body)": 25,
                    "org.apache.james.mime4j.stream.RawField.isSpace(String body, int pos)": 50
                },
                "addMethodEnd": {
                    "org.apache.james.mime4j.stream.RawField.<init>(String name, String body)": 48,
                    "org.apache.james.mime4j.stream.RawField.isSpace(String body, int pos)": 52
                },
                "addMethodFull": {
                    "org.apache.james.mime4j.stream.RawField.<init>(String name, String body)": {
                        "lineNumber": [
                            {
                                "27": "int pos = 0;"
                            },
                            {
                                "28": "while (true) {"
                            },
                            {
                                "29": "pos = body.indexOf('\\r', pos);"
                            },
                            {
                                "30": "if (pos < 0) {"
                            },
                            {
                                "31": "break;"
                            },
                            {
                                "32": "}"
                            },
                            {
                                "33": ""
                            },
                            {
                                "34": "if (pos < body.length() + 2) {"
                            },
                            {
                                "35": "if (body.charAt(pos + 1) != '\\n') {"
                            },
                            {
                                "36": "throw new IllegalArgumentException(\"Injection of un-encoded line breaks inside header field could be assimilated to header injection\");"
                            },
                            {
                                "37": "}"
                            },
                            {
                                "38": ""
                            },
                            {
                                "39": "if (pos != body.length() - 2 && !isSpace(body, pos + 2)) {"
                            },
                            {
                                "40": "throw new IllegalArgumentException(\"Injection of un-encoded line breaks inside header field could be assimilated to header injection\");"
                            },
                            {
                                "41": "}"
                            },
                            {
                                "42": ""
                            },
                            {
                                "43": "}"
                            },
                            {
                                "44": ""
                            },
                            {
                                "45": "pos ++;"
                            },
                            {
                                "46": "}"
                            },
                            {
                                "47": ""
                            },
                            {
                                "48": "}"
                            }
                        ],
                        "paramType": "(String name, String body)",
                        "originalFullName": "org.apache.james.mime4j.stream.RawField.<init>:void(java.lang.String,java.lang.String)"
                    },
                    "org.apache.james.mime4j.stream.RawField.isSpace(String body, int pos)": {
                        "lineNumber": [
                            {
                                "50": "private static boolean isSpace(String body, int pos) {"
                            },
                            {
                                "51": "return body.charAt(pos) == ' ' || body.charAt(pos) == '\\t';"
                            }
                        ],
                        "paramType": "(String body, int pos)",
                        "originalFullName": "org.apache.james.mime4j.stream.RawField.isSpace:boolean(java.lang.String,int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "MIME4J"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-27807": {
        "old_methods_info": [
            {
                "oldFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java",
                "deleteMethodBegin": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": 154,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readRemainingBytes(byte[] b, int offset, int length)": 173,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": 345
                },
                "deleteMethodEnd": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": 171,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readRemainingBytes(byte[] b, int offset, int length)": 198,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": 354
                },
                "deleteMethodFull": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": {
                        "lineNumber": [
                            {
                                "158": "return 0;"
                            }
                        ],
                        "paramType": "(byte[] b, int offset, int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBuffer.read:int(byte[],int,int)"
                    },
                    "org.apache.pdfbox.io.RandomAccessBuffer.readRemainingBytes(byte[] b, int offset, int length)": {
                        "lineNumber": [
                            {
                                "174": "if (pointer >= size){"
                            },
                            {
                                "175": "return 0;"
                            },
                            {
                                "176": "}"
                            },
                            {
                                "177": ""
                            }
                        ],
                        "paramType": "(byte[] b, int offset, int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBuffer.readRemainingBytes:int(byte[],int,int)"
                    },
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": {
                        "lineNumber": [
                            {
                                "347": "byte[] b = new byte[length];"
                            },
                            {
                                "348": "int bytesRead = read(b);"
                            },
                            {
                                "349": "while (bytesRead < length){"
                            },
                            {
                                "350": "bytesRead += read(b, bytesRead, length - bytesRead);"
                            },
                            {
                                "353": "return b;"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBuffer.readFully:byte[](int)"
                    }
                }
            },
            {
                "oldFilePath": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java",
                "deleteMethodBegin": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": 81
                },
                "deleteMethodEnd": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": 100
                },
                "deleteMethodFull": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": {
                        "lineNumber": [
                            {
                                "84": "int off = 0;"
                            },
                            {
                                "85": "int len = length;"
                            },
                            {
                                "86": "while (len > 0){"
                            },
                            {
                                "87": "int n = this.read(bytes, off, len);"
                            },
                            {
                                "88": "if (n > 0){"
                            },
                            {
                                "89": "off += n;"
                            },
                            {
                                "90": "len -= n;"
                            },
                            {
                                "93": "else{"
                            },
                            {
                                "94": "break;"
                            },
                            {
                                "96": ""
                            },
                            {
                                "97": "}"
                            },
                            {
                                "98": ""
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.pdfparser.InputStreamSource.readFully:byte[](int)"
                    }
                }
            },
            {
                "oldFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java",
                "deleteMethodBegin": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int len)": 204
                },
                "deleteMethodEnd": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int len)": 218
                },
                "deleteMethodFull": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int len)": {
                        "lineNumber": [
                            {
                                "205": "public byte[] readFully(int len) throws IOException {"
                            },
                            {
                                "206": "byte[] b = new byte[len];"
                            },
                            {
                                "207": "int n = 0;"
                            },
                            {
                                "209": "int count = read(b, n, len - n);"
                            },
                            {
                                "214": "n += count;"
                            },
                            {
                                "216": "while (n < len);"
                            },
                            {
                                "217": "return b;"
                            }
                        ],
                        "paramType": "(int len)",
                        "originalFullName": "org.apache.pdfbox.io.ScratchFileBuffer.readFully:byte[](int)"
                    }
                }
            },
            {
                "oldFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java",
                "deleteMethodBegin": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": 221
                },
                "deleteMethodEnd": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": 230
                },
                "deleteMethodFull": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": {
                        "lineNumber": [
                            {
                                "223": "byte[] b = new byte[length];"
                            },
                            {
                                "224": "int bytesRead = read(b);"
                            },
                            {
                                "225": "while(bytesRead < length) {"
                            },
                            {
                                "226": "bytesRead += read(b, bytesRead, length-bytesRead);"
                            },
                            {
                                "229": "return b;"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully:byte[](int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java",
                "addMethodBegin": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": 155,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": 342
                },
                "addMethodEnd": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": 172,
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": 356
                },
                "addMethodFull": {
                    "org.apache.pdfbox.io.RandomAccessBuffer.read(byte[] b, int offset, int length)": {
                        "lineNumber": [
                            {
                                "159": "return -1;"
                            }
                        ],
                        "paramType": "(byte[] b, int offset, int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBuffer.read:int(byte[],int,int)"
                    },
                    "org.apache.pdfbox.io.RandomAccessBuffer.readFully(int length)": {
                        "lineNumber": [
                            {
                                "344": "byte[] bytes = new byte[length];"
                            },
                            {
                                "345": "int bytesRead = 0;"
                            },
                            {
                                "346": "do {"
                            },
                            {
                                "347": "int count = read(bytes, bytesRead, length - bytesRead);"
                            },
                            {
                                "348": "if (count < 0){"
                            },
                            {
                                "349": "throw new EOFException();"
                            },
                            {
                                "352": "bytesRead += count;"
                            },
                            {
                                "353": "}"
                            },
                            {
                                "354": "while (bytesRead < length);"
                            },
                            {
                                "355": "return bytes;"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBuffer.readFully:byte[](int)"
                    }
                }
            },
            {
                "newFilePath": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java",
                "addMethodBegin": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": 82
                },
                "addMethodEnd": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": 96
                },
                "addMethodFull": {
                    "org.apache.pdfbox.pdfparser.InputStreamSource.readFully(int length)": {
                        "lineNumber": [
                            {
                                "85": "int bytesRead = 0;"
                            },
                            {
                                "86": "do {"
                            },
                            {
                                "87": "int count = read(bytes, bytesRead, length - bytesRead);"
                            },
                            {
                                "88": "if (count < 0){"
                            },
                            {
                                "89": "throw new EOFException();"
                            },
                            {
                                "92": "bytesRead += count;"
                            },
                            {
                                "94": "while (bytesRead < length);"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.pdfparser.InputStreamSource.readFully:byte[](int)"
                    }
                }
            },
            {
                "newFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java",
                "addMethodBegin": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int length)": 204
                },
                "addMethodEnd": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int length)": 218
                },
                "addMethodFull": {
                    "org.apache.pdfbox.io.ScratchFileBuffer.readFully(int length)": {
                        "lineNumber": [
                            {
                                "205": "public byte[] readFully(int length) throws IOException {"
                            },
                            {
                                "206": "byte[] bytes = new byte[length];"
                            },
                            {
                                "207": "int bytesRead = 0;"
                            },
                            {
                                "209": "int count = read(bytes, bytesRead, length - bytesRead);"
                            },
                            {
                                "214": "bytesRead += count;"
                            },
                            {
                                "216": "while (bytesRead < length);"
                            },
                            {
                                "217": "return bytes;"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.io.ScratchFileBuffer.readFully:byte[](int)"
                    }
                }
            },
            {
                "newFilePath": "pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java",
                "addMethodBegin": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": 222
                },
                "addMethodEnd": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": 236
                },
                "addMethodFull": {
                    "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully(int length)": {
                        "lineNumber": [
                            {
                                "224": "byte[] bytes = new byte[length];"
                            },
                            {
                                "225": "int bytesRead = 0;"
                            },
                            {
                                "226": "do {"
                            },
                            {
                                "227": "int count = read(bytes, bytesRead, length - bytesRead);"
                            },
                            {
                                "228": "if (count < 0){"
                            },
                            {
                                "229": "throw new EOFException();"
                            },
                            {
                                "232": "bytesRead += count;"
                            },
                            {
                                "233": "}"
                            },
                            {
                                "234": "while (bytesRead < length);"
                            },
                            {
                                "235": "return bytes;"
                            }
                        ],
                        "paramType": "(int length)",
                        "originalFullName": "org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readFully:byte[](int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "readFully"
            ],
            "classnamelst": [],
            "pathlst": [
                "svn.apache.org",
                "org/repos/asf/pdfbox/branches/2.0"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2021-35043": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/owasp/validator/html/scan/ASHTMLSerializer.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/owasp/validator/html/scan/ASHTMLSerializer.java",
                "addMethodBegin": {
                    "org.owasp.validator.html.scan.ASHTMLSerializer.escapeURI(String uri)": 48
                },
                "addMethodEnd": {
                    "org.owasp.validator.html.scan.ASHTMLSerializer.escapeURI(String uri)": 59
                },
                "addMethodFull": {
                    "org.owasp.validator.html.scan.ASHTMLSerializer.escapeURI(String uri)": {
                        "lineNumber": [
                            {
                                "48": "@Override"
                            },
                            {
                                "49": "protected String escapeURI(String uri) {"
                            },
                            {
                                "50": "String originalURI = uri;"
                            },
                            {
                                "51": "try {"
                            },
                            {
                                "52": "printEscaped(uri);"
                            },
                            {
                                "53": "}"
                            },
                            {
                                "54": "catch (IOException e) {"
                            },
                            {
                                "55": "logger.error(\"URI escaping failed for value: \" + originalURI);"
                            },
                            {
                                "56": "}"
                            },
                            {
                                "57": ""
                            },
                            {
                                "58": "return \"\";"
                            },
                            {
                                "59": "}"
                            }
                        ],
                        "paramType": "(String uri)",
                        "originalFullName": "org.owasp.validator.html.scan.ASHTMLSerializer.escapeURI:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "AntiSamy"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-4172": {
        "old_methods_info": [
            {
                "oldFilePath": "cas-client-core/src/main/java/org/jasig/cas/client/validation/AbstractUrlBasedTicketValidator.java",
                "deleteMethodBegin": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": 30
                },
                "deleteMethodEnd": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": 68
                },
                "deleteMethodFull": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": {
                        "lineNumber": [
                            {
                                "34": "urlParameters.put(\"service\", encodeUrl(serviceUrl));"
                            },
                            {
                                "62": "buffer.append(value);"
                            }
                        ],
                        "paramType": "(final String ticket, final String serviceUrl)",
                        "originalFullName": "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl:java.lang.String(java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java",
                "deleteMethodBegin": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": 27
                },
                "deleteMethodEnd": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": 29
                },
                "deleteMethodFull": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": {
                        "lineNumber": [
                            {
                                "28": "urlParameters.put(\"pgtUrl\", encodeUrl(this.proxyCallbackUrl));"
                            }
                        ],
                        "paramType": "(final Map<String, String> urlParameters)",
                        "originalFullName": "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap:void(java.util.Map)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "cas-client-core/src/main/java/org/jasig/cas/client/validation/AbstractUrlBasedTicketValidator.java",
                "addMethodBegin": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": 30
                },
                "addMethodEnd": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": 69
                },
                "addMethodFull": {
                    "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl(final String ticket, final String serviceUrl)": {
                        "lineNumber": [
                            {
                                "34": "urlParameters.put(\"service\", serviceUrl);"
                            },
                            {
                                "62": "final String encodedValue = encodeUrl(value);"
                            },
                            {
                                "63": "buffer.append(encodedValue);"
                            }
                        ],
                        "paramType": "(final String ticket, final String serviceUrl)",
                        "originalFullName": "org.jasig.cas.client.validation.AbstractUrlBasedTicketValidator.constructValidationUrl:java.lang.String(java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "cas-client-core/src/main/java/org/jasig/cas/client/validation/Cas20ServiceTicketValidator.java",
                "addMethodBegin": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": 27
                },
                "addMethodEnd": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": 29
                },
                "addMethodFull": {
                    "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap(final Map<String, String> urlParameters)": {
                        "lineNumber": [
                            {
                                "28": "urlParameters.put(\"pgtUrl\", this.proxyCallbackUrl);"
                            }
                        ],
                        "paramType": "(final Map<String, String> urlParameters)",
                        "originalFullName": "org.jasig.cas.client.validation.Cas20ServiceTicketValidator.populateUrlAttributeMap:void(java.util.Map)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "pgtUrl"
            ],
            "classnamelst": [],
            "pathlst": [
                "ServiceTicketValidator.java."
            ],
            "langrelatedfiles": [
                "AbstractUrlBasedTicketValidator.java",
                "Cas20ServiceTicketValidator.java"
            ]
        }
    },
    "CVE-2019-12402": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java",
                "addMethodBegin": {
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(final String name)": 33
                },
                "addMethodEnd": {
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(final String name)": 76
                },
                "addMethodFull": {
                    "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode(final String name)": {
                        "lineNumber": [
                            {
                                "66": "else if (res.isUnderflow() || res.isError()) {"
                            },
                            {
                                "67": "break;"
                            },
                            {
                                "68": "}"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "org.apache.commons.compress.archivers.zip.NioZipEncoding.encode:java.nio.ByteBuffer(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-4977": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java",
                "deleteMethodBegin": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": 20,
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": 36
                },
                "deleteMethodEnd": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": 30,
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": 44
                },
                "deleteMethodFull": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": {
                        "lineNumber": [
                            {
                                "23": "this.helper = new PropertyPlaceholderHelper(\"${\", \"}\");"
                            }
                        ],
                        "paramType": "(String template)",
                        "originalFullName": "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>:void(java.lang.String)"
                    },
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "41": "String result = helper.replacePlaceholders(template, resolver);"
                            }
                        ],
                        "paramType": "(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)",
                        "originalFullName": "org.springframework.security.oauth2.provider.endpoint.SpelView.render:<unresolvedSignature>(3)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/SpelView.java",
                "addMethodBegin": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": 21,
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": 37
                },
                "addMethodEnd": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": 31,
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": 48
                },
                "addMethodFull": {
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>(String template)": {
                        "lineNumber": [
                            {
                                "23": "this.prefix = new RandomValueStringGenerator().generate() + \"{\";"
                            }
                        ],
                        "paramType": "(String template)",
                        "originalFullName": "org.springframework.security.oauth2.provider.endpoint.SpelView.<init>:void(java.lang.String)"
                    },
                    "org.springframework.security.oauth2.provider.endpoint.SpelView.render(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)": {
                        "lineNumber": [
                            {
                                "42": "String maskedTemplate = template.replace(\"${\", prefix);"
                            },
                            {
                                "43": "PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(prefix, \"}\");"
                            },
                            {
                                "44": "String result = helper.replacePlaceholders(maskedTemplate, resolver);"
                            },
                            {
                                "45": "result = result.replace(prefix, \"${\");"
                            }
                        ],
                        "paramType": "(Map<String, ?> model, HttpServletRequest request, HttpServletResponse response)",
                        "originalFullName": "org.springframework.security.oauth2.provider.endpoint.SpelView.render:<unresolvedSignature>(3)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "SpEL"
            ],
            "pathlst": [
                "e.g.",
                "N.B.",
                "i.e."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-49250": {
        "old_methods_info": [
            {
                "oldFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java",
                "deleteMethodBegin": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": 32,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": 89,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpget, CloseableHttpClient httpClient)": 95
                },
                "deleteMethodEnd": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": 34,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": 93,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpget, CloseableHttpClient httpClient)": 143
                },
                "deleteMethodFull": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": {
                        "lineNumber": [
                            {
                                "33": "throw new UnsupportedOperationException(\"Construct HttpUtils\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>:void()"
                    },
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": {
                        "lineNumber": [
                            {
                                "90": "CloseableHttpClient httpclient = HttpUtils.getInstance();"
                            },
                            {
                                "91": "HttpGet httpget = new HttpGet(url);"
                            },
                            {
                                "92": "return getResponseContentString(httpget, httpclient);"
                            }
                        ],
                        "paramType": "(String url)",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.get:java.lang.String(java.lang.String)"
                    },
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpget, CloseableHttpClient httpClient)": {
                        "lineNumber": [
                            {
                                "95": "public static String getResponseContentString(HttpGet httpget, CloseableHttpClient httpClient) {"
                            },
                            {
                                "96": "if (Objects.isNull(httpget) || Objects.isNull(httpClient)) {"
                            },
                            {
                                "101": "String responseContent = null;"
                            },
                            {
                                "102": "CloseableHttpResponse response = null;"
                            },
                            {
                                "103": "try {"
                            },
                            {
                                "104": "response = httpClient.execute(httpget);"
                            },
                            {
                                "105": "if (response.getStatusLine().getStatusCode() == 200) {"
                            },
                            {
                                "106": "HttpEntity entity = response.getEntity();"
                            },
                            {
                                "107": "if (entity != null) {"
                            },
                            {
                                "108": "responseContent = EntityUtils.toString(entity, Constants.UTF_8);"
                            },
                            {
                                "109": "}"
                            },
                            {
                                "110": "else {"
                            },
                            {
                                "111": "log.warn(\"http entity is null\");"
                            },
                            {
                                "112": "}"
                            },
                            {
                                "113": ""
                            },
                            {
                                "114": "}"
                            },
                            {
                                "115": "else {"
                            },
                            {
                                "116": "log.error(\"http get:{} response status code is not 200!\", response.getStatusLine().getStatusCode());"
                            },
                            {
                                "117": "}"
                            },
                            {
                                "118": ""
                            },
                            {
                                "119": "}"
                            },
                            {
                                "120": "catch (IOException ioe) {"
                            },
                            {
                                "121": "log.error(ioe.getMessage(), ioe);"
                            },
                            {
                                "122": "}"
                            },
                            {
                                "123": "finally {"
                            },
                            {
                                "124": "try {"
                            },
                            {
                                "125": "if (response != null) {"
                            },
                            {
                                "126": "EntityUtils.consume(response.getEntity());"
                            },
                            {
                                "127": "response.close();"
                            },
                            {
                                "132": "log.error(e.getMessage(), e);"
                            },
                            {
                                "133": "}"
                            },
                            {
                                "134": ""
                            },
                            {
                                "135": "if (!httpget.isAborted()) {"
                            },
                            {
                                "136": "httpget.releaseConnection();"
                            },
                            {
                                "137": "httpget.abort();"
                            },
                            {
                                "139": ""
                            },
                            {
                                "142": "return responseContent;"
                            }
                        ],
                        "paramType": "(HttpGet httpget, CloseableHttpClient httpClient)",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/HttpUtils.java",
                "addMethodBegin": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": 46,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": 62,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpGet, CloseableHttpClient httpClient)": 68
                },
                "addMethodEnd": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": 48,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": 66,
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpGet, CloseableHttpClient httpClient)": 91
                },
                "addMethodFull": {
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>()": {
                        "lineNumber": [
                            {
                                "47": "throw new UnsupportedOperationException(\"This is a utility class and cannot be instantiated\");"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.<init>:void()"
                    },
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.get(String url)": {
                        "lineNumber": [
                            {
                                "63": "CloseableHttpClient httpClient = getInstance();"
                            },
                            {
                                "64": "HttpGet httpGet = new HttpGet(url);"
                            },
                            {
                                "65": "return getResponseContentString(httpGet, httpClient);"
                            }
                        ],
                        "paramType": "(String url)",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.get:java.lang.String(java.lang.String)"
                    },
                    "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString(HttpGet httpGet, CloseableHttpClient httpClient)": {
                        "lineNumber": [
                            {
                                "68": "public static String getResponseContentString(HttpGet httpGet, CloseableHttpClient httpClient) {"
                            },
                            {
                                "69": "if (httpGet == null || httpClient == null) {"
                            },
                            {
                                "74": "try (CloseableHttpResponse response = httpClient.execute(httpGet)) {"
                            },
                            {
                                "75": "if (response.getStatusLine().getStatusCode() != 200) {"
                            },
                            {
                                "76": "log.error(\"HTTP GET request to {} returned status code: {}\", httpGet.getURI(), response.getStatusLine().getStatusCode());"
                            },
                            {
                                "77": "return null;"
                            },
                            {
                                "80": "HttpEntity entity = response.getEntity();"
                            },
                            {
                                "81": "return entity != null ? EntityUtils.toString(entity, Constants.UTF_8) : null;"
                            },
                            {
                                "84": "log.error(\"Error executing HTTP GET request\", e);"
                            },
                            {
                                "85": "return null;"
                            },
                            {
                                "87": "finally {"
                            },
                            {
                                "88": "httpGet.releaseConnection();"
                            }
                        ],
                        "paramType": "(HttpGet httpGet, CloseableHttpClient httpClient)",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.HttpUtils.getResponseContentString:<unresolvedSignature>(2)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "testBecause"
            ],
            "classnamelst": [
                "HttpUtils"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-34662": {
        "old_methods_info": [
            {
                "oldFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/utils/FileUtils.java",
                "addMethodBegin": {
                    "org.apache.dolphinscheduler.common.utils.FileUtils.directoryTraversal(String filename)": 113
                },
                "addMethodEnd": {
                    "org.apache.dolphinscheduler.common.utils.FileUtils.directoryTraversal(String filename)": 128
                },
                "addMethodFull": {
                    "org.apache.dolphinscheduler.common.utils.FileUtils.directoryTraversal(String filename)": {
                        "lineNumber": [
                            {
                                "113": "public static boolean directoryTraversal(String filename){"
                            },
                            {
                                "114": "if (filename.contains(FOLDER_SEPARATOR)) {"
                            },
                            {
                                "115": "return true;"
                            },
                            {
                                "116": "}"
                            },
                            {
                                "117": ""
                            },
                            {
                                "118": "File file = new File(filename);"
                            },
                            {
                                "119": "try {"
                            },
                            {
                                "120": "File canonical = file.getCanonicalFile();"
                            },
                            {
                                "121": "File absolute = file.getAbsoluteFile();"
                            },
                            {
                                "122": "return !canonical.equals(absolute);"
                            },
                            {
                                "123": "}"
                            },
                            {
                                "124": "catch (IOException e) {"
                            },
                            {
                                "125": "return true;"
                            },
                            {
                                "126": "}"
                            },
                            {
                                "127": ""
                            },
                            {
                                "128": "}"
                            }
                        ],
                        "paramType": "(String filename)",
                        "originalFullName": "org.apache.dolphinscheduler.common.utils.FileUtils.directoryTraversal:boolean(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "dolphinscheduler-common/src/main/java/org/apache/dolphinscheduler/common/Constants.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/service/impl/ResourcesServiceImpl.java",
                "addMethodBegin": {
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.createDirectory(User loginUser, String name, String description, ResourceType type, int pid, String currentDir)": 77,
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.verifyFile(String name, ResourceType type, MultipartFile file)": 421,
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.onlineCreateResource(User loginUser, ResourceType type, String fileName, String fileSuffix, String desc, String content, int pid, String currentDir)": 778
                },
                "addMethodEnd": {
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.createDirectory(User loginUser, String name, String description, ResourceType type, int pid, String currentDir)": 130,
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.verifyFile(String name, ResourceType type, MultipartFile file)": 466,
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.onlineCreateResource(User loginUser, ResourceType type, String fileName, String fileSuffix, String desc, String content, int pid, String currentDir)": 832
                },
                "addMethodFull": {
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.createDirectory(User loginUser, String name, String description, ResourceType type, int pid, String currentDir)": {
                        "lineNumber": [
                            {
                                "85": "if (FileUtils.directoryTraversal(name)) {"
                            },
                            {
                                "86": "putMsg(result, Status.VERIFY_PARAMETER_NAME_FAILED);"
                            },
                            {
                                "87": "return result;"
                            },
                            {
                                "88": "}"
                            },
                            {
                                "89": ""
                            }
                        ],
                        "paramType": "(User loginUser, String name, String description, ResourceType type, int pid, String currentDir)",
                        "originalFullName": "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.createDirectory:org.apache.dolphinscheduler.api.utils.Result(org.apache.dolphinscheduler.dao.entity.User,java.lang.String,java.lang.String,org.apache.dolphinscheduler.spi.enums.ResourceType,int,java.lang.String)"
                    },
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.verifyFile(String name, ResourceType type, MultipartFile file)": {
                        "lineNumber": [
                            {
                                "424": "if (FileUtils.directoryTraversal(name)) {"
                            },
                            {
                                "425": "logger.error(\"file alias name {} verify failed\", name);"
                            },
                            {
                                "426": "putMsg(result, Status.VERIFY_PARAMETER_NAME_FAILED);"
                            },
                            {
                                "427": "return result;"
                            },
                            {
                                "428": "}"
                            },
                            {
                                "429": ""
                            },
                            {
                                "430": "if (file != null && FileUtils.directoryTraversal(Objects.requireNonNull(file.getOriginalFilename()))) {"
                            },
                            {
                                "431": "logger.error(\"file original name {} verify failed\", file.getOriginalFilename());"
                            },
                            {
                                "432": "putMsg(result, Status.VERIFY_PARAMETER_NAME_FAILED);"
                            },
                            {
                                "433": "return result;"
                            },
                            {
                                "434": "}"
                            },
                            {
                                "435": ""
                            }
                        ],
                        "paramType": "(String name, ResourceType type, MultipartFile file)",
                        "originalFullName": "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.verifyFile:<unresolvedSignature>(3)"
                    },
                    "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.onlineCreateResource(User loginUser, ResourceType type, String fileName, String fileSuffix, String desc, String content, int pid, String currentDir)": {
                        "lineNumber": [
                            {
                                "786": "if (FileUtils.directoryTraversal(fileName)) {"
                            },
                            {
                                "787": "putMsg(result, Status.VERIFY_PARAMETER_NAME_FAILED);"
                            },
                            {
                                "788": "return result;"
                            },
                            {
                                "789": "}"
                            },
                            {
                                "790": ""
                            }
                        ],
                        "paramType": "(User loginUser, ResourceType type, String fileName, String fileSuffix, String desc, String content, int pid, String currentDir)",
                        "originalFullName": "org.apache.dolphinscheduler.api.service.impl.ResourcesServiceImpl.onlineCreateResource:org.apache.dolphinscheduler.api.utils.Result(org.apache.dolphinscheduler.dao.entity.User,org.apache.dolphinscheduler.spi.enums.ResourceType,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "dolphinscheduler-api/src/main/java/org/apache/dolphinscheduler/api/enums/Status.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [
                "directoryTraversal",
                "constantsWhen"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-1597": {
        "old_methods_info": [
            {
                "oldFilePath": "pgjdbc/src/main/java/org/postgresql/core/v3/SimpleParameterList.java",
                "deleteMethodBegin": {
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": 154
                },
                "deleteMethodEnd": {
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": 249
                },
                "deleteMethodFull": {
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": {
                        "lineNumber": [
                            {
                                "161": "return \"NULL\";"
                            },
                            {
                                "167": "return Short.toString(s);"
                            },
                            {
                                "170": "return Integer.toString(i);"
                            },
                            {
                                "173": "return Long.toString(l);"
                            },
                            {
                                "177": "return \"'NaN'::real\";"
                            },
                            {
                                "180": "return Float.toString(f);"
                            },
                            {
                                "184": "return \"'NaN'::double precision\";"
                            },
                            {
                                "187": "return Double.toString(d);"
                            },
                            {
                                "192": "return \"'NaN'::numeric\";"
                            },
                            {
                                "198": "return \"'\" + uuid + \"'::uuid\";"
                            },
                            {
                                "202": "return \"'\" + pgPoint.toString() + \"'::point\";"
                            },
                            {
                                "206": "return \"'\" + pgBox.toString() + \"'::box\";"
                            },
                            {
                                "213": "StringBuilder p = new StringBuilder(3 + (param.length() + 10) / 10 * 11);"
                            },
                            {
                                "214": "p.append('\\'');"
                            },
                            {
                                "215": "try {"
                            },
                            {
                                "216": "p = Utils.escapeLiteral(p, param, standardConformingStrings);"
                            },
                            {
                                "217": "}"
                            },
                            {
                                "218": "catch (SQLException sqle) {"
                            },
                            {
                                "219": "p.append(param);"
                            },
                            {
                                "220": "}"
                            },
                            {
                                "221": ""
                            },
                            {
                                "222": "p.append('\\'');"
                            },
                            {
                                "225": "p.append(\"::timestamp\");"
                            },
                            {
                                "228": "p.append(\"::timestamp with time zone\");"
                            },
                            {
                                "231": "p.append(\"::time\");"
                            },
                            {
                                "234": "p.append(\"::time with time zone\");"
                            },
                            {
                                "237": "p.append(\"::date\");"
                            },
                            {
                                "240": "p.append(\"::interval\");"
                            },
                            {
                                "243": "p.append(\"::numeric\");"
                            },
                            {
                                "246": "return p.toString();"
                            }
                        ],
                        "paramType": "(@Positive int index, boolean standardConformingStrings)",
                        "originalFullName": "org.postgresql.core.v3.SimpleParameterList.toString:java.lang.String(int,boolean)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "pgjdbc/src/main/java/org/postgresql/core/v3/SimpleParameterList.java",
                "addMethodBegin": {
                    "org.postgresql.core.v3.SimpleParameterList.quoteAndCast(String text, String type, boolean standardConformingStrings)": 154,
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": 174
                },
                "addMethodEnd": {
                    "org.postgresql.core.v3.SimpleParameterList.quoteAndCast(String text, String type, boolean standardConformingStrings)": 172,
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": 259
                },
                "addMethodFull": {
                    "org.postgresql.core.v3.SimpleParameterList.quoteAndCast(String text, String type, boolean standardConformingStrings)": {
                        "lineNumber": [
                            {
                                "154": "private static String quoteAndCast(String text, String type, boolean standardConformingStrings) {"
                            },
                            {
                                "155": "StringBuilder sb = new StringBuilder((text.length() + 10) / 10 * 11);"
                            },
                            {
                                "156": "sb.append(\"('\");"
                            },
                            {
                                "157": "try {"
                            },
                            {
                                "158": "Utils.escapeLiteral(sb, text, standardConformingStrings);"
                            },
                            {
                                "159": "}"
                            },
                            {
                                "160": "catch (SQLException e) {"
                            },
                            {
                                "161": "sb.append('\\u0000');"
                            },
                            {
                                "162": "}"
                            },
                            {
                                "163": ""
                            },
                            {
                                "164": "sb.append(\"'\");"
                            },
                            {
                                "165": "if (type != null) {"
                            },
                            {
                                "166": "sb.append(\"::\");"
                            },
                            {
                                "167": "sb.append(type);"
                            },
                            {
                                "168": "}"
                            },
                            {
                                "169": ""
                            },
                            {
                                "170": "sb.append(\")\");"
                            },
                            {
                                "171": "return sb.toString();"
                            },
                            {
                                "172": "}"
                            }
                        ],
                        "paramType": "(String text, String type, boolean standardConformingStrings)",
                        "originalFullName": "org.postgresql.core.v3.SimpleParameterList.quoteAndCast:java.lang.String(java.lang.String,java.lang.String,boolean)"
                    },
                    "org.postgresql.core.v3.SimpleParameterList.toString(@Positive int index, boolean standardConformingStrings)": {
                        "lineNumber": [
                            {
                                "181": "return \"(NULL)\";"
                            },
                            {
                                "187": "return quoteAndCast(Short.toString(s), \"int2\", standardConformingStrings);"
                            },
                            {
                                "190": "return quoteAndCast(Integer.toString(i), \"int4\", standardConformingStrings);"
                            },
                            {
                                "193": "return quoteAndCast(Long.toString(l), \"int8\", standardConformingStrings);"
                            },
                            {
                                "197": "return \"('NaN'::real)\";"
                            },
                            {
                                "200": "return quoteAndCast(Float.toString(f), \"float\", standardConformingStrings);"
                            },
                            {
                                "204": "return \"('NaN'::double precision)\";"
                            },
                            {
                                "207": "return quoteAndCast(Double.toString(d), \"double precision\", standardConformingStrings);"
                            },
                            {
                                "212": "return \"('NaN'::numeric)\";"
                            },
                            {
                                "218": "return quoteAndCast(uuid, \"uuid\", standardConformingStrings);"
                            },
                            {
                                "222": "return quoteAndCast(pgPoint.toString(), \"point\", standardConformingStrings);"
                            },
                            {
                                "226": "return quoteAndCast(pgBox.toString(), \"box\", standardConformingStrings);"
                            },
                            {
                                "235": "return quoteAndCast(param, \"timestamp\", standardConformingStrings);"
                            },
                            {
                                "238": "return quoteAndCast(param, \"timestamp with time zone\", standardConformingStrings);"
                            },
                            {
                                "241": "return quoteAndCast(param, \"time\", standardConformingStrings);"
                            },
                            {
                                "244": "return quoteAndCast(param, \"time with time zone\", standardConformingStrings);"
                            },
                            {
                                "247": "return quoteAndCast(param, \"date\", standardConformingStrings);"
                            },
                            {
                                "250": "return quoteAndCast(param, \"interval\", standardConformingStrings);"
                            },
                            {
                                "253": "return quoteAndCast(param, \"numeric\", standardConformingStrings);"
                            },
                            {
                                "256": "return quoteAndCast(param, null, standardConformingStrings);"
                            }
                        ],
                        "paramType": "(@Positive int index, boolean standardConformingStrings)",
                        "originalFullName": "org.postgresql.core.v3.SimpleParameterList.toString:java.lang.String(int,boolean)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "PostgreSQL"
            ],
            "pathlst": [
                "e.g."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-25125": {
        "old_methods_info": [
            {
                "oldFilePath": "digdag-core/src/main/java/io/digdag/core/log/LocalFileLogServerFactory.java",
                "deleteMethodBegin": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": 106
                },
                "deleteMethodEnd": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": 121
                },
                "deleteMethodFull": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": {
                        "lineNumber": [
                            {
                                "108": "Path path = getPrefixDir(dateDir, attemptDir).resolve(fileName);"
                            },
                            {
                                "113": "catch (FileNotFoundException ex) {"
                            }
                        ],
                        "paramType": "(String dateDir, String attemptDir, String fileName)",
                        "originalFullName": "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile:byte[](java.lang.String,java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "digdag-core/src/main/java/io/digdag/core/log/LocalFileLogServerFactory.java",
                "addMethodBegin": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": 107
                },
                "addMethodEnd": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": 127
                },
                "addMethodFull": {
                    "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile(String dateDir, String attemptDir, String fileName)": {
                        "lineNumber": [
                            {
                                "109": "Path prefixDir = getPrefixDir(dateDir, attemptDir);"
                            },
                            {
                                "110": "Path path = prefixDir.resolve(fileName).normalize();"
                            },
                            {
                                "111": "if (!path.startsWith(prefixDir)) {"
                            },
                            {
                                "112": "throw new IllegalArgumentException(\"Invalid file name: \" + fileName);"
                            },
                            {
                                "113": "}"
                            },
                            {
                                "114": ""
                            },
                            {
                                "119": "catch (FileNotFoundException | NoSuchFileException ex) {"
                            }
                        ],
                        "paramType": "(String dateDir, String attemptDir, String fileName)",
                        "originalFullName": "io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer.getFile:byte[](java.lang.String,java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "LocalFileLogServerDigdag"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-23833": {
        "old_methods_info": [
            {
                "oldFilePath": "extensions/database/src/com/google/refine/extension/database/DatabaseConfiguration.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "extensions/database/src/com/google/refine/extension/database/DatabaseConfiguration.java",
                "addMethodBegin": {
                    "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": 34
                },
                "addMethodEnd": {
                    "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": 40
                },
                "addMethodFull": {
                    "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost(String databaseServer)": {
                        "lineNumber": [
                            {
                                "35": "if (databaseServer == null || databaseServer.contains(\"(\") || databaseServer.contains(\"=\")) {"
                            },
                            {
                                "36": "throw new IllegalArgumentException(\"Invalid host supplied\");"
                            },
                            {
                                "37": "}"
                            },
                            {
                                "38": ""
                            }
                        ],
                        "paramType": "(String databaseServer)",
                        "originalFullName": "com.google.refine.extension.database.DatabaseConfiguration.setDatabaseHost:void(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "OpenRefine"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2024-24569": {
        "old_methods_info": [
            {
                "oldFilePath": "src/main/java/io/github/pixee/security/ZipSecurity.java",
                "deleteMethodBegin": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": 45,
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowCurrentDirectory(final File fileWithEscapes)": 62
                },
                "deleteMethodEnd": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": 60,
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowCurrentDirectory(final File fileWithEscapes)": 67
                },
                "deleteMethodFull": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": {
                        "lineNumber": [
                            {
                                "47": "final File fileWithEscapes = new File(name);"
                            },
                            {
                                "49": "if (isBelowCurrentDirectory(fileWithEscapes)) {"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot:boolean(java.lang.String)"
                    },
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowCurrentDirectory(final File fileWithEscapes)": {
                        "lineNumber": [
                            {
                                "62": "boolean isBelowCurrentDirectory(final File fileWithEscapes) throws IOException {"
                            },
                            {
                                "63": "final File currentDirectory = new File(\"\");"
                            },
                            {
                                "64": "String canonicalizedTargetPath = fileWithEscapes.getCanonicalPath();"
                            },
                            {
                                "65": "String canonicalizedCurrentPath = currentDirectory.getCanonicalPath();"
                            },
                            {
                                "66": "return !canonicalizedTargetPath.startsWith(canonicalizedCurrentPath);"
                            }
                        ],
                        "paramType": "(final File fileWithEscapes)",
                        "originalFullName": "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowCurrentDirectory:boolean(java.io.File)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "src/main/java/io/github/pixee/security/ZipSecurity.java",
                "addMethodBegin": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": 46,
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowOrSisterToCurrentDirectory(final String untrustedFileWithEscapes)": 62
                },
                "addMethodEnd": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": 60,
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowOrSisterToCurrentDirectory(final String untrustedFileWithEscapes)": 68
                },
                "addMethodFull": {
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot(final String name)": {
                        "lineNumber": [
                            {
                                "49": "if (isBelowOrSisterToCurrentDirectory(name)) {"
                            }
                        ],
                        "paramType": "(final String name)",
                        "originalFullName": "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.containsEscapesAndTargetsBelowRoot:boolean(java.lang.String)"
                    },
                    "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowOrSisterToCurrentDirectory(final String untrustedFileWithEscapes)": {
                        "lineNumber": [
                            {
                                "62": "private boolean isBelowOrSisterToCurrentDirectory(final String untrustedFileWithEscapes) throws IOException {"
                            },
                            {
                                "63": "final File currentDirectory = new File(\"\").getCanonicalFile();"
                            },
                            {
                                "64": "final Path currentPathRoot = currentDirectory.toPath();"
                            },
                            {
                                "65": "final File untrustedFile = new File(currentDirectory, untrustedFileWithEscapes);"
                            },
                            {
                                "66": "final Path pathWithEscapes = untrustedFile.getCanonicalFile().toPath();"
                            },
                            {
                                "67": "return !pathWithEscapes.startsWith(currentPathRoot);"
                            }
                        ],
                        "paramType": "(final String untrustedFileWithEscapes)",
                        "originalFullName": "io.github.pixee.security.ZipSecurity$HardenedZipInputStream.isBelowOrSisterToCurrentDirectory:boolean(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "protectionThe"
            ],
            "classnamelst": [
                "ZipSecurity"
            ],
            "pathlst": [
                "/etc/",
                "e.g.",
                "/my/app/path"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-51074": {
        "old_methods_info": [
            {
                "oldFilePath": "json-path/src/main/java/com/jayway/jsonpath/internal/path/PathCompiler.java",
                "deleteMethodBegin": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": 542
                },
                "deleteMethodEnd": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": 607
                },
                "deleteMethodFull": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": {
                        "lineNumber": [
                            {
                                "600": "int endBracketIndex = path.indexOfNextSignificantChar(endPosition, CLOSE_SQUARE_BRACKET) + 1;"
                            }
                        ],
                        "paramType": "(PathTokenAppender appender)",
                        "originalFullName": "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken:boolean(com.jayway.jsonpath.internal.path.PathTokenAppender)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "json-path/src/main/java/com/jayway/jsonpath/internal/path/PathCompiler.java",
                "addMethodBegin": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": 542
                },
                "addMethodEnd": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": 611
                },
                "addMethodFull": {
                    "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken(PathTokenAppender appender)": {
                        "lineNumber": [
                            {
                                "600": "int endBracketIndex = path.indexOfNextSignificantChar(endPosition, CLOSE_SQUARE_BRACKET);"
                            },
                            {
                                "601": "if(endBracketIndex == -1) {"
                            },
                            {
                                "602": "fail(\"Property has not been closed - missing closing ]\");"
                            },
                            {
                                "603": "}"
                            },
                            {
                                "604": "endBracketIndex++;"
                            }
                        ],
                        "paramType": "(PathTokenAppender appender)",
                        "originalFullName": "com.jayway.jsonpath.internal.path.PathCompiler.readBracketPropertyToken:boolean(com.jayway.jsonpath.internal.path.PathTokenAppender)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-51075": {
        "old_methods_info": [
            {
                "oldFilePath": "hutool-core/src/main/java/cn/hutool/core/text/finder/PatternFinder.java",
                "deleteMethodBegin": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": 27
                },
                "deleteMethodEnd": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": 37
                },
                "deleteMethodFull": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": {
                        "lineNumber": [
                            {
                                "30": "if(matcher.end() <= getValidEndIndex()){"
                            },
                            {
                                "31": "return matcher.start();"
                            }
                        ],
                        "paramType": "(int from)",
                        "originalFullName": "cn.hutool.core.text.finder.PatternFinder.start:int(int)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "hutool-core/src/main/java/cn/hutool/core/text/finder/PatternFinder.java",
                "addMethodBegin": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": 27
                },
                "addMethodEnd": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": 43
                },
                "addMethodFull": {
                    "cn.hutool.core.text.finder.PatternFinder.start(int from)": {
                        "lineNumber": [
                            {
                                "30": "final int end = matcher.end();"
                            },
                            {
                                "31": "if(end <= getValidEndIndex()){"
                            },
                            {
                                "32": "final int start = matcher.start();"
                            },
                            {
                                "33": "if(start == end){"
                            },
                            {
                                "34": "return INDEX_NOT_FOUND;"
                            },
                            {
                                "35": "}"
                            },
                            {
                                "36": ""
                            },
                            {
                                "37": "return start;"
                            }
                        ],
                        "paramType": "(int from)",
                        "originalFullName": "cn.hutool.core.text.finder.PatternFinder.start:int(int)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-51080": {
        "old_methods_info": [
            {
                "oldFilePath": "hutool-core/src/main/java/org/dromara/hutool/core/math/NumberParser.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "hutool-cron/src/main/java/org/dromara/hutool/cron/CronConfig.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "hutool-core/src/main/java/org/dromara/hutool/core/math/NumberUtil.java",
                "deleteMethodBegin": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": 399
                },
                "deleteMethodEnd": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": 418
                },
                "deleteMethodFull": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": {
                        "lineNumber": [
                            {
                                "417": "return toBigDecimal(number.toString());"
                            }
                        ],
                        "paramType": "(final Number number)",
                        "originalFullName": "org.dromara.hutool.core.math.NumberUtil.toBigDecimal:java.math.BigDecimal(java.lang.Number)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "hutool-core/src/main/java/org/dromara/hutool/core/math/NumberParser.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "hutool-cron/src/main/java/org/dromara/hutool/cron/CronConfig.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "hutool-core/src/main/java/org/dromara/hutool/core/math/NumberUtil.java",
                "addMethodBegin": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": 399
                },
                "addMethodEnd": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": 418
                },
                "addMethodFull": {
                    "org.dromara.hutool.core.math.NumberUtil.toBigDecimal(final Number number)": {
                        "lineNumber": [
                            {
                                "417": "return new BigDecimal(number.toString());"
                            }
                        ],
                        "paramType": "(final Number number)",
                        "originalFullName": "org.dromara.hutool.core.math.NumberUtil.toBigDecimal:java.math.BigDecimal(java.lang.Number)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2023-42276": {
        "old_methods_info": [
            {
                "oldFilePath": "hutool-core/src/main/java/cn/hutool/core/collection/ListUtil.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "hutool-json/src/main/java/cn/hutool/json/JSONArray.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "hutool-core/src/main/java/cn/hutool/core/collection/ListUtil.java",
                "addMethodBegin": {
                    "cn.hutool.core.collection.ListUtil.setOrPadding(List<T> list, int index, T element, T paddingElement)": 219
                },
                "addMethodEnd": {
                    "cn.hutool.core.collection.ListUtil.setOrPadding(List<T> list, int index, T element, T paddingElement)": 238
                },
                "addMethodFull": {
                    "cn.hutool.core.collection.ListUtil.setOrPadding(List<T> list, int index, T element, T paddingElement)": {
                        "lineNumber": [
                            {
                                "226": "if(index > (list.size() + 1) * 2) {"
                            },
                            {
                                "227": "throw new UtilException(\"Index is too large:\", index);"
                            },
                            {
                                "228": "}"
                            },
                            {
                                "229": ""
                            }
                        ],
                        "paramType": "(List<T> list, int index, T element, T paddingElement)",
                        "originalFullName": "cn.hutool.core.collection.ListUtil.setOrPadding:java.util.List(java.util.List,int,java.lang.Object,java.lang.Object)"
                    }
                }
            },
            {
                "newFilePath": "hutool-json/src/main/java/cn/hutool/json/JSONArray.java",
                "addMethodBegin": {
                    "cn.hutool.json.JSONArray.add(int index, Object element)": 279
                },
                "addMethodEnd": {
                    "cn.hutool.json.JSONArray.add(int index, Object element)": 301
                },
                "addMethodFull": {
                    "cn.hutool.json.JSONArray.add(int index, Object element)": {
                        "lineNumber": [
                            {
                                "290": "if(index > (this.size() + 1) * 2) {"
                            },
                            {
                                "291": "throw new JSONException(\"Index is too large:\", index);"
                            },
                            {
                                "292": "}"
                            },
                            {
                                "293": ""
                            }
                        ],
                        "paramType": "(int index, Object element)",
                        "originalFullName": "cn.hutool.json.JSONArray.add:void(int,java.lang.Object)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "jsonArray"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-17297": {
        "old_methods_info": [
            {
                "oldFilePath": "hutool-core/src/main/java/cn/hutool/core/util/ZipUtil.java",
                "deleteMethodBegin": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": 166
                },
                "deleteMethodEnd": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": 168
                },
                "deleteMethodFull": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": {
                        "lineNumber": [
                            {
                                "168": "outItemFile = new File(outFile, zipEntry.getName());"
                            }
                        ],
                        "paramType": "(File zipFile, Charset charset)",
                        "originalFullName": "cn.hutool.core.util.ZipUtil.unzip:java.io.File(java.io.File,java.nio.charset.Charset)"
                    }
                }
            },
            {
                "oldFilePath": "hutool-core/src/main/java/cn/hutool/core/io/FileUtil.java",
                "deleteMethodBegin": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": 186,
                    "cn.hutool.core.io.FileUtil.file(String path)": 246,
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": 264
                },
                "deleteMethodEnd": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": 238,
                    "cn.hutool.core.io.FileUtil.file(String path)": 252,
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": 270
                },
                "deleteMethodFull": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": {
                        "lineNumber": [
                            {
                                "226": "if (StrUtil.isBlank(path)) {"
                            },
                            {
                                "227": "throw new NullPointerException(\"File path is blank!\");"
                            },
                            {
                                "228": "}"
                            },
                            {
                                "229": ""
                            },
                            {
                                "230": "return new File(parent, path);"
                            },
                            {
                                "237": "return new File(parent, path);"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.listFileNames:java.util.List(java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.file(String path)": {
                        "lineNumber": [
                            {
                                "250": "file = new File(file, name);"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.file:java.io.File(java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": {
                        "lineNumber": [
                            {
                                "266": "file = new File(name);"
                            },
                            {
                                "269": "file = new File(file, name);"
                            }
                        ],
                        "paramType": "(File parent, String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.file:java.io.File(java.io.File,java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "hutool-core/src/main/java/cn/hutool/core/util/ZipUtil.java",
                "addMethodBegin": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": 166
                },
                "addMethodEnd": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": 168
                },
                "addMethodFull": {
                    "cn.hutool.core.util.ZipUtil.unzip(File zipFile, Charset charset)": {
                        "lineNumber": [
                            {
                                "168": "outItemFile = FileUtil.file(outFile, zipEntry.getName());"
                            }
                        ],
                        "paramType": "(File zipFile, Charset charset)",
                        "originalFullName": "cn.hutool.core.util.ZipUtil.unzip:java.io.File(java.io.File,java.nio.charset.Charset)"
                    }
                }
            },
            {
                "newFilePath": "hutool-core/src/main/java/cn/hutool/core/io/FileUtil.java",
                "addMethodBegin": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": 186,
                    "cn.hutool.core.io.FileUtil.file(String path)": 246,
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": 260,
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, String charset)": 1600,
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, Charset charset)": 1605,
                    "cn.hutool.core.io.FileUtil.appendUtf8String(String content, String path)": 1610,
                    "cn.hutool.core.io.FileUtil.appendString(String content, String path, String charset)": 1615
                },
                "addMethodEnd": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": 238,
                    "cn.hutool.core.io.FileUtil.file(String path)": 252,
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": 268,
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, String charset)": 1602,
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, Charset charset)": 1607,
                    "cn.hutool.core.io.FileUtil.appendUtf8String(String content, String path)": 1612,
                    "cn.hutool.core.io.FileUtil.appendString(String content, String path, String charset)": 1617
                },
                "addMethodFull": {
                    "cn.hutool.core.io.FileUtil.listFileNames(String path)": {
                        "lineNumber": [
                            {
                                "226": "return file(new File(parent), path);"
                            },
                            {
                                "233": "final File file = new File(parent, path);"
                            },
                            {
                                "234": "checkSlip(parent, file);"
                            },
                            {
                                "235": "return file;"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.listFileNames:java.util.List(java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.file(String path)": {
                        "lineNumber": [
                            {
                                "248": "file = file(file, name);"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.file:java.io.File(java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.file(File parent, String path)": {
                        "lineNumber": [
                            {
                                "264": "file = file(name);"
                            },
                            {
                                "267": "file = file(file, name);"
                            }
                        ],
                        "paramType": "(File parent, String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.file:java.io.File(java.io.File,java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, String charset)": {
                        "lineNumber": [
                            {
                                "1600": "String parentCanonicalPath;"
                            },
                            {
                                "1601": "String canonicalPath;"
                            },
                            {
                                "1602": "try {"
                            }
                        ],
                        "paramType": "(String content, File file, String charset)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.writeString:java.io.File(java.lang.String,java.io.File,java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.writeString(String content, File file, Charset charset)": {
                        "lineNumber": [
                            {
                                "1605": "}"
                            },
                            {
                                "1606": "catch (IOException e) {"
                            },
                            {
                                "1607": "throw new IORuntimeException(e);"
                            }
                        ],
                        "paramType": "(String content, File file, Charset charset)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.writeString:java.io.File(java.lang.String,java.io.File,java.nio.charset.Charset)"
                    },
                    "cn.hutool.core.io.FileUtil.appendUtf8String(String content, String path)": {
                        "lineNumber": [
                            {
                                "1610": "if (false == canonicalPath.startsWith(parentCanonicalPath)) {"
                            },
                            {
                                "1611": "throw new IllegalArgumentException(\"New file is outside of the parent dir: \" + file.getName());"
                            },
                            {
                                "1612": "}"
                            }
                        ],
                        "paramType": "(String content, String path)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.appendUtf8String:java.io.File(java.lang.String,java.lang.String)"
                    },
                    "cn.hutool.core.io.FileUtil.appendString(String content, String path, String charset)": {
                        "lineNumber": [
                            {
                                "1615": ""
                            }
                        ],
                        "paramType": "(String content, String path, String charset)",
                        "originalFullName": "cn.hutool.core.io.FileUtil.appendString:java.io.File(java.lang.String,java.lang.String,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": [
                "ZipUtil.java"
            ]
        }
    },
    "CVE-2013-6430": {
        "old_methods_info": [
            {
                "oldFilePath": "org.springframework.web/src/main/java/org/springframework/web/util/JavaScriptUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "org.springframework.web/src/main/java/org/springframework/web/util/JavaScriptUtils.java",
                "addMethodBegin": {
                    "org.springframework.web.util.JavaScriptUtils.javaScriptEscape(String input)": 3
                },
                "addMethodEnd": {
                    "org.springframework.web.util.JavaScriptUtils.javaScriptEscape(String input)": 80
                },
                "addMethodFull": {
                    "org.springframework.web.util.JavaScriptUtils.javaScriptEscape(String input)": {
                        "lineNumber": [
                            {
                                "48": "else if (c == '\\b') {"
                            },
                            {
                                "49": "filtered.append(\"\\\\b\");"
                            },
                            {
                                "50": "}"
                            },
                            {
                                "51": ""
                            },
                            {
                                "52": "else if (c == '\\013') {"
                            },
                            {
                                "53": "filtered.append(\"\\\\v\");"
                            },
                            {
                                "54": "}"
                            },
                            {
                                "55": ""
                            },
                            {
                                "56": "else if (c == '<') {"
                            },
                            {
                                "57": "filtered.append(\"\\\\u003C\");"
                            },
                            {
                                "58": "}"
                            },
                            {
                                "59": ""
                            },
                            {
                                "60": "else if (c == '>') {"
                            },
                            {
                                "61": "filtered.append(\"\\\\u003E\");"
                            },
                            {
                                "62": "}"
                            },
                            {
                                "63": ""
                            },
                            {
                                "64": "else if (c == '\\u2028') {"
                            },
                            {
                                "65": "filtered.append(\"\\\\u2028\");"
                            },
                            {
                                "66": "}"
                            },
                            {
                                "67": ""
                            },
                            {
                                "68": "else if (c == '\\u2029') {"
                            },
                            {
                                "69": "filtered.append(\"\\\\u2029\");"
                            },
                            {
                                "70": "}"
                            },
                            {
                                "71": ""
                            }
                        ],
                        "paramType": "(String input)",
                        "originalFullName": "org.springframework.web.util.JavaScriptUtils.javaScriptEscape:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "JavaScriptUtils"
            ],
            "pathlst": [
                "web/util/JavaScriptUtils.java"
            ],
            "langrelatedfiles": [
                "JavaScriptUtils.java"
            ]
        }
    },
    "CVE-2022-22968": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/InitBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-context/src/main/java/org/springframework/validation/DataBinder.java",
                "deleteMethodBegin": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": 206,
                    "org.springframework.validation.DataBinder.isAllowed(String field)": 402
                },
                "deleteMethodEnd": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": 208,
                    "org.springframework.validation.DataBinder.isAllowed(String field)": 406
                },
                "deleteMethodFull": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": {
                        "lineNumber": [
                            {
                                "207": "this.disallowedFields = PropertyAccessorUtils.canonicalPropertyNames(disallowedFields);"
                            }
                        ],
                        "paramType": "(@Nullable String... disallowedFields)",
                        "originalFullName": "org.springframework.validation.DataBinder.setDisallowedFields:void(java.lang.String[])"
                    },
                    "org.springframework.validation.DataBinder.isAllowed(String field)": {
                        "lineNumber": [
                            {
                                "405": "return ((ObjectUtils.isEmpty(allowed) || PatternMatchUtils.simpleMatch(allowed, field)) && (ObjectUtils.isEmpty(disallowed) || !PatternMatchUtils.simpleMatch(disallowed, field)));"
                            }
                        ],
                        "paramType": "(String field)",
                        "originalFullName": "org.springframework.validation.DataBinder.isAllowed:boolean(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/ExceptionHandler.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/ModelAttribute.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExtendedServletRequestDataBinder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/ServletRequestDataBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/InitBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-context/src/main/java/org/springframework/validation/DataBinder.java",
                "addMethodBegin": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": 206,
                    "org.springframework.validation.DataBinder.isAllowed(String field)": 414
                },
                "addMethodEnd": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": 220,
                    "org.springframework.validation.DataBinder.isAllowed(String field)": 418
                },
                "addMethodFull": {
                    "org.springframework.validation.DataBinder.setDisallowedFields(@Nullable String... disallowedFields)": {
                        "lineNumber": [
                            {
                                "207": "if (disallowedFields == null) {"
                            },
                            {
                                "208": "this.disallowedFields = null;"
                            },
                            {
                                "209": "}"
                            },
                            {
                                "210": ""
                            },
                            {
                                "211": "else {"
                            },
                            {
                                "212": "String[] fieldPatterns = new String[disallowedFields.length];"
                            },
                            {
                                "213": "for (int i = 0; i < fieldPatterns.length; i++) {"
                            },
                            {
                                "214": "fieldPatterns[i] = PropertyAccessorUtils.canonicalPropertyName(disallowedFields[i]).toLowerCase();"
                            },
                            {
                                "215": "}"
                            },
                            {
                                "216": ""
                            },
                            {
                                "217": "this.disallowedFields = fieldPatterns;"
                            },
                            {
                                "218": "}"
                            },
                            {
                                "219": ""
                            }
                        ],
                        "paramType": "(@Nullable String... disallowedFields)",
                        "originalFullName": "org.springframework.validation.DataBinder.setDisallowedFields:void(java.lang.String[])"
                    },
                    "org.springframework.validation.DataBinder.isAllowed(String field)": {
                        "lineNumber": [
                            {
                                "417": "return ((ObjectUtils.isEmpty(allowed) || PatternMatchUtils.simpleMatch(allowed, field)) && (ObjectUtils.isEmpty(disallowed) || !PatternMatchUtils.simpleMatch(disallowed, field.toLowerCase())));"
                            }
                        ],
                        "paramType": "(String field)",
                        "originalFullName": "org.springframework.validation.DataBinder.isAllowed:boolean(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/ExceptionHandler.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/annotation/ModelAttribute.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/support/WebExchangeDataBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/support/WebRequestDataBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-beans/src/main/java/org/springframework/beans/PropertyAccessor.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/bind/WebDataBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExtendedServletRequestDataBinder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [
                "disallowedFields"
            ],
            "classnamelst": [
                "DataBinder"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2022-22970": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java",
                "deleteMethodBegin": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": 124,
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": 176,
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": 215
                },
                "deleteMethodEnd": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": 174,
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": 202,
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": 229
                },
                "deleteMethodFull": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": {
                        "lineNumber": [
                            {
                                "143": "if (pd.getWriteMethod() == null && pd.getPropertyType() != null && (ClassLoader.class.isAssignableFrom(pd.getPropertyType()) || ProtectionDomain.class.isAssignableFrom(pd.getPropertyType()))) {"
                            }
                        ],
                        "paramType": "(Class<?> beanClass)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.<init>:void(java.lang.Class)"
                    },
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": {
                        "lineNumber": [
                            {
                                "183": "if (pd.getWriteMethod() == null && pd.getPropertyType() != null && (ClassLoader.class.isAssignableFrom(pd.getPropertyType()) || ProtectionDomain.class.isAssignableFrom(pd.getPropertyType()))) {"
                            }
                        ],
                        "paramType": "(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces:void(java.lang.Class,java.lang.Class,java.util.Set)"
                    },
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": {
                        "lineNumber": [
                            {
                                "216": "if (Modifier.isStatic(method.getModifiers()) || method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class || method.getParameterCount() > 0 || method.getReturnType() == void.class || ClassLoader.class.isAssignableFrom(method.getReturnType()) || ProtectionDomain.class.isAssignableFrom(method.getReturnType())) {"
                            }
                        ],
                        "paramType": "(Method method)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor:boolean(java.lang.reflect.Method)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java",
                "addMethodBegin": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": 125,
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": 181,
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": 220,
                    "org.springframework.beans.CachedIntrospectionResults.isInvalidReadOnlyPropertyType(@Nullable Class<?> returnType)": 236
                },
                "addMethodEnd": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": 179,
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": 207,
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": 234,
                    "org.springframework.beans.CachedIntrospectionResults.isInvalidReadOnlyPropertyType(@Nullable Class<?> returnType)": 238
                },
                "addMethodFull": {
                    "org.springframework.beans.CachedIntrospectionResults.<init>(Class<?> beanClass)": {
                        "lineNumber": [
                            {
                                "144": "if (URL.class == beanClass && \"content\".equals(pd.getName())) {"
                            },
                            {
                                "145": "continue;"
                            },
                            {
                                "146": "}"
                            },
                            {
                                "147": ""
                            },
                            {
                                "148": "if (pd.getWriteMethod() == null && isInvalidReadOnlyPropertyType(pd.getPropertyType())) {"
                            }
                        ],
                        "paramType": "(Class<?> beanClass)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.<init>:void(java.lang.Class)"
                    },
                    "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)": {
                        "lineNumber": [
                            {
                                "188": "if (pd.getWriteMethod() == null && isInvalidReadOnlyPropertyType(pd.getPropertyType())) {"
                            }
                        ],
                        "paramType": "(Class<?> beanClass, Class<?> currClass, Set<String> readMethodNames)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.introspectInterfaces:void(java.lang.Class,java.lang.Class,java.util.Set)"
                    },
                    "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor(Method method)": {
                        "lineNumber": [
                            {
                                "221": "if (Modifier.isStatic(method.getModifiers()) || method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class || method.getParameterCount() > 0 || method.getReturnType() == void.class || isInvalidReadOnlyPropertyType(method.getReturnType())) {"
                            }
                        ],
                        "paramType": "(Method method)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.isPlainAccessor:boolean(java.lang.reflect.Method)"
                    },
                    "org.springframework.beans.CachedIntrospectionResults.isInvalidReadOnlyPropertyType(@Nullable Class<?> returnType)": {
                        "lineNumber": [
                            {
                                "236": "private boolean isInvalidReadOnlyPropertyType(@Nullable Class<?> returnType) {"
                            },
                            {
                                "237": "return (returnType != null && (AutoCloseable.class.isAssignableFrom(returnType) || ClassLoader.class.isAssignableFrom(returnType) || ProtectionDomain.class.isAssignableFrom(returnType)));"
                            },
                            {
                                "238": "}"
                            }
                        ],
                        "paramType": "(@Nullable Class<?> returnType)",
                        "originalFullName": "org.springframework.beans.CachedIntrospectionResults.isInvalidReadOnlyPropertyType:boolean(java.lang.Class)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "CachedIntrospectionResults",
                "MultipartFile"
            ],
            "pathlst": [
                "javax.servlet.Part"
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-5421": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java",
                "deleteMethodBegin": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": 222
                },
                "deleteMethodEnd": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": 231
                },
                "deleteMethodFull": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": {
                        "lineNumber": [
                            {
                                "222": "private static Charset getCharset(@Nullable MediaType contentType) {"
                            }
                        ],
                        "paramType": "(@Nullable MediaType contentType)",
                        "originalFullName": "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset:java.nio.charset.Charset(org.springframework.http.MediaType)"
                    }
                }
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/util/WebUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "deleteMethodBegin": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": 297
                },
                "deleteMethodEnd": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": 333
                },
                "deleteMethodFull": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": {
                        "lineNumber": [
                            {
                                "315": "String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest);"
                            },
                            {
                                "325": "filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename);"
                            },
                            {
                                "327": "pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams);"
                            }
                        ],
                        "paramType": "(ServletServerHttpRequest request, ServletServerHttpResponse response)",
                        "originalFullName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader:void(org.springframework.http.server.ServletServerHttpRequest,org.springframework.http.server.ServletServerHttpResponse)"
                    }
                }
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "deleteMethodBegin": {
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": 333,
                    "org.springframework.web.util.UrlPathHelper.removeJsessionid(String requestUri)": 349
                },
                "deleteMethodEnd": {
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": 335,
                    "org.springframework.web.util.UrlPathHelper.removeJsessionid(String requestUri)": 358
                },
                "deleteMethodFull": {
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": {
                        "lineNumber": [
                            {
                                "334": "return (this.removeSemicolonContent ? removeSemicolonContentInternal(requestUri) : removeJsessionid(requestUri));"
                            }
                        ],
                        "paramType": "(String requestUri)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.removeSemicolonContent:java.lang.String(java.lang.String)"
                    },
                    "org.springframework.web.util.UrlPathHelper.removeJsessionid(String requestUri)": {
                        "lineNumber": [
                            {
                                "349": "private String removeJsessionid(String requestUri) {"
                            },
                            {
                                "350": "int startIndex = requestUri.toLowerCase().indexOf(\";jsessionid=\");"
                            },
                            {
                                "351": "if (startIndex != -1) {"
                            },
                            {
                                "352": "int endIndex = requestUri.indexOf(';', startIndex + 12);"
                            },
                            {
                                "353": "String start = requestUri.substring(0, startIndex);"
                            },
                            {
                                "354": "requestUri = (endIndex != -1) ? start + requestUri.substring(endIndex) : start;"
                            },
                            {
                                "355": "}"
                            },
                            {
                                "356": ""
                            },
                            {
                                "357": "return requestUri;"
                            },
                            {
                                "358": "}"
                            }
                        ],
                        "paramType": "(String requestUri)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.removeJsessionid:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "oldFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java",
                "deleteMethodBegin": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.<init>()": 42,
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": 78,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest, UrlPathHelper pathHelper)": 149,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl)": 230,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": 270
                },
                "deleteMethodEnd": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.<init>()": 46,
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": 91,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest, UrlPathHelper pathHelper)": 162,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl)": 238,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": 277
                },
                "deleteMethodFull": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.<init>()": {
                        "lineNumber": [
                            {
                                "42": "public ForwardedHeaderFilter() {"
                            },
                            {
                                "43": "this.pathHelper = new UrlPathHelper();"
                            },
                            {
                                "44": "this.pathHelper.setUrlDecode(false);"
                            },
                            {
                                "45": "this.pathHelper.setRemoveSemicolonContent(false);"
                            },
                            {
                                "46": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter.<init>:void()"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": {
                        "lineNumber": [
                            {
                                "86": "HttpServletRequest wrappedRequest = new ForwardedHeaderExtractingRequest(request, this.pathHelper);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal:<unresolvedSignature>(3)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest, UrlPathHelper pathHelper)": {
                        "lineNumber": [
                            {
                                "149": "ForwardedHeaderExtractingRequest(HttpServletRequest servletRequest, UrlPathHelper pathHelper) {"
                            },
                            {
                                "161": "this.forwardedPrefixExtractor = new ForwardedPrefixExtractor(delegateRequest, pathHelper, baseUrl);"
                            }
                        ],
                        "paramType": "(HttpServletRequest servletRequest, UrlPathHelper pathHelper)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>:<unresolvedSignature>(2)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl)": {
                        "lineNumber": [
                            {
                                "230": "public ForwardedPrefixExtractor( Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl) {"
                            },
                            {
                                "232": "this.pathHelper = pathHelper;"
                            }
                        ],
                        "paramType": "(Supplier<HttpServletRequest> delegateRequest, UrlPathHelper pathHelper, String baseUrl)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>:<unresolvedSignature>(3)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": {
                        "lineNumber": [
                            {
                                "273": "return this.forwardedPrefix + this.pathHelper.getPathWithinApplication(this.delegate.get());"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri:java.lang.String()"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": 222
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": 231
                },
                "addMethodFull": {
                    "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset(@Nullable MediaType contentType)": {
                        "lineNumber": [
                            {
                                "222": "protected static Charset getCharset(@Nullable MediaType contentType) {"
                            }
                        ],
                        "paramType": "(@Nullable MediaType contentType)",
                        "originalFullName": "org.springframework.http.converter.json.AbstractJackson2HttpMessageConverter.getCharset:java.nio.charset.Charset(org.springframework.http.MediaType)"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/util/WebUtils.java",
                "addMethodBegin": {
                    "org.springframework.web.util.WebUtils.parseMatrixVariables(String matrixVariables)": 333
                },
                "addMethodEnd": {
                    "org.springframework.web.util.WebUtils.parseMatrixVariables(String matrixVariables)": 363
                },
                "addMethodFull": {
                    "org.springframework.web.util.WebUtils.parseMatrixVariables(String matrixVariables)": {
                        "lineNumber": [
                            {
                                "345": "if (name.equalsIgnoreCase(\"jsessionid\")) {"
                            },
                            {
                                "346": "continue;"
                            },
                            {
                                "347": "}"
                            },
                            {
                                "348": ""
                            }
                        ],
                        "paramType": "(String matrixVariables)",
                        "originalFullName": "org.springframework.web.util.WebUtils.parseMatrixVariables:org.springframework.util.MultiValueMap(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java",
                "addMethodBegin": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": 290
                },
                "addMethodEnd": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": 326
                },
                "addMethodFull": {
                    "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader(ServletServerHttpRequest request, ServletServerHttpResponse response)": {
                        "lineNumber": [
                            {
                                "308": "String requestUri = UrlPathHelper.rawPathInstance.getOriginatingRequestUri(servletRequest);"
                            },
                            {
                                "318": "filename = UrlPathHelper.defaultInstance.decodeRequestString(servletRequest, filename);"
                            },
                            {
                                "320": "pathParams = UrlPathHelper.defaultInstance.decodeRequestString(servletRequest, pathParams);"
                            }
                        ],
                        "paramType": "(ServletServerHttpRequest request, ServletServerHttpResponse response)",
                        "originalFullName": "org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.addContentDispositionHeader:void(org.springframework.http.server.ServletServerHttpRequest,org.springframework.http.server.ServletServerHttpResponse)"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java",
                "addMethodBegin": {
                    "org.springframework.web.util.UrlPathHelper.setAlwaysUseFullPath(boolean alwaysUseFullPath)": 30,
                    "org.springframework.web.util.UrlPathHelper.setUrlDecode(boolean urlDecode)": 35,
                    "org.springframework.web.util.UrlPathHelper.setRemoveSemicolonContent(boolean removeSemicolonContent)": 44,
                    "org.springframework.web.util.UrlPathHelper.shouldRemoveSemicolonContent()": 49,
                    "org.springframework.web.util.UrlPathHelper.setDefaultEncoding(String defaultEncoding)": 54,
                    "org.springframework.web.util.UrlPathHelper.setReadOnly()": 63,
                    "org.springframework.web.util.UrlPathHelper.checkReadOnly()": 67,
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": 347
                },
                "addMethodEnd": {
                    "org.springframework.web.util.UrlPathHelper.setAlwaysUseFullPath(boolean alwaysUseFullPath)": 33,
                    "org.springframework.web.util.UrlPathHelper.setUrlDecode(boolean urlDecode)": 38,
                    "org.springframework.web.util.UrlPathHelper.setRemoveSemicolonContent(boolean removeSemicolonContent)": 47,
                    "org.springframework.web.util.UrlPathHelper.shouldRemoveSemicolonContent()": 52,
                    "org.springframework.web.util.UrlPathHelper.setDefaultEncoding(String defaultEncoding)": 57,
                    "org.springframework.web.util.UrlPathHelper.setReadOnly()": 65,
                    "org.springframework.web.util.UrlPathHelper.checkReadOnly()": 69,
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": 349
                },
                "addMethodFull": {
                    "org.springframework.web.util.UrlPathHelper.setAlwaysUseFullPath(boolean alwaysUseFullPath)": {
                        "lineNumber": [
                            {
                                "31": "checkReadOnly();"
                            }
                        ],
                        "paramType": "(boolean alwaysUseFullPath)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.setAlwaysUseFullPath:void(boolean)"
                    },
                    "org.springframework.web.util.UrlPathHelper.setUrlDecode(boolean urlDecode)": {
                        "lineNumber": [
                            {
                                "36": "checkReadOnly();"
                            }
                        ],
                        "paramType": "(boolean urlDecode)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.setUrlDecode:void(boolean)"
                    },
                    "org.springframework.web.util.UrlPathHelper.setRemoveSemicolonContent(boolean removeSemicolonContent)": {
                        "lineNumber": [
                            {
                                "45": "checkReadOnly();"
                            }
                        ],
                        "paramType": "(boolean removeSemicolonContent)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.setRemoveSemicolonContent:void(boolean)"
                    },
                    "org.springframework.web.util.UrlPathHelper.shouldRemoveSemicolonContent()": {
                        "lineNumber": [
                            {
                                "50": "checkReadOnly();"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.shouldRemoveSemicolonContent:boolean()"
                    },
                    "org.springframework.web.util.UrlPathHelper.setDefaultEncoding(String defaultEncoding)": {
                        "lineNumber": [
                            {
                                "55": "checkReadOnly();"
                            }
                        ],
                        "paramType": "(String defaultEncoding)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.setDefaultEncoding:void(java.lang.String)"
                    },
                    "org.springframework.web.util.UrlPathHelper.setReadOnly()": {
                        "lineNumber": [
                            {
                                "63": "private void setReadOnly() {"
                            },
                            {
                                "64": "this.readOnly = true;"
                            },
                            {
                                "65": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.setReadOnly:void()"
                    },
                    "org.springframework.web.util.UrlPathHelper.checkReadOnly()": {
                        "lineNumber": [
                            {
                                "67": "private void checkReadOnly() {"
                            },
                            {
                                "68": "Assert.isTrue(!this.readOnly, \"This instance cannot be modified\");"
                            },
                            {
                                "69": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.checkReadOnly:void()"
                    },
                    "org.springframework.web.util.UrlPathHelper.removeSemicolonContent(String requestUri)": {
                        "lineNumber": [
                            {
                                "348": "return (this.removeSemicolonContent ? removeSemicolonContentInternal(requestUri) : requestUri);"
                            }
                        ],
                        "paramType": "(String requestUri)",
                        "originalFullName": "org.springframework.web.util.UrlPathHelper.removeSemicolonContent:java.lang.String(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java",
                "addMethodBegin": {
                    "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler, String sessionId, String transport)": 168
                },
                "addMethodEnd": {
                    "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler, String sessionId, String transport)": 291
                },
                "addMethodFull": {
                    "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler, String sessionId, String transport)": {
                        "lineNumber": [
                            {
                                "215": "boolean isNewSession = false;"
                            },
                            {
                                "225": "isNewSession = true;"
                            },
                            {
                                "264": "if (isNewSession && (response instanceof ServletServerHttpResponse)) {"
                            },
                            {
                                "265": "int status = ((ServletServerHttpResponse) response).getServletResponse().getStatus();"
                            },
                            {
                                "266": "if (HttpStatus.valueOf(status).is4xxClientError()) {"
                            },
                            {
                                "267": "this.sessions.remove(sessionId);"
                            },
                            {
                                "268": "}"
                            },
                            {
                                "269": ""
                            },
                            {
                                "270": "}"
                            },
                            {
                                "271": ""
                            }
                        ],
                        "paramType": "(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler handler, String sessionId, String transport)",
                        "originalFullName": "org.springframework.web.socket.sockjs.transport.TransportHandlingSockJsService.handleTransportRequest:void(org.springframework.http.server.ServerHttpRequest,org.springframework.http.server.ServerHttpResponse,org.springframework.web.socket.WebSocketHandler,java.lang.String,java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/support/ServletUriComponentsBuilder.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java",
                "addMethodBegin": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": 71,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest)": 142,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, String baseUrl)": 222,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": 261
                },
                "addMethodEnd": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": 84,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest)": 155,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, String baseUrl)": 229,
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": 268
                },
                "addMethodFull": {
                    "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)": {
                        "lineNumber": [
                            {
                                "79": "HttpServletRequest wrappedRequest = new ForwardedHeaderExtractingRequest(request);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter.doFilterInternal:<unresolvedSignature>(3)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>(HttpServletRequest servletRequest)": {
                        "lineNumber": [
                            {
                                "142": "ForwardedHeaderExtractingRequest(HttpServletRequest servletRequest) {"
                            },
                            {
                                "154": "this.forwardedPrefixExtractor = new ForwardedPrefixExtractor(delegateRequest, baseUrl);"
                            }
                        ],
                        "paramType": "(HttpServletRequest servletRequest)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedHeaderExtractingRequest.<init>:<unresolvedSignature>(1)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>(Supplier<HttpServletRequest> delegateRequest, String baseUrl)": {
                        "lineNumber": [
                            {
                                "222": "public ForwardedPrefixExtractor(Supplier<HttpServletRequest> delegateRequest, String baseUrl) {"
                            }
                        ],
                        "paramType": "(Supplier<HttpServletRequest> delegateRequest, String baseUrl)",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.<init>:<unresolvedSignature>(2)"
                    },
                    "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri()": {
                        "lineNumber": [
                            {
                                "264": "return this.forwardedPrefix + UrlPathHelper.rawPathInstance.getPathWithinApplication(this.delegate.get());"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.web.filter.ForwardedHeaderFilter$ForwardedPrefixExtractor.initRequestUri:java.lang.String()"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-3625": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
                "deleteMethodBegin": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": 127
                },
                "deleteMethodEnd": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": 129
                },
                "deleteMethodFull": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": {
                        "lineNumber": [
                            {
                                "128": "return (path.contains(\"WEB-INF\") || path.contains(\"META-INF\") || StringUtils.cleanPath(path).startsWith(\"..\"));"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath:boolean(java.lang.String)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java",
                "addMethodBegin": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest request)": 87,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath(String path)": 163,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": 188,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isResourceUnderLocation(Resource resource, Resource location)": 228
                },
                "addMethodEnd": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest request)": 161,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath(String path)": 186,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": 226,
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isResourceUnderLocation(Resource resource, Resource location)": 267
                },
                "addMethodFull": {
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource(HttpServletRequest request)": {
                        "lineNumber": [
                            {
                                "93": "path = processPath(path);"
                            },
                            {
                                "102": "if (path.contains(\"%\")) {"
                            },
                            {
                                "103": "try {"
                            },
                            {
                                "104": "if (isInvalidPath(URLDecoder.decode(path, \"UTF-8\"))) {"
                            },
                            {
                                "105": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "106": "logger.trace(\"Ignoring invalid resource path with escape sequences [\" + path + \"].\");"
                            },
                            {
                                "107": "}"
                            },
                            {
                                "108": ""
                            },
                            {
                                "109": "return null;"
                            },
                            {
                                "110": "}"
                            },
                            {
                                "111": ""
                            },
                            {
                                "112": "}"
                            },
                            {
                                "113": ""
                            },
                            {
                                "114": "catch (UnsupportedEncodingException e) {"
                            },
                            {
                                "115": "}"
                            },
                            {
                                "116": ""
                            },
                            {
                                "117": "catch (IllegalArgumentException ex) {"
                            },
                            {
                                "118": "}"
                            },
                            {
                                "119": ""
                            },
                            {
                                "120": "}"
                            },
                            {
                                "121": ""
                            },
                            {
                                "130": "if (isResourceUnderLocation(resource, location)) {"
                            },
                            {
                                "138": "else {"
                            },
                            {
                                "139": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "140": "logger.trace(\"resource=\\\"\" + resource + \"\\\" was successfully resolved \" + \"but is not under the location=\\\"\" + location);"
                            },
                            {
                                "141": "}"
                            },
                            {
                                "142": ""
                            },
                            {
                                "143": "return null;"
                            },
                            {
                                "144": "}"
                            },
                            {
                                "145": ""
                            },
                            {
                                "146": "}"
                            },
                            {
                                "147": ""
                            }
                        ],
                        "paramType": "(HttpServletRequest request)",
                        "originalFullName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.getResource:<unresolvedSignature>(1)"
                    },
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath(String path)": {
                        "lineNumber": [
                            {
                                "163": "protected String processPath(String path) {"
                            },
                            {
                                "164": "boolean slash = false;"
                            },
                            {
                                "165": "for (int i = 0; i < path.length(); i++) {"
                            },
                            {
                                "166": "if (path.charAt(i) == '/') {"
                            },
                            {
                                "167": "slash = true;"
                            },
                            {
                                "168": "}"
                            },
                            {
                                "169": ""
                            },
                            {
                                "170": "else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {"
                            },
                            {
                                "171": "if (i == 0 || (i == 1 && slash)) {"
                            },
                            {
                                "172": "return path;"
                            },
                            {
                                "173": "}"
                            },
                            {
                                "174": ""
                            },
                            {
                                "175": "path = slash ? \"/\" + path.substring(i) : path.substring(i);"
                            },
                            {
                                "176": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "177": "logger.trace(\"Path trimmed for leading '/' and control characters: \" + path);"
                            },
                            {
                                "178": "}"
                            },
                            {
                                "179": ""
                            },
                            {
                                "180": "return path;"
                            },
                            {
                                "181": "}"
                            },
                            {
                                "182": ""
                            },
                            {
                                "183": "}"
                            },
                            {
                                "184": ""
                            },
                            {
                                "185": "return (slash ? \"/\" : \"\");"
                            },
                            {
                                "186": "}"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.processPath:java.lang.String(java.lang.String)"
                    },
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath(String path)": {
                        "lineNumber": [
                            {
                                "189": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "190": "logger.trace(\"Applying \\\"invalid path\\\" checks to path: \" + path);"
                            },
                            {
                                "191": "}"
                            },
                            {
                                "192": ""
                            },
                            {
                                "193": "if (path.contains(\"WEB-INF\") || path.contains(\"META-INF\")) {"
                            },
                            {
                                "194": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "195": "logger.trace(\"Path contains \\\"WEB-INF\\\" or \\\"META-INF\\\".\");"
                            },
                            {
                                "196": "}"
                            },
                            {
                                "197": ""
                            },
                            {
                                "198": "return true;"
                            },
                            {
                                "199": "}"
                            },
                            {
                                "200": ""
                            },
                            {
                                "201": "if (path.contains(\":/\")) {"
                            },
                            {
                                "202": "String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);"
                            },
                            {
                                "203": "if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith(\"url:\")) {"
                            },
                            {
                                "204": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "205": "logger.trace(\"Path represents URL or has \\\"url:\\\" prefix.\");"
                            },
                            {
                                "206": "}"
                            },
                            {
                                "207": ""
                            },
                            {
                                "208": "return true;"
                            },
                            {
                                "209": "}"
                            },
                            {
                                "210": ""
                            },
                            {
                                "211": "}"
                            },
                            {
                                "212": ""
                            },
                            {
                                "213": "if (path.contains(\"../\")) {"
                            },
                            {
                                "214": "path = StringUtils.cleanPath(path);"
                            },
                            {
                                "215": "if (path.contains(\"../\")) {"
                            },
                            {
                                "216": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "217": "logger.trace(\"Path contains \\\"../\\\" after call to StringUtils#cleanPath.\");"
                            },
                            {
                                "218": "}"
                            },
                            {
                                "219": ""
                            },
                            {
                                "220": "return true;"
                            },
                            {
                                "221": "}"
                            },
                            {
                                "222": ""
                            },
                            {
                                "223": "}"
                            },
                            {
                                "224": ""
                            },
                            {
                                "225": "return false;"
                            },
                            {
                                "226": "}"
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isInvalidPath:boolean(java.lang.String)"
                    },
                    "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isResourceUnderLocation(Resource resource, Resource location)": {
                        "lineNumber": [
                            {
                                "228": "private boolean isResourceUnderLocation(Resource resource, Resource location) throws IOException {"
                            },
                            {
                                "229": "if (!resource.getClass().equals(location.getClass())) {"
                            },
                            {
                                "230": "return false;"
                            },
                            {
                                "231": "}"
                            },
                            {
                                "232": ""
                            },
                            {
                                "233": "String resourcePath;"
                            },
                            {
                                "234": "String locationPath;"
                            },
                            {
                                "235": "if (resource instanceof ClassPathResource) {"
                            },
                            {
                                "236": "resourcePath = ((ClassPathResource) resource).getPath();"
                            },
                            {
                                "237": "locationPath = ((ClassPathResource) location).getPath();"
                            },
                            {
                                "238": "}"
                            },
                            {
                                "239": ""
                            },
                            {
                                "240": "else if (resource instanceof UrlResource) {"
                            },
                            {
                                "241": "resourcePath = resource.getURL().toExternalForm();"
                            },
                            {
                                "242": "locationPath = location.getURL().toExternalForm();"
                            },
                            {
                                "243": "}"
                            },
                            {
                                "244": ""
                            },
                            {
                                "245": "else {"
                            },
                            {
                                "246": "resourcePath = resource.getURL().getPath();"
                            },
                            {
                                "247": "locationPath = location.getURL().getPath();"
                            },
                            {
                                "248": "}"
                            },
                            {
                                "249": ""
                            },
                            {
                                "250": "locationPath = (locationPath.endsWith(\"/\") || locationPath.isEmpty() ? locationPath : locationPath + \"/\");"
                            },
                            {
                                "251": "if (!resourcePath.startsWith(locationPath)) {"
                            },
                            {
                                "252": "return false;"
                            },
                            {
                                "253": "}"
                            },
                            {
                                "254": ""
                            },
                            {
                                "255": "if (resourcePath.contains(\"%\")) {"
                            },
                            {
                                "256": "if (URLDecoder.decode(resourcePath, \"UTF-8\").contains(\"../\")) {"
                            },
                            {
                                "257": "if (logger.isTraceEnabled()) {"
                            },
                            {
                                "258": "logger.trace(\"Resolved resource path contains \\\"../\\\" after decoding: \" + resourcePath);"
                            },
                            {
                                "259": "}"
                            },
                            {
                                "260": ""
                            },
                            {
                                "261": "return false;"
                            },
                            {
                                "262": "}"
                            },
                            {
                                "263": ""
                            },
                            {
                                "264": "}"
                            },
                            {
                                "265": ""
                            },
                            {
                                "266": "return true;"
                            }
                        ],
                        "paramType": "(Resource resource, Resource location)",
                        "originalFullName": "org.springframework.web.servlet.resource.ResourceHttpRequestHandler.isResourceUnderLocation:boolean(org.springframework.core.io.Resource,org.springframework.core.io.Resource)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-0225": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
                "deleteMethodBegin": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": 581
                },
                "deleteMethodEnd": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": 624
                },
                "deleteMethodFull": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": {
                        "lineNumber": [
                            {
                                "615": "xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", isProcessExternalEntities());"
                            }
                        ],
                        "paramType": "(Source source)",
                        "originalFullName": "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource:javax.xml.transform.Source(javax.xml.transform.Source)"
                    }
                }
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java",
                "deleteMethodBegin": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": 74
                },
                "deleteMethodEnd": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": 96
                },
                "deleteMethodFull": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": {
                        "lineNumber": [
                            {
                                "81": "xmlReader.setFeature(featureName, this.processExternalEntities);"
                            }
                        ],
                        "paramType": "(Source source)",
                        "originalFullName": "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource:javax.xml.transform.Source(javax.xml.transform.Source)"
                    }
                }
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java",
                "deleteMethodBegin": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": 91,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": 111,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": 125
                },
                "deleteMethodEnd": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": 109,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": 123,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": 137
                },
                "deleteMethodFull": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "95": "documentBuilderFactory.setFeature( \"http://xml.org/sax/features/external-general-entities\", this.processExternalEntities);"
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource:javax.xml.transform.dom.DOMSource(java.io.InputStream)"
                    },
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "114": "reader.setFeature( \"http://xml.org/sax/features/external-general-entities\", this.processExternalEntities);"
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource:javax.xml.transform.sax.SAXSource(java.io.InputStream)"
                    },
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "128": "inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, this.processExternalEntities);"
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource:javax.xml.transform.Source(java.io.InputStream)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java",
                "addMethodBegin": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": 583
                },
                "addMethodEnd": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": 631
                },
                "addMethodFull": {
                    "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource(Source source)": {
                        "lineNumber": [
                            {
                                "617": "String name = \"http://xml.org/sax/features/external-general-entities\";"
                            },
                            {
                                "618": "xmlReader.setFeature(name, isProcessExternalEntities());"
                            },
                            {
                                "619": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "620": "xmlReader.setEntityResolver(NO_OP_ENTITY_RESOLVER);"
                            },
                            {
                                "621": "}"
                            },
                            {
                                "622": ""
                            }
                        ],
                        "paramType": "(Source source)",
                        "originalFullName": "org.springframework.oxm.jaxb.Jaxb2Marshaller.processSource:javax.xml.transform.Source(javax.xml.transform.Source)"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2CollectionHttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.createXmlInputFactory()": 179
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.createXmlInputFactory()": 184
                },
                "addMethodFull": {
                    "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.createXmlInputFactory()": {
                        "lineNumber": [
                            {
                                "182": "inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.http.converter.xml.Jaxb2CollectionHttpMessageConverter.createXmlInputFactory:javax.xml.stream.XMLInputFactory()"
                    }
                }
            },
            {
                "newFilePath": "spring-oxm/src/main/java/org/springframework/oxm/support/AbstractMarshaller.java",
                "addMethodBegin": {
                    "org.springframework.oxm.support.AbstractMarshaller.createXmlReader()": 84
                },
                "addMethodEnd": {
                    "org.springframework.oxm.support.AbstractMarshaller.createXmlReader()": 92
                },
                "addMethodFull": {
                    "org.springframework.oxm.support.AbstractMarshaller.createXmlReader()": {
                        "lineNumber": [
                            {
                                "87": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "88": "xmlReader.setEntityResolver(NO_OP_ENTITY_RESOLVER);"
                            },
                            {
                                "89": "}"
                            },
                            {
                                "90": ""
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.oxm.support.AbstractMarshaller.createXmlReader:org.xml.sax.XMLReader()"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/Jaxb2RootElementHttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isProcessExternalEntities()": 35,
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": 80
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isProcessExternalEntities()": 37,
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": 106
                },
                "addMethodFull": {
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isProcessExternalEntities()": {
                        "lineNumber": [
                            {
                                "35": "public boolean isProcessExternalEntities() {"
                            },
                            {
                                "36": "return this.processExternalEntities;"
                            },
                            {
                                "37": "}"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.isProcessExternalEntities:boolean()"
                    },
                    "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource(Source source)": {
                        "lineNumber": [
                            {
                                "87": "xmlReader.setFeature(featureName, isProcessExternalEntities());"
                            },
                            {
                                "88": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "89": "xmlReader.setEntityResolver(NO_OP_ENTITY_RESOLVER);"
                            },
                            {
                                "90": "}"
                            },
                            {
                                "91": ""
                            }
                        ],
                        "paramType": "(Source source)",
                        "originalFullName": "org.springframework.http.converter.xml.Jaxb2RootElementHttpMessageConverter.processSource:javax.xml.transform.Source(javax.xml.transform.Source)"
                    }
                }
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/xml/SourceHttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": 94,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": 118,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": 136
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": 116,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": 134,
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": 152
                },
                "addMethodFull": {
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "98": "documentBuilderFactory.setFeature( \"http://xml.org/sax/features/external-general-entities\", isProcessExternalEntities());"
                            },
                            {
                                "100": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "101": "documentBuilder.setEntityResolver(NO_OP_ENTITY_RESOLVER);"
                            },
                            {
                                "102": "}"
                            },
                            {
                                "103": ""
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readDOMSource:javax.xml.transform.dom.DOMSource(java.io.InputStream)"
                    },
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "121": "reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", isProcessExternalEntities());"
                            },
                            {
                                "123": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "124": "reader.setEntityResolver(NO_OP_ENTITY_RESOLVER);"
                            },
                            {
                                "125": "}"
                            },
                            {
                                "126": ""
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readSAXSource:javax.xml.transform.sax.SAXSource(java.io.InputStream)"
                    },
                    "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource(InputStream body)": {
                        "lineNumber": [
                            {
                                "139": "inputFactory.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, isProcessExternalEntities());"
                            },
                            {
                                "140": "if (!isProcessExternalEntities()) {"
                            },
                            {
                                "141": "inputFactory.setXMLResolver(NO_OP_XML_RESOLVER);"
                            },
                            {
                                "142": "}"
                            },
                            {
                                "143": ""
                            }
                        ],
                        "paramType": "(InputStream body)",
                        "originalFullName": "org.springframework.http.converter.xml.SourceHttpMessageConverter.readStAXSource:javax.xml.transform.Source(java.io.InputStream)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2014-3578": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-core/src/main/java/org/springframework/util/StringUtils.java",
                "addMethodBegin": {
                    "org.springframework.util.StringUtils.cleanPath(String path)": 372
                },
                "addMethodEnd": {
                    "org.springframework.util.StringUtils.cleanPath(String path)": 427
                },
                "addMethodFull": {
                    "org.springframework.util.StringUtils.cleanPath(String path)": {
                        "lineNumber": [
                            {
                                "382": "if (prefix.contains(\"/\")) {"
                            },
                            {
                                "383": "prefix = \"\";"
                            },
                            {
                                "384": "}"
                            },
                            {
                                "385": ""
                            },
                            {
                                "386": "else {"
                            },
                            {
                                "390": "}"
                            },
                            {
                                "391": ""
                            }
                        ],
                        "paramType": "(String path)",
                        "originalFullName": "org.springframework.util.StringUtils.cleanPath:java.lang.String(java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [
                "StringUtils.cleanPath"
            ],
            "classnamelst": [],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2016-9878": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java",
                "deleteMethodBegin": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": 99
                },
                "deleteMethodEnd": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": 118
                },
                "deleteMethodFull": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": {
                        "lineNumber": [
                            {
                                "106": "if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, url)) {"
                            },
                            {
                                "107": "throw new ServletException(\"Resource [\" + url + \"] does not match allowed pattern [\" + this.allowedResources + \"]\");"
                            },
                            {
                                "111": "logger.debug(\"Including resource [\" + url + \"]\");"
                            },
                            {
                                "114": "RequestDispatcher rd = request.getRequestDispatcher(url);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, String resourceUrl)",
                        "originalFullName": "org.springframework.web.servlet.ResourceServlet.doInclude:<unresolvedSignature>(3)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/ResourceServlet.java",
                "addMethodBegin": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": 99
                },
                "addMethodEnd": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": 119
                },
                "addMethodFull": {
                    "org.springframework.web.servlet.ResourceServlet.doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl)": {
                        "lineNumber": [
                            {
                                "106": "String path = StringUtils.cleanPath(url);"
                            },
                            {
                                "107": "if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, path)) {"
                            },
                            {
                                "108": "throw new ServletException(\"Resource [\" + path + \"] does not match allowed pattern [\" + this.allowedResources + \"]\");"
                            },
                            {
                                "112": "logger.debug(\"Including resource [\" + path + \"]\");"
                            },
                            {
                                "115": "RequestDispatcher rd = request.getRequestDispatcher(path);"
                            }
                        ],
                        "paramType": "(HttpServletRequest request, HttpServletResponse response, String resourceUrl)",
                        "originalFullName": "org.springframework.web.servlet.ResourceServlet.doInclude:<unresolvedSignature>(3)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ResourceServlet"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-11039": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/web/filter/reactive/HiddenHttpMethodFilter.java",
                "addMethodBegin": {
                    "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.mapExchange(ServerWebExchange exchange, String methodParamValue)": 36
                },
                "addMethodEnd": {
                    "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.mapExchange(ServerWebExchange exchange, String methodParamValue)": 47
                },
                "addMethodFull": {
                    "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.mapExchange(ServerWebExchange exchange, String methodParamValue)": {
                        "lineNumber": [
                            {
                                "39": "if (ALLOWED_METHODS.contains(httpMethod)) {"
                            },
                            {
                                "43": "else {"
                            },
                            {
                                "44": "return exchange;"
                            },
                            {
                                "45": "}"
                            },
                            {
                                "46": ""
                            },
                            {
                                "47": "}"
                            }
                        ],
                        "paramType": "(ServerWebExchange exchange, String methodParamValue)",
                        "originalFullName": "org.springframework.web.filter.reactive.HiddenHttpMethodFilter.mapExchange:org.springframework.web.server.ServerWebExchange(org.springframework.web.server.ServerWebExchange,java.lang.String)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "HiddenHttpMethodFilter"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-11040": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonValue.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/JsonpPollingTransportHandler.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportType.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/DefaultSockJsService.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            },
            {
                "oldFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractJsonpResponseBodyAdvice.java",
                "deleteMethodBegin": {},
                "deleteMethodEnd": {},
                "deleteMethodFull": {}
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/JsonpReceivingTransportHandler.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/MappingJacksonValue.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.json.MappingJacksonValue.setJsonpFunction(@Nullable String functionName)": 42,
                    "org.springframework.http.converter.json.MappingJacksonValue.getJsonpFunction()": 47
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.json.MappingJacksonValue.setJsonpFunction(@Nullable String functionName)": 45,
                    "org.springframework.http.converter.json.MappingJacksonValue.getJsonpFunction()": 51
                },
                "addMethodFull": {
                    "org.springframework.http.converter.json.MappingJacksonValue.setJsonpFunction(@Nullable String functionName)": {
                        "lineNumber": [
                            {
                                "42": "@Deprecated"
                            }
                        ],
                        "paramType": "(@Nullable String functionName)",
                        "originalFullName": "org.springframework.http.converter.json.MappingJacksonValue.setJsonpFunction:void(java.lang.String)"
                    },
                    "org.springframework.http.converter.json.MappingJacksonValue.getJsonpFunction()": {
                        "lineNumber": [
                            {
                                "47": "@Deprecated"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.http.converter.json.MappingJacksonValue.getJsonpFunction:java.lang.String()"
                    }
                }
            },
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/view/json/MappingJackson2JsonView.java",
                "addMethodBegin": {
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.setJsonpParameterNames(Set<String> jsonpParameterNames)": 70,
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.isValidJsonpQueryParam(String value)": 100
                },
                "addMethodEnd": {
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.setJsonpParameterNames(Set<String> jsonpParameterNames)": 73,
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.isValidJsonpQueryParam(String value)": 103
                },
                "addMethodFull": {
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.setJsonpParameterNames(Set<String> jsonpParameterNames)": {
                        "lineNumber": [
                            {
                                "70": "@Deprecated"
                            }
                        ],
                        "paramType": "(Set<String> jsonpParameterNames)",
                        "originalFullName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView.setJsonpParameterNames:void(java.util.Set)"
                    },
                    "org.springframework.web.servlet.view.json.MappingJackson2JsonView.isValidJsonpQueryParam(String value)": {
                        "lineNumber": [
                            {
                                "100": "@Deprecated"
                            }
                        ],
                        "paramType": "(String value)",
                        "originalFullName": "org.springframework.web.servlet.view.json.MappingJackson2JsonView.isValidJsonpQueryParam:boolean(java.lang.String)"
                    }
                }
            },
            {
                "newFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/JsonpPollingTransportHandler.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.java",
                "addMethodBegin": {
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writePrefix(JsonGenerator generator, Object object)": 26,
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeSuffix(JsonGenerator generator, Object object)": 41
                },
                "addMethodEnd": {
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writePrefix(JsonGenerator generator, Object object)": 39,
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeSuffix(JsonGenerator generator, Object object)": 49
                },
                "addMethodFull": {
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writePrefix(JsonGenerator generator, Object object)": {
                        "lineNumber": [
                            {
                                "27": "@SuppressWarnings(\"deprecation\")"
                            }
                        ],
                        "paramType": "(JsonGenerator generator, Object object)",
                        "originalFullName": "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writePrefix:<unresolvedSignature>(2)"
                    },
                    "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeSuffix(JsonGenerator generator, Object object)": {
                        "lineNumber": [
                            {
                                "42": "@SuppressWarnings(\"deprecation\")"
                            }
                        ],
                        "paramType": "(JsonGenerator generator, Object object)",
                        "originalFullName": "org.springframework.http.converter.json.MappingJackson2HttpMessageConverter.writeSuffix:<unresolvedSignature>(2)"
                    }
                }
            },
            {
                "newFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportType.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            },
            {
                "newFilePath": "spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/handler/DefaultSockJsService.java",
                "addMethodBegin": {
                    "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService.getDefaultTransportHandlers(@Nullable Collection<TransportHandler> overrides)": 28
                },
                "addMethodEnd": {
                    "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService.getDefaultTransportHandlers(@Nullable Collection<TransportHandler> overrides)": 55
                },
                "addMethodFull": {
                    "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService.getDefaultTransportHandlers(@Nullable Collection<TransportHandler> overrides)": {
                        "lineNumber": [
                            {
                                "28": "@SuppressWarnings(\"deprecation\")"
                            }
                        ],
                        "paramType": "(@Nullable Collection<TransportHandler> overrides)",
                        "originalFullName": "org.springframework.web.socket.sockjs.transport.handler.DefaultSockJsService.getDefaultTransportHandlers:java.util.Set(java.util.Collection)"
                    }
                }
            },
            {
                "newFilePath": "spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractJsonpResponseBodyAdvice.java",
                "addMethodBegin": {},
                "addMethodEnd": {},
                "addMethodFull": {}
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "MappingJackson2JsonView",
                "AbstractJsonpResponseBodyAdvice"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    },
    "CVE-2018-15756": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/HttpRange.java",
                "deleteMethodBegin": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": 18
                },
                "deleteMethodEnd": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": 32
                },
                "deleteMethodFull": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": {
                        "lineNumber": [
                            {
                                "20": "try {"
                            },
                            {
                                "21": "long contentLength = resource.contentLength();"
                            },
                            {
                                "22": "Assert.isTrue(contentLength > 0, \"Resource content length should be > 0\");"
                            },
                            {
                                "29": "throw new IllegalArgumentException(\"Failed to convert Resource to ResourceRegion\", ex);"
                            }
                        ],
                        "paramType": "(Resource resource)",
                        "originalFullName": "org.springframework.http.HttpRange.toResourceRegion:org.springframework.core.io.support.ResourceRegion(org.springframework.core.io.Resource)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/HttpRange.java",
                "addMethodBegin": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": 19,
                    "org.springframework.http.HttpRange.getLengthFor(Resource resource)": 27,
                    "org.springframework.http.HttpRange.parseRanges(@Nullable String ranges)": 55,
                    "org.springframework.http.HttpRange.toResourceRegions(List<HttpRange> ranges, Resource resource)": 102
                },
                "addMethodEnd": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": 25,
                    "org.springframework.http.HttpRange.getLengthFor(Resource resource)": 39,
                    "org.springframework.http.HttpRange.parseRanges(@Nullable String ranges)": 73,
                    "org.springframework.http.HttpRange.toResourceRegions(List<HttpRange> ranges, Resource resource)": 119
                },
                "addMethodFull": {
                    "org.springframework.http.HttpRange.toResourceRegion(Resource resource)": {
                        "lineNumber": [
                            {
                                "21": "long contentLength = getLengthFor(resource);"
                            }
                        ],
                        "paramType": "(Resource resource)",
                        "originalFullName": "org.springframework.http.HttpRange.toResourceRegion:org.springframework.core.io.support.ResourceRegion(org.springframework.core.io.Resource)"
                    },
                    "org.springframework.http.HttpRange.getLengthFor(Resource resource)": {
                        "lineNumber": [
                            {
                                "27": "private static long getLengthFor(Resource resource) {"
                            },
                            {
                                "28": "long contentLength;"
                            },
                            {
                                "29": "try {"
                            },
                            {
                                "30": "contentLength = resource.contentLength();"
                            },
                            {
                                "31": "Assert.isTrue(contentLength > 0, \"Resource content length should be > 0\");"
                            },
                            {
                                "32": "}"
                            },
                            {
                                "33": ""
                            },
                            {
                                "35": "throw new IllegalArgumentException(\"Failed to obtain Resource content length\", ex);"
                            },
                            {
                                "38": "return contentLength;"
                            }
                        ],
                        "paramType": "(Resource resource)",
                        "originalFullName": "org.springframework.http.HttpRange.getLengthFor:long(org.springframework.core.io.Resource)"
                    },
                    "org.springframework.http.HttpRange.parseRanges(@Nullable String ranges)": {
                        "lineNumber": [
                            {
                                "66": "Assert.isTrue(tokens.length <= MAX_RANGES, () -> \"Too many ranges \" + tokens.length);"
                            }
                        ],
                        "paramType": "(@Nullable String ranges)",
                        "originalFullName": "org.springframework.http.HttpRange.parseRanges:java.util.List(java.lang.String)"
                    },
                    "org.springframework.http.HttpRange.toResourceRegions(List<HttpRange> ranges, Resource resource)": {
                        "lineNumber": [
                            {
                                "112": "if (ranges.size() > 1) {"
                            },
                            {
                                "113": "long length = getLengthFor(resource);"
                            },
                            {
                                "114": "long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);"
                            },
                            {
                                "115": "Assert.isTrue(total < length, () -> \"The sum of all ranges (\" + total + \") \" + \"should be less than the resource length (\" + length + \")\");"
                            },
                            {
                                "116": "}"
                            },
                            {
                                "117": ""
                            }
                        ],
                        "paramType": "(List<HttpRange> ranges, Resource resource)",
                        "originalFullName": "org.springframework.http.HttpRange.toResourceRegions:java.util.List(java.util.List,org.springframework.core.io.Resource)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ResourceHttpRequestHandler",
                "HttpRange"
            ],
            "pathlst": [
                "e.g.",
                "org.springframework.core.io.Resource."
            ],
            "langrelatedfiles": []
        }
    },
    "CVE-2020-5398": {
        "old_methods_info": [
            {
                "oldFilePath": "spring-web/src/main/java/org/springframework/http/ContentDisposition.java",
                "deleteMethodBegin": {
                    "org.springframework.http.ContentDisposition.toString()": 110,
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": 169,
                    "org.springframework.http.ContentDisposition.decodeHeaderFieldParam(String input)": 289,
                    "org.springframework.http.ContentDisposition.encodeHeaderFieldParam(String input, Charset charset)": 328
                },
                "deleteMethodEnd": {
                    "org.springframework.http.ContentDisposition.toString()": 159,
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": 242,
                    "org.springframework.http.ContentDisposition.decodeHeaderFieldParam(String input)": 322,
                    "org.springframework.http.ContentDisposition.encodeHeaderFieldParam(String input, Charset charset)": 357
                },
                "deleteMethodFull": {
                    "org.springframework.http.ContentDisposition.toString()": {
                        "lineNumber": [
                            {
                                "125": "sb.append(this.filename).append('\\\"');"
                            },
                            {
                                "130": "sb.append(encodeHeaderFieldParam(this.filename, this.charset));"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.http.ContentDisposition.toString:java.lang.String()"
                    },
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": {
                        "lineNumber": [
                            {
                                "184": "String value = (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\") ? part.substring(eqIndex + 2, part.length() - 1) : part.substring(eqIndex + 1, part.length()));"
                            },
                            {
                                "190": "filename = decodeHeaderFieldParam(value);"
                            },
                            {
                                "191": "charset = Charset.forName(value.substring(0, value.indexOf('\\'')).trim());"
                            }
                        ],
                        "paramType": "(String contentDisposition)",
                        "originalFullName": "org.springframework.http.ContentDisposition.parse:org.springframework.http.ContentDisposition(java.lang.String)"
                    },
                    "org.springframework.http.ContentDisposition.decodeHeaderFieldParam(String input)": {
                        "lineNumber": [
                            {
                                "289": "private static String decodeHeaderFieldParam(String input) {"
                            },
                            {
                                "290": "Assert.notNull(input, \"Input String should not be null\");"
                            },
                            {
                                "291": "int firstQuoteIndex = input.indexOf('\\'');"
                            },
                            {
                                "292": "int secondQuoteIndex = input.indexOf('\\'', firstQuoteIndex + 1);"
                            },
                            {
                                "293": "if (firstQuoteIndex == -1 || secondQuoteIndex == -1) {"
                            },
                            {
                                "294": "return input;"
                            },
                            {
                                "295": "}"
                            },
                            {
                                "296": ""
                            },
                            {
                                "297": "Charset charset = Charset.forName(input.substring(0, firstQuoteIndex).trim());"
                            },
                            {
                                "298": "Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset), \"Charset should be UTF-8 or ISO-8859-1\");"
                            },
                            {
                                "299": "byte[] value = input.substring(secondQuoteIndex + 1, input.length()).getBytes(charset);"
                            },
                            {
                                "309": "else if (b == '%') {"
                            },
                            {
                                "310": "char[] array = { (char)value[index + 1], (char)value[index + 2]};"
                            },
                            {
                                "316": "throw new IllegalArgumentException(\"Invalid header field parameter format (as defined in RFC 5987)\");"
                            }
                        ],
                        "paramType": "(String input)",
                        "originalFullName": "org.springframework.http.ContentDisposition.decodeHeaderFieldParam:java.lang.String(java.lang.String)"
                    },
                    "org.springframework.http.ContentDisposition.encodeHeaderFieldParam(String input, Charset charset)": {
                        "lineNumber": [
                            {
                                "328": "private static String encodeHeaderFieldParam(String input, Charset charset) {"
                            },
                            {
                                "329": "Assert.notNull(input, \"Input String should not be null\");"
                            },
                            {
                                "330": "Assert.notNull(charset, \"Charset should not be null\");"
                            },
                            {
                                "331": "if (StandardCharsets.US_ASCII.equals(charset)) {"
                            },
                            {
                                "332": "return input;"
                            },
                            {
                                "335": "Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset), \"Charset should be UTF-8 or ISO-8859-1\");"
                            }
                        ],
                        "paramType": "(String input, Charset charset)",
                        "originalFullName": "org.springframework.http.ContentDisposition.encodeHeaderFieldParam:java.lang.String(java.lang.String,java.nio.charset.Charset)"
                    }
                }
            }
        ],
        "new_methods_info": [
            {
                "newFilePath": "spring-web/src/main/java/org/springframework/http/ContentDisposition.java",
                "addMethodBegin": {
                    "org.springframework.http.ContentDisposition.toString()": 111,
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": 170,
                    "org.springframework.http.ContentDisposition.decodeFilename(String filename, Charset charset)": 299,
                    "org.springframework.http.ContentDisposition.escapeQuotationsInFilename(String filename)": 338,
                    "org.springframework.http.ContentDisposition.encodeFilename(String input, Charset charset)": 357,
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename)": 423,
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename, Charset charset)": 430
                },
                "addMethodEnd": {
                    "org.springframework.http.ContentDisposition.toString()": 160,
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": 252,
                    "org.springframework.http.ContentDisposition.decodeFilename(String filename, Charset charset)": 332,
                    "org.springframework.http.ContentDisposition.escapeQuotationsInFilename(String filename)": 355,
                    "org.springframework.http.ContentDisposition.encodeFilename(String input, Charset charset)": 383,
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename)": 428,
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename, Charset charset)": 436
                },
                "addMethodFull": {
                    "org.springframework.http.ContentDisposition.toString()": {
                        "lineNumber": [
                            {
                                "126": "sb.append(escapeQuotationsInFilename(this.filename)).append('\\\"');"
                            },
                            {
                                "131": "sb.append(encodeFilename(this.filename, this.charset));"
                            }
                        ],
                        "paramType": "()",
                        "originalFullName": "org.springframework.http.ContentDisposition.toString:java.lang.String()"
                    },
                    "org.springframework.http.ContentDisposition.parse(String contentDisposition)": {
                        "lineNumber": [
                            {
                                "185": "String value = (part.startsWith(\"\\\"\", eqIndex + 1) && part.endsWith(\"\\\"\") ? part.substring(eqIndex + 2, part.length() - 1) : part.substring(eqIndex + 1));"
                            },
                            {
                                "191": "int idx1 = value.indexOf('\\'');"
                            },
                            {
                                "192": "int idx2 = value.indexOf('\\'', idx1 + 1);"
                            },
                            {
                                "193": "if (idx1 != -1 && idx2 != -1) {"
                            },
                            {
                                "194": "charset = Charset.forName(value.substring(0, idx1).trim());"
                            },
                            {
                                "196": "filename = decodeFilename(value.substring(idx2 + 1), charset);"
                            },
                            {
                                "197": "}"
                            },
                            {
                                "198": ""
                            },
                            {
                                "199": "else {"
                            },
                            {
                                "200": "filename = decodeFilename(value, StandardCharsets.US_ASCII);"
                            },
                            {
                                "201": "}"
                            },
                            {
                                "202": ""
                            }
                        ],
                        "paramType": "(String contentDisposition)",
                        "originalFullName": "org.springframework.http.ContentDisposition.parse:org.springframework.http.ContentDisposition(java.lang.String)"
                    },
                    "org.springframework.http.ContentDisposition.decodeFilename(String filename, Charset charset)": {
                        "lineNumber": [
                            {
                                "299": "private static String decodeFilename(String filename, Charset charset) {"
                            },
                            {
                                "300": "Assert.notNull(filename, \"'input' String` should not be null\");"
                            },
                            {
                                "301": "Assert.notNull(charset, \"'charset' should not be null\");"
                            },
                            {
                                "302": "byte[] value = filename.getBytes(charset);"
                            },
                            {
                                "312": "else if (b == '%' && index < value.length - 2) {"
                            },
                            {
                                "313": "char[] array = new char[]{(char) value[index + 1], (char) value[index + 2]};"
                            },
                            {
                                "314": "try {"
                            },
                            {
                                "316": "}"
                            },
                            {
                                "317": ""
                            },
                            {
                                "318": "catch (NumberFormatException ex) {"
                            },
                            {
                                "319": "throw new IllegalArgumentException(INVALID_HEADER_FIELD_PARAMETER_FORMAT, ex);"
                            },
                            {
                                "320": "}"
                            },
                            {
                                "321": ""
                            },
                            {
                                "326": "throw new IllegalArgumentException(INVALID_HEADER_FIELD_PARAMETER_FORMAT);"
                            }
                        ],
                        "paramType": "(String filename, Charset charset)",
                        "originalFullName": "org.springframework.http.ContentDisposition.decodeFilename:java.lang.String(java.lang.String,java.nio.charset.Charset)"
                    },
                    "org.springframework.http.ContentDisposition.escapeQuotationsInFilename(String filename)": {
                        "lineNumber": [
                            {
                                "338": "private static String escapeQuotationsInFilename(String filename) {"
                            },
                            {
                                "339": "if (filename.indexOf('\"') == -1 && filename.indexOf('\\\\') == -1) {"
                            },
                            {
                                "340": "return filename;"
                            },
                            {
                                "343": "boolean escaped = false;"
                            },
                            {
                                "344": "StringBuilder sb = new StringBuilder();"
                            },
                            {
                                "345": "for (char c : filename.toCharArray()) {"
                            },
                            {
                                "346": "sb.append((c == '\"' && !escaped) ? \"\\\\\\\"\" : c);"
                            },
                            {
                                "347": "escaped = (!escaped && c == '\\\\');"
                            },
                            {
                                "348": "}"
                            },
                            {
                                "349": ""
                            },
                            {
                                "350": "if (escaped) {"
                            },
                            {
                                "351": "sb.deleteCharAt(sb.length() - 1);"
                            },
                            {
                                "352": "}"
                            },
                            {
                                "353": ""
                            },
                            {
                                "354": "return sb.toString();"
                            },
                            {
                                "355": "}"
                            }
                        ],
                        "paramType": "(String filename)",
                        "originalFullName": "org.springframework.http.ContentDisposition.escapeQuotationsInFilename:java.lang.String(java.lang.String)"
                    },
                    "org.springframework.http.ContentDisposition.encodeFilename(String input, Charset charset)": {
                        "lineNumber": [
                            {
                                "357": "private static String encodeFilename(String input, Charset charset) {"
                            },
                            {
                                "358": "Assert.notNull(input, \"`input` is required\");"
                            },
                            {
                                "359": "Assert.notNull(charset, \"`charset` is required\");"
                            },
                            {
                                "360": "Assert.isTrue(!StandardCharsets.US_ASCII.equals(charset), \"ASCII does not require encoding\");"
                            },
                            {
                                "361": "Assert.isTrue(UTF_8.equals(charset) || ISO_8859_1.equals(charset), \"Only UTF-8 and ISO-8859-1 supported.\");"
                            }
                        ],
                        "paramType": "(String input, Charset charset)",
                        "originalFullName": "org.springframework.http.ContentDisposition.encodeFilename:java.lang.String(java.lang.String,java.nio.charset.Charset)"
                    },
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename)": {
                        "lineNumber": [
                            {
                                "425": "Assert.hasText(filename, \"No filename\");"
                            }
                        ],
                        "paramType": "(String filename)",
                        "originalFullName": "org.springframework.http.ContentDisposition$BuilderImpl.filename:org.springframework.http.ContentDisposition$Builder(java.lang.String)"
                    },
                    "org.springframework.http.ContentDisposition$BuilderImpl.filename(String filename, Charset charset)": {
                        "lineNumber": [
                            {
                                "432": "Assert.hasText(filename, \"No filename\");"
                            }
                        ],
                        "paramType": "(String filename, Charset charset)",
                        "originalFullName": "org.springframework.http.ContentDisposition$BuilderImpl.filename:org.springframework.http.ContentDisposition$Builder(java.lang.String,java.nio.charset.Charset)"
                    }
                }
            }
        ],
        "commit_message_info": {
            "method_names": [],
            "classnamelst": [
                "ContentDisposition"
            ],
            "pathlst": [],
            "langrelatedfiles": []
        }
    }
}