diff --git a/./github_diff/CVE-2016-4977/oldfiles/SpelView.java b/./github_diff/CVE-2016-4977/newfiles/SpelView.java
index d7d2b17..7d31bfe 100644
--- a/./github_diff/CVE-2016-4977/oldfiles/SpelView.java
+++ b/./github_diff/CVE-2016-4977/newfiles/SpelView.java
@@ -7,20 +7,21 @@ import org.springframework.context.expression.MapAccessor;
 import org.springframework.expression.Expression;
 import org.springframework.expression.spel.standard.SpelExpressionParser;
 import org.springframework.expression.spel.support.StandardEvaluationContext;
+import org.springframework.security.oauth2.common.util.RandomValueStringGenerator;
 import org.springframework.util.PropertyPlaceholderHelper;
 import org.springframework.util.PropertyPlaceholderHelper.PlaceholderResolver;
 import org.springframework.web.servlet.View;
 import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
 class SpelView implements View {
 	private final String template;
+	 private final String prefix;
 	private final SpelExpressionParser parser = new SpelExpressionParser();
 	private final StandardEvaluationContext context = new StandardEvaluationContext();
-	private PropertyPlaceholderHelper helper;
 	private PlaceholderResolver resolver;
 	public SpelView(String template) {
 		this.template = template;
+		this.prefix = new RandomValueStringGenerator().generate() + "{";
 		this.context.addPropertyAccessor(new MapAccessor());
-		this.helper = new PropertyPlaceholderHelper("${", "}");
 		this.resolver = new PlaceholderResolver() { 			public String resolvePlaceholder(String name) { Expression expression = parser.parseExpression(name);
 				Object value = expression.getValue(context);
 				return value == null ? null : value.toString();
@@ -38,7 +39,10 @@ class SpelView implements View {
 		String path = ServletUriComponentsBuilder.fromContextPath(request).build() .getPath();
 		map.put("path", (Object) path==null ? "" : path);
 		context.setRootObject(map);
-		String result = helper.replacePlaceholders(template, resolver);
+		String maskedTemplate = template.replace("${", prefix);
+		PropertyPlaceholderHelper helper = new PropertyPlaceholderHelper(prefix, "}");
+		String result = helper.replacePlaceholders(maskedTemplate, resolver);
+		result = result.replace(prefix, "${");
 		response.setContentType(getContentType());
 		response.getWriter().append(result);
 	}
