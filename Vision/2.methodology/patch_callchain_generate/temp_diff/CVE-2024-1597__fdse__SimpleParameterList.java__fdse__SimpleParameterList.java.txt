diff --git a/./github_diff/CVE-2024-1597/oldfiles/SimpleParameterList.java b/./github_diff/CVE-2024-1597/newfiles/SimpleParameterList.java
index eab8024..35eb29d 100644
--- a/./github_diff/CVE-2024-1597/oldfiles/SimpleParameterList.java
+++ b/./github_diff/CVE-2024-1597/newfiles/SimpleParameterList.java
@@ -151,6 +151,26 @@ class SimpleParameterList implements V3ParameterList {
     bind(index, NULL_OBJECT, oid, binaryTransfer);
   }
   
+  private static String quoteAndCast(String text, String type, boolean standardConformingStrings) {
+    StringBuilder sb = new StringBuilder((text.length() + 10) / 10 * 11); 
+    sb.append("('");
+    try {
+      Utils.escapeLiteral(sb, text, standardConformingStrings);
+    }
+     catch (SQLException e) {
+      sb.append('\u0000');
+    }
+    
+    sb.append("'");
+    if (type != null) {
+      sb.append("::");
+      sb.append(type);
+    }
+    
+    sb.append(")");
+    return sb.toString();
+  }
+  
   @Override
   public String toString(@Positive int index, boolean standardConformingStrings) { --index;
     Object paramValue = paramValues[index];
@@ -158,92 +178,82 @@ class SimpleParameterList implements V3ParameterList {
       return "?";
     }
      else if (paramValue == NULL_OBJECT) {
-      return "NULL";
+      return "(NULL)";
     }
      else if ((flags[index] & BINARY) == BINARY) {
       switch (paramTypes[index]) {
         case Oid.INT2:
           short s = ByteConverter.int2((byte[]) paramValue, 0);
-          return Short.toString(s);
+          return quoteAndCast(Short.toString(s), "int2", standardConformingStrings);
         case Oid.INT4:
           int i = ByteConverter.int4((byte[]) paramValue, 0);
-          return Integer.toString(i);
+          return quoteAndCast(Integer.toString(i), "int4", standardConformingStrings);
         case Oid.INT8:
           long l = ByteConverter.int8((byte[]) paramValue, 0);
-          return Long.toString(l);
+          return quoteAndCast(Long.toString(l), "int8", standardConformingStrings);
         case Oid.FLOAT4:
           float f = ByteConverter.float4((byte[]) paramValue, 0);
           if (Float.isNaN(f)) {
-            return "'NaN'::real";
+            return "('NaN'::real)";
           }
           
-          return Float.toString(f);
+          return quoteAndCast(Float.toString(f), "float", standardConformingStrings);
         case Oid.FLOAT8:
           double d = ByteConverter.float8((byte[]) paramValue, 0);
           if (Double.isNaN(d)) {
-            return "'NaN'::double precision";
+            return "('NaN'::double precision)";
           }
           
-          return Double.toString(d);
+          return quoteAndCast(Double.toString(d), "double precision", standardConformingStrings);
         case Oid.NUMERIC:
           Number n = ByteConverter.numeric((byte[]) paramValue);
           if (n instanceof Double) {
             assert ((Double) n).isNaN();
-            return "'NaN'::numeric";
+            return "('NaN'::numeric)";
           }
           
           return n.toString();
         case Oid.UUID:
           String uuid = new UUIDArrayAssistant().buildElement((byte[]) paramValue, 0, 16).toString();
-          return "'" + uuid + "'::uuid";
+          return quoteAndCast(uuid, "uuid", standardConformingStrings);
         case Oid.POINT:
           PGpoint pgPoint = new PGpoint();
           pgPoint.setByteValue((byte[]) paramValue, 0);
-          return "'" + pgPoint.toString() + "'::point";
+          return quoteAndCast(pgPoint.toString(), "point", standardConformingStrings);
         case Oid.BOX:
           PGbox pgBox = new PGbox();
           pgBox.setByteValue((byte[]) paramValue, 0);
-          return "'" + pgBox.toString() + "'::box";
+          return quoteAndCast(pgBox.toString(), "box", standardConformingStrings);
       }
       
       return "?";
     }
      else {
       String param = paramValue.toString();
-      StringBuilder p = new StringBuilder(3 + (param.length() + 10) / 10 * 11);
-      p.append('\'');
-      try {
-        p = Utils.escapeLiteral(p, param, standardConformingStrings);
-      }
-       catch (SQLException sqle) {
-        p.append(param);
-      }
-      
-      p.append('\'');
       int paramType = paramTypes[index];
       if (paramType == Oid.TIMESTAMP) {
-        p.append("::timestamp");
+        return quoteAndCast(param, "timestamp", standardConformingStrings);
       }
        else if (paramType == Oid.TIMESTAMPTZ) {
-        p.append("::timestamp with time zone");
+        return quoteAndCast(param, "timestamp with time zone", standardConformingStrings);
       }
        else if (paramType == Oid.TIME) {
-        p.append("::time");
+        return quoteAndCast(param, "time", standardConformingStrings);
       }
        else if (paramType == Oid.TIMETZ) {
-        p.append("::time with time zone");
+        return quoteAndCast(param, "time with time zone", standardConformingStrings);
       }
        else if (paramType == Oid.DATE) {
-        p.append("::date");
+        return quoteAndCast(param, "date", standardConformingStrings);
       }
        else if (paramType == Oid.INTERVAL) {
-        p.append("::interval");
+        return quoteAndCast(param, "interval", standardConformingStrings);
       }
        else if (paramType == Oid.NUMERIC) {
-        p.append("::numeric");
+        return quoteAndCast(param, "numeric", standardConformingStrings);
       }
       
-      return p.toString();
+      return quoteAndCast(param, null, standardConformingStrings);
     }
     
   }
