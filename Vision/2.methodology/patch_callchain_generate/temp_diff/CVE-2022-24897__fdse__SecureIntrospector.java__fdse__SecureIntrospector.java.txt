diff --git a/./github_diff/CVE-2022-24897/oldfiles/SecureIntrospector.java b/./github_diff/CVE-2022-24897/newfiles/SecureIntrospector.java
index 64d7643..d2df91a 100644
--- a/./github_diff/CVE-2022-24897/oldfiles/SecureIntrospector.java
+++ b/./github_diff/CVE-2022-24897/newfiles/SecureIntrospector.java
@@ -1,46 +1,51 @@
 package org.xwiki.velocity.introspection;
+import java.io.File;
+import java.util.Arrays;
+import java.util.HashMap;
 import java.util.HashSet;
+import java.util.Map;
 import java.util.Set;
 import org.apache.velocity.util.introspection.SecureIntrospectorImpl;
 import org.slf4j.Logger;
 public class SecureIntrospector extends SecureIntrospectorImpl {
-    private final Set<String> secureClassMethods = new HashSet<>();
+    private static final String GETNAME = "getname";
+    private final Map<Class, Set<String>> whitelistedMethods;
     public SecureIntrospector(String[] badClasses, String[] badPackages, Logger log) {
         super(badClasses, badPackages, log);
-        this.secureClassMethods.add("getname");
-        this.secureClassMethods.add("getName");
-        this.secureClassMethods.add("getsimpleName");
-        this.secureClassMethods.add("getSimpleName");
-        this.secureClassMethods.add("isarray");
-        this.secureClassMethods.add("isArray");
-        this.secureClassMethods.add("isassignablefrom");
-        this.secureClassMethods.add("isAssignableFrom");
-        this.secureClassMethods.add("isenum");
-        this.secureClassMethods.add("isEnum");
-        this.secureClassMethods.add("isinstance");
-        this.secureClassMethods.add("isInstance");
-        this.secureClassMethods.add("isinterface");
-        this.secureClassMethods.add("isInterface");
-        this.secureClassMethods.add("islocalClass");
-        this.secureClassMethods.add("isLocalClass");
-        this.secureClassMethods.add("ismemberclass");
-        this.secureClassMethods.add("isMemberClass");
-        this.secureClassMethods.add("isprimitive");
-        this.secureClassMethods.add("isPrimitive");
-        this.secureClassMethods.add("issynthetic");
-        this.secureClassMethods.add("isSynthetic");
-        this.secureClassMethods.add("getEnumConstants");
+        this.whitelistedMethods = new HashMap<>();
+        this.prepareWhitelistClass();
+        this.prepareWhiteListFile();
+    }
+    
+    private void prepareWhitelistClass() {
+        Set<String> whitelist = new HashSet<>(Arrays.asList( GETNAME, "getsimpleName", "isarray", "isassignablefrom", "isenum", "isinstance", "isinterface", "islocalclass", "ismemberclass", "isprimitive", "issynthetic", "getenumconstants" ));
+        this.whitelistedMethods.put(Class.class, whitelist);
+    }
+    
+    private void prepareWhiteListFile() {
+        Set<String> whitelist = new HashSet<>(Arrays.asList( "canexecute", "canread", "canwrite", "compareto", "createtempfile", "equals", "getabsolutefile", "getabsolutepath", "getcanonicalfile", "getcanonicalpath", "getfreespace", GETNAME, "getparent", "getparentfile", "getpath", "gettotalspace", "getusablespace", "hashcode", "isabsolute", "isdirectory", "isfile", "ishidden", "lastmodified", "length", "topath", "tostring", "touri", "tourl", "getclass" ));
+        this.whitelistedMethods.put(File.class, whitelist);
     }
     
     @Override
     public boolean checkObjectExecutePermission(Class clazz, String methodName) {
-        if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {
-            return true;
+        Boolean result = null;
+        if (methodName != null) {
+            for (Map.Entry<Class, Set<String>> classSetEntry : this.whitelistedMethods.entrySet()) {
+                if (classSetEntry.getKey().isAssignableFrom(clazz)) {
+                    result = classSetEntry.getValue().contains(methodName.toLowerCase());
+                    break;
                 }
-         else {
-            return super.checkObjectExecutePermission(clazz, methodName);
+                
+            }
+            
+        }
+        
+        if (result == null) {
+            result = super.checkObjectExecutePermission(clazz, methodName);
         }
         
+        return result;
     }
     
 }
