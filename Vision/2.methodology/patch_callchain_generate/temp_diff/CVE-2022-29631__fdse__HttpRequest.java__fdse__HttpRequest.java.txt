diff --git a/./github_diff/CVE-2022-29631/oldfiles/HttpRequest.java b/./github_diff/CVE-2022-29631/newfiles/HttpRequest.java
index 332139c..97245a0 100644
--- a/./github_diff/CVE-2022-29631/oldfiles/HttpRequest.java
+++ b/./github_diff/CVE-2022-29631/newfiles/HttpRequest.java
@@ -1,6 +1,7 @@
 package jodd.http;
 import jodd.net.HttpMethod;
 import jodd.net.MimeTypes;
+import jodd.net.URLCoder;
 import jodd.util.Base64;
 import jodd.util.StringPool;
 import jodd.util.StringUtil;
@@ -10,7 +11,6 @@ import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.io.OutputStream;
 import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
 import java.nio.charset.StandardCharsets;
 import java.util.Map;
 import java.util.concurrent.CompletableFuture;
@@ -197,30 +197,23 @@ public class HttpRequest extends HttpBase<HttpRequest> {
 			path = StringPool.SLASH + path;
 		}
 		
-		try {
 		 final int fragmentIndex = path.indexOf('#');
 		if (path.indexOf('#') != -1) {
-				this.fragment = URLEncoder.encode(path.substring(fragmentIndex + 1), StandardCharsets.UTF_8.name());
+			this.fragment = URLCoder.encodePath(path.substring(fragmentIndex + 1), StandardCharsets.UTF_8);
 			path = path.substring(0, fragmentIndex);
 		}
 		
 		final int ndx = path.indexOf('?');
 		if (ndx != -1) {
 			final String queryString = path.substring(ndx + 1);
-				path = URLEncoder.encode(path.substring(0, ndx), StandardCharsets.UTF_8.name());
+			path = URLCoder.encodePath(path.substring(0, ndx), StandardCharsets.UTF_8);
 			query = HttpUtil.parseQuery(queryString, true);
 		}
 		 else {
 			query = HttpMultiMap.newCaseInsensitiveMap();
 		}
 		
-			this.path = URLEncoder.encode(path, StandardCharsets.UTF_8.name());
-			;
-		}
-		catch (UnsupportedEncodingException e) {
-			return null;
-		}
-		
+		this.path = URLCoder.encodePath(path, StandardCharsets.UTF_8);
 		return this;
 	}
 	
