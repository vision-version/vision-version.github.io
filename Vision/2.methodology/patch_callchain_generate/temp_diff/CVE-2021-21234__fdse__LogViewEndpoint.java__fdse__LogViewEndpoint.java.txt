diff --git a/./github_diff/CVE-2021-21234/oldfiles/LogViewEndpoint.java b/./github_diff/CVE-2021-21234/newfiles/LogViewEndpoint.java
index a9836f0..61b4c37 100644
--- a/./github_diff/CVE-2021-21234/oldfiles/LogViewEndpoint.java
+++ b/./github_diff/CVE-2021-21234/newfiles/LogViewEndpoint.java
@@ -46,8 +46,8 @@ public class LogViewEndpoint implements MvcEndpoint{
     @RequestMapping("/")
     @ResponseBody
     public String list(Model model,  @RequestParam(required = false, defaultValue = "FILENAME") SortBy sortBy, @RequestParam(required = false, defaultValue = "false") boolean desc, @RequestParam(required = false) String base) throws IOException, TemplateException {
-        securityCheck(base);
         Path currentFolder = loggingPath(base);
+        securityCheck(currentFolder, null);
         List<FileEntry> files = getFileProvider(currentFolder).getFileEntries(currentFolder);
         List<FileEntry> sortedFiles = sortFiles(files, sortBy, desc);
         model.addAttribute("sortBy", sortBy);
@@ -106,9 +106,9 @@ public class LogViewEndpoint implements MvcEndpoint{
     
     @RequestMapping("/view")
     public void view(@RequestParam String filename, @RequestParam(required = false) String base, @RequestParam(required = false) Integer tailLines, HttpServletResponse response) throws IOException {
-        securityCheck(filename);
-        response.setContentType(MediaType.TEXT_PLAIN_VALUE);
         Path path = loggingPath(base);
+        securityCheck(path, filename);
+        response.setContentType(MediaType.TEXT_PLAIN_VALUE);
         FileProvider fileProvider = getFileProvider(path);
         if (tailLines != null) {
             fileProvider.tailContent(path, filename, response.getOutputStream(), tailLines);
@@ -146,8 +146,17 @@ public class LogViewEndpoint implements MvcEndpoint{
         
     }
     
-    private void securityCheck(String filename) {
-        Assert.doesNotContain(filename, "..");
+    private void securityCheck(Path base, String filename) {
+        try {
+            String canonicalLoggingPath = (filename != null ? new File(base.toFile().toString(), filename) : new File(base.toFile().toString())).getCanonicalPath();
+            String baseCanonicalPath = new File(loggingPath).getCanonicalPath();
+            String errorMessage = "File " + base.toString() + "/" + filename + " may not be located outside base path " + loggingPath;
+            Assert.isTrue(canonicalLoggingPath.startsWith(baseCanonicalPath), errorMessage);
+        }
+         catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
+        
     }
     
     @Override
