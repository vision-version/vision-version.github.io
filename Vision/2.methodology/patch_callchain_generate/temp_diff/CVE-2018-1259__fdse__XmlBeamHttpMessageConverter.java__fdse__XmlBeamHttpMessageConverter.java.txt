diff --git a/./github_diff/CVE-2018-1259/oldfiles/XmlBeamHttpMessageConverter.java b/./github_diff/CVE-2018-1259/newfiles/XmlBeamHttpMessageConverter.java
index c600362..b7ec7e5 100644
--- a/./github_diff/CVE-2018-1259/oldfiles/XmlBeamHttpMessageConverter.java
+++ b/./github_diff/CVE-2018-1259/newfiles/XmlBeamHttpMessageConverter.java
@@ -2,6 +2,7 @@ package org.springframework.data.web;
 import java.io.IOException;
 import java.util.Map;
 import javax.annotation.Nullable;
+import javax.xml.parsers.DocumentBuilderFactory;
 import org.springframework.core.ResolvableType;
 import org.springframework.core.annotation.AnnotationUtils;
 import org.springframework.http.HttpInputMessage;
@@ -11,14 +12,34 @@ import org.springframework.http.converter.AbstractHttpMessageConverter;
 import org.springframework.http.converter.HttpMessageConverter;
 import org.springframework.http.converter.HttpMessageNotReadableException;
 import org.springframework.http.converter.HttpMessageNotWritableException;
+import org.springframework.util.Assert;
 import org.springframework.util.ConcurrentReferenceHashMap;
+import org.xml.sax.SAXParseException;
 import org.xmlbeam.XBProjector;
+import org.xmlbeam.config.DefaultXMLFactoriesConfig;
 public class XmlBeamHttpMessageConverter extends AbstractHttpMessageConverter<Object> {
 	private final XBProjector projectionFactory;
 	private final Map<Class<?>, Boolean> supportedTypesCache = new ConcurrentReferenceHashMap<>();
 	 public XmlBeamHttpMessageConverter() {
+		this(new XBProjector(new DefaultXMLFactoriesConfig() {
+			private static final long serialVersionUID = -1324345769124477493L;
+			 @Override
+			public DocumentBuilderFactory createDocumentBuilderFactory() {
+				DocumentBuilderFactory factory = super.createDocumentBuilderFactory();
+				factory.setAttribute("http://apache.org/xml/features/disallow-doctype-decl", true);
+				factory.setAttribute("http://xml.org/sax/features/external-general-entities", false);
+				return factory;
+			}
+			
+		}
+		
+));
+	}
+	
+	 public XmlBeamHttpMessageConverter(XBProjector projector) {
 		super(MediaType.APPLICATION_XML, MediaType.parseMediaType("application/*+xml"));
-		this.projectionFactory = new XBProjector();
+		Assert.notNull(projector, "XBProjector must not be null!");
+		this.projectionFactory = projector;
 	}
 	
 	 @Override
@@ -41,7 +62,20 @@ public class XmlBeamHttpMessageConverter extends AbstractHttpMessageConverter<Ob
 	
 	 @Override
 	protected Object readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {
+		try {
 			return projectionFactory.io().stream(inputMessage.getBody()).read(clazz);
+		}
+		 catch (RuntimeException o_O) {
+			Throwable cause = o_O.getCause();
+			if (SAXParseException.class.isInstance(cause)) {
+				throw new HttpMessageNotReadableException("Cannot read input message!", cause);
+			}
+			 else {
+				throw o_O;
+			}
+			
+		}
+		
 	}
 	
 	 @Override
