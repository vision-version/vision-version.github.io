diff --git a/./github_diff/CVE-2022-22980/oldfiles/ParameterBindingJsonReader.java b/./github_diff/CVE-2022-22980/newfiles/ParameterBindingJsonReader.java
index 3da872e..ce10f76 100644
--- a/./github_diff/CVE-2022-22980/oldfiles/ParameterBindingJsonReader.java
+++ b/./github_diff/CVE-2022-22980/newfiles/ParameterBindingJsonReader.java
@@ -3,8 +3,12 @@ import static java.lang.String.*;
 import java.text.DateFormat;
 import java.text.ParsePosition;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Calendar;
+import java.util.Collections;
 import java.util.Date;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.TimeZone;
@@ -29,6 +33,7 @@ public class ParameterBindingJsonReader extends AbstractBsonReader {
 	private static final Pattern ENTIRE_QUERY_BINDING_PATTERN = Pattern.compile("^\\?(\\d+)$|^[\\?:]#\\{.*\\}$");
 	private static final Pattern PARAMETER_BINDING_PATTERN = Pattern.compile("\\?(\\d+)");
 	private static final Pattern EXPRESSION_BINDING_PATTERN = Pattern.compile("[\\?:]#\\{.*\\}");
+	private static final Pattern SPEL_PARAMETER_BINDING_PATTERN = Pattern.compile("('\\?(\\d+)'|\\?(\\d+))");
 	private final ParameterBindingContext bindingContext;
 	private final JsonScanner scanner;
 	private JsonToken pushedToken;
@@ -303,13 +308,24 @@ public class ParameterBindingJsonReader extends AbstractBsonReader {
 			if (regexMatcher.find()) {
 				String binding = regexMatcher.group();
 				String expression = binding.substring(3, binding.length() - 1);
-				Matcher inSpelMatcher = PARAMETER_BINDING_PATTERN.matcher(expression);
+				Matcher inSpelMatcher = SPEL_PARAMETER_BINDING_PATTERN.matcher(expression); 
+				Map<String, Object> innerSpelVariables = new HashMap<>();
 				while (inSpelMatcher.find()) {
-					int index = computeParameterIndex(inSpelMatcher.group());
-					expression = expression.replace(inSpelMatcher.group(), getBindableValueForIndex(index).toString());
+					String group = inSpelMatcher.group();
+					int index = computeParameterIndex(group);
+					Object value = getBindableValueForIndex(index);
+					String varName = "__QVar" + innerSpelVariables.size();
+					expression = expression.replace(group, "#" + varName);
+					if(group.startsWith("'")) { 
+						innerSpelVariables.put(varName, nullSafeToString(value));
+					}
+					 else {
+						innerSpelVariables.put(varName, value);
 					}
 					
-				Object value = evaluateExpression(expression);
+				}
+				
+				Object value = evaluateExpression(expression, innerSpelVariables);
 				bindableValue.setValue(value);
 				bindableValue.setType(bsonTypeForValue(value));
 				return bindableValue;
@@ -332,13 +348,24 @@ public class ParameterBindingJsonReader extends AbstractBsonReader {
 		while (regexMatcher.find()) {
 			String binding = regexMatcher.group();
 			String expression = binding.substring(3, binding.length() - 1);
-			Matcher inSpelMatcher = PARAMETER_BINDING_PATTERN.matcher(expression);
+			Matcher inSpelMatcher = SPEL_PARAMETER_BINDING_PATTERN.matcher(expression);
+			Map<String, Object> innerSpelVariables = new HashMap<>();
 			while (inSpelMatcher.find()) {
-				int index = computeParameterIndex(inSpelMatcher.group());
-				expression = expression.replace(inSpelMatcher.group(), getBindableValueForIndex(index).toString());
+				String group = inSpelMatcher.group();
+				int index = computeParameterIndex(group);
+				Object value = getBindableValueForIndex(index);
+				String varName = "__QVar" + innerSpelVariables.size();
+				expression = expression.replace(group, "#" + varName);
+				if(group.startsWith("'")) { 
+					innerSpelVariables.put(varName, nullSafeToString(value));
+				}
+				 else {
+					innerSpelVariables.put(varName, value);
+				}
+				
 			}
 			
-			computedValue = computedValue.replace(binding, nullSafeToString(evaluateExpression(expression)));
+			computedValue = computedValue.replace(binding, nullSafeToString(evaluateExpression(expression, innerSpelVariables)));
 			bindableValue.setValue(computedValue);
 			bindableValue.setType(BsonType.STRING);
 			return bindableValue;
@@ -371,7 +398,7 @@ public class ParameterBindingJsonReader extends AbstractBsonReader {
 	}
 	
 	private static int computeParameterIndex(String parameter) {
-		return NumberUtils.parseNumber(parameter.replace("?", ""), Integer.class);
+		return NumberUtils.parseNumber(parameter.replace("?", "").replace("'", ""), Integer.class);
 	}
 	
 	private Object getBindableValueForIndex(int index) {
@@ -429,7 +456,12 @@ public class ParameterBindingJsonReader extends AbstractBsonReader {
 	
 	@Nullable
 	private Object evaluateExpression(String expressionString) {
-		return bindingContext.evaluateExpression(expressionString);
+		return bindingContext.evaluateExpression(expressionString, Collections.emptyMap());
+	}
+	
+	@Nullable
+	private Object evaluateExpression(String expressionString, Map<String,Object> variables) {
+		return bindingContext.evaluateExpression(expressionString, variables);
 	}
 	
 	 @Override
