diff --git a/./github_diff/CVE-2022-22970/oldfiles/CachedIntrospectionResults.java b/./github_diff/CVE-2022-22970/newfiles/CachedIntrospectionResults.java
index 2259d67..6bad3e8 100644
--- a/./github_diff/CVE-2022-22970/oldfiles/CachedIntrospectionResults.java
+++ b/./github_diff/CVE-2022-22970/newfiles/CachedIntrospectionResults.java
@@ -5,6 +5,7 @@ import java.beans.Introspector;
 import java.beans.PropertyDescriptor;
 import java.lang.reflect.Method;
 import java.lang.reflect.Modifier;
+import java.net.URL;
 import java.security.ProtectionDomain;
 import java.util.Collections;
 import java.util.HashSet;
@@ -140,7 +141,11 @@ public final class CachedIntrospectionResults {
 					 continue;
 				}
 				
-				if (pd.getWriteMethod() == null && pd.getPropertyType() != null && (ClassLoader.class.isAssignableFrom(pd.getPropertyType()) || ProtectionDomain.class.isAssignableFrom(pd.getPropertyType()))) {
+				if (URL.class == beanClass && "content".equals(pd.getName())) {
+					 continue;
+				}
+				
+				if (pd.getWriteMethod() == null && isInvalidReadOnlyPropertyType(pd.getPropertyType())) {
 					 continue;
 				}
 				
@@ -180,7 +185,7 @@ public final class CachedIntrospectionResults {
 					PropertyDescriptor existingPd = this.propertyDescriptors.get(pd.getName());
 					if (existingPd == null || (existingPd.getReadMethod() == null && pd.getReadMethod() != null)) {
 						 pd = buildGenericTypeAwarePropertyDescriptor(beanClass, pd);
-						if (pd.getWriteMethod() == null && pd.getPropertyType() != null && (ClassLoader.class.isAssignableFrom(pd.getPropertyType()) || ProtectionDomain.class.isAssignableFrom(pd.getPropertyType()))) {
+						if (pd.getWriteMethod() == null && isInvalidReadOnlyPropertyType(pd.getPropertyType())) {
 							 continue;
 						}
 						
@@ -213,7 +218,7 @@ public final class CachedIntrospectionResults {
 	}
 	
 	private boolean isPlainAccessor(Method method) {
-		if (Modifier.isStatic(method.getModifiers()) || method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class || method.getParameterCount() > 0 || method.getReturnType() == void.class || ClassLoader.class.isAssignableFrom(method.getReturnType()) || ProtectionDomain.class.isAssignableFrom(method.getReturnType())) {
+		if (Modifier.isStatic(method.getModifiers()) || method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class || method.getParameterCount() > 0 || method.getReturnType() == void.class || isInvalidReadOnlyPropertyType(method.getReturnType())) {
 			return false;
 		}
 		
@@ -228,6 +233,10 @@ public final class CachedIntrospectionResults {
 		
 	}
 	
+	private boolean isInvalidReadOnlyPropertyType(@Nullable Class<?> returnType) {
+		return (returnType != null && (AutoCloseable.class.isAssignableFrom(returnType) || ClassLoader.class.isAssignableFrom(returnType) || ProtectionDomain.class.isAssignableFrom(returnType)));
+	}
+	
 	BeanInfo getBeanInfo() {
 		return this.beanInfo;
 	}
