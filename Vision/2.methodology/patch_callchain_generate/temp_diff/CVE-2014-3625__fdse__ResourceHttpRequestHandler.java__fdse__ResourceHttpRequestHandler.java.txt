diff --git a/./github_diff/CVE-2014-3625/oldfiles/ResourceHttpRequestHandler.java b/./github_diff/CVE-2014-3625/newfiles/ResourceHttpRequestHandler.java
index 2cf4233..b11eccc 100644
--- a/./github_diff/CVE-2014-3625/oldfiles/ResourceHttpRequestHandler.java
+++ b/./github_diff/CVE-2014-3625/newfiles/ResourceHttpRequestHandler.java
@@ -1,6 +1,8 @@
 package org.springframework.web.servlet.resource;
 import java.io.IOException;
 import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.URLDecoder;
 import java.util.List;
 import javax.activation.FileTypeMap;
 import javax.activation.MimetypesFileTypeMap;
@@ -12,10 +14,12 @@ import org.apache.commons.logging.LogFactory;
 import org.springframework.beans.factory.InitializingBean;
 import org.springframework.core.io.ClassPathResource;
 import org.springframework.core.io.Resource;
+import org.springframework.core.io.UrlResource;
 import org.springframework.http.MediaType;
 import org.springframework.util.Assert;
 import org.springframework.util.ClassUtils;
 import org.springframework.util.CollectionUtils;
+import org.springframework.util.ResourceUtils;
 import org.springframework.util.StreamUtils;
 import org.springframework.util.StringUtils;
 import org.springframework.web.HttpRequestHandler;
@@ -86,6 +90,7 @@ public class ResourceHttpRequestHandler extends WebContentGenerator implements H
 			throw new IllegalStateException("Required request attribute '" + HandlerMapping.PATH_WITHIN_HANDLER_MAPPING_ATTRIBUTE + "' is not set");
 		}
 		
+		path = processPath(path);
 		if (!StringUtils.hasText(path) || isInvalidPath(path)) {
 			if (logger.isDebugEnabled()) {
 				logger.debug("Ignoring invalid resource path [" + path + "]");
@@ -94,6 +99,26 @@ public class ResourceHttpRequestHandler extends WebContentGenerator implements H
 			return null;
 		}
 		
+		if (path.contains("%")) {
+			try {
+				 if (isInvalidPath(URLDecoder.decode(path, "UTF-8"))) {
+					if (logger.isTraceEnabled()) {
+						logger.trace("Ignoring invalid resource path with escape sequences [" + path + "].");
+					}
+					
+					return null;
+				}
+				
+			}
+			
+			catch (UnsupportedEncodingException e) {
+				 }
+				 
+			catch (IllegalArgumentException ex) {
+				 }
+				 
+		}
+		
 		for (Resource location : this.locations) {
 			try {
 				if (logger.isDebugEnabled()) {
@@ -102,6 +127,7 @@ public class ResourceHttpRequestHandler extends WebContentGenerator implements H
 				
 				Resource resource = location.createRelative(path);
 				if (resource.exists() && resource.isReadable()) {
+					if (isResourceUnderLocation(resource, location)) {
 						if (logger.isDebugEnabled()) {
 							logger.debug("Found matching resource: " + resource);
 						}
@@ -109,6 +135,16 @@ public class ResourceHttpRequestHandler extends WebContentGenerator implements H
 						return resource;
 					}
 					
+					else {
+						if (logger.isTraceEnabled()) {
+							logger.trace("resource=\"" + resource + "\" was successfully resolved " + "but is not under the location=\"" + location);
+						}
+						
+						return null;
+					}
+					
+				}
+				
 				else if (logger.isTraceEnabled()) {
 					logger.trace("Relative resource doesn't exist or isn't readable: " + resource);
 				}
@@ -124,8 +160,110 @@ public class ResourceHttpRequestHandler extends WebContentGenerator implements H
 		return null;
 	}
 	
+	 protected String processPath(String path) {
+		boolean slash = false;
+		for (int i = 0; i < path.length(); i++) {
+			if (path.charAt(i) == '/') {
+				slash = true;
+			}
+			
+			else if (path.charAt(i) > ' ' && path.charAt(i) != 127) {
+				if (i == 0 || (i == 1 && slash)) {
+					return path;
+				}
+				
+				path = slash ? "/" + path.substring(i) : path.substring(i);
+				if (logger.isTraceEnabled()) {
+					logger.trace("Path trimmed for leading '/' and control characters: " + path);
+				}
+				
+				return path;
+			}
+			
+		}
+		
+		return (slash ? "/" : "");
+	}
+	
 	 protected boolean isInvalidPath(String path) {
-		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."));
+		if (logger.isTraceEnabled()) {
+			logger.trace("Applying \"invalid path\" checks to path: " + path);
+		}
+		
+		if (path.contains("WEB-INF") || path.contains("META-INF")) {
+			if (logger.isTraceEnabled()) {
+				logger.trace("Path contains \"WEB-INF\" or \"META-INF\".");
+			}
+			
+			return true;
+		}
+		
+		if (path.contains(":/")) {
+			String relativePath = (path.charAt(0) == '/' ? path.substring(1) : path);
+			if (ResourceUtils.isUrl(relativePath) || relativePath.startsWith("url:")) {
+				if (logger.isTraceEnabled()) {
+					logger.trace("Path represents URL or has \"url:\" prefix.");
+				}
+				
+				return true;
+			}
+			
+		}
+		
+		if (path.contains("../")) {
+			path = StringUtils.cleanPath(path);
+			if (path.contains("../")) {
+				if (logger.isTraceEnabled()) {
+					logger.trace("Path contains \"../\" after call to StringUtils#cleanPath.");
+				}
+				
+				return true;
+			}
+			
+		}
+		
+		return false;
+	}
+	
+	private boolean isResourceUnderLocation(Resource resource, Resource location) throws IOException {
+		if (!resource.getClass().equals(location.getClass())) {
+			return false;
+		}
+		
+		String resourcePath;
+		String locationPath;
+		if (resource instanceof ClassPathResource) {
+			resourcePath = ((ClassPathResource) resource).getPath();
+			locationPath = ((ClassPathResource) location).getPath();
+		}
+		
+		else if (resource instanceof UrlResource) {
+			resourcePath = resource.getURL().toExternalForm();
+			locationPath = location.getURL().toExternalForm();
+		}
+		
+		else {
+			resourcePath = resource.getURL().getPath();
+			locationPath = location.getURL().getPath();
+		}
+		
+		locationPath = (locationPath.endsWith("/") || locationPath.isEmpty() ? locationPath : locationPath + "/");
+		if (!resourcePath.startsWith(locationPath)) {
+			return false;
+		}
+		
+		if (resourcePath.contains("%")) {
+			 if (URLDecoder.decode(resourcePath, "UTF-8").contains("../")) {
+				if (logger.isTraceEnabled()) {
+					logger.trace("Resolved resource path contains \"../\" after decoding: " + resourcePath);
+				}
+				
+				return false;
+			}
+			
+		}
+		
+		return true;
 	}
 	
 	 protected MediaType getMediaType(Resource resource) {
