diff --git a/./github_diff/CVE-2017-7525/oldfiles/BeanDeserializerFactory.java b/./github_diff/CVE-2017-7525/newfiles/BeanDeserializerFactory.java
index 87eb9d0..916aba9 100644
--- a/./github_diff/CVE-2017-7525/oldfiles/BeanDeserializerFactory.java
+++ b/./github_diff/CVE-2017-7525/newfiles/BeanDeserializerFactory.java
@@ -15,6 +15,21 @@ public class BeanDeserializerFactory extends BasicDeserializerFactory implements
     private static final long serialVersionUID = 1;
     private final static Class<?>[] INIT_CAUSE_PARAMS = new Class<?>[] { Throwable.class };
     private final static Class<?>[] NO_VIEWS = new Class<?>[0];
+    protected final static Set<String> DEFAULT_NO_DESER_CLASS_NAMES;
+    static {
+        Set<String> s = new HashSet<>();
+        s.add("org.apache.commons.collections.functors.InvokerTransformer");
+        s.add("org.apache.commons.collections.functors.InstantiateTransformer");
+        s.add("org.apache.commons.collections4.functors.InvokerTransformer");
+        s.add("org.apache.commons.collections4.functors.InstantiateTransformer");
+        s.add("org.codehaus.groovy.runtime.ConvertedClosure");
+        s.add("org.codehaus.groovy.runtime.MethodClosure");
+        s.add("org.springframework.beans.factory.ObjectFactory");
+        s.add("com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl");
+        DEFAULT_NO_DESER_CLASS_NAMES = Collections.unmodifiableSet(s);
+    }
+    
+    protected Set<String> _cfgIllegalClassNames = DEFAULT_NO_DESER_CLASS_NAMES;
     public final static BeanDeserializerFactory instance = new BeanDeserializerFactory( new DeserializerFactoryConfig());
     public BeanDeserializerFactory(DeserializerFactoryConfig config) {
         super(config);
@@ -64,6 +79,7 @@ public class BeanDeserializerFactory extends BasicDeserializerFactory implements
             return null;
         }
         
+        checkIllegalTypes(ctxt, type, beanDesc);
         return buildBeanDeserializer(ctxt, type, beanDesc);
     }
     
@@ -574,5 +590,13 @@ public class BeanDeserializerFactory extends BasicDeserializerFactory implements
         return status.booleanValue();
     }
     
+    protected void checkIllegalTypes(DeserializationContext ctxt, JavaType type, BeanDescription beanDesc) throws JsonMappingException {
+        String full = type.getRawClass().getName();
+        if (_cfgIllegalClassNames.contains(full)) {
+            ctxt.reportBadTypeDefinition(beanDesc, "Illegal type (%s) to deserialize: prevented for security reasons", full);
+        }
+        
+    }
+    
 }
 
