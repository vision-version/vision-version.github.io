diff --git a/./github_diff/CVE-2022-25867/oldfiles/IOParser.java b/./github_diff/CVE-2022-25867/newfiles/IOParser.java
index b34a22a..51b9b50 100644
--- a/./github_diff/CVE-2022-25867/oldfiles/IOParser.java
+++ b/./github_diff/CVE-2022-25867/newfiles/IOParser.java
@@ -1,6 +1,8 @@
 package io.socket.parser;
 import io.socket.hasbinary.HasBinary;
+import org.json.JSONArray;
 import org.json.JSONException;
+import org.json.JSONObject;
 import org.json.JSONTokener;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -188,6 +190,10 @@ final public class IOParser implements Parser {
                     throw new DecodingException("invalid payload");
                 }
                 
+                if (!isPayloadValid(p.type, p.data)) {
+                    throw new DecodingException("invalid payload");
+                }
+                
             }
             
             if (logger.isLoggable(Level.FINE)) {
@@ -197,6 +203,24 @@ final public class IOParser implements Parser {
             return p;
         }
         
+        private static boolean isPayloadValid(int type, Object payload) {
+            switch (type) {
+                case Parser.CONNECT:
+                case Parser.CONNECT_ERROR:
+                    return payload instanceof JSONObject;
+                case Parser.DISCONNECT:
+                    return payload == null;
+                case Parser.EVENT:
+                case Parser.BINARY_EVENT:
+                    return payload instanceof JSONArray && ((JSONArray) payload).length() > 0 && !((JSONArray) payload).isNull(0);
+                case Parser.ACK:
+                case Parser.BINARY_ACK:
+                    return payload instanceof JSONArray;
+                default: return false;
+            }
+            
+        }
+        
         @Override
         public void destroy() {
             if (this.reconstructor != null) {
