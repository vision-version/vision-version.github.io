diff --git a/./github_diff/CVE-2017-1000487/oldfiles/BourneShell.java b/./github_diff/CVE-2017-1000487/newfiles/BourneShell.java
index 13edcf0..0617f22 100644
--- a/./github_diff/CVE-2017-1000487/oldfiles/BourneShell.java
+++ b/./github_diff/CVE-2017-1000487/newfiles/BourneShell.java
@@ -1,19 +1,17 @@
 package org.codehaus.plexus.util.cli.shell;
 import org.codehaus.plexus.util.Os;
-import org.codehaus.plexus.util.StringUtils;
 import java.util.ArrayList;
 import java.util.List;
 public class BourneShell extends Shell {
-    private static final char[] BASH_QUOTING_TRIGGER_CHARS = {
-        ' ', '$', ';', '&', '|', '<', '>', '*', '?', '(', ')', '[', ']', '{', '}', '`' };
     public BourneShell() {
         this(false);
     }
     
     public BourneShell( boolean isLoginShell ) {
+        setUnconditionalQuoting( true );
         setShellCommand( "/bin/sh" );
         setArgumentQuoteDelimiter( '\'' );
-        setExecutableQuoteDelimiter( '\"' );
+        setExecutableQuoteDelimiter( '\'' );
         setSingleQuotedArgumentEscaped( true );
         setSingleQuotedExecutableEscaped( false );
         setQuotedExecutableEnabled( true );
@@ -29,7 +27,7 @@ public class BourneShell extends Shell {
             return super.getExecutable();
         }
         
-        return unifyQuotes( super.getExecutable());
+        return quoteOneItem( super.getOriginalExecutable(), true );
     }
     
     public List<String> getShellArgsList() {
@@ -67,25 +65,21 @@ public class BourneShell extends Shell {
         String dir = getWorkingDirectoryAsString();
         StringBuilder sb = new StringBuilder();
         sb.append( "cd " );
-        sb.append( unifyQuotes( dir ) );
+        sb.append( quoteOneItem( dir, false ) );
         sb.append( " && " );
         return sb.toString();
     }
     
-    protected char[] getQuotingTriggerChars() {
-        return BASH_QUOTING_TRIGGER_CHARS;
-    }
-    
-    protected static String unifyQuotes( String path ) {
+    protected String quoteOneItem( String path, boolean isExecutable ) {
         if ( path == null ){
             return null;
         }
         
-        if ( path.indexOf( " " ) == -1 && path.indexOf( "'" ) != -1 && path.indexOf( "\"" ) == -1 ){
-            return StringUtils.escape( path );
-        }
-        
-        return StringUtils.quoteAndEscape( path, '\"', BASH_QUOTING_TRIGGER_CHARS );
+        StringBuilder sb = new StringBuilder();
+        sb.append( "'" );
+        sb.append( path.replace( "'", "'\"'\"'" ) );
+        sb.append( "'" );
+        return sb.toString();
     }
     
 }
