diff --git a/./github_diff/CVE-2017-1000487/oldfiles/Shell.java b/./github_diff/CVE-2017-1000487/newfiles/Shell.java
index 85cdce3..46c512e 100644
--- a/./github_diff/CVE-2017-1000487/oldfiles/Shell.java
+++ b/./github_diff/CVE-2017-1000487/newfiles/Shell.java
@@ -9,6 +9,7 @@ public class Shell implements Cloneable {
     private String shellCommand;
     private List<String> shellArgs = new ArrayList<String>();
     private boolean quotedArgumentsEnabled = true;
+    private boolean unconditionallyQuote = false;
     private String executable;
     private String workingDir;
     private boolean quotedExecutableEnabled = true;
@@ -19,6 +20,10 @@ public class Shell implements Cloneable {
     private char argQuoteDelimiter = '\"';
     private char exeQuoteDelimiter = '\"';
     private String argumentEscapePattern = "\\%s";
+    public void setUnconditionalQuoting(boolean unconditionallyQuote) {
+        this.unconditionallyQuote = unconditionallyQuote;
+    }
+    
     public void setShellCommand( String shellCommand ) {
         this.shellCommand = shellCommand;
     }
@@ -47,6 +52,11 @@ public class Shell implements Cloneable {
         return getRawCommandLine( executable, arguments );
     }
     
+    protected String quoteOneItem(String inputString, boolean isExecutable) {
+        char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );
+        return StringUtils.quoteAndEscape( inputString, isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', unconditionallyQuote );
+    }
+    
     protected List<String> getRawCommandLine( String executable, String[] arguments ) {
         List<String> commandLine = new ArrayList<String>();
         StringBuilder sb = new StringBuilder();
@@ -57,8 +67,7 @@ public class Shell implements Cloneable {
             }
             
             if ( isQuotedExecutableEnabled() ){
-                char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );
-                sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', false ) );
+                sb.append( quoteOneItem( getOriginalExecutable(), true ) );
             }
             
             else{
@@ -73,8 +82,7 @@ public class Shell implements Cloneable {
             }
             
             if ( isQuotedArgumentsEnabled() ){
-                char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );
-                sb.append( StringUtils.quoteAndEscape( arguments[i], getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), getArgumentEscapePattern(), false ) );
+                sb.append( quoteOneItem( arguments[i], false ) );
             }
             
             else{
@@ -160,7 +168,7 @@ public class Shell implements Cloneable {
             commandLine.addAll( getShellArgsList() );
         }
         
-        commandLine.addAll( getCommandLine( getExecutable(), arguments ) );
+        commandLine.addAll( getCommandLine( getOriginalExecutable(), arguments ) );
         return commandLine;
     }
     
