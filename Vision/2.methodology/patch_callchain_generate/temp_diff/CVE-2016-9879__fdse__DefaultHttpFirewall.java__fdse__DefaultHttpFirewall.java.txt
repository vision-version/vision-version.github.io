diff --git a/./github_diff/CVE-2016-9879/oldfiles/DefaultHttpFirewall.java b/./github_diff/CVE-2016-9879/newfiles/DefaultHttpFirewall.java
index 7692eb7..92e31d5 100644
--- a/./github_diff/CVE-2016-9879/oldfiles/DefaultHttpFirewall.java
+++ b/./github_diff/CVE-2016-9879/newfiles/DefaultHttpFirewall.java
@@ -2,12 +2,18 @@ package org.springframework.security.web.firewall;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 public class DefaultHttpFirewall implements HttpFirewall {
+    private boolean allowUrlEncodedSlash;
     public FirewalledRequest getFirewalledRequest(HttpServletRequest request) throws RequestRejectedException {
         FirewalledRequest fwr = new RequestWrapper(request);
         if (!isNormalized(fwr.getServletPath()) || !isNormalized(fwr.getPathInfo())) {
             throw new RequestRejectedException("Un-normalized paths are not supported: " + fwr.getServletPath() + (fwr.getPathInfo() != null ? fwr.getPathInfo() : ""));
         }
         
+        String requestURI = fwr.getRequestURI();
+        if (containsInvalidUrlEncodedSlash(requestURI)) {
+            throw new RequestRejectedException("The requestURI cannot contain encoded slash. Got " + requestURI);
+        }
+        
         return fwr;
     }
     
@@ -15,6 +21,22 @@ public class DefaultHttpFirewall implements HttpFirewall {
         return new FirewalledResponse(response);
     }
     
+    public void setAllowUrlEncodedSlash(boolean allowUrlEncodedSlash) {
+        this.allowUrlEncodedSlash = allowUrlEncodedSlash;
+    }
+    
+    private boolean containsInvalidUrlEncodedSlash(String uri) {
+        if (this.allowUrlEncodedSlash || uri == null) {
+            return false;
+        }
+        
+        if (uri.contains("%2f") || uri.contains("%2F")) {
+            return true;
+        }
+        
+        return false;
+    }
+    
     private boolean isNormalized(String path) {
         if (path == null) {
             return true;
