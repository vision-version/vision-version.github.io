diff --git a/./github_diff/CVE-2019-11343/oldfiles/LikeCondition.java b/./github_diff/CVE-2019-11343/newfiles/LikeCondition.java
index d210743..bc1bde9 100644
--- a/./github_diff/CVE-2019-11343/oldfiles/LikeCondition.java
+++ b/./github_diff/CVE-2019-11343/newfiles/LikeCondition.java
@@ -1,11 +1,7 @@
 package org.torpedoquery.jpa.internal.conditions;
-import java.util.Collections;
-import java.util.List;
-import java.util.concurrent.atomic.AtomicInteger;
-import org.torpedoquery.jpa.internal.Condition;
 import org.torpedoquery.jpa.internal.Parameter;
 import org.torpedoquery.jpa.internal.Selector;
-public class LikeCondition implements Condition {
+public class LikeCondition<T> extends SingleParameterCondition<T> {
 	public static enum Type {
 		ANY {
 			@Override
@@ -35,28 +31,14 @@ public class LikeCondition implements Condition {
 		public abstract String wrap(String toMatch);
 	}
 	
-	private final String toMatch;
-	private final Type type;
-	private final Selector selector;
-	 public LikeCondition(Type type, Selector selector, String toMatch) {
-		this.type = type;
-		this.selector = selector;
-		this.toMatch = toMatch;
+	 public LikeCondition(Selector selector, Parameter<T> parameter) {
+		super(selector, parameter);
 	}
 	
 	@Override
-	public String createQueryFragment(AtomicInteger incrementor) {
-		return selector.createQueryFragment(incrementor) + " " + getLike() + " '" + type.wrap(toMatch) + "' ";
-	}
-	
-	 protected String getLike() {
+	protected String getComparator() {
 		return "like";
 	}
 	
-	 @Override
-	public List<Parameter> getParameters() {
-		return Collections.emptyList();
-	}
-	
 }
 
