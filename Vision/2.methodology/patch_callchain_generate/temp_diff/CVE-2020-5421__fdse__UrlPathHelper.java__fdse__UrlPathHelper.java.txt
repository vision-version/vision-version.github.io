diff --git a/./github_diff/CVE-2020-5421/oldfiles/UrlPathHelper.java b/./github_diff/CVE-2020-5421/newfiles/UrlPathHelper.java
index ed6a7ed..9d53ef3 100644
--- a/./github_diff/CVE-2020-5421/oldfiles/UrlPathHelper.java
+++ b/./github_diff/CVE-2020-5421/newfiles/UrlPathHelper.java
@@ -26,11 +26,14 @@ public class UrlPathHelper {
 	private boolean urlDecode = true;
 	private boolean removeSemicolonContent = true;
 	private String defaultEncoding = WebUtils.DEFAULT_CHARACTER_ENCODING;
+	private boolean readOnly = false;
 	 public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {
+		checkReadOnly();
 		this.alwaysUseFullPath = alwaysUseFullPath;
 	}
 	
 	 public void setUrlDecode(boolean urlDecode) {
+		checkReadOnly();
 		this.urlDecode = urlDecode;
 	}
 	
@@ -39,14 +42,17 @@ public class UrlPathHelper {
 	}
 	
 	 public void setRemoveSemicolonContent(boolean removeSemicolonContent) {
+		checkReadOnly();
 		this.removeSemicolonContent = removeSemicolonContent;
 	}
 	
 	 public boolean shouldRemoveSemicolonContent() {
+		checkReadOnly();
 		return this.removeSemicolonContent;
 	}
 	
 	 public void setDefaultEncoding(String defaultEncoding) {
+		checkReadOnly();
 		this.defaultEncoding = defaultEncoding;
 	}
 	
@@ -54,6 +60,14 @@ public class UrlPathHelper {
 		return this.defaultEncoding;
 	}
 	
+	 private void setReadOnly() {
+		this.readOnly = true;
+	}
+	
+	private void checkReadOnly() {
+		Assert.isTrue(!this.readOnly, "This instance cannot be modified");
+	}
+	
 	 public String resolveAndCacheLookupPath(HttpServletRequest request) {
 		String lookupPath = getLookupPathForRequest(request);
 		request.setAttribute(PATH_ATTRIBUTE, lookupPath);
@@ -331,7 +345,7 @@ public class UrlPathHelper {
 	}
 	
 	 public String removeSemicolonContent(String requestUri) {
-		return (this.removeSemicolonContent ? removeSemicolonContentInternal(requestUri) : removeJsessionid(requestUri));
+		return (this.removeSemicolonContent ? removeSemicolonContentInternal(requestUri) : requestUri);
 	}
 	
 	private String removeSemicolonContentInternal(String requestUri) {
@@ -346,17 +360,6 @@ public class UrlPathHelper {
 		return requestUri;
 	}
 	
-	private String removeJsessionid(String requestUri) {
-		int startIndex = requestUri.toLowerCase().indexOf(";jsessionid=");
-		if (startIndex != -1) {
-			int endIndex = requestUri.indexOf(';', startIndex + 12);
-			String start = requestUri.substring(0, startIndex);
-			requestUri = (endIndex != -1) ? start + requestUri.substring(endIndex) : start;
-		}
-		
-		return requestUri;
-	}
-	
 	 public Map<String, String> decodePathVariables(HttpServletRequest request, Map<String, String> vars) {
 		if (this.urlDecode) {
 			return vars;
@@ -422,28 +425,18 @@ public class UrlPathHelper {
 		 return !flagToUse;
 	}
 	
-	 public static final UrlPathHelper defaultInstance = new UrlPathHelper() { 
-
-		@Override
-		public void setAlwaysUseFullPath(boolean alwaysUseFullPath) {
-			throw new UnsupportedOperationException();
-		}
-		
-		@Override
-		public void setUrlDecode(boolean urlDecode) {
-			throw new UnsupportedOperationException();
+	 public static final UrlPathHelper defaultInstance = new UrlPathHelper();
+	static {
+		defaultInstance.setReadOnly();
 	}
 	
-		@Override
-		public void setRemoveSemicolonContent(boolean removeSemicolonContent) {
-			throw new UnsupportedOperationException();
-		}
-		
-		@Override
-		public void setDefaultEncoding(String defaultEncoding) {
-			throw new UnsupportedOperationException();
+	 public static final UrlPathHelper rawPathInstance = new UrlPathHelper();
+	static {
+		rawPathInstance.setAlwaysUseFullPath(true);
+		rawPathInstance.setUrlDecode(false);
+		rawPathInstance.setRemoveSemicolonContent(false);
+		rawPathInstance.setReadOnly();
 	}
 	
-	};
 }
 
