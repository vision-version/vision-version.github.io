diff --git a/./github_diff/CVE-2022-24816/oldfiles/Jiffle.java b/./github_diff/CVE-2022-24816/newfiles/Jiffle.java
index 06a8e25..ac62d51 100644
--- a/./github_diff/CVE-2022-24816/oldfiles/Jiffle.java
+++ b/./github_diff/CVE-2022-24816/newfiles/Jiffle.java
@@ -37,7 +37,7 @@ import it.geosolutions.jaiext.jiffle.runtime.JiffleIndirectRuntime;
 import it.geosolutions.jaiext.jiffle.runtime.JiffleRuntime;
 public class Jiffle {
     public static final Logger LOGGER = Logger.getLogger(Jiffle.class.getName());
-    private static Pattern BLOCK_COMMENT_STRIPPER = Pattern.compile("(?:/\\*(?:[^*]|(?:\\*+[^*/]))*\\*+/)");
+    boolean includeScript;
     public static enum RuntimeModel {
         DIRECT(JiffleDirectRuntime.class), INDIRECT(JiffleIndirectRuntime.class);
         private Class<? extends JiffleRuntime> runtimeClass;
@@ -90,6 +90,14 @@ public class Jiffle {
         compile();
     }
     
+    public boolean isIncludeScript() {
+        return includeScript;
+    }
+    
+    public void setIncludeScript(boolean includeScript) {
+        this.includeScript = includeScript;
+    }
+    
     public final void setScript(String script) throws it.geosolutions.jaiext.jiffle.JiffleException {
         if (script == null || script.trim().length() == 0) {
             throw new it.geosolutions.jaiext.jiffle.JiffleException("script is empty !");
@@ -201,7 +209,7 @@ public class Jiffle {
     }
     
     public JiffleRuntime getRuntimeInstance(Jiffle.RuntimeModel model) throws it.geosolutions.jaiext.jiffle.JiffleException {
-        return createRuntimeInstance(model, getRuntimeBaseClass(model), false);
+        return createRuntimeInstance(model, getRuntimeBaseClass(model), includeScript);
     }
     
     public <T extends JiffleRuntime> T getRuntimeInstance(Class<T> baseClass) throws it.geosolutions.jaiext.jiffle.JiffleException {
@@ -210,7 +218,7 @@ public class Jiffle {
             throw new it.geosolutions.jaiext.jiffle.JiffleException(baseClass.getName() + " does not implement a required Jiffle runtime interface");
         }
         
-        return (T) createRuntimeInstance(model, baseClass, false);
+        return (T) createRuntimeInstance(model, baseClass, includeScript);
     }
     
     private JiffleRuntime createRuntimeInstance(RuntimeModel model, Class<? extends JiffleRuntime> runtimeClass, boolean scriptInDocs) throws it.geosolutions.jaiext.jiffle.JiffleException {
@@ -248,7 +256,15 @@ public class Jiffle {
             return runtime;
         }
          catch (Exception ex) {
-            throw new it.geosolutions.jaiext.jiffle.JiffleException("Runtime source error for source: " + runtimeSource, ex);
+            if (model == RuntimeModel.INDIRECT) {
+                if (LOGGER.isLoggable(Level.FINE)) {
+                    LOGGER.fine("Runtime source error for source: " + runtimeSource);
+                }
+                
+                throw new JiffleException("Runtime source error", ex);
+            }
+            
+            throw new JiffleException("Runtime source error for source: " + runtimeSource, ex);
         }
         
     }
@@ -276,21 +292,16 @@ public class Jiffle {
     }
     
     private String createRuntimeSource(RuntimeModel model, String baseClassName, boolean scriptInDocs) {
+        SourceWriter writer = new SourceWriter(model);
         if (scriptInDocs) {
-            throw new RuntimeException("Do no know how to clean the block comments yet");
+            writer.setScript(theScript);
         }
         
-        SourceWriter writer = new SourceWriter(model);
-        writer.setScript(stripComments(theScript));
         writer.setBaseClassName(baseClassName);
         scriptModel.write(writer);
         return writer.getSource();
     }
     
-    private String stripComments(String theScript) {
-        return BLOCK_COMMENT_STRIPPER.matcher(theScript).replaceAll("");
-    }
-    
     private void init() {
         Jiffle.refCount++ ;
         imageParams = new HashMap<String, Jiffle.ImageRole>();
