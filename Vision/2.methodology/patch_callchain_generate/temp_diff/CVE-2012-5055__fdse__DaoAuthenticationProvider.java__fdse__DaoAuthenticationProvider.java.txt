diff --git a/./github_diff/CVE-2012-5055/oldfiles/DaoAuthenticationProvider.java b/./github_diff/CVE-2012-5055/newfiles/DaoAuthenticationProvider.java
index fa845f7..24dce65 100644
--- a/./github_diff/CVE-2012-5055/oldfiles/DaoAuthenticationProvider.java
+++ b/./github_diff/CVE-2012-5055/newfiles/DaoAuthenticationProvider.java
@@ -8,13 +8,20 @@ import org.springframework.security.providers.encoding.PasswordEncoder;
 import org.springframework.security.providers.encoding.PlaintextPasswordEncoder;
 import org.springframework.security.userdetails.UserDetails;
 import org.springframework.security.userdetails.UserDetailsService;
+import org.springframework.security.userdetails.UsernameNotFoundException;
 import org.springframework.dao.DataAccessException;
 import org.springframework.util.Assert;
 public class DaoAuthenticationProvider extends AbstractUserDetailsAuthenticationProvider {
-    private PasswordEncoder passwordEncoder = new PlaintextPasswordEncoder();
+    private static final String USER_NOT_FOUND_PASSWORD = "userNotFoundPassword";
+    private PasswordEncoder passwordEncoder;
+    private String userNotFoundEncodedPassword;
     private SaltSource saltSource;
     private UserDetailsService userDetailsService;
     private boolean includeDetailsObject = true;
+    public DaoAuthenticationProvider() {
+        setPasswordEncoder(new PlaintextPasswordEncoder());
+    }
+    
     protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {
 		Object salt = null;
         if (this.saltSource != null) {
@@ -46,6 +53,15 @@ public class DaoAuthenticationProvider extends AbstractUserDetailsAuthentication
             throw new AuthenticationServiceException(repositoryProblem.getMessage(), repositoryProblem);
         }
         
+        catch (UsernameNotFoundException notFound) {
+            if(authentication.getCredentials() != null) {
+                String presentedPassword = authentication.getCredentials().toString();
+                passwordEncoder.isPasswordValid(userNotFoundEncodedPassword, presentedPassword, null);
+            }
+            
+            throw notFound;
+        }
+        
         if (loadedUser == null) {
             throw new AuthenticationServiceException( "UserDetailsService returned null, which is an interface contract violation");
         }
@@ -54,6 +70,7 @@ public class DaoAuthenticationProvider extends AbstractUserDetailsAuthentication
     }
     
     public void setPasswordEncoder(PasswordEncoder passwordEncoder) {
+        this.userNotFoundEncodedPassword = passwordEncoder.encodePassword(USER_NOT_FOUND_PASSWORD, null);
         this.passwordEncoder = passwordEncoder;
     }
     
