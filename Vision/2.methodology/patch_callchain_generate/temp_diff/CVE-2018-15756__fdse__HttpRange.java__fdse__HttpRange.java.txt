diff --git a/./github_diff/CVE-2018-15756/oldfiles/HttpRange.java b/./github_diff/CVE-2018-15756/newfiles/HttpRange.java
index a954eca..30fcd3a 100644
--- a/./github_diff/CVE-2018-15756/oldfiles/HttpRange.java
+++ b/./github_diff/CVE-2018-15756/newfiles/HttpRange.java
@@ -14,21 +14,28 @@ import org.springframework.util.CollectionUtils;
 import org.springframework.util.ObjectUtils;
 import org.springframework.util.StringUtils;
 public abstract class HttpRange {
+	 private static final int MAX_RANGES = 100;
 	private static final String BYTE_RANGE_PREFIX = "bytes=";
 	 public ResourceRegion toResourceRegion(Resource resource) {
 		 Assert.isTrue(resource.getClass() != InputStreamResource.class, "Cannot convert an InputStreamResource to a ResourceRegion");
-		try {
-			long contentLength = resource.contentLength();
-			Assert.isTrue(contentLength > 0, "Resource content length should be > 0");
+		long contentLength = getLengthFor(resource);
 		long start = getRangeStart(contentLength);
 		long end = getRangeEnd(contentLength);
 		return new ResourceRegion(resource, start, end - start + 1);
 	}
 	
+	private static long getLengthFor(Resource resource) {
+		long contentLength;
+		try {
+			contentLength = resource.contentLength();
+			Assert.isTrue(contentLength > 0, "Resource content length should be > 0");
+		}
+		
 		catch (IOException ex) {
-			throw new IllegalArgumentException("Failed to convert Resource to ResourceRegion", ex);
+			throw new IllegalArgumentException("Failed to obtain Resource content length", ex);
 		}
 		
+		return contentLength;
 	}
 	
 	 public abstract long getRangeStart(long length);
@@ -56,6 +63,7 @@ public abstract class HttpRange {
 		
 		ranges = ranges.substring(BYTE_RANGE_PREFIX.length());
 		String[] tokens = StringUtils.tokenizeToStringArray(ranges, ",");
+		Assert.isTrue(tokens.length <= MAX_RANGES, () -> "Too many ranges " + tokens.length);
 		List<HttpRange> result = new ArrayList<>(tokens.length);
 		for (String token : tokens) {
 			result.add(parseRange(token));
@@ -101,6 +109,12 @@ public abstract class HttpRange {
 			regions.add(range.toResourceRegion(resource));
 		}
 		
+		if (ranges.size() > 1) {
+			long length = getLengthFor(resource);
+			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);
+			Assert.isTrue(total < length, () -> "The sum of all ranges (" + total + ") " + "should be less than the resource length (" + length + ")");
+		}
+		
 		return regions;
 	}
 	
