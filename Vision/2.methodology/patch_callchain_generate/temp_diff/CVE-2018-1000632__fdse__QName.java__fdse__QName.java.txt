diff --git a/./github_diff/CVE-2018-1000632/oldfiles/QName.java b/./github_diff/CVE-2018-1000632/newfiles/QName.java
index 37aa231..cecf8f2 100644
--- a/./github_diff/CVE-2018-1000632/oldfiles/QName.java
+++ b/./github_diff/CVE-2018-1000632/newfiles/QName.java
@@ -3,10 +3,17 @@ import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
 import java.io.Serializable;
+import java.util.regex.Pattern;
 import org.dom4j.tree.QNameCache;
 import org.dom4j.util.SingletonStrategy;
 public class QName implements Serializable {
     private static SingletonStrategy<QNameCache> singleton = null;
+    private static final String NAME_START_CHAR = "_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD";
+    private static final String NAME_CHAR = NAME_START_CHAR + "-.0-9\u00B7\u0300-\u036F\u203F-\u2040";
+    private static final String NCNAME = "["+NAME_START_CHAR+"]["+NAME_CHAR+"]*";
+    private static final Pattern RE_NAME = Pattern.compile("[:"+NAME_START_CHAR+"][:"+NAME_CHAR+"]*");
+    private static final Pattern RE_NCNAME = Pattern.compile(NCNAME);
+    private static final Pattern RE_QNAME = Pattern.compile("(?:"+NCNAME+":)?"+NCNAME);
     static {
         try {
             String defaultSingletonClass = "org.dom4j.util.SimpleSingleton";
@@ -46,12 +53,21 @@ public class QName implements Serializable {
     public QName(String name, Namespace namespace) {
         this.name = (name == null) ? "" : name;
         this.namespace = (namespace == null) ? Namespace.NO_NAMESPACE : namespace;
+        if (this.namespace.equals(Namespace.NO_NAMESPACE)) {
+            validateName(this.name);
+        }
+         else {
+            validateNCName(this.name);
+        }
+        
     }
     
     public QName(String name, Namespace namespace, String qualifiedName) {
         this.name = (name == null) ? "" : name;
         this.qualifiedName = qualifiedName;
         this.namespace = (namespace == null) ? Namespace.NO_NAMESPACE : namespace;
+        validateNCName(this.name);
+        validateQName(this.qualifiedName);
     }
     
     public static QName get(String name) {
@@ -188,5 +204,26 @@ public class QName implements Serializable {
         return cache;
     }
     
+    private static void validateName(String name) {
+        if (!RE_NAME.matcher(name).matches()) {
+            throw new IllegalArgumentException(String.format("Illegal character in name: '%s'.", name));
+        }
+        
+    }
+    
+    protected static void validateNCName(String ncname) {
+        if (!RE_NCNAME.matcher(ncname).matches()) {
+            throw new IllegalArgumentException(String.format("Illegal character in local name: '%s'.", ncname));
+        }
+        
+    }
+    
+    private static void validateQName(String qname) {
+        if (!RE_QNAME.matcher(qname).matches()) {
+            throw new IllegalArgumentException(String.format("Illegal character in qualified name: '%s'.", qname));
+        }
+        
+    }
+    
 }
 
