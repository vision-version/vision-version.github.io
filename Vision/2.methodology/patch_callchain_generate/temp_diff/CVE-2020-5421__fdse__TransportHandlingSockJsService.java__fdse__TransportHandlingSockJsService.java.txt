diff --git a/./github_diff/CVE-2020-5421/oldfiles/TransportHandlingSockJsService.java b/./github_diff/CVE-2020-5421/newfiles/TransportHandlingSockJsService.java
index 324d23e..bfd0cc2 100644
--- a/./github_diff/CVE-2020-5421/oldfiles/TransportHandlingSockJsService.java
+++ b/./github_diff/CVE-2020-5421/newfiles/TransportHandlingSockJsService.java
@@ -16,6 +16,7 @@ import org.springframework.http.HttpMethod;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.server.ServerHttpRequest;
 import org.springframework.http.server.ServerHttpResponse;
+import org.springframework.http.server.ServletServerHttpResponse;
 import org.springframework.lang.Nullable;
 import org.springframework.scheduling.TaskScheduler;
 import org.springframework.util.Assert;
@@ -211,6 +212,7 @@ public class TransportHandlingSockJsService extends AbstractSockJsService implem
 			}
 			
 			SockJsSession session = this.sessions.get(sessionId);
+			boolean isNewSession = false;
 			if (session == null) {
 				if (transportHandler instanceof SockJsSessionFactory) {
 					Map<String, Object> attributes = new HashMap<>();
@@ -220,6 +222,7 @@ public class TransportHandlingSockJsService extends AbstractSockJsService implem
 					
 					SockJsSessionFactory sessionFactory = (SockJsSessionFactory) transportHandler;
 					session = createSockJsSession(sessionId, sessionFactory, handler, attributes);
+					isNewSession = true;
 				}
 				
 				else {
@@ -258,6 +261,14 @@ public class TransportHandlingSockJsService extends AbstractSockJsService implem
 			}
 			
 			transportHandler.handleRequest(request, response, handler, session);
+			if (isNewSession && (response instanceof ServletServerHttpResponse)) {
+				int status = ((ServletServerHttpResponse) response).getServletResponse().getStatus();
+				if (HttpStatus.valueOf(status).is4xxClientError()) {
+					this.sessions.remove(sessionId);
+				}
+				
+			}
+			
 			chain.applyAfterHandshake(request, response, null);
 		}
 		
