diff --git a/./github_diff/CVE-2022-22980/oldfiles/ParameterBindingContext.java b/./github_diff/CVE-2022-22980/newfiles/ParameterBindingContext.java
index 3437f85..ccd89c9 100644
--- a/./github_diff/CVE-2022-22980/oldfiles/ParameterBindingContext.java
+++ b/./github_diff/CVE-2022-22980/newfiles/ParameterBindingContext.java
@@ -1,4 +1,5 @@
 package org.springframework.data.mongodb.util.json;
+import java.util.Map;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import org.springframework.data.mapping.model.SpELExpressionEvaluator;
@@ -17,15 +18,7 @@ public class ParameterBindingContext {
 	}
 	
 	 public ParameterBindingContext(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext) {
-		this(valueProvider, new SpELExpressionEvaluator() {
-			@Override
-			public <T> T evaluate(String expressionString) {
-				return (T) expressionParser.parseExpression(expressionString).getValue(evaluationContext.get(), Object.class);
-			}
-			
-		}
-		
-);
+		this(valueProvider, new EvaluationContextExpressionEvaluator(valueProvider, expressionParser, evaluationContext));
 	}
 	
 	 public ParameterBindingContext(ValueProvider valueProvider, SpELExpressionEvaluator expressionEvaluator) {
@@ -34,13 +27,13 @@ public class ParameterBindingContext {
 	}
 	
 	 public static ParameterBindingContext forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction) {
-		return new ParameterBindingContext(valueProvider, new SpELExpressionEvaluator() {
+		return new ParameterBindingContext(valueProvider, new EvaluationContextExpressionEvaluator(valueProvider, expressionParser, null) { 
+
 					@Override
-			public <T> T evaluate(String expressionString) {
-				Expression expression = expressionParser.parseExpression(expressionString);
+					public EvaluationContext getEvaluationContext(String expressionString) {
+						Expression expression = getParsedExpression(expressionString);
 						ExpressionDependencies dependencies = ExpressionDependencies.discover(expression);
-				EvaluationContext evaluationContext = contextFunction.apply(dependencies);
-				return (T) expression.getValue(evaluationContext, Object.class);
+						return contextFunction.apply(dependencies);
 					}
 					
 				}
@@ -58,6 +51,15 @@ public class ParameterBindingContext {
 		return expressionEvaluator.evaluate(expressionString);
 	}
 	
+	@Nullable
+	public Object evaluateExpression(String expressionString, Map<String, Object> variables) {
+		if (expressionEvaluator instanceof EvaluationContextExpressionEvaluator) {
+			return ((EvaluationContextExpressionEvaluator) expressionEvaluator).evaluateExpression(expressionString, variables);
+		}
+		
+		return expressionEvaluator.evaluate(expressionString);
+	}
+	
 	public ValueProvider getValueProvider() {
 		return valueProvider;
 	}
