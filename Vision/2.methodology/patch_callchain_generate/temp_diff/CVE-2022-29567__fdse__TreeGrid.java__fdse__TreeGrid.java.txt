diff --git a/./github_diff/CVE-2022-29567/oldfiles/TreeGrid.java b/./github_diff/CVE-2022-29567/newfiles/TreeGrid.java
index a5edb02..1315418 100644
--- a/./github_diff/CVE-2022-29567/oldfiles/TreeGrid.java
+++ b/./github_diff/CVE-2022-29567/newfiles/TreeGrid.java
@@ -2,10 +2,13 @@ package com.vaadin.flow.component.treegrid;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
+import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.Optional;
+import java.util.concurrent.atomic.AtomicLong;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import com.vaadin.flow.component.ClientCallable;
@@ -46,7 +49,6 @@ import com.vaadin.flow.function.ValueProvider;
 import com.vaadin.flow.internal.JsonUtils;
 import com.vaadin.flow.server.VaadinRequest;
 import com.vaadin.flow.shared.Registration;
-import elemental.json.Json;
 import elemental.json.JsonArray;
 import elemental.json.JsonObject;
 import elemental.json.JsonValue;
@@ -161,7 +163,9 @@ public class TreeGrid<T> extends Grid<T> implements HasHierarchicalDataProvider<
         
     }
     
-    private final ValueProvider<T, String> defaultUniqueKeyProvider = item -> getDataProvider() .getId(item).toString();
+    private final AtomicLong uniqueKeyCounter = new AtomicLong(0);
+    private final Map<Object, Long> objectUniqueKeyMap = new HashMap<>();
+    ValueProvider<T, String> defaultUniqueKeyProvider = item -> String.valueOf( objectUniqueKeyMap.computeIfAbsent(getDataProvider().getId(item), key -> uniqueKeyCounter.getAndIncrement()));
     private Registration dataProviderRegistration;
     public TreeGrid() {
         super(50, TreeGridUpdateQueue::new, new TreeDataCommunicatorBuilder<T>());
