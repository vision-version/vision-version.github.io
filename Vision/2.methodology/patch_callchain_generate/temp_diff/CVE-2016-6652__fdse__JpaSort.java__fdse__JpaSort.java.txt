diff --git a/./github_diff/CVE-2016-6652/oldfiles/JpaSort.java b/./github_diff/CVE-2016-6652/newfiles/JpaSort.java
index f2b518f..4524210 100644
--- a/./github_diff/CVE-2016-6652/oldfiles/JpaSort.java
+++ b/./github_diff/CVE-2016-6652/newfiles/JpaSort.java
@@ -34,6 +34,10 @@ public class JpaSort extends Sort {
 		super(combine(orders, direction, paths));
 	}
 	
+	private JpaSort(List<Order> orders) {
+		super(orders);
+	}
+	
 	 public JpaSort and(Direction direction, Attribute<?, ?>... attributes) {
 		Assert.notNull(attributes, "Attributes must not be null!");
 		return and(direction, paths(attributes));
@@ -49,6 +53,20 @@ public class JpaSort extends Sort {
 		return new JpaSort(existing, direction, Arrays.asList(paths));
 	}
 	
+	 public JpaSort andUnsafe(Direction direction, String... properties) {
+		Assert.notEmpty(properties, "Properties must not be null!");
+		List<Order> orders = new ArrayList<Order>();
+		for (Order order : this) {
+			orders.add(order);
+		}
+		
+		for (String property : properties) {
+			orders.add(new JpaOrder(direction, property));
+		}
+		
+		return new JpaSort(orders, direction, Collections.<Path<?, ?>> emptyList());
+	}
+	
 	 private static Path<?, ?>[] paths(Attribute<?, ?>[] attributes) {
 		Assert.notNull(attributes, "Attributes must not be null!");
 		Assert.isTrue(attributes.length > 0, "Attributes must not be empty");
@@ -81,6 +99,27 @@ public class JpaSort extends Sort {
 		return new Path<T, S>(Arrays.asList(attribute));
 	}
 	
+	 public static JpaSort unsafe(String... properties) {
+		return unsafe(Sort.DEFAULT_DIRECTION, properties);
+	}
+	
+	 public static JpaSort unsafe(Direction direction, String... properties) {
+		Assert.notNull(direction, "Direction must not be null!");
+		Assert.notEmpty(properties, "Properties must not be empty!");
+		Assert.noNullElements(properties, "Properties must not contain null values!");
+		return unsafe(direction, Arrays.asList(properties));
+	}
+	
+	 public static JpaSort unsafe(Direction direction, List<String> properties) {
+		Assert.notEmpty(properties, "Properties must not be empty!");
+		List<Order> orders = new ArrayList<Order>();
+		for (String property : properties) {
+			orders.add(new JpaOrder(direction, property));
+		}
+		
+		return new JpaSort(orders);
+	}
+	
 	 public static class Path<T, S> {
 		private final Collection<Attribute<?, ?>> attributes;
 		private Path(List<? extends Attribute<?, ?>> attributes) {
@@ -115,5 +154,73 @@ public class JpaSort extends Sort {
 		
 	}
 	
+	 public static class JpaOrder extends Order {
+		private final boolean unsafe;
+		private final boolean ignoreCase;
+		 private JpaOrder(Direction direction, String property) {
+			this(direction, property, NullHandling.NATIVE);
+		}
+		
+		 private JpaOrder(Direction direction, String property, NullHandling nullHandlingHint) {
+			this(direction, property, nullHandlingHint, false, true);
+		}
+		
+		private JpaOrder(Direction direction, String property, NullHandling nullHandling, boolean ignoreCase, boolean unsafe) {
+			super(direction, property, nullHandling);
+			this.ignoreCase = ignoreCase;
+			this.unsafe = unsafe;
+		}
+		
+		 @Override
+		public JpaOrder with(Direction order) {
+			return new JpaOrder(order, getProperty(), getNullHandling(), isIgnoreCase(), this.unsafe);
+		}
+		
+		 @Override
+		public JpaOrder with(NullHandling nullHandling) {
+			return new JpaOrder(getDirection(), getProperty(), nullHandling, isIgnoreCase(), this.unsafe);
+		}
+		
+		 @Override
+		public JpaOrder nullsFirst() {
+			return with(NullHandling.NULLS_FIRST);
+		}
+		
+		 @Override
+		public JpaOrder nullsLast() {
+			return with(NullHandling.NULLS_LAST);
+		}
+		
+		 public JpaOrder nullsNative() {
+			return with(NullHandling.NATIVE);
+		}
+		
+		 public Sort withUnsafe(String... properties) {
+			Assert.notEmpty(properties, "Properties must not be empty!");
+			Assert.noNullElements(properties, "Properties must not contain null values!");
+			List<Order> orders = new ArrayList<Order>();
+			for (String property : properties) {
+				orders.add(new JpaOrder(getDirection(), property, getNullHandling(), isIgnoreCase(), this.unsafe));
+			}
+			
+			return new Sort(orders);
+		}
+		
+		 @Override
+		public JpaOrder ignoreCase() {
+			return new JpaOrder(getDirection(), getProperty(), getNullHandling(), true, this.unsafe);
+		}
+		
+		 @Override
+		public boolean isIgnoreCase() {
+			return super.isIgnoreCase() || ignoreCase;
+		}
+		
+		 public boolean isUnsafe() {
+			return unsafe;
+		}
+		
+	}
+	
 }
 
