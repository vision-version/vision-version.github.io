diff --git a/./github_diff/CVE-2016-6652/oldfiles/QueryUtils.java b/./github_diff/CVE-2016-6652/newfiles/QueryUtils.java
index 66dc01b..fb30a74 100644
--- a/./github_diff/CVE-2016-6652/oldfiles/QueryUtils.java
+++ b/./github_diff/CVE-2016-6652/newfiles/QueryUtils.java
@@ -34,8 +34,10 @@ import javax.persistence.metamodel.Bindable;
 import javax.persistence.metamodel.ManagedType;
 import javax.persistence.metamodel.PluralAttribute;
 import org.springframework.core.annotation.AnnotationUtils;
+import org.springframework.dao.InvalidDataAccessApiUsageException;
 import org.springframework.data.domain.Sort;
 import org.springframework.data.domain.Sort.Order;
+import org.springframework.data.jpa.domain.JpaSort.JpaOrder;
 import org.springframework.data.mapping.PropertyPath;
 import org.springframework.util.Assert;
 import org.springframework.util.StringUtils;
@@ -62,6 +64,9 @@ public abstract class QueryUtils {
 	private static final Map<PersistentAttributeType, Class<? extends Annotation>> ASSOCIATION_TYPES;
 	private static final int QUERY_JOIN_ALIAS_GROUP_INDEX = 2;
 	private static final int VARIABLE_NAME_GROUP_INDEX = 4;
+	private static final Pattern PUNCTATION_PATTERN = Pattern.compile(".*((?![\\._])[\\p{Punct}|\\s])");
+	private static final String FUNCTION_ALIAS_GROUP_NAME = "alias";
+	private static final Pattern FUNCTION_PATTERN;
 	static {
 		StringBuilder builder = new StringBuilder();
 		builder.append("(?<=from)"); 
@@ -97,6 +102,11 @@ public abstract class QueryUtils {
 		builder.append(".*");
 		builder.append("\\)");
 		CONSTRUCTOR_EXPRESSION = compile(builder.toString(), CASE_INSENSITIVE + DOTALL);
+		builder = new StringBuilder();
+		builder.append("\\s+"); 
+		builder.append("\\w+\\([0-9a-zA-z\\._,\\s']+\\)"); 
+		builder.append("\\s+[as|AS]+\\s+(?<" + FUNCTION_ALIAS_GROUP_NAME + ">[\\w\\.]+)"); 
+		FUNCTION_PATTERN = compile(builder.toString());
 	}
 	
 	 private QueryUtils() {
@@ -138,16 +148,22 @@ public abstract class QueryUtils {
 		}
 		
 		Set<String> aliases = getOuterJoinAliases(query);
+		Set<String> functionAliases = getFunctionAliases(query);
 		for (Order order : sort) {
-			builder.append(getOrderClause(aliases, alias, order)).append(", ");
+			builder.append(getOrderClause(aliases, functionAliases, alias, order)).append(", ");
 		}
 		
 		builder.delete(builder.length() - 2, builder.length());
 		return builder.toString();
 	}
 	
-	 private static String getOrderClause(Set<String> joinAliases, String alias, Order order) {
+	 private static String getOrderClause(Set<String> joinAliases, Set<String> functionAlias, String alias, Order order) {
 		String property = order.getProperty();
+		checkSortExpression(order);
+		if (functionAlias.contains(property)) {
+			return String.format("%s %s", property, toJpaDirection(order));
+		}
+		
 		boolean qualifyReference = !property.contains("("); 
 		for (String joinAlias : joinAliases) {
 			if (property.startsWith(joinAlias.concat("."))) {
@@ -176,6 +192,20 @@ public abstract class QueryUtils {
 		return result;
 	}
 	
+	 static Set<String> getFunctionAliases(String query) {
+		Set<String> result = new HashSet<String>();
+		Matcher matcher = FUNCTION_PATTERN.matcher(query);
+		while (matcher.find()) {
+			String alias = matcher.group(FUNCTION_ALIAS_GROUP_NAME);
+			if (StringUtils.hasText(alias)) {
+				result.add(alias);
+			}
+			
+		}
+		
+		return result;
+	}
+	
 	private static String toJpaDirection(Order order) {
 		return order.getDirection().name().toLowerCase(Locale.US);
 	}
@@ -374,5 +404,16 @@ public abstract class QueryUtils {
 		return false;
 	}
 	
+	 private static void checkSortExpression(Order order) {
+		if (order instanceof JpaOrder && ((JpaOrder) order).isUnsafe()) {
+			return;
+		}
+		
+		if (PUNCTATION_PATTERN.matcher(order.getProperty()).find()) {
+			throw new InvalidDataAccessApiUsageException(String .format("Sort expression '%s' must not contain functions or expressions. Please use JpaSort.unsafe.", order));
+		}
+		
+	}
+	
 }
 
