diff --git a/./github_diff/CVE-2021-43795/oldfiles/PathAndQuery.java b/./github_diff/CVE-2021-43795/newfiles/PathAndQuery.java
index b7951a3..2c1d229 100644
--- a/./github_diff/CVE-2021-43795/oldfiles/PathAndQuery.java
+++ b/./github_diff/CVE-2021-43795/newfiles/PathAndQuery.java
@@ -18,9 +18,8 @@ public final class PathAndQuery {
     private static final PathAndQuery ROOT_PATH_QUERY = new PathAndQuery("/", null);
     private static final BitSet ALLOWED_PATH_CHARS = new BitSet();
     private static final BitSet ALLOWED_QUERY_CHARS = new BitSet();
-    private static final int PERCENT_ENCODING_MARKER = 0xFF;
-    private static final byte[] RAW_CHAR_TO_MARKER = new byte[256];
-    private static final String[] MARKER_TO_PERCENT_ENCODED_CHAR = new String[256];
+    private static final BitSet RESERVED_CHARS = new BitSet();
+    private static final char[][] TO_PERCENT_ENCODED_CHARS = new char[256][];
     static {
         final String allowedPathChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~:/?#[]@!$&'()*+,;=";
         for (int i = 0; i < allowedPathChars.length(); i++) {
@@ -32,9 +31,13 @@ public final class PathAndQuery {
             ALLOWED_QUERY_CHARS.set(allowedQueryChars.charAt(i));
         }
         
-        for (final ReservedChar reservedChar : ReservedChar.values()) {
-            RAW_CHAR_TO_MARKER[reservedChar.rawChar] = reservedChar.marker;
-            MARKER_TO_PERCENT_ENCODED_CHAR[reservedChar.marker] = reservedChar.percentEncodedChar;
+        final String reservedChars = ":/?#[]@!$&'()*+,;=";
+        for (int i = 0; i < reservedChars.length(); i++) {
+            RESERVED_CHARS.set(reservedChars.charAt(i));
+        }
+        
+        for (int i = 0; i < TO_PERCENT_ENCODED_CHARS.length; i++) {
+            TO_PERCENT_ENCODED_CHARS[i] = String.format("%%%02X", i).toCharArray();
         }
         
     }
@@ -130,7 +133,7 @@ public final class PathAndQuery {
             return path;
         }
         
-        return path + "?" + query;
+        return path + '?' + query;
     }
     
     @Nullable
@@ -160,15 +163,15 @@ public final class PathAndQuery {
             query = null;
         }
         
-        if (path.data[0] != '/') {
+        if (path.data[0] != '/' || path.isEncoded(0)) {
             return null;
         }
         
-        if (pathContainsDoubleDots(path)) {
+        if (pathContainsDoubleDots(path) || queryContainsDoubleDots(query)) {
             return null;
         }
         
-        return new PathAndQuery(encodeToPercents(path, true), query != null ? encodeToPercents(query, false) : null);
+        return new PathAndQuery(encodePathToPercents(path), encodeQueryToPercents(query));
     }
     
     @Nullable
@@ -197,10 +200,8 @@ public final class PathAndQuery {
                 final int decoded = (digit1 << 4) | digit2;
                 if (isPath) {
                     if (decoded == '/') {
-                        final byte marker = RAW_CHAR_TO_MARKER['/'];
-                        buf.ensure(2);
-                        buf.add((byte) PERCENT_ENCODING_MARKER);
-                        buf.add(marker);
+                        buf.ensure(1);
+                        buf.addEncoded((byte) '/');
                         wasSlash = false;
                     }
                      else {
@@ -215,11 +216,9 @@ public final class PathAndQuery {
                     
                 }
                  else {
-                    final byte marker = RAW_CHAR_TO_MARKER[decoded];
-                    if (marker != 0) {
-                        buf.ensure(2);
-                        buf.add((byte) PERCENT_ENCODING_MARKER);
-                        buf.add(marker);
+                    if (RESERVED_CHARS.get(decoded)) {
+                        buf.ensure(1);
+                        buf.addEncoded((byte) decoded);
                         wasSlash = false;
                     }
                      else if (appendOneByte(buf, decoded, wasSlash, isPath)) {
@@ -237,7 +236,7 @@ public final class PathAndQuery {
             
             if (cp == '+' && !isPath) {
                 buf.ensure(1);
-                buf.add((byte) ' ');
+                buf.addEncoded((byte) ' ');
                 wasSlash = false;
                 continue;
             }
@@ -253,38 +252,38 @@ public final class PathAndQuery {
             
             if (cp <= 0x7ff) {
                 buf.ensure(2);
-                buf.add((byte) ((cp >>> 6) | 0b110_00000));
-                buf.add((byte) (cp & 0b111111 | 0b10_000000));
+                buf.addEncoded((byte) ((cp >>> 6) | 0b110_00000));
+                buf.addEncoded((byte) (cp & 0b111111 | 0b10_000000));
             }
              else if (cp <= 0xffff) {
                 buf.ensure(3);
-                buf.add((byte) ((cp >>> 12) | 0b1110_0000));
-                buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
-                buf.add((byte) ((cp & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp >>> 12) | 0b1110_0000));
+                buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));
             }
              else if (cp <= 0x1fffff) {
                 buf.ensure(4);
-                buf.add((byte) ((cp >>> 18) | 0b11110_000));
-                buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
-                buf.add((byte) ((cp & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp >>> 18) | 0b11110_000));
+                buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));
             }
              else if (cp <= 0x3ffffff) {
                 buf.ensure(5);
-                buf.add((byte) ((cp >>> 24) | 0b111110_00));
-                buf.add((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
-                buf.add((byte) ((cp & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp >>> 24) | 0b111110_00));
+                buf.addEncoded((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));
             }
              else {
                 buf.ensure(6);
-                buf.add((byte) ((cp >>> 30) | 0b1111110_0));
-                buf.add((byte) (((cp >>> 24) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
-                buf.add((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
-                buf.add((byte) ((cp & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp >>> 30) | 0b1111110_0));
+                buf.addEncoded((byte) (((cp >>> 24) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 18) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 12) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) (((cp >>> 6) & 0b111111) | 0b10_000000));
+                buf.addEncoded((byte) ((cp & 0b111111) | 0b10_000000));
             }
             
             wasSlash = false;
@@ -318,8 +317,15 @@ public final class PathAndQuery {
             
         }
          else {
+            final BitSet allowedChars = isPath ? ALLOWED_PATH_CHARS : ALLOWED_QUERY_CHARS;
             buf.ensure(1);
+            if (allowedChars.get(cp)) {
                 buf.add((byte) cp);
+            }
+             else {
+                buf.addEncoded((byte) cp);
+            }
+            
         }
         
         return true;
@@ -332,7 +338,7 @@ public final class PathAndQuery {
         byte b2 = '/';
         for (int i = 1; i < length; i++) {
             final byte b3 = path.data[i];
-            if (b3 == '/' && b2 == '.' && b1 == '.' && b0 == '/') {
+            if (b1 == '.' && b2 == '.' && isSlash(b0) && isSlash(b3)) {
                 return true;
             }
             
@@ -341,75 +347,123 @@ public final class PathAndQuery {
             b2 = b3;
         }
         
-        return b0 == '/' && b1 == '.' && b2 == '.';
+        return b1 == '.' && b2 == '.' && isSlash(b0);
     }
     
-    private static String encodeToPercents(Bytes value, boolean isPath) {
-        final BitSet allowedChars = isPath ? ALLOWED_PATH_CHARS : ALLOWED_QUERY_CHARS;
-        final int length = value.length;
-        boolean needsEncoding = false;
+    private static boolean queryContainsDoubleDots(@Nullable Bytes query) {
+        if (query == null) {
+            return false;
+        }
+        
+        final int length = query.length;
+        boolean lookingForEquals = true;
+        byte b0 = 0;
+        byte b1 = 0;
+        byte b2 = '/';
         for (int i = 0; i < length; i++) {
-            if (!allowedChars.get(value.data[i] & 0xFF)) {
-                needsEncoding = true;
+            byte b3 = query.data[i];
+            switch (b3) {
+                case '=':
+                    if (lookingForEquals) {
+                        lookingForEquals = false;
+                        b3 = '/';
+                    }
+                    
+                    break;
+                case '&':
+                case ';':
+                    b3 = '/';
+                    lookingForEquals = true;
                     break;
             }
             
+            if (b1 == '.' && b2 == '.' && isSlash(b0) && isSlash(b3)) {
+                return true;
             }
             
-        if (!needsEncoding) {
-            return new String(value.data, 0, 0, length);
+            b0 = b1;
+            b1 = b2;
+            b2 = b3;
         }
         
-        final StringBuilder buf = new StringBuilder(length);
-        for (int i = 0; i < length; i++) {
-            final int b = value.data[i] & 0xFF;
-            if (b == PERCENT_ENCODING_MARKER && (i + 1) < length) {
-                final int marker = value.data[i + 1] & 0xFF;
-                final String percentEncodedChar = MARKER_TO_PERCENT_ENCODED_CHAR[marker];
-                if (percentEncodedChar != null) {
-                    buf.append(percentEncodedChar);
-                    i++;
-                    continue;
+        return b1 == '.' && b2 == '.' && isSlash(b0);
     }
     
+    private static boolean isSlash(byte b) {
+        switch (b) {
+            case '/':
+            case '\\':
+                return true;
+            default: return false;
         }
         
-            if (allowedChars.get(b)) {
-                buf.append((char) b);
     }
-             else if (b == ' ') {
-                if (isPath) {
-                    buf.append("%20");
+    
+    private static String encodePathToPercents(Bytes value) {
+        if (!value.hasEncodedBytes()) {
+            return new String(value.data, 0, 0, value.length);
         }
-                 else {
-                    buf.append('+');
+        
+        return slowEncodePathToPercents(value);
     }
     
+    @Nullable
+    private static String encodeQueryToPercents(@Nullable Bytes value) {
+        if (value == null) {
+            return null;
         }
-             else {
-                buf.append('%');
-                appendHexNibble(buf, b >>> 4);
-                appendHexNibble(buf, b & 0xF);
+        
+        if (!value.hasEncodedBytes()) {
+            return new String(value.data, 0, 0, value.length);
         }
         
+        return slowEncodeQueryToPercents(value);
+    }
+    
+    private static String slowEncodePathToPercents(Bytes value) {
+        final int length = value.length;
+        final StringBuilder buf = new StringBuilder(length + value.numEncodedBytes() * 2);
+        for (int i = 0; i < length; i++) {
+            final int b = value.data[i] & 0xFF;
+            if (value.isEncoded(i)) {
+                buf.append(TO_PERCENT_ENCODED_CHARS[b]);
+                continue;
+            }
+            
+            buf.append((char) b);
         }
         
         return buf.toString();
     }
     
-    private static void appendHexNibble(StringBuilder buf, int nibble) {
-        if (nibble < 10) {
-            buf.append((char) ('0' + nibble));
+    private static String slowEncodeQueryToPercents(Bytes value) {
+        final int length = value.length;
+        final StringBuilder buf = new StringBuilder(length + value.numEncodedBytes() * 2);
+        for (int i = 0; i < length; i++) {
+            final int b = value.data[i] & 0xFF;
+            if (value.isEncoded(i)) {
+                if (b == ' ') {
+                    buf.append('+');
                 }
                  else {
-            buf.append((char) ('A' + nibble - 10));
+                    buf.append(TO_PERCENT_ENCODED_CHARS[b]);
+                }
+                
+                continue;
+            }
+            
+            buf.append((char) b);
         }
         
+        return buf.toString();
     }
     
     private static final class Bytes {
         byte[] data;
         int length;
+        @Nullable
+        private BitSet encoded;
+        private int numEncodedBytes;
         Bytes(int initialCapacity) {
             data = new byte[initialCapacity];
         }
@@ -423,6 +477,28 @@ public final class PathAndQuery {
             data[length++] = b;
         }
         
+        void addEncoded(byte b) {
+            if (encoded == null) {
+                encoded = new BitSet();
+            }
+            
+            encoded.set(length);
+            data[length++] = b;
+            numEncodedBytes++;
+        }
+        
+        boolean isEncoded(int index) {
+            return encoded != null && encoded.get(index);
+        }
+        
+        boolean hasEncodedBytes() {
+            return encoded != null;
+        }
+        
+        int numEncodedBytes() {
+            return numEncodedBytes;
+        }
+        
         void ensure(int numBytes) {
             int newCapacity = length + numBytes;
             if (newCapacity <= data.length) {
@@ -474,18 +550,5 @@ public final class PathAndQuery {
         
     }
     
-    private enum ReservedChar {
-        GEN_DELIM_01(':', "%3A", (byte) 0x01), GEN_DELIM_02('/', "%2F", (byte) 0x02), GEN_DELIM_03('?', "%3F", (byte) 0x03), GEN_DELIM_04('#', "%23", (byte) 0x04), GEN_DELIM_05('[', "%5B", (byte) 0x05), GEN_DELIM_06(']', "%5D", (byte) 0x06), GEN_DELIM_07('@', "%40", (byte) 0x07), SUB_DELIM_01('!', "%21", (byte) 0x11), SUB_DELIM_02('$', "%24", (byte) 0x12), SUB_DELIM_03('&', "%26", (byte) 0x13), SUB_DELIM_04('\'', "%27", (byte) 0x14), SUB_DELIM_05('(', "%28", (byte) 0x15), SUB_DELIM_06(')', "%29", (byte) 0x16), SUB_DELIM_07('*', "%2A", (byte) 0x17), SUB_DELIM_08('+', "%2B", (byte) 0x18), SUB_DELIM_09(',', "%2C", (byte) 0x19), SUB_DELIM_10(';', "%3B", (byte) 0x1A), SUB_DELIM_11('=', "%3D", (byte) 0x1B);
-        private final int rawChar;
-        private final String percentEncodedChar;
-        private final byte marker;
-        ReservedChar(int rawChar, String percentEncodedChar, byte marker) {
-            this.rawChar = rawChar;
-            this.percentEncodedChar = percentEncodedChar;
-            this.marker = marker;
-        }
-        
-    }
-    
 }
 
