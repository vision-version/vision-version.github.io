diff --git a/./github_diff/CVE-2020-5421/oldfiles/AbstractMessageConverterMethodProcessor.java b/./github_diff/CVE-2020-5421/newfiles/AbstractMessageConverterMethodProcessor.java
index eb4d676..20dccb5 100644
--- a/./github_diff/CVE-2020-5421/oldfiles/AbstractMessageConverterMethodProcessor.java
+++ b/./github_diff/CVE-2020-5421/newfiles/AbstractMessageConverterMethodProcessor.java
@@ -47,13 +47,6 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe
 	private static final Set<String> SAFE_MEDIA_BASE_TYPES = new HashSet<>( Arrays.asList("audio", "image", "video"));
 	private static final List<MediaType> ALL_APPLICATION_MEDIA_TYPES = Arrays.asList(MediaType.ALL, new MediaType("application"));
 	private static final Type RESOURCE_REGION_LIST_TYPE = new ParameterizedTypeReference<List<ResourceRegion>>() { }.getType();
-	private static final UrlPathHelper decodingUrlPathHelper = UrlPathHelper.defaultInstance;
-	private static final UrlPathHelper rawUrlPathHelper = new UrlPathHelper();
-	static {
-		rawUrlPathHelper.setRemoveSemicolonContent(false);
-		rawUrlPathHelper.setUrlDecode(false);
-	}
-	
 	private final ContentNegotiationManager contentNegotiationManager;
 	private final Set<String> safeExtensions = new HashSet<>();
 	 protected AbstractMessageConverterMethodProcessor(List<HttpMessageConverter<?>> converters) {
@@ -312,7 +305,7 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe
 			 }
 			 
 		HttpServletRequest servletRequest = request.getServletRequest();
-		String requestUri = rawUrlPathHelper.getOriginatingRequestUri(servletRequest);
+		String requestUri = UrlPathHelper.rawPathInstance.getOriginatingRequestUri(servletRequest);
 		int index = requestUri.lastIndexOf('/') + 1;
 		String filename = requestUri.substring(index);
 		String pathParams = "";
@@ -322,9 +315,9 @@ public abstract class AbstractMessageConverterMethodProcessor extends AbstractMe
 			filename = filename.substring(0, index);
 		}
 		
-		filename = decodingUrlPathHelper.decodeRequestString(servletRequest, filename);
+		filename = UrlPathHelper.defaultInstance.decodeRequestString(servletRequest, filename);
 		String ext = StringUtils.getFilenameExtension(filename);
-		pathParams = decodingUrlPathHelper.decodeRequestString(servletRequest, pathParams);
+		pathParams = UrlPathHelper.defaultInstance.decodeRequestString(servletRequest, pathParams);
 		String extInPathParams = StringUtils.getFilenameExtension(pathParams);
 		if (!safeExtension(servletRequest, ext) || !safeExtension(servletRequest, extInPathParams)) {
 			headers.add(HttpHeaders.CONTENT_DISPOSITION, "inline;filename=f.txt");
