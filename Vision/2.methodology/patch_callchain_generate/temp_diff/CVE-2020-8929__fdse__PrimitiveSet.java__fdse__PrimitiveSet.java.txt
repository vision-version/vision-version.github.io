diff --git a/./github_diff/CVE-2020-8929/oldfiles/PrimitiveSet.java b/./github_diff/CVE-2020-8929/newfiles/PrimitiveSet.java
index 7c871aa..62accc5 100644
--- a/./github_diff/CVE-2020-8929/oldfiles/PrimitiveSet.java
+++ b/./github_diff/CVE-2020-8929/newfiles/PrimitiveSet.java
@@ -2,7 +2,7 @@ package com.google.crypto.tink;
 import com.google.crypto.tink.proto.KeyStatusType;
 import com.google.crypto.tink.proto.Keyset;
 import com.google.crypto.tink.proto.OutputPrefixType;
-import java.nio.charset.Charset;
+import com.google.crypto.tink.subtle.Hex;
 import java.security.GeneralSecurityException;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -12,7 +12,6 @@ import java.util.List;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 public final class PrimitiveSet<P> {
-  private static final Charset UTF_8 = Charset.forName("UTF-8");
   public static final class Entry<P> {
     private final P primitive;
     private final byte[] identifier;
@@ -64,7 +63,7 @@ public final class PrimitiveSet<P> {
   }
   
   public List<Entry<P>> getPrimitive(final byte[] identifier) {
-    List<Entry<P>> found = primitives.get(new String(identifier, UTF_8));
+    List<Entry<P>> found = primitives.get(new Prefix(identifier));
     return found != null ? found : Collections.<Entry<P>>emptyList();
   }
   
@@ -76,7 +75,7 @@ public final class PrimitiveSet<P> {
     return primitives.values();
   }
   
-  private ConcurrentMap<java.lang.String, List<Entry<P>>> primitives = new ConcurrentHashMap<java.lang.String, List<Entry<P>>>();
+  private final ConcurrentMap<Prefix, List<Entry<P>>> primitives = new ConcurrentHashMap<Prefix, List<Entry<P>>>();
   private Entry<P> primary;
   private final Class<P> primitiveClass;
   private PrimitiveSet(Class<P> primitiveClass) {
@@ -112,7 +111,7 @@ public final class PrimitiveSet<P> {
     Entry<P> entry = new Entry<P>( primitive, CryptoFormat.getOutputPrefix(key), key.getStatus(), key.getOutputPrefixType(), key.getKeyId());
     List<Entry<P>> list = new ArrayList<Entry<P>>();
     list.add(entry);
-    String identifier = new String(entry.getIdentifier(), UTF_8);
+    Prefix identifier = new Prefix(entry.getIdentifier());
     List<Entry<P>> existing = primitives.put(identifier, Collections.unmodifiableList(list));
     if (existing != null) {
       List<Entry<P>> newList = new ArrayList<Entry<P>>();
@@ -128,5 +127,49 @@ public final class PrimitiveSet<P> {
     return primitiveClass;
   }
   
+  private static class Prefix implements Comparable<Prefix> {
+    private final byte[] prefix;
+    private Prefix(byte[] prefix) {
+      this.prefix = Arrays.copyOf(prefix, prefix.length);
+    }
+    
+    @Override
+    public int hashCode() {
+      return Arrays.hashCode(prefix);
+    }
+    
+    @Override
+    public boolean equals(Object o) {
+      if (!(o instanceof Prefix)) {
+        return false;
+      }
+      
+      Prefix other = (Prefix) o;
+      return Arrays.equals(prefix, other.prefix);
+    }
+    
+    @Override
+    public int compareTo(Prefix o) {
+      if (prefix.length != o.prefix.length) {
+        return prefix.length - o.prefix.length;
+      }
+      
+      for (int i = 0; i < prefix.length; i++) {
+        if (prefix[i] != o.prefix[i]) {
+          return prefix[i] - o.prefix[i];
+        }
+        
+      }
+      
+      return 0;
+    }
+    
+    @Override
+    public String toString() {
+      return Hex.encode(prefix);
+    }
+    
+  }
+  
 }
 
