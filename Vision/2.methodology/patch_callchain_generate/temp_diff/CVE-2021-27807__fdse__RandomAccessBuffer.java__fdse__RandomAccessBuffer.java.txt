diff --git a/./github_diff/CVE-2021-27807/oldfiles/RandomAccessBuffer.java b/./github_diff/CVE-2021-27807/newfiles/RandomAccessBuffer.java
index 594367b..8631d87 100644
--- a/./github_diff/CVE-2021-27807/oldfiles/RandomAccessBuffer.java
+++ b/./github_diff/CVE-2021-27807/newfiles/RandomAccessBuffer.java
@@ -1,4 +1,5 @@
 package org.apache.pdfbox.io;
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -155,7 +156,7 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable {
     public int read(byte[] b, int offset, int length) throws IOException {
         checkClosed();
         if (pointer >= size){
-            return 0;
+            return -1;
         }
         
         int bytesRead = readRemainingBytes(b, offset, length);
@@ -171,10 +172,6 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable {
     }
     
     private int readRemainingBytes(byte[] b, int offset, int length) {
-        if (pointer >= size){
-            return 0;
-        }
-        
         int maxLength = (int) Math.min(length, size-pointer);
         int remainingBytes = chunkSize - currentBufferPointer;
         if (remainingBytes == 0){
@@ -344,13 +341,18 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable {
     
     @Override
     public byte[] readFully(int length) throws IOException {
-        byte[] b = new byte[length];
-        int bytesRead = read(b);
-        while (bytesRead < length){
-            bytesRead += read(b, bytesRead, length - bytesRead);
+        byte[] bytes = new byte[length];
+        int bytesRead = 0;
+        do {
+            int count = read(bytes, bytesRead, length - bytesRead);
+            if (count < 0){
+                throw new EOFException();
             }
             
-        return b;
+            bytesRead += count;
+        }
+         while (bytesRead < length);
+        return bytes;
     }
     
     @Override
