diff --git a/./github_diff/CVE-2021-44832/oldfiles/JndiLookup.java b/./github_diff/CVE-2021-44832/newfiles/JndiLookup.java
index 4f62154..05bac23 100644
--- a/./github_diff/CVE-2021-44832/oldfiles/JndiLookup.java
+++ b/./github_diff/CVE-2021-44832/newfiles/JndiLookup.java
@@ -1,16 +1,48 @@
 package org.apache.logging.log4j.core.lookup;
+import java.util.Objects;
+import javax.naming.NamingException;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
 import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.net.JndiManager;
 import org.apache.logging.log4j.status.StatusLogger;
 @Plugin(name = "jndi", category = StrLookup.CATEGORY)
 public class JndiLookup extends AbstractLookup {
     private static final Logger LOGGER = StatusLogger.getLogger();
-    private static final String RESULT = "JNDI is not supported";
+    private static final Marker LOOKUP = MarkerManager.getMarker("LOOKUP");
+    static final String CONTAINER_JNDI_RESOURCE_PATH_PREFIX = "java:comp/env/";
+    public JndiLookup() {
+        if (!JndiManager.isJndiLookupEnabled()) {
+            throw new IllegalStateException("JNDI must be enabled by setting log4j2.enableJndiLookup=true");
+        }
+        
+    }
+    
     @Override
     public String lookup(final LogEvent event, final String key) {
-        LOGGER.warn("Attempt to use JNDI Lookup");
-        return RESULT;
+        if (key == null) {
+            return null;
+        }
+        
+        final String jndiName = convertJndiName(key);
+        try (final JndiManager jndiManager = JndiManager.getDefaultManager()) {
+            return Objects.toString(jndiManager.lookup(jndiName), null);
+        }
+         catch (final NamingException e) {
+            LOGGER.warn(LOOKUP, "Error looking up JNDI resource [{}].", jndiName, e);
+            return null;
+        }
+        
+    }
+    
+    private String convertJndiName(final String jndiName) {
+        if (!jndiName.startsWith(CONTAINER_JNDI_RESOURCE_PATH_PREFIX) && jndiName.indexOf(':') == -1) {
+            return CONTAINER_JNDI_RESOURCE_PATH_PREFIX + jndiName;
+        }
+        
+        return jndiName;
     }
     
 }
