diff --git a/./github_diff/CVE-2017-8045/oldfiles/Message.java b/./github_diff/CVE-2017-8045/newfiles/Message.java
index 81ffa98..c37dd70 100644
--- a/./github_diff/CVE-2017-8045/oldfiles/Message.java
+++ b/./github_diff/CVE-2017-8045/newfiles/Message.java
@@ -1,17 +1,11 @@
 package org.springframework.amqp.core;
-import java.io.ByteArrayInputStream;
 import java.io.Serializable;
 import java.nio.charset.Charset;
 import java.util.Arrays;
-import java.util.LinkedHashSet;
-import java.util.Set;
-import org.springframework.amqp.utils.SerializationUtils;
 import org.springframework.util.Assert;
-import org.springframework.util.ClassUtils;
 public class Message implements Serializable {
 	private static final long serialVersionUID = -7177590352110605597L;
 	private static final String DEFAULT_ENCODING = Charset.defaultCharset().name();
-	private static final Set<String> ALLOWED_LIST_PATTERNS = new LinkedHashSet<>(Arrays.asList("java.util.*", "java.lang.*"));
 	private static String bodyEncoding = DEFAULT_ENCODING;
 	private final MessageProperties messageProperties;
 	private final byte[] body;
@@ -26,9 +20,8 @@ public class Message implements Serializable {
 		this.messageProperties = messageProperties;
 	}
 	
+	 @Deprecated
 	public static void addAllowedListPatterns(String... patterns) {
-		Assert.notNull(patterns, "'patterns' cannot be null");
-		ALLOWED_LIST_PATTERNS.addAll(Arrays.asList(patterns));
 	}
 	
 	 public static void setDefaultEncoding(String encoding) {
@@ -58,7 +51,7 @@ public class Message implements Serializable {
 		try {
 			String contentType = this.messageProperties.getContentType();
 			if (MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT.equals(contentType)) {
-				return SerializationUtils.deserialize(new ByteArrayInputStream(this.body), ALLOWED_LIST_PATTERNS, ClassUtils.getDefaultClassLoader()).toString();
+				return "[serialized object]";
 			}
 			
 			String encoding = encoding();
