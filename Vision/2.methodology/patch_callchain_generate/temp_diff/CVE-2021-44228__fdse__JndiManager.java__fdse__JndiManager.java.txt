diff --git a/./github_diff/CVE-2021-44228/oldfiles/JndiManager.java b/./github_diff/CVE-2021-44228/newfiles/JndiManager.java
index 17b2e41..6a71f5d 100644
--- a/./github_diff/CVE-2021-44228/oldfiles/JndiManager.java
+++ b/./github_diff/CVE-2021-44228/newfiles/JndiManager.java
@@ -1,4 +1,6 @@
 package org.apache.logging.log4j.core.net;
+import java.net.URI;
+import java.net.URISyntaxException;
 import java.util.Properties;
 import java.util.concurrent.TimeUnit;
 import javax.naming.Context;
@@ -7,9 +9,14 @@ import javax.naming.NamingException;
 import org.apache.logging.log4j.core.appender.AbstractManager;
 import org.apache.logging.log4j.core.appender.ManagerFactory;
 import org.apache.logging.log4j.core.util.JndiCloser;
+import org.apache.logging.log4j.util.PropertiesUtil;
 public class JndiManager extends AbstractManager {
     private static final JndiManagerFactory FACTORY = new JndiManagerFactory();
     private final Context context;
+    public static boolean isJndiEnabled() {
+        return PropertiesUtil.getProperties().getBooleanProperty("log4j2.enableJndi", false);
+    }
+    
     private JndiManager(final String name, final Context context) {
         super(null, name);
         this.context = context;
@@ -79,12 +86,29 @@ public class JndiManager extends AbstractManager {
     
     @SuppressWarnings("unchecked")
     public <T> T lookup(final String name) throws NamingException {
+        if (context == null) {
+            return null;
+        }
+        
+        try {
+            URI uri = new URI(name);
+            if (uri.getScheme() == null || uri.getScheme().equals("java")) {
                 return (T) this.context.lookup(name);
             }
             
+            LOGGER.warn("Unsupported JNDI URI - {}", name);
+        }
+         catch (URISyntaxException ex) {
+            LOGGER.warn("Invalid  JNDI URI - {}", name);
+        }
+        
+        return null;
+    }
+    
     private static class JndiManagerFactory implements ManagerFactory<JndiManager, Properties> {
         @Override
         public JndiManager createManager(final String name, final Properties data) {
+            if (isJndiEnabled()) {
                 try {
                     return new JndiManager(name, new InitialContext(data));
                 }
@@ -94,6 +118,11 @@ public class JndiManager extends AbstractManager {
                 }
                 
             }
+             else {
+                return new JndiManager(name, null);
+            }
+            
+        }
         
     }
     
