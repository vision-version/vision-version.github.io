package org.apache.james.mime4j.stream;
import java.nio.charset.StandardCharsets;
import java.util.Locale;
import org.apache.james.mime4j.util.ByteSequence;
import org.apache.james.mime4j.util.CharsetUtil;
import org.apache.james.mime4j.util.ContentUtil;
import org.apache.james.mime4j.util.MimeUtil;
public final class RawField implements Field {
    private final ByteSequence raw;
    private final int delimiterIdx;
    private final String name;
    private final String body;
    private String nameLowerCase;
    RawField(ByteSequence raw, int delimiterIdx, String name, String body) {
        if (name == null) {
            throw new IllegalArgumentException("Field may not be null");
        }
        
        this.raw = raw;
        this.delimiterIdx = delimiterIdx;
        this.name = name.trim();
        this.body = body;
    }
    
    public RawField(String name, String body) {
        this(null, -1, name, body);
    }
    
    public ByteSequence getRaw() {
        return raw;
    }
    
    public String getName() {
        return name;
    }
    
    @Override
    public String getNameLowerCase() {
        if (nameLowerCase == null) {
            nameLowerCase = name.toLowerCase(Locale.US);
        }
        
        return nameLowerCase;
    }
    
    public String getBody() {
        if (body != null) {
            return body;
        }
        
        if (raw != null) {
            int len = raw.length();
            int off = delimiterIdx + 1;
            if (len > off + 1 && (CharsetUtil.isWhitespace((char) (raw.byteAt(off) & 0xff)))) {
                off++;
            }
            
            return MimeUtil.unfold(ContentUtil.decode(raw, off, len - off, StandardCharsets.UTF_8));
        }
        
        return null;
    }
    
    public int getDelimiterIdx() {
        return delimiterIdx;
    }
    
    @Override
    public String toString() {
        if (raw != null) {
            return ContentUtil.decode(raw);
        }
         else {
            StringBuilder buf = new StringBuilder();
            buf.append(name);
            buf.append(": ");
            if (body != null) {
                buf.append(body);
            }
            
            return buf.toString();
        }
        
    }
    
}

