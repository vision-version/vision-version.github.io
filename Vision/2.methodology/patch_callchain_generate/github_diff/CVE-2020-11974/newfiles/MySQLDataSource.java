package org.apache.dolphinscheduler.dao.datasource;
import org.apache.dolphinscheduler.common.Constants;
import org.apache.dolphinscheduler.common.enums.DbType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class MySQLDataSource extends BaseDataSource {
  private final Logger logger = LoggerFactory.getLogger(MySQLDataSource.class);
  private final String sensitiveParam = "autoDeserialize=true";
  private final char symbol = '&';
  @Override
  public String driverClassSelector() {
    return Constants.COM_MYSQL_JDBC_DRIVER;
  }
  
  @Override
  public DbType dbTypeSelector() {
    return DbType.MYSQL;
  }
  
  @Override
  protected String filterOther(String other){
    if(other.contains(sensitiveParam)){
      int index = other.indexOf(sensitiveParam);
      String tmp = sensitiveParam;
      if(index == 0 || other.charAt(index + 1) == symbol){
        tmp = tmp + symbol;
      }
       else if(other.charAt(index - 1) == symbol){
        tmp = symbol + tmp;
      }
      
      logger.warn("sensitive param : {} in otherParams field is filtered", tmp);
      other = other.replace(tmp, "");
    }
    
    logger.debug("other : {}", other);
    return other;
  }
  
  @Override
  public String getUser() {
    if(user.contains(sensitiveParam)){
      logger.warn("sensitive param : {} in username field is filtered", sensitiveParam);
      user = user.replace(sensitiveParam, "");
    }
    
    logger.debug("username : {}", user);
    return user;
  }
  
  @Override
  public String getPassword() {
    if(password.contains(sensitiveParam)){
      logger.warn("sensitive param : {} in password field is filtered", sensitiveParam);
      password = password.replace(sensitiveParam, "");
    }
    
    return password;
  }
  
}

