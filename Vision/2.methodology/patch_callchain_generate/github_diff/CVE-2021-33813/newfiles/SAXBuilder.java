package org.jdom2.input;
import static org.jdom2.JDOMConstants.SAX_FEATURE_EXTERNAL_ENT;
import static org.jdom2.JDOMConstants.SAX_PROPERTY_DECLARATION_HANDLER;
import static org.jdom2.JDOMConstants.SAX_PROPERTY_LEXICAL_HANDLER;
import static org.jdom2.JDOMConstants.SAX_PROPERTY_LEXICAL_HANDLER_ALT;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.Reader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;
import org.xml.sax.DTDHandler;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.jdom2.DefaultJDOMFactory;
import org.jdom2.DocType;
import org.jdom2.Document;
import org.jdom2.EntityRef;
import org.jdom2.JDOMException;
import org.jdom2.JDOMFactory;
import org.jdom2.Verifier;
import org.jdom2.input.sax.BuilderErrorHandler;
import org.jdom2.input.sax.DefaultSAXHandlerFactory;
import org.jdom2.input.sax.SAXBuilderEngine;
import org.jdom2.input.sax.SAXEngine;
import org.jdom2.input.sax.SAXHandler;
import org.jdom2.input.sax.SAXHandlerFactory;
import org.jdom2.input.sax.XMLReaderJDOMFactory;
import org.jdom2.input.sax.XMLReaderSAX2Factory;
import org.jdom2.input.sax.XMLReaders;
public class SAXBuilder implements SAXEngine {
	 private static final SAXHandlerFactory DEFAULTSAXHANDLERFAC = new DefaultSAXHandlerFactory();
	 private static final JDOMFactory DEFAULTJDOMFAC = new DefaultJDOMFactory();
	 private XMLReaderJDOMFactory readerfac = null;
	 private SAXHandlerFactory handlerfac = null;
	 private JDOMFactory jdomfac = null;
	 private final HashMap<String, Boolean> features = new HashMap<String, Boolean>(5);
	 private final HashMap<String, Object> properties = new HashMap<String, Object>(5);
	 private ErrorHandler saxErrorHandler = null;
	 private EntityResolver saxEntityResolver = null;
	 private DTDHandler saxDTDHandler = null;
	 private XMLFilter saxXMLFilter = null;
	 private boolean expand = true;
	 private boolean ignoringWhite = false;
	 private boolean ignoringBoundaryWhite = false;
	 private boolean reuseParser = true;
	 private SAXEngine engine = null;
	 public SAXBuilder() {
		this(null, null, null);
	}
	
	 @Deprecated
	public SAXBuilder(final boolean validate) {
		this(validate ? XMLReaders.DTDVALIDATING : XMLReaders.NONVALIDATING, null, null);
	}
	
	 @Deprecated
	public SAXBuilder(final String saxDriverClass) {
		this(saxDriverClass, false);
	}
	
	 @Deprecated
	public SAXBuilder(final String saxDriverClass, final boolean validate) {
		this(new XMLReaderSAX2Factory(validate, saxDriverClass), null, null);
	}
	
	 public SAXBuilder(final XMLReaderJDOMFactory readersouce) {
		this(readersouce, null, null);
	}
	
	 public SAXBuilder(final XMLReaderJDOMFactory xmlreaderfactory, final SAXHandlerFactory handlerfactory, final JDOMFactory jdomfactory) {
		this.readerfac = xmlreaderfactory == null ? XMLReaders.NONVALIDATING : xmlreaderfactory;
		this.handlerfac = handlerfactory == null ? DEFAULTSAXHANDLERFAC : handlerfactory;
		this.jdomfac = jdomfactory == null ? DEFAULTJDOMFAC : jdomfactory;
	}
	
	 @Deprecated
	public String getDriverClass() {
		if (readerfac instanceof XMLReaderSAX2Factory) {
			return ((XMLReaderSAX2Factory) readerfac).getDriverClassName();
		}
		
		return null;
	}
	
	 @Deprecated
	public JDOMFactory getFactory() {
		return getJDOMFactory();
	}
	
	 @Override
	public JDOMFactory getJDOMFactory() {
		return jdomfac;
	}
	
	 @Deprecated
	public void setFactory(final JDOMFactory factory) {
		setJDOMFactory(factory);
	}
	
	 public void setJDOMFactory(final JDOMFactory factory) {
		this.jdomfac = factory;
		engine = null;
	}
	
	 public XMLReaderJDOMFactory getXMLReaderFactory() {
		return readerfac;
	}
	
	 public void setXMLReaderFactory(final XMLReaderJDOMFactory rfac) {
		readerfac = rfac == null ? XMLReaders.NONVALIDATING : rfac;
		engine = null;
	}
	
	 public SAXHandlerFactory getSAXHandlerFactory() {
		return handlerfac;
	}
	
	 public void setSAXHandlerFactory(final SAXHandlerFactory factory) {
		this.handlerfac = factory == null ? DEFAULTSAXHANDLERFAC : factory;
		engine = null;
	}
	
	 @Deprecated
	public boolean getValidation() {
		return isValidating();
	}
	
	 @Override
	public boolean isValidating() {
		return readerfac.isValidating();
	}
	
	 @Deprecated
	public void setValidation(final boolean validate) {
		setXMLReaderFactory(validate ? XMLReaders.DTDVALIDATING : XMLReaders.NONVALIDATING);
	}
	
	 @Override
	public ErrorHandler getErrorHandler() {
		return saxErrorHandler;
	}
	
	 public void setErrorHandler(final ErrorHandler errorHandler) {
		saxErrorHandler = errorHandler;
		engine = null;
	}
	
	 @Override
	public EntityResolver getEntityResolver() {
		return saxEntityResolver;
	}
	
	 public void setEntityResolver(final EntityResolver entityResolver) {
		saxEntityResolver = entityResolver;
		engine = null;
	}
	
	 @Override
	public DTDHandler getDTDHandler() {
		return saxDTDHandler;
	}
	
	 public void setDTDHandler(final DTDHandler dtdHandler) {
		saxDTDHandler = dtdHandler;
		engine = null;
	}
	
	 public XMLFilter getXMLFilter() {
		return saxXMLFilter;
	}
	
	 public void setXMLFilter(final XMLFilter xmlFilter) {
		saxXMLFilter = xmlFilter;
		engine = null;
	}
	
	 @Override
	public boolean getIgnoringElementContentWhitespace() {
		return ignoringWhite;
	}
	
	 public void setIgnoringElementContentWhitespace(final boolean ignoringWhite) {
		this.ignoringWhite = ignoringWhite;
		engine = null;
	}
	
	 @Override
	public boolean getIgnoringBoundaryWhitespace() {
		return ignoringBoundaryWhite;
	}
	
	 public void setIgnoringBoundaryWhitespace(final boolean ignoringBoundaryWhite) {
		this.ignoringBoundaryWhite = ignoringBoundaryWhite;
		engine = null;
	}
	
	 @Override
	public boolean getExpandEntities() {
		return expand;
	}
	
	 public void setExpandEntities(final boolean expand) {
		this.expand = expand;
		engine = null;
	}
	
	 public boolean getReuseParser() {
		return reuseParser;
	}
	
	 public void setReuseParser(final boolean reuseParser) {
		this.reuseParser = reuseParser;
		if (!reuseParser) {
			engine = null;
		}
		
	}
	
	 @Deprecated
	public void setFastReconfigure(final boolean fastReconfigure) {
		 }
		 
	 public void setFeature(final String name, final boolean value) {
		 features.put(name, value ? Boolean.TRUE : Boolean.FALSE);
		engine = null;
	}
	
	 public void setProperty(final String name, final Object value) {
		 properties.put(name, value);
		engine = null;
	}
	
	 public SAXEngine buildEngine() throws JDOMException {
		 final SAXHandler contentHandler = handlerfac.createSAXHandler(jdomfac);
		contentHandler.setExpandEntities(expand);
		contentHandler.setIgnoringElementContentWhitespace(ignoringWhite);
		contentHandler.setIgnoringBoundaryWhitespace(ignoringBoundaryWhite);
		final XMLReader parser = createParser();
		 configureParser(parser, contentHandler);
		final boolean valid = readerfac.isValidating();
		return new SAXBuilderEngine(parser, contentHandler, valid);
	}
	
	 protected XMLReader createParser() throws JDOMException {
		XMLReader parser = readerfac.createXMLReader();
		 if (saxXMLFilter != null) {
			 XMLFilter root = saxXMLFilter;
			while (root.getParent() instanceof XMLFilter) {
				root = (XMLFilter) root.getParent();
			}
			
			root.setParent(parser);
			 parser = saxXMLFilter;
		}
		
		return parser;
	}
	
	 private SAXEngine getEngine() throws JDOMException {
		if (engine != null) {
			return engine;
		}
		
		engine = buildEngine();
		return engine;
	}
	
	 protected void configureParser(final XMLReader parser, final SAXHandler contentHandler) throws JDOMException {
		 parser.setContentHandler(contentHandler);
		if (saxEntityResolver != null) {
			parser.setEntityResolver(saxEntityResolver);
		}
		
		if (saxDTDHandler != null) {
			parser.setDTDHandler(saxDTDHandler);
		}
		 else {
			parser.setDTDHandler(contentHandler);
		}
		
		if (saxErrorHandler != null) {
			parser.setErrorHandler(saxErrorHandler);
		}
		 else {
			parser.setErrorHandler(new BuilderErrorHandler());
		}
		
		boolean success = false;
		try {
			parser.setProperty(SAX_PROPERTY_LEXICAL_HANDLER, contentHandler);
			success = true;
		}
		 catch (final SAXNotSupportedException e) {
			 }
			  catch (final SAXNotRecognizedException e) {
			 }
			 
		 if (!success) {
			try {
				parser.setProperty(SAX_PROPERTY_LEXICAL_HANDLER_ALT, contentHandler);
				success = true;
			}
			 catch (final SAXNotSupportedException e) {
				 }
				  catch (final SAXNotRecognizedException e) {
				 }
				 
		}
		
		 for (final Map.Entry<String, Object> me : properties.entrySet()) {
			internalSetProperty(parser, me.getKey(), me.getValue(), me.getKey());
		}
		
		 try {
			if (parser.getFeature(SAX_FEATURE_EXTERNAL_ENT) != expand) {
				parser.setFeature(SAX_FEATURE_EXTERNAL_ENT, expand);
			}
			
		}
		 catch (final SAXException e) { 
		}
		
		 if (!expand) {
			try {
				parser.setProperty(SAX_PROPERTY_DECLARATION_HANDLER, contentHandler);
				success = true;
			}
			 catch (final SAXNotSupportedException e) {
				 }
				  catch (final SAXNotRecognizedException e) {
				 }
				 
		}
		
		 for (final Map.Entry<String, Boolean> me : features.entrySet()) {
			internalSetFeature(parser, me.getKey(), me.getValue().booleanValue(), me.getKey());
		}
		
	}
	
	 private void internalSetFeature(final XMLReader parser, final String feature, final boolean value, final String displayName) throws JDOMException {
		try {
			parser.setFeature(feature, value);
		}
		 catch (final SAXNotSupportedException e) {
			throw new JDOMException( displayName + " feature not supported for SAX driver " + parser.getClass().getName());
		}
		 catch (final SAXNotRecognizedException e) {
			throw new JDOMException( displayName + " feature not recognized for SAX driver " + parser.getClass().getName());
		}
		
	}
	
	 private void internalSetProperty(final XMLReader parser, final String property, final Object value, final String displayName) throws JDOMException {
		try {
			parser.setProperty(property, value);
		}
		 catch (final SAXNotSupportedException e) {
			throw new JDOMException( displayName + " property not supported for SAX driver " + parser.getClass().getName());
		}
		 catch (final SAXNotRecognizedException e) {
			throw new JDOMException( displayName + " property not recognized for SAX driver " + parser.getClass().getName());
		}
		
	}
	
	 @Override
	public Document build(final InputSource in) throws JDOMException, IOException {
		try {
			return getEngine().build(in);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final InputStream in) throws JDOMException, IOException {
		try {
			return getEngine().build(in);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final File file) throws JDOMException, IOException {
		try {
			return getEngine().build(file);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final URL url) throws JDOMException, IOException {
		try {
			return getEngine().build(url);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final InputStream in, final String systemId) throws JDOMException, IOException {
		try {
			return getEngine().build(in, systemId);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final Reader characterStream) throws JDOMException, IOException {
		try {
			return getEngine().build(characterStream);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final Reader characterStream, final String systemId) throws JDOMException, IOException {
		try {
			return getEngine().build(characterStream, systemId);
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
	 @Override
	public Document build(final String systemId) throws JDOMException, IOException {
		if (systemId == null) {
			throw new NullPointerException( "Unable to build a URI from a null systemID.");
		}
		
		try {
			return getEngine().build(systemId);
		}
		 catch (IOException ioe) {
			 final int len = systemId.length();
			int i = 0;
			while (i < len && Verifier.isXMLWhitespace(systemId.charAt(i))) {
				i++;
			}
			
			if (i < len && '<' == systemId.charAt(i)) {
				 MalformedURLException mx = new MalformedURLException( "SAXBuilder.build(String) expects the String to be " + "a systemID, but in this instance it appears to be " + "actual XML data.");
				 mx.initCause(ioe);
				throw mx;
			}
			
			 throw ioe;
		}
		 finally {
			if (!reuseParser) {
				engine = null;
			}
			
		}
		
	}
	
}

