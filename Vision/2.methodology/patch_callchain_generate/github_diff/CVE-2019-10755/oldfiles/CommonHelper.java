package org.pac4j.core.util;
import org.pac4j.core.exception.TechnicalException;
import java.io.UnsupportedEncodingException;
import java.net.*;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.Date;
public final class CommonHelper {
    public static boolean isNotBlank(final String s) {
        if (s == null) {
            return false;
        }
        
        return s.trim().length() > 0;
    }
    
    public static boolean isBlank(final String s) {
        return !isNotBlank(s);
    }
    
    public static boolean areEquals(final String s1, final String s2) {
        return s1 == null ? s2 == null : s1.equals(s2);
    }
    
    public static boolean areEqualsIgnoreCaseAndTrim(final String s1, final String s2) {
        if (s1 == null && s2 == null) {
            return true;
        }
         else if (s1 != null && s2 != null) {
            return s1.trim().equalsIgnoreCase(s2.trim());
        }
         else {
            return false;
        }
        
    }
    
    public static boolean areNotEquals(final String s1, final String s2) {
        return !areEquals(s1, s2);
    }
    
    public static boolean isEmpty(final Collection<?> coll) {
        return coll == null || coll.isEmpty();
    }
    
    public static boolean isNotEmpty(final Collection<?> coll) {
        return !isEmpty(coll);
    }
    
    public static void assertTrue(final boolean value, final String message) {
        if (!value) {
            throw new TechnicalException(message);
        }
        
    }
    
    public static void assertNotBlank(final String name, final String value, final String msg) {
        assertTrue(!isBlank(value), name + " cannot be blank" + (msg != null ? ": " + msg : ""));
    }
    
    public static void assertNotBlank(final String name, final String value) {
        assertNotBlank(name, value, null);
    }
    
    public static void assertNotNull(final String name, final Object obj) {
        assertTrue(obj != null, name + " cannot be null");
    }
    
    public static void assertNull(final String name, final Object obj) {
        assertTrue(obj == null, name + " must be null");
    }
    
    public static String addParameter(final String url, final String name, final String value) {
        if (url != null) {
            final StringBuilder sb = new StringBuilder();
            sb.append(url);
            if (name != null) {
                if (url.indexOf("?") >= 0) {
                    sb.append("&");
                }
                 else {
                    sb.append("?");
                }
                
                sb.append(name);
                sb.append("=");
                if (value != null) {
                    sb.append(urlEncode(value));
                }
                
            }
            
            return sb.toString();
        }
        
        return null;
    }
    
    public static String urlEncode(final String text) {
        try {
            return URLEncoder.encode(text, StandardCharsets.UTF_8.name());
        }
         catch (final UnsupportedEncodingException e) {
            final String message = "Unable to encode text : " + text;
            throw new TechnicalException(message, e);
        }
        
    }
    
    public static String toNiceString(final Class<?> clazz, final Object... args) {
        final StringBuilder sb = new StringBuilder();
        sb.append("#");
        sb.append(clazz.getSimpleName());
        sb.append("# |");
        boolean b = true;
        for (final Object arg : args) {
            if (b) {
                sb.append(" ");
                sb.append(arg);
                sb.append(":");
            }
             else {
                sb.append(" ");
                sb.append(arg);
                sb.append(" |");
            }
            
            b = !b;
        }
        
        return sb.toString();
    }
    
    public static String randomString(final int size) {
        return java.util.UUID.randomUUID().toString().replace("-", "").substring(0, size);
    }
    
    public static Date newDate(final Date original) {
        return original != null ? new Date(original.getTime()) : null;
    }
    
    public static URI asURI(final String s) {
        try {
            return new URI(s);
        }
         catch (final URISyntaxException e) {
            throw new TechnicalException("Cannot make an URI from: " + s, e);
        }
        
    }
    
    private static final String EMPTY = "";
    private static final int INDEX_NOT_FOUND = -1;
    public static String substringBetween(final String str, final String open, final String close) {
        if (str == null || open == null || close == null) {
            return null;
        }
        
        int start = str.indexOf(open);
        if (start != INDEX_NOT_FOUND) {
            int end = str.indexOf(close, start + open.length());
            if (end != INDEX_NOT_FOUND) {
                return str.substring(start + open.length(), end);
            }
            
        }
        
        return null;
    }
    
    public static String substringAfter(final String str, final String separator) {
        if (isEmpty(str)) {
            return str;
        }
        
        if (separator == null) {
            return EMPTY;
        }
        
        int pos = str.indexOf(separator);
        if (pos == INDEX_NOT_FOUND) {
            return EMPTY;
        }
        
        return str.substring(pos + separator.length());
    }
    
    public static String substringBefore(final String str, final String separator) {
        if (isEmpty(str) || separator == null) {
            return str;
        }
        
        if (separator.length() == 0) {
            return EMPTY;
        }
        
        int pos = str.indexOf(separator);
        if (pos == INDEX_NOT_FOUND) {
            return str;
        }
        
        return str.substring(0, pos);
    }
    
    private static boolean isEmpty(final CharSequence cs) {
        return cs == null || cs.length() == 0;
    }
    
}

