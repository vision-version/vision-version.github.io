package org.apache.maven.shared.utils.cli.shell;
import java.util.ArrayList;
import java.util.List;
import org.apache.maven.shared.utils.Os;
import org.apache.maven.shared.utils.StringUtils;
public class BourneShell extends Shell {
    private static final char DOUBLE_QUOTATION = '"';
    private static final char[] BASH_QUOTING_TRIGGER_CHARS = { ' ', '$', ';', '&', '|', '<', '>', '*', '?', '(', ')', '[', ']', '{', '}', '`', '#' };
    public BourneShell() {
        setShellCommand( "/bin/sh" );
        setArgumentQuoteDelimiter( DOUBLE_QUOTATION );
        setExecutableQuoteDelimiter( DOUBLE_QUOTATION );
        setSingleQuotedArgumentEscaped( true );
        setSingleQuotedExecutableEscaped( false );
        setQuotedExecutableEnabled( true );
    }
    
    public String getExecutable() {
        if ( Os.isFamily( Os.FAMILY_WINDOWS ) ){
            return super.getExecutable();
        }
        
        return unifyQuotes( super.getExecutable() );
    }
    
    public List<String> getShellArgsList() {
        List<String> shellArgs = new ArrayList<String>();
        List<String> existingShellArgs = super.getShellArgsList();
        if ( ( existingShellArgs != null ) && !existingShellArgs.isEmpty() ){
            shellArgs.addAll( existingShellArgs );
        }
        
        shellArgs.add( "-c" );
        return shellArgs;
    }
    
    public String[] getShellArgs() {
        String[] shellArgs = super.getShellArgs();
        if ( shellArgs == null ){
            shellArgs = new String[0];
        }
        
        if ( ( shellArgs.length > 0 ) && !shellArgs[shellArgs.length - 1].equals( "-c" ) ){
            String[] newArgs = new String[shellArgs.length + 1];
            System.arraycopy( shellArgs, 0, newArgs, 0, shellArgs.length );
            newArgs[shellArgs.length] = "-c";
            shellArgs = newArgs;
        }
        
        return shellArgs;
    }
    
    protected String getExecutionPreamble() {
        if ( getWorkingDirectoryAsString() == null ){
            return null;
        }
        
        String dir = getWorkingDirectoryAsString();
        StringBuilder sb = new StringBuilder();
        sb.append( "cd " );
        sb.append( unifyQuotes( dir ) );
        sb.append( " && " );
        return sb.toString();
    }
    
    protected char[] getQuotingTriggerChars() {
        return BASH_QUOTING_TRIGGER_CHARS;
    }
    
    private static String unifyQuotes( String path ) {
        if ( path == null ){
            return null;
        }
        
        if ( path.indexOf( ' ' ) == -1 && path.indexOf( '\'' ) != -1 && path.indexOf( '"' ) == -1 ){
            return StringUtils.escape( path );
        }
        
        return StringUtils.quoteAndEscape( path, '\"', BASH_QUOTING_TRIGGER_CHARS );
    }
    
}

