package org.apache.maven.shared.utils.cli.shell;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.apache.maven.shared.utils.StringUtils;
public class Shell implements Cloneable {
    private static final char[] DEFAULT_QUOTING_TRIGGER_CHARS = { ' ' };
    private String shellCommand;
    private final List<String> shellArgs = new ArrayList<String>();
    private boolean quotedArgumentsEnabled = true;
    private boolean unconditionalQuoting = false;
    private String executable;
    private String workingDir;
    private boolean quotedExecutableEnabled = true;
    private boolean singleQuotedArgumentEscaped = false;
    private boolean singleQuotedExecutableEscaped = false;
    private char argQuoteDelimiter = '\"';
    private char exeQuoteDelimiter = '\"';
    void setShellCommand( String shellCommand ) {
        this.shellCommand = shellCommand;
    }
    
    String getShellCommand() {
        return shellCommand;
    }
    
    void setShellArgs( String[] shellArgs ) {         this.shellArgs.clear();
        this.shellArgs.addAll( Arrays.asList( shellArgs ) );
    }
    
    String[] getShellArgs() {         if ( shellArgs.isEmpty() ) { return null;
        }
        
        else{
            return shellArgs.toArray( new String[shellArgs.size()] );
        }
        
    }
    
    protected String quoteOneItem( String inputString, boolean isExecutable ) {
        char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );
        return StringUtils.quoteAndEscape( inputString, isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', unconditionalQuoting );
    }
    
    List<String> getCommandLine( String executableParameter, String... argumentsParameter ) {
        return getRawCommandLine( executableParameter, argumentsParameter );
    }
    
    List<String> getRawCommandLine( String executableParameter, String... argumentsParameter ) {
        List<String> commandLine = new ArrayList<String>();
        StringBuilder sb = new StringBuilder();
        if ( executableParameter != null ){
            String preamble = getExecutionPreamble();
            if ( preamble != null ){
                sb.append( preamble );
            }
            
            if ( isQuotedExecutableEnabled() ){
                sb.append( quoteOneItem( executableParameter, true ) );
            }
            
            else{
                sb.append( executableParameter );
            }
            
        }
        
        for ( String argument : argumentsParameter ){
            if ( sb.length() > 0 ){
                sb.append( ' ' );
            }
            
            if ( isQuotedArgumentsEnabled() ){
                sb.append( quoteOneItem( argument, false ) );
            }
            
            else{
                sb.append( argument );
            }
            
        }
        
        commandLine.add( sb.toString() );
        return commandLine;
    }
    
    char[] getQuotingTriggerChars() {
        return DEFAULT_QUOTING_TRIGGER_CHARS;
    }
    
    String getExecutionPreamble() {
        return null;
    }
    
    char[] getEscapeChars( boolean includeSingleQuote, boolean includeDoubleQuote ) {
        StringBuilder buf = new StringBuilder( 2 );
        if ( includeSingleQuote ){
            buf.append( '\'' );
        }
        
        if ( includeDoubleQuote ){
            buf.append( '\"' );
        }
        
        char[] result = new char[buf.length()];
        buf.getChars( 0, buf.length(), result, 0 );
        return result;
    }
    
    protected boolean isDoubleQuotedArgumentEscaped() {
        return false;
    }
    
    protected boolean isSingleQuotedArgumentEscaped() {
        return singleQuotedArgumentEscaped;
    }
    
    boolean isDoubleQuotedExecutableEscaped() {
        return false;
    }
    
    boolean isSingleQuotedExecutableEscaped() {
        return singleQuotedExecutableEscaped;
    }
    
    void setArgumentQuoteDelimiter( char argQuoteDelimiterParameter ) {
        this.argQuoteDelimiter = argQuoteDelimiterParameter;
    }
    
    char getArgumentQuoteDelimiter() {
        return argQuoteDelimiter;
    }
    
    void setExecutableQuoteDelimiter( char exeQuoteDelimiterParameter ) {
        this.exeQuoteDelimiter = exeQuoteDelimiterParameter;
    }
    
    char getExecutableQuoteDelimiter() {
        return exeQuoteDelimiter;
    }
    
    public List<String> getShellCommandLine( String... arguments ) {
        List<String> commandLine = new ArrayList<String>();
        if ( getShellCommand() != null ){
            commandLine.add( getShellCommand() );
        }
        
        if ( getShellArgs() != null ){
            commandLine.addAll( getShellArgsList() );
        }
        
        commandLine.addAll( getCommandLine( executable, arguments ) );
        return commandLine;
    }
    
    List<String> getShellArgsList() {
        return shellArgs;
    }
    
    public void setQuotedArgumentsEnabled( boolean quotedArgumentsEnabled ) {
        this.quotedArgumentsEnabled = quotedArgumentsEnabled;
    }
    
    boolean isQuotedArgumentsEnabled() {
        return quotedArgumentsEnabled;
    }
    
    void setQuotedExecutableEnabled( boolean quotedExecutableEnabled ) {
        this.quotedExecutableEnabled = quotedExecutableEnabled;
    }
    
    boolean isQuotedExecutableEnabled() {
        return quotedExecutableEnabled;
    }
    
    public void setExecutable( String executable ) {
        if ( ( executable == null ) || ( executable.length() == 0 ) ){
            return;
        }
        
        this.executable = executable.replace( '/', File.separatorChar ).replace( '\\', File.separatorChar );
    }
    
    public String getExecutable() {
        return executable;
    }
    
    public void setWorkingDirectory( String path ) {
        if ( path != null ){
            this.workingDir = path;
        }
        
    }
    
    public void setWorkingDirectory( File workingDirectory ) {
        if ( workingDirectory != null ){
            this.workingDir = workingDirectory.getAbsolutePath();
        }
        
    }
    
    public File getWorkingDirectory() {
        return workingDir == null ? null : new File( workingDir );
    }
    
    String getWorkingDirectoryAsString() {
        return workingDir;
    }
    
    public Object clone() {
        throw new RuntimeException( "Do we ever clone this?" );
    }
    
    void setSingleQuotedArgumentEscaped( boolean singleQuotedArgumentEscaped ) {
        this.singleQuotedArgumentEscaped = singleQuotedArgumentEscaped;
    }
    
    void setSingleQuotedExecutableEscaped( boolean singleQuotedExecutableEscaped ) {
        this.singleQuotedExecutableEscaped = singleQuotedExecutableEscaped;
    }
    
    public boolean isUnconditionalQuoting() {
        return unconditionalQuoting;
    }
    
    public void setUnconditionalQuoting( boolean unconditionalQuoting ) {
        this.unconditionalQuoting = unconditionalQuoting;
    }
    
}

