package org.xwiki.velocity.introspection;
import java.util.HashSet;
import java.util.Set;
import org.apache.velocity.util.introspection.SecureIntrospectorImpl;
import org.slf4j.Logger;
public class SecureIntrospector extends SecureIntrospectorImpl {
    private final Set<String> secureClassMethods = new HashSet<>();
    public SecureIntrospector(String[] badClasses, String[] badPackages, Logger log) {
        super(badClasses, badPackages, log);
        this.secureClassMethods.add("getname");
        this.secureClassMethods.add("getName");
        this.secureClassMethods.add("getsimpleName");
        this.secureClassMethods.add("getSimpleName");
        this.secureClassMethods.add("isarray");
        this.secureClassMethods.add("isArray");
        this.secureClassMethods.add("isassignablefrom");
        this.secureClassMethods.add("isAssignableFrom");
        this.secureClassMethods.add("isenum");
        this.secureClassMethods.add("isEnum");
        this.secureClassMethods.add("isinstance");
        this.secureClassMethods.add("isInstance");
        this.secureClassMethods.add("isinterface");
        this.secureClassMethods.add("isInterface");
        this.secureClassMethods.add("islocalClass");
        this.secureClassMethods.add("isLocalClass");
        this.secureClassMethods.add("ismemberclass");
        this.secureClassMethods.add("isMemberClass");
        this.secureClassMethods.add("isprimitive");
        this.secureClassMethods.add("isPrimitive");
        this.secureClassMethods.add("issynthetic");
        this.secureClassMethods.add("isSynthetic");
        this.secureClassMethods.add("getEnumConstants");
    }
    
    @Override
    public boolean checkObjectExecutePermission(Class clazz, String methodName) {
        if (Class.class.isAssignableFrom(clazz) && methodName != null && this.secureClassMethods.contains(methodName)) {
            return true;
        }
         else {
            return super.checkObjectExecutePermission(clazz, methodName);
        }
        
    }
    
}

