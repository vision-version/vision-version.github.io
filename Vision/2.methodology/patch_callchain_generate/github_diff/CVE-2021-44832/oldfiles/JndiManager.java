package org.apache.logging.log4j.core.net;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.apache.logging.log4j.core.appender.AbstractManager;
import org.apache.logging.log4j.core.appender.ManagerFactory;
import org.apache.logging.log4j.core.util.JndiCloser;
import org.apache.logging.log4j.util.PropertiesUtil;
public class JndiManager extends AbstractManager {
    private static final JndiManagerFactory FACTORY = new JndiManagerFactory();
    private final Context context;
    public static boolean isJndiEnabled() {
        return PropertiesUtil.getProperties().getBooleanProperty("log4j2.enableJndi", false);
    }
    
    private JndiManager(final String name, final Context context) {
        super(null, name);
        this.context = context;
    }
    
    public static JndiManager getDefaultManager() {
        return getManager(JndiManager.class.getName(), FACTORY, null);
    }
    
    public static JndiManager getDefaultManager(final String name) {
        return getManager(name, FACTORY, null);
    }
    
    public static JndiManager getJndiManager(final String initialContextFactoryName, final String providerURL, final String urlPkgPrefixes, final String securityPrincipal, final String securityCredentials, final Properties additionalProperties) {
        final Properties properties = createProperties(initialContextFactoryName, providerURL, urlPkgPrefixes, securityPrincipal, securityCredentials, additionalProperties);
        return getManager(createManagerName(), FACTORY, properties);
    }
    
    public static JndiManager getJndiManager(final Properties properties) {
        return getManager(createManagerName(), FACTORY, properties);
    }
    
    private static String createManagerName() {
        return JndiManager.class.getName() + '@' + JndiManager.class.hashCode();
    }
    
    public static Properties createProperties(final String initialContextFactoryName, final String providerURL, final String urlPkgPrefixes, final String securityPrincipal, final String securityCredentials, final Properties additionalProperties) {
        if (initialContextFactoryName == null) {
            return null;
        }
        
        final Properties properties = new Properties();
        properties.setProperty(Context.INITIAL_CONTEXT_FACTORY, initialContextFactoryName);
        if (providerURL != null) {
            properties.setProperty(Context.PROVIDER_URL, providerURL);
        }
         else {
            LOGGER.warn("The JNDI InitialContextFactory class name [{}] was provided, but there was no associated " + "provider URL. This is likely to cause problems.", initialContextFactoryName);
        }
        
        if (urlPkgPrefixes != null) {
            properties.setProperty(Context.URL_PKG_PREFIXES, urlPkgPrefixes);
        }
        
        if (securityPrincipal != null) {
            properties.setProperty(Context.SECURITY_PRINCIPAL, securityPrincipal);
            if (securityCredentials != null) {
                properties.setProperty(Context.SECURITY_CREDENTIALS, securityCredentials);
            }
             else {
                LOGGER.warn("A security principal [{}] was provided, but with no corresponding security credentials.", securityPrincipal);
            }
            
        }
        
        if (additionalProperties != null) {
            properties.putAll(additionalProperties);
        }
        
        return properties;
    }
    
    @Override
    protected boolean releaseSub(final long timeout, final TimeUnit timeUnit) {
        return JndiCloser.closeSilently(this.context);
    }
    
    @SuppressWarnings("unchecked")
    public <T> T lookup(final String name) throws NamingException {
        if (context == null) {
            return null;
        }
        
        try {
            URI uri = new URI(name);
            if (uri.getScheme() == null || uri.getScheme().equals("java")) {
                return (T) this.context.lookup(name);
            }
            
            LOGGER.warn("Unsupported JNDI URI - {}", name);
        }
         catch (URISyntaxException ex) {
            LOGGER.warn("Invalid  JNDI URI - {}", name);
        }
        
        return null;
    }
    
    private static class JndiManagerFactory implements ManagerFactory<JndiManager, Properties> {
        @Override
        public JndiManager createManager(final String name, final Properties data) {
            if (isJndiEnabled()) {
                try {
                    return new JndiManager(name, new InitialContext(data));
                }
                 catch (final NamingException e) {
                    LOGGER.error("Error creating JNDI InitialContext.", e);
                    return null;
                }
                
            }
             else {
                return new JndiManager(name, null);
            }
            
        }
        
    }
    
    @Override
    public String toString() {
        return "JndiManager [context=" + context + ", count=" + count + "]";
    }
    
}

