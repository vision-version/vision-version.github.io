package org.eclipse.jetty.embedded;
import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.nio.file.StandardOpenOption;
import javax.servlet.AsyncContext;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.eclipse.jetty.http.MimeTypes;
import org.eclipse.jetty.server.Handler;
import org.eclipse.jetty.server.HttpOutput;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.handler.AbstractHandler;
import org.eclipse.jetty.server.handler.DefaultHandler;
import org.eclipse.jetty.server.handler.HandlerList;
import org.eclipse.jetty.util.Callback;
import org.eclipse.jetty.util.URIUtil;
import org.eclipse.jetty.util.resource.Resource;
public class FastFileServer {
    public static void main( String[] args ) throws Exception {
        Server server = new Server(8080);
        HandlerList handlers = new HandlerList();
        handlers.setHandlers(new Handler[] {
                new FastFileHandler(new File(System.getProperty("user.dir"))), new DefaultHandler() }
);
        server.setHandler(handlers);
        server.start();
        server.join();
    }
    
    static class FastFileHandler extends AbstractHandler {
        private final MimeTypes mimeTypes = new MimeTypes();
        private final File dir;
        private FastFileHandler( File dir ) {
            this.dir = dir;
        }
        
        @Override
        public void handle( String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response ) throws IOException, ServletException {
            final int SMALL = response.getBufferSize();
            final int MEDIUM = 8 * SMALL;
            final File file = new File(this.dir, request.getPathInfo());
            if (!file.exists())
                return;
            baseRequest.setHandled(true);
            if (file.isDirectory()){
                if (!request.getPathInfo().endsWith(URIUtil.SLASH)){
                    response.sendRedirect(response.encodeRedirectURL(URIUtil .addPaths(request.getRequestURI(), URIUtil.SLASH)));
                    return;
                }
                
                String listing = Resource.newResource(file).getListHTML( request.getRequestURI(), request.getPathInfo().lastIndexOf("/") > 0);
                response.setContentType("text/html; charset=utf-8");
                response.getWriter().println(listing);
                return;
            }
            
            response.setDateHeader("Last-Modified", file.lastModified());
            response.setDateHeader("Content-Length", file.length());
            response.setContentType(mimeTypes.getMimeByExtension(file.getName()));
            if (file.length() < SMALL){
                ((HttpOutput) response.getOutputStream()) .sendContent(FileChannel.open(file.toPath(), StandardOpenOption.READ));
                return;
            }
            
            final AsyncContext async = request.startAsync();
            Callback completionCB = new Callback() {
                @Override
                public void succeeded() {
                    async.complete();
                }
                
                @Override
                public void failed( Throwable x ) {
                    x.printStackTrace();
                    async.complete();
                }
                
            };
            if (file.length() < MEDIUM){
                ((HttpOutput) response.getOutputStream()) .sendContent(FileChannel.open(file.toPath(), StandardOpenOption.READ), completionCB);
                return;
            }
            
            ByteBuffer buffer;
            try ( RandomAccessFile raf = new RandomAccessFile(file, "r"); ) {
                buffer = raf.getChannel().map(MapMode.READ_ONLY, 0, raf.length());
            }
            
            buffer = buffer.asReadOnlyBuffer();
            ((HttpOutput) response.getOutputStream()).sendContent(buffer, completionCB);
        }
        
    }
    
}

