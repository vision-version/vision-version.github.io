package org.eclipse.jetty.util.resource;
import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.nio.channels.ReadableByteChannel;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.eclipse.jetty.util.B64Code;
import org.eclipse.jetty.util.IO;
import org.eclipse.jetty.util.Loader;
import org.eclipse.jetty.util.MultiMap;
import org.eclipse.jetty.util.StringUtil;
import org.eclipse.jetty.util.URIUtil;
import org.eclipse.jetty.util.UrlEncoded;
import org.eclipse.jetty.util.log.Log;
import org.eclipse.jetty.util.log.Logger;
import static java.nio.charset.StandardCharsets.UTF_8;
public abstract class Resource implements ResourceFactory, Closeable {
    private static final Logger LOG = Log.getLogger(Resource.class);
    public static boolean __defaultUseCaches = true;
    volatile Object _associate;
    public static void setDefaultUseCaches (boolean useCaches) {
        __defaultUseCaches=useCaches;
    }
    
    public static boolean getDefaultUseCaches () {
        return __defaultUseCaches;
    }
    
    public static Resource newResource(URI uri) throws MalformedURLException {
        return newResource(uri.toURL());
    }
    
    public static Resource newResource(URL url) {
        return newResource(url, __defaultUseCaches);
    }
    
    static Resource newResource(URL url, boolean useCaches) {
        if (url==null)
            return null;
        String url_string=url.toExternalForm();
        if( url_string.startsWith( "file:")) {
            try {
                FileResource fileResource= new FileResource(url);
                return fileResource;
            }
            
            catch(Exception e) {
                LOG.warn(e.toString());
                LOG.debug(Log.EXCEPTION,e);
                return new BadResource(url,e.toString());
            }
            
        }
        
        else if( url_string.startsWith( "jar:file:")){
            return new JarFileResource(url, useCaches);
        }
        
        else if( url_string.startsWith( "jar:")){
            return new JarResource(url, useCaches);
        }
        
        return new URLResource(url,null,useCaches);
    }
    
    public static Resource newResource(String resource) throws MalformedURLException {
        return newResource(resource, __defaultUseCaches);
    }
    
    public static Resource newResource(String resource, boolean useCaches)        throws MalformedURLException {
        URL url=null;
        try {
            url = new URL(resource);
        }
        
        catch(MalformedURLException e) {
            if(!resource.startsWith("ftp:") && !resource.startsWith("file:") && !resource.startsWith("jar:")) {
                try {
                    if (resource.startsWith("./"))
                        resource=resource.substring(2);
                    File file=new File(resource).getCanonicalFile();
                    return new FileResource(file);
                }
                
                catch(Exception e2) {
                    LOG.debug(Log.EXCEPTION,e2);
                    throw e;
                }
                
            }
            
            else{
                LOG.warn("Bad Resource: "+resource);
                throw e;
            }
            
        }
        
        return newResource(url, useCaches);
    }
    
    public static Resource newResource(File file) {
        return new FileResource(file);
    }
    
    public static Resource newSystemResource(String resource) throws IOException {
        URL url=null;
        ClassLoader loader=Thread.currentThread().getContextClassLoader();
        if (loader!=null){
            try {
                url = loader.getResource(resource);
                if (url == null && resource.startsWith("/"))
                    url = loader.getResource(resource.substring(1));
            }
            
            catch (IllegalArgumentException e) {
                url = null;
            }
            
        }
        
        if (url==null){
            loader=Resource.class.getClassLoader();
            if (loader!=null){
                url=loader.getResource(resource);
                if (url==null && resource.startsWith("/"))
                    url=loader.getResource(resource.substring(1));
            }
            
        }
        
        if (url==null){
            url=ClassLoader.getSystemResource(resource);
            if (url==null && resource.startsWith("/"))
                url=ClassLoader.getSystemResource(resource.substring(1));
        }
        
        if (url==null)
            return null;
        return newResource(url);
    }
    
    public static Resource newClassPathResource(String resource) {
        return newClassPathResource(resource,true,false);
    }
    
    public static Resource newClassPathResource(String name,boolean useCaches,boolean checkParents) {
        URL url=Resource.class.getResource(name);
        if (url==null)
            url=Loader.getResource(Resource.class,name);
        if (url==null)
            return null;
        return newResource(url,useCaches);
    }
    
    public static boolean isContainedIn (Resource r, Resource containingResource) throws MalformedURLException {
        return r.isContainedIn(containingResource);
    }
    
    @Override
    protected void finalize() {
        close();
    }
    
    public abstract boolean isContainedIn (Resource r) throws MalformedURLException;
    public final void release() {
        close();
    }
    
    @Override
    public abstract void close();
    public abstract boolean exists();
    public abstract boolean isDirectory();
    public abstract long lastModified();
    public abstract long length();
    public abstract URL getURL();
    public URI getURI() {
        try {
            return getURL().toURI();
        }
        
        catch(Exception e) {
            throw new RuntimeException(e);
        }
        
    }
    
    public abstract File getFile() throws IOException;
    public abstract String getName();
    public abstract InputStream getInputStream() throws java.io.IOException;
    public abstract ReadableByteChannel getReadableByteChannel() throws java.io.IOException;
    public abstract boolean delete() throws SecurityException;
    public abstract boolean renameTo( Resource dest) throws SecurityException;
    public abstract String[] list();
    public abstract Resource addPath(String path) throws IOException,MalformedURLException;
    @Override
    public Resource getResource(String path) {
        try {
            return addPath(path);
        }
        
        catch(Exception e) {
            LOG.debug(e);
            return null;
        }
        
    }
    
    public String encode(String uri) {
        return null;
    }
    
    public Object getAssociate() {
        return _associate;
    }
    
    public void setAssociate(Object o) {
        _associate=o;
    }
    
    public URI getAlias() {
        return null;
    }
    
    public String getListHTML(String base, boolean parent) throws IOException {
        return getListHTML(base, parent, null);
    }
    
    public String getListHTML(String base, boolean parent, String query) throws IOException {
        base=URIUtil.canonicalPath(base);
        if (base==null || !isDirectory())
            return null;
        String[] ls = list();
        if (ls == null){
            return null;
        }
        
        boolean sortOrderAscending = true;
        String sortColumn = "N"; 
        if (query != null){
            MultiMap<String> params = new MultiMap<>();
            byte[] rawQuery = query.getBytes(UTF_8);
            UrlEncoded.decodeUtf8To(rawQuery, 0, query.length(), params);
            String paramO = params.getString("O");
            String paramC = params.getString("C");
            if (StringUtil.isNotBlank(paramO)){
                if (paramO.equals("A")){
                    sortOrderAscending = true;
                }
                
                else if (paramO.equals("D")){
                    sortOrderAscending = false;
                }
                
            }
            
            if (StringUtil.isNotBlank(paramC)){
                if (paramC.equals("N") || paramC.equals("M") || paramC.equals("S")){
                    sortColumn = paramC;
                }
                
            }
            
        }
        
        List<Resource> items = new ArrayList<>();
        for (int i=0 ; i< ls.length ; i++){
            Resource item = addPath(ls[i]);
            items.add(item);
        }
        
        if (sortColumn.equals("M")){
            Collections.sort(items, ResourceCollators.byLastModified(sortOrderAscending));
        }
        
        else if (sortColumn.equals("S")){
            Collections.sort(items, ResourceCollators.bySize(sortOrderAscending));
        }
        
        else{
            Collections.sort(items, ResourceCollators.byName(sortOrderAscending));
        }
        
        Arrays.sort(ls);
        String decodedBase = URIUtil.decodePath(base);
        String title = "Directory: " + deTag(decodedBase);
        StringBuilder buf = new StringBuilder(4096);
        buf.append("<!DOCTYPE html>\n");
        buf.append("<html lang=\"en\">\n");
        buf.append("<head>\n");
        buf.append("<meta charset=\"utf-8\">\n");
        buf.append("<link href=\"jetty-dir.css\" rel=\"stylesheet\" />\n");
        buf.append("<title>");
        buf.append(title);
        buf.append("</title>\n");
        buf.append("</head>\n");
        buf.append("<body>\n");
        buf.append("<h1 class=\"title\">").append(title).append("</h1>\n");
        final String ARROW_DOWN = "&nbsp; &#8681;";
        final String ARROW_UP = "&nbsp; &#8679;";
        String arrow;
        String order;
        buf.append("<table class=\"listing\">\n");
        buf.append("<thead>\n");
        arrow = "";
        order = "A";
        if (sortColumn.equals("N")){
            if(sortOrderAscending) {
                order = "D";
                arrow = ARROW_UP;
            }
            
            else{
                order = "A";
                arrow = ARROW_DOWN;
            }
            
        }
        
        buf.append("<tr><th class=\"name\"><a href=\"?C=N&O=").append(order).append("\">");
        buf.append("Name").append(arrow);
        buf.append("</a></th>");
        arrow = "";
        order = "A";
        if (sortColumn.equals("M")){
            if(sortOrderAscending) {
                order = "D";
                arrow = ARROW_UP;
            }
            
            else{
                order = "A";
                arrow = ARROW_DOWN;
            }
            
        }
        
        buf.append("<th class=\"lastmodified\"><a href=\"?C=M&O=").append(order).append("\">");
        buf.append("Last Modified").append(arrow);
        buf.append("</a></th>");
        arrow = "";
        order = "A";
        if (sortColumn.equals("S")){
            if(sortOrderAscending) {
                order = "D";
                arrow = ARROW_UP;
            }
            
            else{
                order = "A";
                arrow = ARROW_DOWN;
            }
            
        }
        
        buf.append("<th class=\"size\"><a href=\"?C=S&O=").append(order).append("\">");
        buf.append("Size").append(arrow);
        buf.append("</a></th></tr>\n");
        buf.append("</thead>\n");
        buf.append("<tbody>\n");
        String encodedBase = hrefEncodeURI(base);
        if (parent){
            buf.append("<tr><td class=\"name\"><a href=\"");
            buf.append(URIUtil.addPaths(encodedBase,"../"));
            buf.append("\">Parent Directory</a></td>");
            buf.append("<td class=\"lastmodified\">-</td>");
            buf.append("<td>-</td>");
            buf.append("</tr>\n");
        }
        
        DateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
        for (Resource item: items){
            String name = item.getName();
            int slashIdx = name.lastIndexOf('/');
            if (slashIdx != -1){
                name = name.substring(slashIdx + 1);
            }
            
            buf.append("<tr><td class=\"name\"><a href=\"");
            String path=URIUtil.addPaths(encodedBase,URIUtil.encodePath(name));
            buf.append(path);
            if (item.isDirectory() && !path.endsWith("/")){
                buf.append(URIUtil.SLASH);
            }
            
            buf.append("\">");
            buf.append(deTag(name));
            if (item.isDirectory() && !path.endsWith("/")){
                buf.append(URIUtil.SLASH);
            }
            
            buf.append("&nbsp;");
            buf.append("</a></td>");
            buf.append("<td class=\"lastmodified\">");
            buf.append(dfmt.format(new Date(item.lastModified())));
            buf.append("</td>");
            buf.append("<td class=\"size\">");
            buf.append(String.format("%,d", item.length()));
            buf.append(" bytes&nbsp;</td></tr>\n");
        }
        
        buf.append("</tbody>\n");
        buf.append("</table>\n");
        buf.append("</body></html>\n");
        return buf.toString();
    }
    
    private static String hrefEncodeURI(String raw)  {
        StringBuffer buf = null;
        loop: for (int i=0;i<raw.length();i++) {
            char c=raw.charAt(i);
            switch(c) {
                case '\'':
                case '"':
                case '<':
                case '>':
                    buf=new StringBuffer(raw.length()<<1);
                    break loop;
            }
            
        }
        
        if (buf==null)
            return raw;
        for (int i=0;i<raw.length();i++){
            char c=raw.charAt(i);       
            switch(c) {
              case '"':
                  buf.append("%22");
                  continue;
              case '\'':
                  buf.append("%27");
                  continue;
              case '<':
                  buf.append("%3C");
                  continue;
              case '>':
                  buf.append("%3E");
                  continue;
              default: buf.append(c);
                  continue;
            }
            
        }
        
        return buf.toString();
    }
    
    private static String deTag(String raw)  {
        return StringUtil.sanitizeXmlString(raw);
    }
    
    public void writeTo(OutputStream out,long start,long count) throws IOException {
        try (InputStream in = getInputStream()) {
            in.skip(start);
            if (count<0)
                IO.copy(in,out);
            else
                IO.copy(in,out,count);
        }
        
    }
        
    public void copyTo(File destination) throws IOException {
        if (destination.exists())
            throw new IllegalArgumentException(destination+" exists");
        try (OutputStream out = new FileOutputStream(destination)) {
            writeTo(out,0,-1);
        }
        
    }
    
    public String getWeakETag() {
        try {
            StringBuilder b = new StringBuilder(32);
            b.append("W/\"");
            String name=getName();
            int length=name.length();
            long lhash=0;
            for (int i=0; i<length;i++)
                lhash=31*lhash+name.charAt(i);
            B64Code.encode(lastModified()^lhash,b);
            B64Code.encode(length()^lhash,b);
            b.append('"');
            return b.toString();
        }
         
        catch (IOException e) {
            throw new RuntimeException(e);
        }
        
    }
    
    public Collection<Resource> getAllResources() {
        try {
            ArrayList<Resource> deep=new ArrayList<>();{
                String[] list=list();
                if (list!=null){
                    for (String i:list){
                        Resource r=addPath(i);
                        if (r.isDirectory())
                            deep.addAll(r.getAllResources());
                        else
                            deep.add(r);
                    }
                    
                }
                
            }
            
            return deep;
        }
        
        catch(Exception e) {
            throw new IllegalStateException(e);
        }
        
    }
    
    public static URL toURL(File file) throws MalformedURLException {
        return file.toURI().toURL();
    }
    
}

