package org.eclipse.jetty.util.resource;
import java.util.Collections;
import java.util.Comparator;
public class ResourceCollators {
    private static Comparator<? super Resource> BY_NAME_ASCENDING = new Comparator<Resource>() {
                @Override
                public int compare(Resource o1, Resource o2) {
                    return o1.getName().compareTo(o2.getName());
                }
                
            };
    private static Comparator<? super Resource> BY_NAME_DESCENDING = Collections.reverseOrder(BY_NAME_ASCENDING);
    private static Comparator<? super Resource> BY_LAST_MODIFIED_ASCENDING = new Comparator<Resource>() {
                @Override
                public int compare(Resource o1, Resource o2) {
                    return (int) (o1.lastModified() - o2.lastModified());
                }
                
            };
    private static Comparator<? super Resource> BY_LAST_MODIFIED_DESCENDING = Collections.reverseOrder(BY_LAST_MODIFIED_ASCENDING);
    private static Comparator<? super Resource> BY_SIZE_ASCENDING = new Comparator<Resource>() {
                @Override
                public int compare(Resource o1, Resource o2) {
                    return (int) (o1.length() - o2.length());
                }
                
            };
    private static Comparator<? super Resource> BY_SIZE_DESCENDING = Collections.reverseOrder(BY_SIZE_ASCENDING);
    public static Comparator<? super Resource> byLastModified(boolean sortOrderAscending) {
        if (sortOrderAscending){
            return BY_LAST_MODIFIED_ASCENDING;
        }
        
        else{
            return BY_LAST_MODIFIED_DESCENDING;
        }
        
    }
    
    public static Comparator<? super Resource> byName(boolean sortOrderAscending) {
        if (sortOrderAscending){
            return BY_NAME_ASCENDING;
        }
        
        else{
            return BY_NAME_DESCENDING;
        }
        
    }
    
    public static Comparator<? super Resource> bySize(boolean sortOrderAscending) {
        if (sortOrderAscending){
            return BY_SIZE_ASCENDING;
        }
        
        else{
            return BY_SIZE_DESCENDING;
        }
        
    }
    
}

