package org.apache.wicket.markup.html;
import java.util.HashSet;
import java.util.Set;
import org.apache.wicket.Application;
import org.apache.wicket.util.lang.Packages;
import org.apache.wicket.util.string.Strings;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class PackageResourceGuard implements IPackageResourceGuard {
	 private static final Logger log = LoggerFactory.getLogger(PackageResourceGuard.class);
	 private Set<String> blockedExtensions = new HashSet<String>(4);
	 private Set<String> blockedFiles = new HashSet<String>(4);
	 public PackageResourceGuard() {
		blockedExtensions.add("properties");
		blockedExtensions.add("class");
		blockedExtensions.add("java");
		blockedFiles.add("applicationContext.xml");
		blockedFiles.add("log4j.xml");
	}
	
	 public boolean accept(Class<?> scope, String path) {
		String absolutePath = Packages.absolutePath(scope, path);
		return acceptAbsolutePath(absolutePath);
	}
	
	 protected boolean acceptAbsolutePath(String path) {
		int ixExtension = path.lastIndexOf('.');
		int len = path.length();
		final String ext;
		if (ixExtension <= 0 || ixExtension == len || (path.lastIndexOf('/') + 1) == ixExtension){
			ext = null;
		}
		
		else{
			ext = path.substring(ixExtension + 1).toLowerCase().trim();
		}
		
		if ("html".equals(ext) && getClass().getClassLoader().getResource(path.replaceAll("\\.html", ".class")) != null){
			log.warn("Access denied to shared (static) resource because it is a Wicket markup file: " + path);
			return false;
		}
		
		if (acceptExtension(ext) == false){
			log.warn("Access denied to shared (static) resource because of the file extension: " + path);
			return false;
		}
		
		String filename = Strings.lastPathComponent(path, '/');
		if (acceptFile(filename) == false){
			log.warn("Access denied to shared (static) resource because of the file name: " + path);
			return false;
		}
		
		 if (Strings.isEmpty(Application.get().getResourceSettings().getParentFolderPlaceholder())){
			if (path.contains("..")){
				log.warn("Access to parent directories via '..' is by default disabled for shared resources: " + path);
				return false;
			}
			
		}
		
		return true;
	}
	
	 protected boolean acceptExtension(String extension) {
		return (!blockedExtensions.contains(extension));
	}
	
	 protected boolean acceptFile(String file) {
		if (file != null){
			file = file.trim();
		}
		
		return (!blockedFiles.contains(file));
	}
	
	 protected final Set<String> getBlockedExtensions() {
		return blockedExtensions;
	}
	
	 protected final Set<String> getBlockedFiles() {
		return blockedFiles;
	}
	
	 protected final void setBlockedExtensions(Set<String> blockedExtensions) {
		this.blockedExtensions = blockedExtensions;
	}
	
	 protected final void setBlockedFiles(Set<String> blockedFiles) {
		this.blockedFiles = blockedFiles;
	}
	
}

