package cn.hutool.core.text.finder;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
public class PatternFinder extends TextFinder {
	private static final long serialVersionUID = 1L;
	private final Pattern pattern;
	private Matcher matcher;
	 public PatternFinder(String regex, boolean caseInsensitive) {
		this(Pattern.compile(regex, caseInsensitive ? Pattern.CASE_INSENSITIVE : 0));
	}
	
	 public PatternFinder(Pattern pattern) {
		this.pattern = pattern;
	}
	
	@Override
	public TextFinder setText(CharSequence text) {
		this.matcher = pattern.matcher(text);
		return super.setText(text);
	}
	
	@Override
	public TextFinder setNegative(boolean negative) {
		throw new UnsupportedOperationException("Negative is invalid for Pattern!");
	}
	
	@Override
	public int start(int from) {
		if (matcher.find(from)) {
			final int end = matcher.end();
			 if(end <= getValidEndIndex()){
				final int start = matcher.start();
				if(start == end){
					 return INDEX_NOT_FOUND;
				}
				
				return start;
			}
			
		}
		
		return INDEX_NOT_FOUND;
	}
	
	@Override
	public int end(int start) {
		final int end = matcher.end();
		final int limit;
		if(endIndex < 0){
			limit = text.length();
		}
		else{
			limit = Math.min(endIndex, text.length());
		}
		
		return end <= limit ? end : INDEX_NOT_FOUND;
	}
	
	@Override
	public PatternFinder reset() {
		this.matcher.reset();
		return this;
	}
	
}

