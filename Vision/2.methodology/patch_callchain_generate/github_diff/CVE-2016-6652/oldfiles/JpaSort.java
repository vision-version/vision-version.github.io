package org.springframework.data.jpa.domain;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import javax.persistence.metamodel.Attribute;
import javax.persistence.metamodel.PluralAttribute;
import org.springframework.data.domain.Sort;
import org.springframework.util.Assert;
public class JpaSort extends Sort {
	private static final long serialVersionUID = 1L;
	 public JpaSort(Attribute<?, ?>... attributes) {
		this(DEFAULT_DIRECTION, attributes);
	}
	
	 public JpaSort(JpaSort.Path<?, ?>... paths) {
		this(DEFAULT_DIRECTION, paths);
	}
	
	 public JpaSort(Direction direction, Attribute<?, ?>... attributes) {
		this(direction, paths(attributes));
	}
	
	 public JpaSort(Direction direction, Path<?, ?>... paths) {
		this(direction, Arrays.asList(paths));
	}
	
	private JpaSort(Direction direction, List<Path<?, ?>> paths) {
		this(Collections.<Order> emptyList(), direction, paths);
	}
	
	private JpaSort(List<Order> orders, Direction direction, List<Path<?, ?>> paths) {
		super(combine(orders, direction, paths));
	}
	
	 public JpaSort and(Direction direction, Attribute<?, ?>... attributes) {
		Assert.notNull(attributes, "Attributes must not be null!");
		return and(direction, paths(attributes));
	}
	
	 public JpaSort and(Direction direction, Path<?, ?>... paths) {
		Assert.notNull(paths, "Paths must not be null!");
		List<Order> existing = new ArrayList<Order>();
		for (Order order : this) {
			existing.add(order);
		}
		
		return new JpaSort(existing, direction, Arrays.asList(paths));
	}
	
	 private static Path<?, ?>[] paths(Attribute<?, ?>[] attributes) {
		Assert.notNull(attributes, "Attributes must not be null!");
		Assert.isTrue(attributes.length > 0, "Attributes must not be empty");
		Path<?, ?>[] paths = new Path[attributes.length];
		for (int i = 0; i < attributes.length; i++) {
			paths[i] = path(attributes[i]);
		}
		
		return paths;
	}
	
	private static List<Order> combine(List<Order> orders, Direction direction, List<Path<?, ?>> paths) {
		List<Order> result = new ArrayList<Sort.Order>(orders);
		for (Path<?, ?> path : paths) {
			result.add(new Order(direction, path.toString()));
		}
		
		return result;
	}
	
	 @SuppressWarnings("unchecked")
	public static <A extends Attribute<T, S>, T, S> Path<T, S> path(A attribute) {
		Assert.notNull(attribute, "Attribute must not be null!");
		return new Path<T, S>(Arrays.asList(attribute));
	}
	
	 @SuppressWarnings("unchecked")
	public static <P extends PluralAttribute<T, ?, S>, T, S> Path<T, S> path(P attribute) {
		Assert.notNull(attribute, "Attribute must not be null!");
		return new Path<T, S>(Arrays.asList(attribute));
	}
	
	 public static class Path<T, S> {
		private final Collection<Attribute<?, ?>> attributes;
		private Path(List<? extends Attribute<?, ?>> attributes) {
			this.attributes = Collections.unmodifiableList(attributes);
		}
		
		 public <A extends Attribute<S, U>, U> Path<S, U> dot(A attribute) {
			return new Path<S, U>(add(attribute));
		}
		
		 public <P extends PluralAttribute<S, ?, U>, U> Path<S, U> dot(P attribute) {
			return new Path<S, U>(add(attribute));
		}
		
		private List<Attribute<?, ?>> add(Attribute<?, ?> attribute) {
			Assert.notNull(attribute, "Attribute must not be null!");
			List<Attribute<?, ?>> newAttributes = new ArrayList<Attribute<?, ?>>(attributes.size() + 1);
			newAttributes.addAll(attributes);
			newAttributes.add(attribute);
			return newAttributes;
		}
		
		 @Override
		public String toString() {
			StringBuilder builder = new StringBuilder();
			for (Attribute<?, ?> attribute : attributes) {
				builder.append(attribute.getName()).append(".");
			}
			
			return builder.length() == 0 ? "" : builder.substring(0, builder.lastIndexOf("."));
		}
		
	}
	
}

