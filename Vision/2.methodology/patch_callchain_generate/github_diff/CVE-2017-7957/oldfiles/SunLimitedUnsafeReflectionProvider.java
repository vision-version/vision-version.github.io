package com.thoughtworks.xstream.converters.reflection;
import java.lang.reflect.Field;
import com.thoughtworks.xstream.converters.ConversionException;
import com.thoughtworks.xstream.converters.ErrorWritingException;
import sun.misc.Unsafe;
public class SunLimitedUnsafeReflectionProvider extends PureJavaReflectionProvider {
    protected static final Unsafe unsafe;
    protected static final Exception exception;
    static {
        Unsafe u = null;
        Exception ex = null;
        try {
            final Field unsafeField = Unsafe.class.getDeclaredField("theUnsafe");
            unsafeField.setAccessible(true);
            u = (Unsafe)unsafeField.get(null);
        }
         catch (final SecurityException e) {
            ex = e;
        }
         catch (final NoSuchFieldException e) {
            ex = e;
        }
         catch (final IllegalArgumentException e) {
            ex = e;
        }
         catch (final IllegalAccessException e) {
            ex = e;
        }
        
        exception = ex;
        unsafe = u;
    }
    
    public SunLimitedUnsafeReflectionProvider() {
        super();
    }
    
    public SunLimitedUnsafeReflectionProvider(final FieldDictionary fieldDictionary) {
        super(fieldDictionary);
    }
    
    @Override
    public Object newInstance(final Class<?> type) {
        if (exception != null) {
            final ObjectAccessException ex = new ObjectAccessException("Cannot construct type", exception);
            ex.add("construction-type", type.getName());
            throw ex;
        }
        
        ErrorWritingException ex = null;
        try {
            return unsafe.allocateInstance(type);
        }
         catch (final SecurityException e) {
            ex = new ObjectAccessException("Cannot construct type", e);
        }
         catch (final InstantiationException e) {
            ex = new ConversionException("Cannot construct type", e);
        }
         catch (final IllegalArgumentException e) {
            ex = new ObjectAccessException("Cannot construct type", e);
        }
        
        ex.add("construction-type", type.getName());
        throw ex;
    }
    
    @Override
    protected void validateFieldAccess(final Field field) {
    }
    
    private Object readResolve() {
        init();
        return this;
    }
    
}

