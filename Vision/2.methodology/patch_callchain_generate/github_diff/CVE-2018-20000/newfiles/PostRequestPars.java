package org.bedework.webdav.servlet.common;
import org.bedework.util.misc.Util;
import org.bedework.webdav.servlet.shared.WebdavException;
import org.bedework.webdav.servlet.shared.WebdavNsIntf;
import org.w3c.dom.Document;
import java.io.Reader;
import javax.servlet.http.HttpServletRequest;
public class PostRequestPars implements SecureXml {
  private final HttpServletRequest req;
  private final WebdavNsIntf intf;
  private final String method;
  private final String resourceUri;
  private String noPrefixResourceUri;
  private final String acceptType;
  private String contentType;
  private String[] contentTypePars;
  private Reader reqRdr;
  private Document xmlDoc;
  protected boolean addMember;
  protected boolean getTheReader = true;
  public PostRequestPars(final HttpServletRequest req, final WebdavNsIntf intf, final String resourceUri) throws WebdavException {
    this.req = req;
    this.intf = intf;
    this.resourceUri = resourceUri;
    method = req.getMethod();
    acceptType = req.getHeader("ACCEPT");
    contentType = req.getContentType();
    if (contentType != null) {
      contentTypePars = contentType.split(";");
    }
    
  }
  
  public boolean processRequest() throws WebdavException {
    final String addMemberSuffix = intf.getAddMemberSuffix();
    if (addMemberSuffix == null) {
      return false;
    }
    
    final String reqUri = req.getRequestURI();
    if (reqUri == null) {
      return false;
    }
    
    final int pos = reqUri.lastIndexOf("/");
    if ((pos > 0) && reqUri.regionMatches(pos + 1, addMemberSuffix, 0, addMemberSuffix.length())) {
      addMember = true;
      return true;
    }
    
    return false;
  }
  
  public boolean processXml() throws WebdavException {
    if (!isAppXml()) {
      return false;
    }
    
    try {
      reqRdr = req.getReader();
    }
     catch (final Throwable t) {
      throw new WebdavException(t);
    }
    
    xmlDoc = parseXmlSafely(req.getContentLength(), reqRdr);
    getTheReader = false;
    return true;
  }
  
  public Reader getReader() throws WebdavException {
    if (!getTheReader) {
      return null;
    }
    
    if (reqRdr != null) {
      return reqRdr;
    }
    
    try {
      reqRdr = req.getReader();
    }
     catch (final Throwable t) {
      throw new WebdavException(t);
    }
    
    return reqRdr;
  }
  
  public HttpServletRequest getReq() {
    return req;
  }
  
  public String getMethod() {
    return method;
  }
  
  public String getResourceUri() {
    return resourceUri;
  }
  
  public String getNoPrefixResourceUri() {
    return noPrefixResourceUri;
  }
  
  public String getAcceptType() {
    return acceptType;
  }
  
  public String getContentType() {
    return contentType;
  }
  
  public String[] getContentTypePars() {
    return contentTypePars;
  }
  
  public Document getXmlDoc() {
    return xmlDoc;
  }
  
  public boolean isAddMember() {
    return addMember;
  }
  
  public boolean isAppXml() {
    return contentTypePars != null && (contentTypePars[0].equals("application/xml") || contentTypePars[0].equals("text/xml"));
  }
  
  public void setContentType(final String val) {
    contentType = val;
  }
  
  protected boolean checkUri(final String specialUri) {
    if (specialUri == null) {
      return false;
    }
    
    final String toMatch = Util.buildPath(true, specialUri);
    final String prefix;
    final int pos = resourceUri.indexOf("/", 1);
    if (pos < 0) {
      prefix = noParameters(resourceUri);
    }
     else {
      prefix = resourceUri.substring(0, pos);
    }
    
    if (!toMatch.equals(Util.buildPath(true, prefix))) {
      noPrefixResourceUri = noParameters(resourceUri);
      return false;
    }
    
    if (pos < 0) {
      noPrefixResourceUri = "";
    }
     else {
      noPrefixResourceUri = noParameters(resourceUri.substring(pos));
    }
    
    return true;
  }
  
  private String noParameters(String uri) {
    final int pos = uri.indexOf("?");
    if (pos > 0) {
      uri = uri.substring(0, pos);
    }
    
    if (uri.equals("/")) {
      uri = "";
    }
    
    return uri;
  }
  
}
