package com.google.crypto.tink;
import com.google.crypto.tink.proto.KeyStatusType;
import com.google.crypto.tink.proto.Keyset;
import com.google.crypto.tink.proto.OutputPrefixType;
import com.google.crypto.tink.subtle.Hex;
import java.security.GeneralSecurityException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;
public final class PrimitiveSet<P> {
  public static final class Entry<P> {
    private final P primitive;
    private final byte[] identifier;
    private final KeyStatusType status;
    private final OutputPrefixType outputPrefixType;
    private final int keyId;
    Entry( P primitive, final byte[] identifier, KeyStatusType status, OutputPrefixType outputPrefixType, int keyId) {
      this.primitive = primitive;
      this.identifier = Arrays.copyOf(identifier, identifier.length);
      this.status = status;
      this.outputPrefixType = outputPrefixType;
      this.keyId = keyId;
    }
    
    public P getPrimitive() {
      return this.primitive;
    }
    
    public KeyStatusType getStatus() {
      return status;
    }
    
    public OutputPrefixType getOutputPrefixType() {
      return outputPrefixType;
    }
    
    public final byte[] getIdentifier() {
      if (identifier == null) {
        return null;
      }
       else {
        return Arrays.copyOf(identifier, identifier.length);
      }
      
    }
    
    public int getKeyId() {
      return keyId;
    }
    
  }
  
  public Entry<P> getPrimary() {
    return primary;
  }
  
  public List<Entry<P>> getRawPrimitives() {
    return getPrimitive(CryptoFormat.RAW_PREFIX);
  }
  
  public List<Entry<P>> getPrimitive(final byte[] identifier) {
    List<Entry<P>> found = primitives.get(new Prefix(identifier));
    return found != null ? found : Collections.<Entry<P>>emptyList();
  }
  
  protected List<Entry<P>> getPrimitive(Keyset.Key key) throws GeneralSecurityException {
    return getPrimitive(CryptoFormat.getOutputPrefix(key));
  }
  
  public Collection<List<Entry<P>>> getAll() {
    return primitives.values();
  }
  
  private final ConcurrentMap<Prefix, List<Entry<P>>> primitives = new ConcurrentHashMap<Prefix, List<Entry<P>>>();
  private Entry<P> primary;
  private final Class<P> primitiveClass;
  private PrimitiveSet(Class<P> primitiveClass) {
    this.primitiveClass = primitiveClass;
  }
  
  public static <P> PrimitiveSet<P> newPrimitiveSet(Class<P> primitiveClass) {
    return new PrimitiveSet<P>(primitiveClass);
  }
  
  public void setPrimary(final Entry<P> primary) {
    if (primary == null) {
      throw new IllegalArgumentException("the primary entry must be non-null");
    }
    
    if (primary.getStatus() != KeyStatusType.ENABLED) {
      throw new IllegalArgumentException("the primary entry has to be ENABLED");
    }
    
    List<Entry<P>> entries = getPrimitive(primary.getIdentifier());
    if (entries.isEmpty()) {
      throw new IllegalArgumentException( "the primary entry cannot be set to an entry which is not held by this primitive set");
    }
    
    this.primary = primary;
  }
  
  public Entry<P> addPrimitive(final P primitive, Keyset.Key key) throws GeneralSecurityException {
    if (key.getStatus() != KeyStatusType.ENABLED) {
      throw new GeneralSecurityException("only ENABLED key is allowed");
    }
    
    Entry<P> entry = new Entry<P>( primitive, CryptoFormat.getOutputPrefix(key), key.getStatus(), key.getOutputPrefixType(), key.getKeyId());
    List<Entry<P>> list = new ArrayList<Entry<P>>();
    list.add(entry);
    Prefix identifier = new Prefix(entry.getIdentifier());
    List<Entry<P>> existing = primitives.put(identifier, Collections.unmodifiableList(list));
    if (existing != null) {
      List<Entry<P>> newList = new ArrayList<Entry<P>>();
      newList.addAll(existing);
      newList.add(entry);
      primitives.put(identifier, Collections.unmodifiableList(newList));
    }
    
    return entry;
  }
  
  public Class<P> getPrimitiveClass() {
    return primitiveClass;
  }
  
  private static class Prefix implements Comparable<Prefix> {
    private final byte[] prefix;
    private Prefix(byte[] prefix) {
      this.prefix = Arrays.copyOf(prefix, prefix.length);
    }
    
    @Override
    public int hashCode() {
      return Arrays.hashCode(prefix);
    }
    
    @Override
    public boolean equals(Object o) {
      if (!(o instanceof Prefix)) {
        return false;
      }
      
      Prefix other = (Prefix) o;
      return Arrays.equals(prefix, other.prefix);
    }
    
    @Override
    public int compareTo(Prefix o) {
      if (prefix.length != o.prefix.length) {
        return prefix.length - o.prefix.length;
      }
      
      for (int i = 0; i < prefix.length; i++) {
        if (prefix[i] != o.prefix[i]) {
          return prefix[i] - o.prefix[i];
        }
        
      }
      
      return 0;
    }
    
    @Override
    public String toString() {
      return Hex.encode(prefix);
    }
    
  }
  
}

