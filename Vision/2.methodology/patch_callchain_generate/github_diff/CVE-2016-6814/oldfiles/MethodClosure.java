package org.codehaus.groovy.runtime;
import groovy.lang.Closure;
import groovy.lang.MetaMethod;
import java.util.List;
public class MethodClosure extends Closure {
    public static boolean ALLOW_RESOLVE = false;
    private static final Class[] EMPTY_CLASS_ARRAY = new Class[0];
    private String method;
    public MethodClosure(Object owner, String method) {
        super(owner);
        this.method = method;
        final Class clazz = owner.getClass()==Class.class?(Class) owner:owner.getClass();
        maximumNumberOfParameters = 0;
        parameterTypes = EMPTY_CLASS_ARRAY;
        List<MetaMethod> methods = InvokerHelper.getMetaClass(clazz).respondsTo(owner, method);
        for(MetaMethod m : methods) {
            if (m.getParameterTypes().length > maximumNumberOfParameters) {
                Class[] pt = m.getNativeParameterTypes();
                maximumNumberOfParameters = pt.length;
                parameterTypes = pt;
            }
            
        }
        
    }
    
    public String getMethod() {
        return method;
    }
    
    protected Object doCall(Object arguments) {
        return InvokerHelper.invokeMethod(getOwner(), method, arguments);
    }
    
    private Object readResolve() {
        if (ALLOW_RESOLVE) {
            return this;
        }
        
        throw new UnsupportedOperationException();
    }
    
    public Object getProperty(String property) {
        if ("method".equals(property)) {
            return getMethod();
        }
         else  return super.getProperty(property);        
    }
    
}

