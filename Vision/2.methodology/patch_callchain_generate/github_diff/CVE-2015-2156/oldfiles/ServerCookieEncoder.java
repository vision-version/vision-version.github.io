package org.jboss.netty.handler.codec.http.cookie;
import static org.jboss.netty.handler.codec.http.cookie.CookieUtil.*;
import org.jboss.netty.handler.codec.http.HttpHeaderDateFormat;
import org.jboss.netty.handler.codec.http.HttpRequest;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.List;
public final class ServerCookieEncoder extends CookieEncoder {
    public static final ServerCookieEncoder STRICT = new ServerCookieEncoder(true);
    public static final ServerCookieEncoder LAX = new ServerCookieEncoder(false);
    private ServerCookieEncoder(boolean strict) {
        super(strict);
    }
    
    public String encode(String name, String value) {
        return encode(new DefaultCookie(name, value));
    }
    
    public String encode(Cookie cookie) {
        if (cookie == null) {
            throw new NullPointerException("cookie");
        }
        
        final String name = cookie.name();
        final String value = cookie.value() != null ? cookie.value() : "";
        validateCookie(name, value);
        StringBuilder buf = new StringBuilder();
        if (cookie.wrap()) {
            addQuoted(buf, name, value);
        }
         else {
            add(buf, name, value);
        }
        
        if (cookie.maxAge() != Long.MIN_VALUE) {
            add(buf, CookieHeaderNames.MAX_AGE, cookie.maxAge());
            Date expires = new Date(cookie.maxAge() * 1000 + System.currentTimeMillis());
            add(buf, CookieHeaderNames.EXPIRES, HttpHeaderDateFormat.get().format(expires));
        }
        
        if (cookie.path() != null) {
            add(buf, CookieHeaderNames.PATH, cookie.path());
        }
        
        if (cookie.domain() != null) {
            add(buf, CookieHeaderNames.DOMAIN, cookie.domain());
        }
        
        if (cookie.isSecure()) {
            add(buf, CookieHeaderNames.SECURE);
        }
        
        if (cookie.isHttpOnly()) {
            add(buf, CookieHeaderNames.HTTPONLY);
        }
        
        return stripTrailingSeparator(buf);
    }
    
    public List<String> encode(Cookie... cookies) {
        if (cookies == null) {
            throw new NullPointerException("cookies");
        }
        
        if (cookies.length == 0) {
            return Collections.emptyList();
        }
        
        List<String> encoded = new ArrayList<String>(cookies.length);
        for (Cookie c : cookies) {
            if (c == null) {
                break;
            }
            
            encoded.add(encode(c));
        }
        
        return encoded;
    }
    
    public List<String> encode(Collection<? extends Cookie> cookies) {
        if (cookies == null) {
            throw new NullPointerException("cookies");
        }
        
        if (cookies.isEmpty()) {
            return Collections.emptyList();
        }
        
        List<String> encoded = new ArrayList<String>(cookies.size());
        for (Cookie c : cookies) {
            if (c == null) {
                break;
            }
            
            encoded.add(encode(c));
        }
        
        return encoded;
    }
    
    public List<String> encode(Iterable<? extends Cookie> cookies) {
        if (cookies == null) {
            throw new NullPointerException("cookies");
        }
        
        if (cookies.iterator().hasNext()) {
            return Collections.emptyList();
        }
        
        List<String> encoded = new ArrayList<String>();
        for (Cookie c : cookies) {
            if (c == null) {
                break;
            }
            
            encoded.add(encode(c));
        }
        
        return encoded;
    }
    
}

