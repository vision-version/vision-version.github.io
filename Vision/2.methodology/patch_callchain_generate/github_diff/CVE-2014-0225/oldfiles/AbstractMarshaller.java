package org.springframework.oxm.support;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.stream.XMLEventReader;
import javax.xml.stream.XMLEventWriter;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.dom.DOMResult;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.sax.SAXResult;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stax.StAXSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.ContentHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.LexicalHandler;
import org.xml.sax.helpers.XMLReaderFactory;
import org.springframework.oxm.Marshaller;
import org.springframework.oxm.Unmarshaller;
import org.springframework.oxm.UnmarshallingFailureException;
import org.springframework.oxm.XmlMappingException;
import org.springframework.util.Assert;
import org.springframework.util.xml.StaxUtils;
public abstract class AbstractMarshaller implements Marshaller, Unmarshaller {
	 protected final Log logger = LogFactory.getLog(getClass());
	private boolean processExternalEntities = false;
	private DocumentBuilderFactory documentBuilderFactory;
	private final Object documentBuilderFactoryMonitor = new Object();
	 public void setProcessExternalEntities(boolean processExternalEntities) {
		this.processExternalEntities = processExternalEntities;
	}
	
	 public boolean isProcessExternalEntities() {
		return this.processExternalEntities;
	}
	
	 protected Document buildDocument() {
		try {
			synchronized (this.documentBuilderFactoryMonitor) {
				if (this.documentBuilderFactory == null) {
					this.documentBuilderFactory = createDocumentBuilderFactory();
				}
				
			}
			
			DocumentBuilder documentBuilder = createDocumentBuilder(this.documentBuilderFactory);
			return documentBuilder.newDocument();
		}
		
		catch (ParserConfigurationException ex) {
			throw new UnmarshallingFailureException("Could not create document placeholder: " + ex.getMessage(), ex);
		}
		
	}
	
	 protected DocumentBuilderFactory createDocumentBuilderFactory() throws ParserConfigurationException {
		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
		factory.setValidating(false);
		factory.setNamespaceAware(true);
		return factory;
	}
	
	 protected DocumentBuilder createDocumentBuilder(DocumentBuilderFactory factory) throws ParserConfigurationException {
		return factory.newDocumentBuilder();
	}
	
	 protected XMLReader createXmlReader() throws SAXException {
		XMLReader xmlReader = XMLReaderFactory.createXMLReader();
		xmlReader.setFeature("http://xml.org/sax/features/external-general-entities", isProcessExternalEntities());
		return xmlReader;
	}
	
	 protected String getDefaultEncoding() {
		return null;
	}
	
	 @Override
	public final void marshal(Object graph, Result result) throws IOException, XmlMappingException {
		if (result instanceof DOMResult) {
			marshalDomResult(graph, (DOMResult) result);
		}
		
		else if (StaxUtils.isStaxResult(result)) {
			marshalStaxResult(graph, result);
		}
		
		else if (result instanceof SAXResult) {
			marshalSaxResult(graph, (SAXResult) result);
		}
		
		else if (result instanceof StreamResult) {
			marshalStreamResult(graph, (StreamResult) result);
		}
		
		else {
			throw new IllegalArgumentException("Unknown Result type: " + result.getClass());
		}
		
	}
	
	 protected void marshalDomResult(Object graph, DOMResult domResult) throws XmlMappingException {
		if (domResult.getNode() == null) {
			domResult.setNode(buildDocument());
		}
		
		marshalDomNode(graph, domResult.getNode());
	}
	
	 protected void marshalStaxResult(Object graph, Result staxResult) throws XmlMappingException {
		XMLStreamWriter streamWriter = StaxUtils.getXMLStreamWriter(staxResult);
		if (streamWriter != null) {
			marshalXmlStreamWriter(graph, streamWriter);
		}
		
		else {
			XMLEventWriter eventWriter = StaxUtils.getXMLEventWriter(staxResult);
			if (eventWriter != null) {
				marshalXmlEventWriter(graph, eventWriter);
			}
			
			else {
				throw new IllegalArgumentException("StaxResult contains neither XMLStreamWriter nor XMLEventConsumer");
			}
			
		}
		
	}
	
	 protected void marshalSaxResult(Object graph, SAXResult saxResult) throws XmlMappingException {
		ContentHandler contentHandler = saxResult.getHandler();
		Assert.notNull(contentHandler, "ContentHandler not set on SAXResult");
		LexicalHandler lexicalHandler = saxResult.getLexicalHandler();
		marshalSaxHandlers(graph, contentHandler, lexicalHandler);
	}
	
	 protected void marshalStreamResult(Object graph, StreamResult streamResult) throws XmlMappingException, IOException {
		if (streamResult.getOutputStream() != null) {
			marshalOutputStream(graph, streamResult.getOutputStream());
		}
		
		else if (streamResult.getWriter() != null) {
			marshalWriter(graph, streamResult.getWriter());
		}
		
		else {
			throw new IllegalArgumentException("StreamResult contains neither OutputStream nor Writer");
		}
		
	}
	
	 @Override
	public final Object unmarshal(Source source) throws IOException, XmlMappingException {
		if (source instanceof DOMSource) {
			return unmarshalDomSource((DOMSource) source);
		}
		
		else if (StaxUtils.isStaxSource(source)) {
			return unmarshalStaxSource(source);
		}
		
		else if (source instanceof SAXSource) {
			return unmarshalSaxSource((SAXSource) source);
		}
		
		else if (source instanceof StreamSource) {
			return unmarshalStreamSource((StreamSource) source);
		}
		
		else {
			throw new IllegalArgumentException("Unknown Source type: " + source.getClass());
		}
		
	}
	
	 protected Object unmarshalDomSource(DOMSource domSource) throws XmlMappingException {
		if (domSource.getNode() == null) {
			domSource.setNode(buildDocument());
		}
		
		return unmarshalDomNode(domSource.getNode());
	}
	
	 protected Object unmarshalStaxSource(Source staxSource) throws XmlMappingException {
		XMLStreamReader streamReader = StaxUtils.getXMLStreamReader(staxSource);
		if (streamReader != null) {
			return unmarshalXmlStreamReader(streamReader);
		}
		
		else {
			XMLEventReader eventReader = StaxUtils.getXMLEventReader(staxSource);
			if (eventReader != null) {
				return unmarshalXmlEventReader(eventReader);
			}
			
			else {
				throw new IllegalArgumentException("StaxSource contains neither XMLStreamReader nor XMLEventReader");
			}
			
		}
		
	}
	
	 protected Object unmarshalSaxSource(SAXSource saxSource) throws XmlMappingException, IOException {
		if (saxSource.getXMLReader() == null) {
			try {
				saxSource.setXMLReader(createXmlReader());
			}
			
			catch (SAXException ex) {
				throw new UnmarshallingFailureException("Could not create XMLReader for SAXSource", ex);
			}
			
		}
		
		if (saxSource.getInputSource() == null) {
			saxSource.setInputSource(new InputSource());
		}
		
		return unmarshalSaxReader(saxSource.getXMLReader(), saxSource.getInputSource());
	}
	
	 protected Object unmarshalStreamSource(StreamSource streamSource) throws XmlMappingException, IOException {
		if (streamSource.getInputStream() != null) {
			if (isProcessExternalEntities()) {
				return unmarshalInputStream(streamSource.getInputStream());
			}
			
			else {
				InputSource inputSource = new InputSource(streamSource.getInputStream());
				inputSource.setEncoding(getDefaultEncoding());
				return unmarshalSaxSource(new SAXSource(inputSource));
			}
			
		}
		
		else if (streamSource.getReader() != null) {
			if (isProcessExternalEntities()) {
				return unmarshalReader(streamSource.getReader());
			}
			
			else {
				return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getReader())));
			}
			
		}
		
		else {
			return unmarshalSaxSource(new SAXSource(new InputSource(streamSource.getSystemId())));
		}
		
	}
	
	 protected abstract void marshalDomNode(Object graph, Node node) throws XmlMappingException;
	 protected abstract void marshalXmlEventWriter(Object graph, XMLEventWriter eventWriter) throws XmlMappingException;
	 protected abstract void marshalXmlStreamWriter(Object graph, XMLStreamWriter streamWriter) throws XmlMappingException;
	 protected abstract void marshalSaxHandlers( Object graph, ContentHandler contentHandler, LexicalHandler lexicalHandler) throws XmlMappingException;
	 protected abstract void marshalOutputStream(Object graph, OutputStream outputStream) throws XmlMappingException, IOException;
	 protected abstract void marshalWriter(Object graph, Writer writer) throws XmlMappingException, IOException;
	 protected abstract Object unmarshalDomNode(Node node) throws XmlMappingException;
	 protected abstract Object unmarshalXmlEventReader(XMLEventReader eventReader) throws XmlMappingException;
	 protected abstract Object unmarshalXmlStreamReader(XMLStreamReader streamReader) throws XmlMappingException;
	 protected abstract Object unmarshalSaxReader(XMLReader xmlReader, InputSource inputSource) throws XmlMappingException, IOException;
	 protected abstract Object unmarshalInputStream(InputStream inputStream) throws XmlMappingException, IOException;
	 protected abstract Object unmarshalReader(Reader reader) throws XmlMappingException, IOException;
}

