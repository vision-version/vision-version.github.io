package org.apache.commons.beanutils;
import java.beans.IndexedPropertyDescriptor;
import java.beans.IntrospectionException;
import java.beans.Introspector;
import java.beans.PropertyDescriptor;
import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.concurrent.CopyOnWriteArrayList;
import org.apache.commons.beanutils.expression.DefaultResolver;
import org.apache.commons.beanutils.expression.Resolver;
import org.apache.commons.collections.FastHashMap;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
public class PropertyUtilsBean {
    private Resolver resolver = new DefaultResolver();
    protected static PropertyUtilsBean getInstance() {
        return BeanUtilsBean.getInstance().getPropertyUtils();
    }
    
    private WeakFastHashMap<Class<?>, BeanIntrospectionData> descriptorsCache = null;
    private WeakFastHashMap<Class<?>, FastHashMap> mappedDescriptorsCache = null;
    private static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];
    private final Log log = LogFactory.getLog(PropertyUtils.class);
    private final List<BeanIntrospector> introspectors;
    public PropertyUtilsBean() {
        descriptorsCache = new WeakFastHashMap<Class<?>, BeanIntrospectionData>();
        descriptorsCache.setFast(true);
        mappedDescriptorsCache = new WeakFastHashMap<Class<?>, FastHashMap>();
        mappedDescriptorsCache.setFast(true);
        introspectors = new CopyOnWriteArrayList<BeanIntrospector>();
        resetBeanIntrospectors();
    }
    
    public Resolver getResolver() {
        return resolver;
    }
    
    public void setResolver(final Resolver resolver) {
        if (resolver == null) {
            this.resolver = new DefaultResolver();
        }
         else {
            this.resolver = resolver;
        }
        
    }
    
    public final void resetBeanIntrospectors() {
        introspectors.clear();
        introspectors.add(DefaultBeanIntrospector.INSTANCE);
        introspectors.add(SuppressPropertiesBeanIntrospector.SUPPRESS_CLASS);
    }
    
    public void addBeanIntrospector(final BeanIntrospector introspector) {
        if (introspector == null) {
            throw new IllegalArgumentException( "BeanIntrospector must not be null!");
        }
        
        introspectors.add(introspector);
    }
    
    public boolean removeBeanIntrospector(final BeanIntrospector introspector) {
        return introspectors.remove(introspector);
    }
    
    public void clearDescriptors() {
        descriptorsCache.clear();
        mappedDescriptorsCache.clear();
        Introspector.flushCaches();
    }
    
    public void copyProperties(final Object dest, final Object orig) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (dest == null) {
            throw new IllegalArgumentException ("No destination bean specified");
        }
        
        if (orig == null) {
            throw new IllegalArgumentException("No origin bean specified");
        }
        
        if (orig instanceof DynaBean) {
            final DynaProperty[] origDescriptors = ((DynaBean) orig).getDynaClass().getDynaProperties();
            for (DynaProperty origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = ((DynaBean) orig).get(name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        }
                         else {
                                setSimpleProperty(dest, name, value);
                        }
                        
                    }
                     catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug("Error writing to '" + name + "' on class '" + dest.getClass() + "'", e);
                        }
                        
                    }
                    
                }
                
            }
            
        }
         else if (orig instanceof Map) {
            final Iterator<?> entries = ((Map<?, ?>) orig).entrySet().iterator();
            while (entries.hasNext()) {
                final Map.Entry<?, ?> entry = (Entry<?, ?>) entries.next();
                final String name = (String)entry.getKey();
                if (isWriteable(dest, name)) {
                    try {
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, entry.getValue());
                        }
                         else {
                            setSimpleProperty(dest, name, entry.getValue());
                        }
                        
                    }
                     catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug("Error writing to '" + name + "' on class '" + dest.getClass() + "'", e);
                        }
                        
                    }
                    
                }
                
            }
            
        }
         else  {
            final PropertyDescriptor[] origDescriptors = getPropertyDescriptors(orig);
            for (PropertyDescriptor origDescriptor : origDescriptors) {
                final String name = origDescriptor.getName();
                if (isReadable(orig, name) && isWriteable(dest, name)) {
                    try {
                        final Object value = getSimpleProperty(orig, name);
                        if (dest instanceof DynaBean) {
                            ((DynaBean) dest).set(name, value);
                        }
                         else {
                                setSimpleProperty(dest, name, value);
                        }
                        
                    }
                     catch (final NoSuchMethodException e) {
                        if (log.isDebugEnabled()) {
                            log.debug("Error writing to '" + name + "' on class '" + dest.getClass() + "'", e);
                        }
                        
                    }
                    
                }
                
            }
            
        }
        
    }
    
    public Map<String, Object> describe(final Object bean) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        final Map<String, Object> description = new HashMap<String, Object>();
        if (bean instanceof DynaBean) {
            final DynaProperty[] descriptors = ((DynaBean) bean).getDynaClass().getDynaProperties();
            for (DynaProperty descriptor : descriptors) {
                final String name = descriptor.getName();
                description.put(name, getProperty(bean, name));
            }
            
        }
         else {
            final PropertyDescriptor[] descriptors = getPropertyDescriptors(bean);
            for (PropertyDescriptor descriptor : descriptors) {
                final String name = descriptor.getName();
                if (descriptor.getReadMethod() != null) {
                    description.put(name, getProperty(bean, name));
                }
                
            }
            
        }
        
        return (description);
    }
    
    public Object getIndexedProperty(final Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        int index = -1;
        try {
            index = resolver.getIndex(name);
        }
         catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid indexed property '" + name + "' on bean class '" + bean.getClass() + "' " + e.getMessage());
        }
        
        if (index < 0) {
            throw new IllegalArgumentException("Invalid indexed property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        name = resolver.getProperty(name);
        return (getIndexedProperty(bean, name, index));
    }
    
    public Object getIndexedProperty(final Object bean, final String name, final int index) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null || name.length() == 0) {
            if (bean.getClass().isArray()) {
                return Array.get(bean, index);
            }
             else if (bean instanceof List) {
                return ((List<?>)bean).get(index);
            }
            
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
            }
            
            return (((DynaBean) bean).get(name, index));
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (descriptor instanceof IndexedPropertyDescriptor) {
            Method readMethod = ((IndexedPropertyDescriptor) descriptor). getIndexedReadMethod();
            readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
            if (readMethod != null) {
                final Object[] subscript = new Object[1];
                subscript[0] = new Integer(index);
                try {
                    return (invokeMethod(readMethod,bean, subscript));
                }
                 catch (final InvocationTargetException e) {
                    if (e.getTargetException() instanceof IndexOutOfBoundsException) {
                        throw (IndexOutOfBoundsException) e.getTargetException();
                    }
                     else {
                        throw e;
                    }
                    
                }
                
            }
            
        }
        
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException("Property '" + name + "' has no " + "getter method on bean class '" + bean.getClass() + "'");
        }
        
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        if (!value.getClass().isArray()) {
            if (!(value instanceof java.util.List)) {
                throw new IllegalArgumentException("Property '" + name + "' is not indexed on bean class '" + bean.getClass() + "'");
            }
             else {
                return ((java.util.List<?>) value).get(index);
            }
            
        }
         else {
            try {
                return (Array.get(value, index));
            }
             catch (final ArrayIndexOutOfBoundsException e) {
                throw new ArrayIndexOutOfBoundsException("Index: " + index + ", Size: " + Array.getLength(value) + " for property '" + name + "'");
            }
            
        }
        
    }
    
    public Object getMappedProperty(final Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        String key  = null;
        try {
            key = resolver.getKey(name);
        }
         catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException ("Invalid mapped property '" + name + "' on bean class '" + bean.getClass() + "' " + e.getMessage());
        }
        
        if (key == null) {
            throw new IllegalArgumentException("Invalid mapped property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        name = resolver.getProperty(name);
        return (getMappedProperty(bean, name, key));
    }
    
    public Object getMappedProperty(final Object bean, final String name, final String key) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (key == null) {
            throw new IllegalArgumentException("No key specified for property '" + name + "' on bean class " + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "'+ on bean class '" + bean.getClass() + "'");
            }
            
            return (((DynaBean) bean).get(name, key));
        }
        
        Object result = null;
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "'+ on bean class '" + bean.getClass() + "'");
        }
        
        if (descriptor instanceof MappedPropertyDescriptor) {
            Method readMethod = ((MappedPropertyDescriptor) descriptor). getMappedReadMethod();
            readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
            if (readMethod != null) {
                final Object[] keyArray = new Object[1];
                keyArray[0] = key;
                result = invokeMethod(readMethod, bean, keyArray);
            }
             else {
                throw new NoSuchMethodException("Property '" + name + "' has no mapped getter method on bean class '" + bean.getClass() + "'");
            }
            
        }
         else {
          final Method readMethod = getReadMethod(bean.getClass(), descriptor);
          if (readMethod != null) {
            final Object invokeResult = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
            if (invokeResult instanceof java.util.Map) {
              result = ((java.util.Map<?, ?>)invokeResult).get(key);
            }
            
          }
           else {
            throw new NoSuchMethodException("Property '" + name + "' has no mapped getter method on bean class '" + bean.getClass() + "'");
          }
          
        }
        
        return result;
    }
    
    @Deprecated
    public FastHashMap getMappedPropertyDescriptors(final Class<?> beanClass) {
        if (beanClass == null) {
            return null;
        }
        
        return mappedDescriptorsCache.get(beanClass);
    }
    
    @Deprecated
    public FastHashMap getMappedPropertyDescriptors(final Object bean) {
        if (bean == null) {
            return null;
        }
        
        return (getMappedPropertyDescriptors(bean.getClass()));
    }
    
    public Object getNestedProperty(Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>) bean, next);
            }
             else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            }
             else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            }
             else {
                nestedBean = getSimpleProperty(bean, next);
            }
            
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + name + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        if (bean instanceof Map) {
            bean = getPropertyOfMapBean((Map<?, ?>) bean, name);
        }
         else if (resolver.isMapped(name)) {
            bean = getMappedProperty(bean, name);
        }
         else if (resolver.isIndexed(name)) {
            bean = getIndexedProperty(bean, name);
        }
         else {
            bean = getSimpleProperty(bean, name);
        }
        
        return bean;
    }
    
    protected Object getPropertyOfMapBean(final Map<?, ?> bean, String propertyName) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
            
        }
        
        if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException( "Indexed or mapped properties are not supported on" + " objects of type Map: " + propertyName);
        }
        
        return bean.get(propertyName);
    }
    
    public Object getProperty(final Object bean, final String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        return (getNestedProperty(bean, name));
    }
    
    public PropertyDescriptor getPropertyDescriptor(Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + next + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        name = resolver.getProperty(name);
        if (name == null) {
            return (null);
        }
        
        final BeanIntrospectionData data = getIntrospectionData(bean.getClass());
        PropertyDescriptor result = data.getDescriptor(name);
        if (result != null) {
            return result;
        }
        
        FastHashMap mappedDescriptors = getMappedPropertyDescriptors(bean);
        if (mappedDescriptors == null) {
            mappedDescriptors = new FastHashMap();
            mappedDescriptors.setFast(true);
            mappedDescriptorsCache.put(bean.getClass(), mappedDescriptors);
        }
        
        result = (PropertyDescriptor) mappedDescriptors.get(name);
        if (result == null) {
            try {
                result = new MappedPropertyDescriptor(name, bean.getClass());
            }
             catch (final IntrospectionException ie) {
            }
            
            if (result != null) {
                mappedDescriptors.put(name, result);
            }
            
        }
        
        return result;
    }
    
    public PropertyDescriptor[] getPropertyDescriptors(final Class<?> beanClass) {
        return getIntrospectionData(beanClass).getDescriptors();
    }
    
    public PropertyDescriptor[] getPropertyDescriptors(final Object bean) {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        return (getPropertyDescriptors(bean.getClass()));
    }
    
    public Class<?> getPropertyEditorClass(final Object bean, final String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor != null) {
            return (descriptor.getPropertyEditorClass());
        }
         else {
            return (null);
        }
        
    }
    
    public Class<?> getPropertyType(Object bean, String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            final Object nestedBean = getProperty(bean, next);
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + next + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        name = resolver.getProperty(name);
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                return (null);
            }
            
            final Class<?> type = descriptor.getType();
            if (type == null) {
                return (null);
            }
             else if (type.isArray()) {
                return (type.getComponentType());
            }
             else {
                return (type);
            }
            
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            return (null);
        }
         else if (descriptor instanceof IndexedPropertyDescriptor) {
            return (((IndexedPropertyDescriptor) descriptor). getIndexedPropertyType());
        }
         else if (descriptor instanceof MappedPropertyDescriptor) {
            return (((MappedPropertyDescriptor) descriptor). getMappedPropertyType());
        }
         else {
            return (descriptor.getPropertyType());
        }
        
    }
    
    public Method getReadMethod(final PropertyDescriptor descriptor) {
        return (MethodUtils.getAccessibleMethod(descriptor.getReadMethod()));
    }
    
    Method getReadMethod(final Class<?> clazz, final PropertyDescriptor descriptor) {
        return (MethodUtils.getAccessibleMethod(clazz, descriptor.getReadMethod()));
    }
    
    public Object getSimpleProperty(final Object bean, final String name) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException ("Nested property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
         else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException ("Indexed property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
         else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException ("Mapped property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "' on dynaclass '" + ((DynaBean) bean).getDynaClass() + "'" );
            }
            
            return (((DynaBean) bean).get(name));
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "' on class '" + bean.getClass() + "'" );
        }
        
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException("Property '" + name + "' has no getter method in class '" + bean.getClass() + "'");
        }
        
        final Object value = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        return (value);
    }
    
    public Method getWriteMethod(final PropertyDescriptor descriptor) {
        return (MethodUtils.getAccessibleMethod(descriptor.getWriteMethod()));
    }
    
    public Method getWriteMethod(final Class<?> clazz, final PropertyDescriptor descriptor) {
        final BeanIntrospectionData data = getIntrospectionData(clazz);
        return (MethodUtils.getAccessibleMethod(clazz, data.getWriteMethod(clazz, descriptor)));
    }
    
    public boolean isReadable(Object bean, String name) {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            }
             catch (final IllegalAccessException e) {
                return false;
            }
             catch (final InvocationTargetException e) {
                return false;
            }
             catch (final NoSuchMethodException e) {
                return false;
            }
            
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + next + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        name = resolver.getProperty(name);
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }
        
        if (bean instanceof DynaBean) {
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        }
         else {
            try {
                final PropertyDescriptor desc = getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method readMethod = getReadMethod(bean.getClass(), desc);
                    if (readMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            readMethod = ((IndexedPropertyDescriptor) desc).getIndexedReadMethod();
                        }
                         else if (desc instanceof MappedPropertyDescriptor) {
                            readMethod = ((MappedPropertyDescriptor) desc).getMappedReadMethod();
                        }
                        
                        readMethod = MethodUtils.getAccessibleMethod(bean.getClass(), readMethod);
                    }
                    
                    return (readMethod != null);
                }
                 else {
                    return (false);
                }
                
            }
             catch (final IllegalAccessException e) {
                return (false);
            }
             catch (final InvocationTargetException e) {
                return (false);
            }
             catch (final NoSuchMethodException e) {
                return (false);
            }
            
        }
        
    }
    
    public boolean isWriteable(Object bean, String name) {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            try {
                nestedBean = getProperty(bean, next);
            }
             catch (final IllegalAccessException e) {
                return false;
            }
             catch (final InvocationTargetException e) {
                return false;
            }
             catch (final NoSuchMethodException e) {
                return false;
            }
            
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + next + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        name = resolver.getProperty(name);
        if (bean instanceof WrapDynaBean) {
            bean = ((WrapDynaBean)bean).getInstance();
        }
        
        if (bean instanceof DynaBean) {
            return (((DynaBean) bean).getDynaClass().getDynaProperty(name) != null);
        }
         else {
            try {
                final PropertyDescriptor desc = getPropertyDescriptor(bean, name);
                if (desc != null) {
                    Method writeMethod = getWriteMethod(bean.getClass(), desc);
                    if (writeMethod == null) {
                        if (desc instanceof IndexedPropertyDescriptor) {
                            writeMethod = ((IndexedPropertyDescriptor) desc).getIndexedWriteMethod();
                        }
                         else if (desc instanceof MappedPropertyDescriptor) {
                            writeMethod = ((MappedPropertyDescriptor) desc).getMappedWriteMethod();
                        }
                        
                        writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
                    }
                    
                    return (writeMethod != null);
                }
                 else {
                    return (false);
                }
                
            }
             catch (final IllegalAccessException e) {
                return (false);
            }
             catch (final InvocationTargetException e) {
                return (false);
            }
             catch (final NoSuchMethodException e) {
                return (false);
            }
            
        }
        
    }
    
    public void setIndexedProperty(final Object bean, String name, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        int index = -1;
        try {
            index = resolver.getIndex(name);
        }
         catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid indexed property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (index < 0) {
            throw new IllegalArgumentException("Invalid indexed property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        name = resolver.getProperty(name);
        setIndexedProperty(bean, name, index, value);
    }
    
    public void setIndexedProperty(final Object bean, final String name, final int index, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null || name.length() == 0) {
            if (bean.getClass().isArray()) {
                Array.set(bean, index, value);
                return;
            }
             else if (bean instanceof List) {
                final List<Object> list = toObjectList(bean);
                list.set(index, value);
                return;
            }
            
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
            }
            
            ((DynaBean) bean).set(name, index, value);
            return;
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (descriptor instanceof IndexedPropertyDescriptor) {
            Method writeMethod = ((IndexedPropertyDescriptor) descriptor). getIndexedWriteMethod();
            writeMethod = MethodUtils.getAccessibleMethod(bean.getClass(), writeMethod);
            if (writeMethod != null) {
                final Object[] subscript = new Object[2];
                subscript[0] = new Integer(index);
                subscript[1] = value;
                try {
                    if (log.isTraceEnabled()) {
                        final String valueClassName = value == null ? "<null>" : value.getClass().getName();
                        log.trace("setSimpleProperty: Invoking method " + writeMethod +" with index=" + index + ", value=" + value + " (class " + valueClassName+ ")");
                    }
                    
                    invokeMethod(writeMethod, bean, subscript);
                }
                 catch (final InvocationTargetException e) {
                    if (e.getTargetException() instanceof IndexOutOfBoundsException) {
                        throw (IndexOutOfBoundsException) e.getTargetException();
                    }
                     else {
                        throw e;
                    }
                    
                }
                
                return;
            }
            
        }
        
        final Method readMethod = getReadMethod(bean.getClass(), descriptor);
        if (readMethod == null) {
            throw new NoSuchMethodException("Property '" + name + "' has no getter method on bean class '" + bean.getClass() + "'");
        }
        
        final Object array = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
        if (!array.getClass().isArray()) {
            if (array instanceof List) {
                final List<Object> list = toObjectList(array);
                list.set(index, value);
            }
             else {
                throw new IllegalArgumentException("Property '" + name + "' is not indexed on bean class '" + bean.getClass() + "'");
            }
            
        }
         else {
            Array.set(array, index, value);
        }
        
    }
    
    public void setMappedProperty(final Object bean, String name, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        String key  = null;
        try {
            key = resolver.getKey(name);
        }
         catch (final IllegalArgumentException e) {
            throw new IllegalArgumentException ("Invalid mapped property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (key == null) {
            throw new IllegalArgumentException ("Invalid mapped property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        name = resolver.getProperty(name);
        setMappedProperty(bean, name, key, value);
    }
    
    public void setMappedProperty(final Object bean, final String name, final String key, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (key == null) {
            throw new IllegalArgumentException("No key specified for property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
            }
            
            ((DynaBean) bean).set(name, key, value);
            return;
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (descriptor instanceof MappedPropertyDescriptor) {
            Method mappedWriteMethod = ((MappedPropertyDescriptor) descriptor). getMappedWriteMethod();
            mappedWriteMethod = MethodUtils.getAccessibleMethod(bean.getClass(), mappedWriteMethod);
            if (mappedWriteMethod != null) {
                final Object[] params = new Object[2];
                params[0] = key;
                params[1] = value;
                if (log.isTraceEnabled()) {
                    final String valueClassName = value == null ? "<null>" : value.getClass().getName();
                    log.trace("setSimpleProperty: Invoking method " + mappedWriteMethod + " with key=" + key + ", value=" + value + " (class " + valueClassName +")");
                }
                
                invokeMethod(mappedWriteMethod, bean, params);
            }
             else {
                throw new NoSuchMethodException ("Property '" + name + "' has no mapped setter method" + "on bean class '" + bean.getClass() + "'");
            }
            
        }
         else {
          final Method readMethod = getReadMethod(bean.getClass(), descriptor);
          if (readMethod != null) {
            final Object invokeResult = invokeMethod(readMethod, bean, EMPTY_OBJECT_ARRAY);
            if (invokeResult instanceof java.util.Map) {
              final java.util.Map<String, Object> map = toPropertyMap(invokeResult);
              map.put(key, value);
            }
            
          }
           else {
            throw new NoSuchMethodException("Property '" + name + "' has no mapped getter method on bean class '" + bean.getClass() + "'");
          }
          
        }
        
    }
    
    public void setNestedProperty(Object bean, String name, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        while (resolver.hasNested(name)) {
            final String next = resolver.next(name);
            Object nestedBean = null;
            if (bean instanceof Map) {
                nestedBean = getPropertyOfMapBean((Map<?, ?>)bean, next);
            }
             else if (resolver.isMapped(next)) {
                nestedBean = getMappedProperty(bean, next);
            }
             else if (resolver.isIndexed(next)) {
                nestedBean = getIndexedProperty(bean, next);
            }
             else {
                nestedBean = getSimpleProperty(bean, next);
            }
            
            if (nestedBean == null) {
                throw new NestedNullException ("Null property value for '" + name + "' on bean class '" + bean.getClass() + "'");
            }
            
            bean = nestedBean;
            name = resolver.remove(name);
        }
        
        if (bean instanceof Map) {
            setPropertyOfMapBean(toPropertyMap(bean), name, value);
        }
         else if (resolver.isMapped(name)) {
            setMappedProperty(bean, name, value);
        }
         else if (resolver.isIndexed(name)) {
            setIndexedProperty(bean, name, value);
        }
         else {
            setSimpleProperty(bean, name, value);
        }
        
    }
    
    protected void setPropertyOfMapBean(final Map<String, Object> bean, String propertyName, final Object value) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (resolver.isMapped(propertyName)) {
            final String name = resolver.getProperty(propertyName);
            if (name == null || name.length() == 0) {
                propertyName = resolver.getKey(propertyName);
            }
            
        }
        
        if (resolver.isIndexed(propertyName) || resolver.isMapped(propertyName)) {
            throw new IllegalArgumentException( "Indexed or mapped properties are not supported on" + " objects of type Map: " + propertyName);
        }
        
        bean.put(propertyName, value);
    }
    
    public void setProperty(final Object bean, final String name, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        setNestedProperty(bean, name, value);
    }
    
    public void setSimpleProperty(final Object bean, final String name, final Object value) throws IllegalAccessException, InvocationTargetException, NoSuchMethodException {
        if (bean == null) {
            throw new IllegalArgumentException("No bean specified");
        }
        
        if (name == null) {
            throw new IllegalArgumentException("No name specified for bean class '" + bean.getClass() + "'");
        }
        
        if (resolver.hasNested(name)) {
            throw new IllegalArgumentException ("Nested property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
         else if (resolver.isIndexed(name)) {
            throw new IllegalArgumentException ("Indexed property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
         else if (resolver.isMapped(name)) {
            throw new IllegalArgumentException ("Mapped property names are not allowed: Property '" + name + "' on bean class '" + bean.getClass() + "'");
        }
        
        if (bean instanceof DynaBean) {
            final DynaProperty descriptor = ((DynaBean) bean).getDynaClass().getDynaProperty(name);
            if (descriptor == null) {
                throw new NoSuchMethodException("Unknown property '" + name + "' on dynaclass '" + ((DynaBean) bean).getDynaClass() + "'" );
            }
            
            ((DynaBean) bean).set(name, value);
            return;
        }
        
        final PropertyDescriptor descriptor = getPropertyDescriptor(bean, name);
        if (descriptor == null) {
            throw new NoSuchMethodException("Unknown property '" + name + "' on class '" + bean.getClass() + "'" );
        }
        
        final Method writeMethod = getWriteMethod(bean.getClass(), descriptor);
        if (writeMethod == null) {
            throw new NoSuchMethodException("Property '" + name + "' has no setter method in class '" + bean.getClass() + "'");
        }
        
        final Object[] values = new Object[1];
        values[0] = value;
        if (log.isTraceEnabled()) {
            final String valueClassName = value == null ? "<null>" : value.getClass().getName();
            log.trace("setSimpleProperty: Invoking method " + writeMethod + " with value " + value + " (class " + valueClassName + ")");
        }
        
        invokeMethod(writeMethod, bean, values);
    }
    
    private Object invokeMethod( final Method method, final Object bean, final Object[] values) throws IllegalAccessException, InvocationTargetException {
        if(bean == null) {
            throw new IllegalArgumentException("No bean specified " + "- this should have been checked before reaching this method");
        }
        
        try {
            return method.invoke(bean, values);
        }
         catch (final NullPointerException cause) {
            String valueString = "";
            if (values != null) {
                for (int i = 0; i < values.length; i++) {
                    if (i>0) {
                        valueString += ", " ;
                    }
                    
                    if (values[i] == null) {
                        valueString += "<null>";
                    }
                     else {
                        valueString += (values[i]).getClass().getName();
                    }
                    
                }
                
            }
            
            String expectedString = "";
            final Class<?>[] parTypes = method.getParameterTypes();
            if (parTypes != null) {
                for (int i = 0; i < parTypes.length; i++) {
                    if (i > 0) {
                        expectedString += ", ";
                    }
                    
                    expectedString += parTypes[i].getName();
                }
                
            }
            
            final IllegalArgumentException e = new IllegalArgumentException( "Cannot invoke " + method.getDeclaringClass().getName() + "." + method.getName() + " on bean class '" + bean.getClass() + "' - " + cause.getMessage() + " - had objects of type \"" + valueString + "\" but expected signature \"" +   expectedString + "\"" );
            if (!BeanUtils.initCause(e, cause)) {
                log.error("Method invocation failed", cause);
            }
            
            throw e;
        }
         catch (final IllegalArgumentException cause) {
            String valueString = "";
            if (values != null) {
                for (int i = 0; i < values.length; i++) {
                    if (i>0) {
                        valueString += ", " ;
                    }
                    
                    if (values[i] == null) {
                        valueString += "<null>";
                    }
                     else {
                        valueString += (values[i]).getClass().getName();
                    }
                    
                }
                
            }
            
            String expectedString = "";
            final Class<?>[] parTypes = method.getParameterTypes();
            if (parTypes != null) {
                for (int i = 0; i < parTypes.length; i++) {
                    if (i > 0) {
                        expectedString += ", ";
                    }
                    
                    expectedString += parTypes[i].getName();
                }
                
            }
            
            final IllegalArgumentException e = new IllegalArgumentException( "Cannot invoke " + method.getDeclaringClass().getName() + "." + method.getName() + " on bean class '" + bean.getClass() + "' - " + cause.getMessage() + " - had objects of type \"" + valueString + "\" but expected signature \"" +   expectedString + "\"" );
            if (!BeanUtils.initCause(e, cause)) {
                log.error("Method invocation failed", cause);
            }
            
            throw e;
        }
        
    }
    
    private BeanIntrospectionData getIntrospectionData(final Class<?> beanClass) {
        if (beanClass == null) {
            throw new IllegalArgumentException("No bean class specified");
        }
        
        BeanIntrospectionData data = descriptorsCache.get(beanClass);
        if (data == null) {
            data = fetchIntrospectionData(beanClass);
            descriptorsCache.put(beanClass, data);
        }
        
        return data;
    }
    
    private BeanIntrospectionData fetchIntrospectionData(final Class<?> beanClass) {
        final DefaultIntrospectionContext ictx = new DefaultIntrospectionContext(beanClass);
        for (final BeanIntrospector bi : introspectors) {
            try {
                bi.introspect(ictx);
            }
             catch (final IntrospectionException iex) {
                log.error("Exception during introspection", iex);
            }
            
        }
        
        return new BeanIntrospectionData(ictx.getPropertyDescriptors());
    }
    
    private static List<Object> toObjectList(final Object obj) {
        @SuppressWarnings("unchecked")
        final List<Object> list = (List<Object>) obj;
        return list;
    }
    
    private static Map<String, Object> toPropertyMap(final Object obj) {
        @SuppressWarnings("unchecked")
        final Map<String, Object> map = (Map<String, Object>) obj;
        return map;
    }
    
}

