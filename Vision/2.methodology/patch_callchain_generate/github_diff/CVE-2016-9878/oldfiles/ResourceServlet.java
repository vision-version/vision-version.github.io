package org.springframework.web.servlet;
import java.io.IOException;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.util.AntPathMatcher;
import org.springframework.util.PathMatcher;
import org.springframework.util.StringUtils;
import org.springframework.web.context.support.ServletContextResource;
@SuppressWarnings("serial")
@Deprecated
public class ResourceServlet extends HttpServletBean {
	 public static final String RESOURCE_URL_DELIMITERS = ",; \t\n";
	 public static final String RESOURCE_PARAM_NAME = "resource";
	private String defaultUrl;
	private String allowedResources;
	private String contentType;
	private boolean applyLastModified = false;
	private PathMatcher pathMatcher;
	private long startupTime;
	 public void setDefaultUrl(String defaultUrl) {
		this.defaultUrl = defaultUrl;
	}
	
	 public void setAllowedResources(String allowedResources) {
		this.allowedResources = allowedResources;
	}
	
	 public void setContentType(String contentType) {
		this.contentType = contentType;
	}
	
	 public void setApplyLastModified(boolean applyLastModified) {
		this.applyLastModified = applyLastModified;
	}
	
	 @Override
	protected void initServletBean() {
		this.pathMatcher = getPathMatcher();
		this.startupTime = System.currentTimeMillis();
	}
	
	 protected PathMatcher getPathMatcher() {
		return new AntPathMatcher();
	}
	
	 @Override
	protected final void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		 String resourceUrl = determineResourceUrl(request);
		if (resourceUrl != null) {
			try {
				doInclude(request, response, resourceUrl);
			}
			
			catch (ServletException ex) {
				if (logger.isWarnEnabled()) {
					logger.warn("Failed to include content of resource [" + resourceUrl + "]", ex);
				}
				
				 if (!includeDefaultUrl(request, response)) {
					throw ex;
				}
				
			}
			
			catch (IOException ex) {
				if (logger.isWarnEnabled()) {
					logger.warn("Failed to include content of resource [" + resourceUrl + "]", ex);
				}
				
				 if (!includeDefaultUrl(request, response)) {
					throw ex;
				}
				
			}
			
		}
		
		 else if (!includeDefaultUrl(request, response)) {
			throw new ServletException("No target resource URL found for request");
		}
		
	}
	
	 protected String determineResourceUrl(HttpServletRequest request) {
		return request.getParameter(RESOURCE_PARAM_NAME);
	}
	
	 private boolean includeDefaultUrl(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		if (this.defaultUrl == null) {
			return false;
		}
		
		doInclude(request, response, this.defaultUrl);
		return true;
	}
	
	 private void doInclude(HttpServletRequest request, HttpServletResponse response, String resourceUrl) throws ServletException, IOException {
		if (this.contentType != null) {
			response.setContentType(this.contentType);
		}
		
		String[] resourceUrls = StringUtils.tokenizeToStringArray(resourceUrl, RESOURCE_URL_DELIMITERS);
		for (String url : resourceUrls) {
			 if (this.allowedResources != null && !this.pathMatcher.match(this.allowedResources, url)) {
				throw new ServletException("Resource [" + url + "] does not match allowed pattern [" + this.allowedResources + "]");
			}
			
			if (logger.isDebugEnabled()) {
				logger.debug("Including resource [" + url + "]");
			}
			
			RequestDispatcher rd = request.getRequestDispatcher(url);
			rd.include(request, response);
		}
		
	}
	
	 @Override
	protected final long getLastModified(HttpServletRequest request) {
		if (this.applyLastModified) {
			String resourceUrl = determineResourceUrl(request);
			if (resourceUrl == null) {
				resourceUrl = this.defaultUrl;
			}
			
			if (resourceUrl != null) {
				String[] resourceUrls = StringUtils.tokenizeToStringArray(resourceUrl, RESOURCE_URL_DELIMITERS);
				long latestTimestamp = -1;
				for (String url : resourceUrls) {
					long timestamp = getFileTimestamp(url);
					if (timestamp > latestTimestamp) {
						latestTimestamp = timestamp;
					}
					
				}
				
				return (latestTimestamp > this.startupTime ? latestTimestamp : this.startupTime);
			}
			
		}
		
		return -1;
	}
	
	 protected long getFileTimestamp(String resourceUrl) {
		ServletContextResource resource = new ServletContextResource(getServletContext(), resourceUrl);
		try {
			long lastModifiedTime = resource.lastModified();
			if (logger.isDebugEnabled()) {
				logger.debug("Last-modified timestamp of " + resource + " is " + lastModifiedTime);
			}
			
			return lastModifiedTime;
		}
		
		catch (IOException ex) {
			if (logger.isWarnEnabled()) {
				logger.warn("Couldn't retrieve last-modified timestamp of " + resource + " - using ResourceServlet startup time");
			}
			
			return -1;
		}
		
	}
	
}

