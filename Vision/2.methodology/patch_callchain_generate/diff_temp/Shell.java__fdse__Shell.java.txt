diff --git a/github_diff/CVE-2022-29599/oldfiles/Shell.java b/github_diff/CVE-2022-29599/newfiles/Shell.java
index 92748bb..8dbf3eb 100644
--- a/github_diff/CVE-2022-29599/oldfiles/Shell.java
+++ b/github_diff/CVE-2022-29599/newfiles/Shell.java
@@ -9,6 +9,7 @@ public class Shell implements Cloneable {
     private String shellCommand;
     private final List<String> shellArgs = new ArrayList<String>();
     private boolean quotedArgumentsEnabled = true;
+    private boolean unconditionalQuoting = false;
     private String executable;
     private String workingDir;
     private boolean quotedExecutableEnabled = true;
@@ -37,6 +38,11 @@ public class Shell implements Cloneable {
         
     }
     
+    protected String quoteOneItem( String inputString, boolean isExecutable ) {
+        char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );
+        return StringUtils.quoteAndEscape( inputString, isExecutable ? getExecutableQuoteDelimiter() : getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', unconditionalQuoting );
+    }
+    
     List<String> getCommandLine( String executableParameter, String... argumentsParameter ) {
         return getRawCommandLine( executableParameter, argumentsParameter );
     }
@@ -51,12 +57,11 @@ public class Shell implements Cloneable {
             }
             
             if ( isQuotedExecutableEnabled() ){
-                char[] escapeChars = getEscapeChars( isSingleQuotedExecutableEscaped(), isDoubleQuotedExecutableEscaped() );
-                sb.append( StringUtils.quoteAndEscape( getExecutable(), getExecutableQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', false ) );
+                sb.append( quoteOneItem( executableParameter, true ) );
             }
             
             else{
-                sb.append( getExecutable() );
+                sb.append( executableParameter );
             }
             
         }
@@ -67,8 +72,7 @@ public class Shell implements Cloneable {
             }
             
             if ( isQuotedArgumentsEnabled() ){
-                char[] escapeChars = getEscapeChars( isSingleQuotedArgumentEscaped(), isDoubleQuotedArgumentEscaped() );
-                sb.append( StringUtils.quoteAndEscape( argument, getArgumentQuoteDelimiter(), escapeChars, getQuotingTriggerChars(), '\\', false ) );
+                sb.append( quoteOneItem( argument, false ) );
             }
             
             else{
@@ -146,7 +150,7 @@ public class Shell implements Cloneable {
             commandLine.addAll( getShellArgsList() );
         }
         
-        commandLine.addAll( getCommandLine( getExecutable(), arguments ) );
+        commandLine.addAll( getCommandLine( executable, arguments ) );
         return commandLine;
     }
     
@@ -216,5 +220,13 @@ public class Shell implements Cloneable {
         this.singleQuotedExecutableEscaped = singleQuotedExecutableEscaped;
     }
     
+    public boolean isUnconditionalQuoting() {
+        return unconditionalQuoting;
+    }
+    
+    public void setUnconditionalQuoting( boolean unconditionalQuoting ) {
+        this.unconditionalQuoting = unconditionalQuoting;
+    }
+    
 }
 
