package edu.vision.se;

import org.hibernate.validator.constraints.SafeHtml;
import org.hibernate.validator.constraints.SafeHtml.WhiteListType;
import org.hibernate.validator.internal.constraintvalidators.hv.SafeHtmlValidator;
import org.junit.Test;
import org.hibernate.validator.internal.util.annotation.ConstraintAnnotationDescriptor;
import static org.junit.Assert.assertFalse;
import org.jsoup.safety.Whitelist;  // 解决 10ClassNotFound 问题


public class Testcase1 {

    private ConstraintAnnotationDescriptor.Builder<SafeHtml> descriptorBuilder;

    private SafeHtmlValidator getSafeHtmlValidator() {
        SafeHtml p = descriptorBuilder.build().getAnnotation();
        SafeHtmlValidator validator = new SafeHtmlValidator();
        validator.initialize( p );
        return validator;
    }

    @Test
    // A "downlevel revealed" conditional 'comment' is not an (X)HTML comment at all,
    // despite the misleading name, it is default Microsoft syntax.
    // The tag is unrecognized by therefore executed
    public void testDownlevelRevealedConditionalComment() throws Exception {
        descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
        descriptorBuilder.setAttribute("whitelistType", WhiteListType.BASIC);

        assertFalse( getSafeHtmlValidator().isValid( "<![if !IE]>\n<SCRIPT>alert{'XSS'};</SCRIPT>\n<![endif]>", null ) );
    }

    @Test
    public void testDownlevelHiddenConditionalComment() throws Exception {
        descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
        descriptorBuilder.setAttribute( "whitelistType", WhiteListType.BASIC );

        assertFalse( getSafeHtmlValidator().isValid( "<!--[if gte IE 4]>\n<SCRIPT>alert{'XSS'};</SCRIPT>\n<![endif]-->", null ) );
    }

    @Test
    public void testSimpleComment() throws Exception {
        descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
        descriptorBuilder.setAttribute( "whitelistType", WhiteListType.BASIC );

        assertFalse( getSafeHtmlValidator().isValid( "<!-- Just a comment -->", null ) );
    }

    @Test
    public void testServerSideIncludesSSI() throws Exception {
        descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
        descriptorBuilder.setAttribute( "whitelistType", WhiteListType.BASIC );

        assertFalse( getSafeHtmlValidator().isValid( "<? echo{'<SCR}'; echo{'IPT>alert{\"XSS\"}</SCRIPT>'}; ?>", null ) );
    }

    @Test
    public void testPHPScript() throws Exception {
        descriptorBuilder = new ConstraintAnnotationDescriptor.Builder<>( SafeHtml.class );
        descriptorBuilder.setAttribute( "whitelistType", WhiteListType.BASIC );

        assertFalse( getSafeHtmlValidator().isValid( "<? echo{'<SCR}'; echo{'IPT>alert{\"XSS\"}</SCRIPT>'}; ?>", null ) );
    }
}