package edu.vision.se;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.lang.reflect.Constructor;
import java.lang.reflect.Method;
import java.nio.file.Path;
import java.util.Properties;

import org.junit.Test;

import io.digdag.client.DigdagClient;
import io.digdag.client.config.Config;
import io.digdag.client.config.ConfigFactory;
import io.digdag.core.agent.AgentId;
import io.digdag.core.config.PropertyUtils;

public class Testcase1 {

    private static final ConfigFactory CONFIG_FACTORY = new ConfigFactory(DigdagClient.objectMapper());

    @Test
    public void testGetFileInvalidFileName() throws Exception {
        Properties props = new Properties();
        Config systemConfig = PropertyUtils.toConfigElement(props).toConfig(CONFIG_FACTORY);

        Path path = Path.of("test");
        Class<?> sclazz = Class.forName("io.digdag.core.log.LocalFileLogServerFactory");
        Constructor<?> sconstructor = sclazz.getDeclaredConstructors()[0];
        sconstructor.setAccessible(true);
        Object sobj = sconstructor.newInstance(systemConfig, AgentId.of("agentA"));

        Class<?> clazz = Class.forName("io.digdag.core.log.LocalFileLogServerFactory$LocalFileLogServer");
        Constructor<?> constructor = clazz.getDeclaredConstructors()[0];
        constructor.setAccessible(true);
        Object obj = constructor.newInstance(sobj, path);

        Method method_getFile = clazz.getDeclaredMethod("getFile", String.class, String.class, String.class);
        method_getFile.setAccessible(true);
        try {
            method_getFile.invoke(obj, "test", "test", "foo/../../bar");
        } catch (Exception e) {
            validateThrow(e.getCause());
            return;
        }
        fail();
    }

    public void validateThrow(Throwable e) {
        assertTrue(e instanceof IllegalArgumentException);
    }
}