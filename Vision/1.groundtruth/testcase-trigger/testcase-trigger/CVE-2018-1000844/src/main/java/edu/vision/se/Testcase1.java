package edu.vision.se;

import static org.junit.Assert.fail;

import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;

import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import retrofit2.Call;
import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.converter.jaxb.JaxbConverterFactory;
import retrofit2.http.Body;
import retrofit2.http.GET;
import retrofit2.http.POST;

import static org.assertj.core.api.Assertions.assertThat;

public class Testcase1 {
    interface Service {
        @POST("/")
        Call<Void> postXml(@Body Contact contact);

        @GET("/")
        Call<Contact> getXml();
    }

    private Service service;
    @Rule
    public final MockWebServer server = new MockWebServer();

    @Before
    public void setUp() {
        JaxbConverterFactory factory = JaxbConverterFactory.create();
        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(server.url("/"))
                .addConverterFactory(factory)
                .build();
        service = retrofit.create(Service.class);
    }

    @Test
    public void externalEntity() throws Exception {
        server.enqueue(new MockResponse()
                .setBody(""
                        + "<?xml version=\"1.0\" ?>"
                        + "<!DOCTYPE contact["
                        + "  <!ENTITY secret SYSTEM \"" + server.url("/secret.txt") + "\">"
                        + "]>"
                        + "<contact>"
                        + "<name>&secret;</name>"
                        + "</contact>"));
        server.enqueue(new MockResponse()
                .setBody("hello"));

        Call<Contact> call = service.getXml();
        try {
            Response<Contact> response = call.execute();
            response.body();
            fail();
        } catch (RuntimeException expected) {
            assertThat(expected).hasMessageContaining("ParseError");
        }

        assertThat(server.getRequestCount()).isEqualTo(1);
    }
}