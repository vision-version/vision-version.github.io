package edu.vision.se;

import org.junit.Before;
import org.junit.Test;
import org.springframework.security.jackson2.SecurityJackson2Modules;

import com.fasterxml.jackson.annotation.JsonAutoDetect;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonIgnoreType;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.databind.ObjectMapper;

import static org.assertj.core.api.Assertions.*;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

public class Testcase1 {
    private ObjectMapper mapper;

    @Before
    public void setup() {
        mapper = new ObjectMapper();
        SecurityJackson2Modules.enableDefaultTyping(mapper);
    }

    @Test
    public void readValueWhenNotWhitelistedOrMappedThenThrowsException() throws Exception {
        String content = "{\"@class\":\"edu.vision.se.Testcase1$NotWhitelisted\",\"property\":\"bar\"}";
        assertThatThrownBy(() -> {
            mapper.readValue(content, Object.class);
        }).hasStackTraceContaining("whitelisted");
    }

    @Target({ ElementType.TYPE, ElementType.ANNOTATION_TYPE })
    @Retention(RetentionPolicy.RUNTIME)
    @Documented
    public @interface NotJacksonAnnotation {
    }

    @NotJacksonAnnotation
    static class NotWhitelisted {
        private String property = "bar";

        public String getProperty() {
            return property;
        }

        public void setProperty(String property) {
        }
    }

    @JsonIgnoreType(false)
    static class NotWhitelistedButAnnotated {
        private String property = "bar";

        public String getProperty() {
            return property;
        }

        public void setProperty(String property) {
        }
    }

    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY)
    @JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE, isGetterVisibility = JsonAutoDetect.Visibility.NONE)
    @JsonIgnoreProperties(ignoreUnknown = true)
    abstract class NotWhitelistedMixin {

    }

}