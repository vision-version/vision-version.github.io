package edu.vision.se;

import org.apache.maven.shared.utils.StringUtils;
import org.apache.maven.shared.utils.cli.Commandline;
import org.apache.maven.shared.utils.cli.shell.BourneShell;
import org.apache.maven.shared.utils.cli.shell.CmdShell;
import org.apache.maven.shared.utils.cli.shell.Shell;
import org.junit.Test;

import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

public class Testcasecombine {
    @Test
    public void testQuoteWorkingDirectoryAndExecutable() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/local/bin");
        sh.setExecutable("chmod");

        String executable = StringUtils.join(sh.getShellCommandLine(new String[]{}).iterator(), " ");

        assertEquals("/bin/sh -c cd '/usr/local/bin' && 'chmod'", executable);
    }
    @Test
    public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/local/'something else'");
        sh.setExecutable("chmod");

        String executable = StringUtils.join(sh.getShellCommandLine(new String[]{}).iterator(), " ");

        assertEquals("/bin/sh -c cd '/usr/local/'\"'\"'something else'\"'\"'' && 'chmod'", executable);
    }
    @Test
    public void testQuoteWorkingDirectoryAndExecutable_WDPathWithSingleQuotes_BackslashFileSep() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("\\usr\\local\\'something else'");
        sh.setExecutable("chmod");

        String executable = StringUtils.join(sh.getShellCommandLine(new String[]{}).iterator(), " ");

        assertEquals("/bin/sh -c cd '\\usr\\local\\'\"'\"'something else'\"'\"'' && 'chmod'", executable);
    }
    @Test
    public void testPreserveSingleQuotesOnArgument() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/bin");
        sh.setExecutable("chmod");

        final String[] args = {"\"some arg with spaces\""};

        List<String> shellCommandLine = sh.getShellCommandLine(args);

        String cli = StringUtils.join(shellCommandLine.iterator(), " ");
        System.out.println(cli);
        assertTrue(cli.endsWith("'\"some arg with spaces\"'"));
    }
    @Test
    public void testAddSingleQuotesOnArgumentWithSpaces() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/bin");
        sh.setExecutable("chmod");

        String[] args = {"some arg with spaces"};

        List<String> shellCommandLine = sh.getShellCommandLine(args);

        String cli = StringUtils.join(shellCommandLine.iterator(), " ");
        System.out.println(cli);
        assertTrue(cli.endsWith("'some arg with spaces'"));
    }
    @Test
    public void testAddArgumentWithSingleQuote() {
        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/bin");
        sh.setExecutable("chmod");

        String[] args = {"arg'withquote"};

        List<String> shellCommandLine = sh.getShellCommandLine(args);

        assertEquals("cd '/usr/bin' && 'chmod' 'arg'\"'\"'withquote'", shellCommandLine.get(shellCommandLine.size() - 1));
    }
    @Test
    public void testArgumentsWithSemicolon() {

        System.out.println("---- semi colon tests ----");

        Shell sh = new BourneShell();

        sh.setWorkingDirectory("/usr/bin");
        sh.setExecutable("chmod");

        String[] args = {";some&argwithunix$chars"};

        List<String> shellCommandLine = sh.getShellCommandLine(args);

        String cli = StringUtils.join(shellCommandLine.iterator(), " ");
        System.out.println(cli);
        assertTrue(cli.endsWith("';some&argwithunix$chars'"));

        Commandline commandline = new Commandline(new BourneShell());
        commandline.setExecutable("chmod");
        commandline.getShell().setQuotedArgumentsEnabled(true);
        commandline.createArg().setValue("--password");
        commandline.createArg().setValue(";password");

        List<String> lines = commandline.getShell().getShellCommandLine(commandline.getArguments());
        System.out.println(lines);

        assertEquals("'chmod' '--password' ';password'", lines.get(2));

        commandline = new Commandline(new BourneShell());
        commandline.setExecutable("chmod");
        commandline.getShell().setQuotedArgumentsEnabled(true);
        commandline.createArg().setValue("--password");
        commandline.createArg().setValue(";password");
        lines = commandline.getShell().getShellCommandLine(commandline.getArguments());
        System.out.println(lines);

        assertEquals("'chmod' '--password' ';password'", lines.get(2));

        commandline = new Commandline(new CmdShell());
        commandline.getShell().setQuotedArgumentsEnabled(true);
        commandline.createArg().setValue("--password");
        commandline.createArg().setValue(";password");
        lines = commandline.getShell().getShellCommandLine(commandline.getArguments());
        System.out.println(lines);

        assertEquals("cmd.exe", lines.get(0));
        assertEquals("/X", lines.get(1));
        assertEquals("/C", lines.get(2));
        assertEquals("\"--password ;password\"", lines.get(3));
    }
    @Test
    public void testBourneShellQuotingCharacters()
            throws Exception {
        // { ' ', '$', ';', '&', '|', '<', '>', '*', '?', '(', ')' };
        // test with values http://steve-parker.org/sh/bourne.shtml Appendix B - Meta-characters and Reserved Words
        Commandline commandline = new Commandline(new BourneShell());
        commandline.setExecutable("chmod");
        commandline.getShell().setQuotedArgumentsEnabled(true);
        commandline.createArg().setValue(" ");
        commandline.createArg().setValue("|");
        commandline.createArg().setValue("&&");
        commandline.createArg().setValue("||");
        commandline.createArg().setValue(";");
        commandline.createArg().setValue(";;");
        commandline.createArg().setValue("&");
        commandline.createArg().setValue("()");
        commandline.createArg().setValue("<");
        commandline.createArg().setValue("<<");
        commandline.createArg().setValue(">");
        commandline.createArg().setValue(">>");
        commandline.createArg().setValue("*");
        commandline.createArg().setValue("?");
        commandline.createArg().setValue("[");
        commandline.createArg().setValue("]");
        commandline.createArg().setValue("{");
        commandline.createArg().setValue("}");
        commandline.createArg().setValue("`");
        commandline.createArg().setValue("#");

        List<String> lines = commandline.getShell().getShellCommandLine(commandline.getArguments());
        System.out.println(lines);

        assertEquals("'chmod' ' ' '|' '&&' '||' ';' ';;' '&' '()' '<' '<<' '>' '>>' '*' '?' '[' ']' '{' '}' '`' '#'",
                lines.get(2));
    }
}
