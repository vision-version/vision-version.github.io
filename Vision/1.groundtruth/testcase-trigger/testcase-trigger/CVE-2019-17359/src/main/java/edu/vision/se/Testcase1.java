package edu.vision.se;

import org.bouncycastle.asn1.ASN1InputStream;
import org.bouncycastle.asn1.ASN1Primitive;
import org.bouncycastle.asn1.ASN1Sequence;
import org.bouncycastle.util.encoders.Base64;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class Testcase1 {
    private static final byte[] outOfBoundsLength = new byte[]{(byte) 0x30, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff};
    private static final byte[] negativeLength = new byte[]{(byte) 0x30, (byte) 0x84, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff};
    private static final byte[] outsideLimitLength = new byte[]{(byte) 0x30, (byte) 0x83, (byte) 0x0f, (byte) 0xff, (byte) 0xff};

    private static final byte[] classCast1 = Base64.decode("p1AkHmYAvfOEIrL4ESfrNg==");

    private static final byte[] memoryError1 = Base64.decode("JICNbaBUTTq7uxj5mg==");
    private static final byte[] memoryError2 = Base64.decode("vm66gOiEe+FV/NvujMwSkUp5Lffw5caQlaRU5sdMPC70IGWmyK2/");
    private static final byte[] memoryError3 = Base64.decode("vm4ogOSEfVGsS3w+KTzb2A0ALYR8VBOQqQeuRwnsPC4AAGWEDLjd");

    public String getName() {
        return "InputStream";
    }

    @Test(timeout = 60000)
    public void performTest() {

        testWithByteArray(classCast1, "unknown object encountered: class org.bouncycastle.asn1.DLApplicationSpecific");

        testWithByteArray(memoryError1, "corrupted stream - out of bounds length found: 109 >= 13");
        testWithByteArray(memoryError2, "corrupted stream - out of bounds length found: 2078365180 >= 110");
        testWithByteArray(memoryError3, "corrupted stream - out of bounds length found: 2102504523 >= 110");
    }

    private void testWithByteArray(byte[] data, String message) {
        try {
            ASN1InputStream input = new ASN1InputStream(data);

            ASN1Primitive p;
            while ((p = input.readObject()) != null) {
                ASN1Sequence asn1 = ASN1Sequence.getInstance(p);
                for (int i = 0; i < asn1.size(); i++) {
                    asn1.getObjectAt(i);
                }
            }
        } catch (java.io.IOException e) {
            assertEquals(e.getMessage(), message, e.getMessage());
        }
    }
}