package edu.vision.se;

import static org.junit.Assert.fail;
import static org.hamcrest.Matchers.instanceOf;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.apache.commons.io.IOUtils;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.ImportResource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.integration.transformer.MessageTransformationException;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHandlingException;
import org.springframework.messaging.support.MessageBuilder;

import cn.hutool.core.io.resource.ClassPathResource;

public class Testcase1 {
    private AnnotationConfigApplicationContext context;
    private ResourceLoader resourceLoader;
    private MessageChannel input;

    private static final Properties properties = new Properties();

    @Rule
    public TemporaryFolder testFolder = new TemporaryFolder();

    private File workDir;

    @Before
    public void setup() throws IOException {
        this.workDir = this.testFolder.newFolder();
        properties.put("workDir", this.workDir);
        System.out.print(this.workDir.getAbsolutePath());

        this.context = new AnnotationConfigApplicationContext();
        this.context.register(ContextConfiguration.class);
        this.context.refresh();
        this.input = this.context.getBean("input", MessageChannel.class);
        this.resourceLoader = this.context;
    }

    @After
    public void cleanup() {
        if (this.context != null) {
            this.context.close();
        }
    }

    @Test
    public void unZipTraversal() throws Exception {
        ClassPathResource resource = new ClassPathResource("testzipdata/zip-malicious-traversal.zip");
        final InputStream is = resource.getStream();
        byte[] zipdata = IOUtils.toByteArray(is);
        final Message<byte[]> message = MessageBuilder.withPayload(zipdata).build();
        try {
            input.send(message);
            fail("Expected Exception");
        } catch (Exception e) {
            Assert.assertThat(e, instanceOf(MessageTransformationException.class));
            Assert.assertThat(e.getCause(), instanceOf(MessageHandlingException.class));
        }
    }

    @Configuration
    @ImportResource("UnZip2FileTests-context.xml")
    public static class ContextConfiguration {

        @Bean
        Properties properties() throws IOException {
            return properties;
        }

    }
}