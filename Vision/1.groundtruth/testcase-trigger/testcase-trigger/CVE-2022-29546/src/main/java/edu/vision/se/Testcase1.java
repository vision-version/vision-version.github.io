package edu.vision.se;

import static org.junit.Assert.assertEquals;

import java.io.StringReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.apache.xerces.xni.Augmentations;
import org.apache.xerces.xni.QName;
import org.apache.xerces.xni.XMLAttributes;
import org.apache.xerces.xni.XNIException;
import org.apache.xerces.xni.parser.XMLDocumentFilter;
import org.apache.xerces.xni.parser.XMLInputSource;
import org.junit.Test;

import net.sourceforge.htmlunit.cyberneko.HTMLConfiguration;
import net.sourceforge.htmlunit.cyberneko.filters.DefaultFilter;

public class Testcase1 {

    @Test(timeout = 2000)
    public void invalidProcessingInstruction() throws Exception {
        final String string = "<!--?><?a/";

        final HTMLConfiguration parser = new HTMLConfiguration();
        final EvaluateInputSourceFilter filter = new EvaluateInputSourceFilter(parser);
        parser.setProperty("http://cyberneko.org/html/properties/filters", new XMLDocumentFilter[] { filter });
        final XMLInputSource source = new XMLInputSource(null, "myTest", null, new StringReader(string), "UTF-8");
        parser.parse(source);

        final String[] expected = { "(HTML", "(head", ")head", "(body", ")body", ")html" };
        assertEquals(Arrays.asList(expected).toString(), filter.collectedStrings.toString());
    }

    private static class EvaluateInputSourceFilter extends DefaultFilter {

        private final List<String> collectedStrings = new ArrayList<>();
        private static int counter = 1;
        protected HTMLConfiguration fConfiguration;

        public EvaluateInputSourceFilter(HTMLConfiguration config) {
            fConfiguration = config;
        }

        @Override
        public void startElement(QName element, XMLAttributes attrs, Augmentations augs) throws XNIException {
            collectedStrings.add("(" + element.rawname);
        }

        @Override
        public void endElement(QName element, Augmentations augs) throws XNIException {
            collectedStrings.add(")" + element.rawname);
            if (element.localpart.equalsIgnoreCase("SCRIPT")) {
                // act as if evaluation of document.write would insert the content
                insert("<style type=\"text/css\" id=\"myStyle\">");
                insert("  .nwr {white-space: nowrap;}");
                insert("</style>");
                insert("<div id=\"myDiv\"><span></span>");
                insert("</div>");
            }
        }

        private void insert(final String string) {
            collectedStrings.add("~inserting");
            final XMLInputSource source = new XMLInputSource(null, "myTest" + counter++, null,
                    new StringReader(string), "UTF-8");
            fConfiguration.evaluateInputSource(source);
        }

    }
}