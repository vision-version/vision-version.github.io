package edu.vision.se;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import java.io.IOException;
import java.lang.reflect.Method;

import org.junit.Test;

public class Testcase1 {
    @Test
    public void isFileOutsideDirStartsWithTest() throws IOException {
        String taintedInput = "/usr/foo/../foo-bar/bar";
        String baseDir = "/usr/foo";

        Object result1 = callStaticMethodIfExists("io.whitesource.cure.FileUtils", "isFileOutsideDir",
                new Class[] { String.class, String.class }, taintedInput, baseDir);
        Object result2 = callStaticMethodIfExists("io.whitesource.cure.FileUtilities", "isFileOutsideDir",
                new Class[] { String.class, String.class }, taintedInput, baseDir);
        Object result3 = callStaticMethodIfExists("io.whitesource.cure.FileSecurityUtils", "isFileOutsideDir",
                new Class[] { String.class, String.class }, taintedInput, baseDir);
        if (result1 != null) {
            assertTrue((boolean) result1);
        } else if (result2 != null) {
            assertTrue((boolean) result2);
        } else if (result3 != null) {
            assertTrue((boolean) result3);
        } else {
            fail("No such method found.");
        }
    }

    public static Object callStaticMethodIfExists(String className, String methodName, Class<?>[] parameterTypes,
            Object... args) {
        try {
            Class<?> clazz = Class.forName(className);
            Method method = clazz.getMethod(methodName, parameterTypes);
            return method.invoke(null, args);
        } catch (ClassNotFoundException e) {
            System.out.println("类 " + className + " 不存在。");
        } catch (NoSuchMethodException e) {
            System.out.println("在类 " + className + " 中找不到方法 " + methodName + "。");
        } catch (Exception e) {
            System.out.println("调用静态方法 " + methodName + " 时出现异常。");
            e.printStackTrace();
        }
        return null;
    }
}
