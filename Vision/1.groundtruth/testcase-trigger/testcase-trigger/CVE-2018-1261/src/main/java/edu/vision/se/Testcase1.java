package edu.vision.se;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import static org.hamcrest.Matchers.instanceOf;
import static org.junit.Assert.fail;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.TemporaryFolder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ResourceLoader;
import org.springframework.integration.transformer.MessageTransformationException;
import org.springframework.integration.zip.transformer.UnZipTransformer;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageHandlingException;
import org.springframework.messaging.support.MessageBuilder;

import cn.hutool.core.io.resource.ClassPathResource;

public class Testcase1 {
    @Rule
    public TemporaryFolder testFolder = new TemporaryFolder();

    @Autowired
    private ResourceLoader resourceLoader;

    private File workDir;

    @Before
    public void setup() throws IOException {
        this.workDir = testFolder.newFolder();
    }

    @Test
    public void testUnzipMaliciousTraversalZipFile() throws IOException {
        ClassPathResource resource = new ClassPathResource("testzipdata/zip-malicious-traversal.zip");
        final InputStream is = resource.getStream();
        final Message<InputStream> message = MessageBuilder.withPayload(is).build();

        final UnZipTransformer unZipTransformer = new UnZipTransformer();
        unZipTransformer.afterPropertiesSet();

        try {
            unZipTransformer.transform(message);
        } catch (Exception e) {
            Assert.assertThat(e, instanceOf(MessageTransformationException.class));
            Assert.assertThat(e.getCause(), instanceOf(MessageHandlingException.class));
            return;
        }
        fail();
    }
}