package edu.vision.se;

import static org.junit.Assert.assertEquals;

import static org.torpedoquery.jpa.Torpedo.from;
import static org.torpedoquery.jpa.Torpedo.select;
import static org.torpedoquery.jpa.Torpedo.where;
import org.junit.Test;
import org.torpedoquery.jpa.Query;

public class Testcase1 {

    @Test
    public void test_like_startsWith() {
        Entity from = from(Entity.class);
        where(from.getCode()).like().startsWith("test");
        Query<Entity> select = select(from);

        assertEquals("select entity_0 from Entity entity_0 where entity_0.code like :code_1", select.getQuery());
        assertEquals("test%", select.getParameters().get("code_1"));
    }
}

abstract class AbstractEntity {

    /**
     * <p>
     * getAbstractEntity.
     * </p>
     *
     * @return a {@link org.torpedoquery.jpa.test.bo.Entity} object.
     */
    public abstract Entity getAbstractEntity();

}

class SubEntity {
    /**
     * <p>
     * getCode.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getCode() {
        return null;
    }

    /**
     * <p>
     * getName.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getName() {
        return null;
    }

    /**
     * <p>
     * getNumberField.
     * </p>
     *
     * @return a {@link java.lang.Integer} object.
     */
    public Integer getNumberField() {
        return null;
    }
}

class ExtendEntity extends Entity {

    private String specificField;

    /**
     * <p>
     * Getter for the field <code>specificField</code>.
     * </p>
     *
     * @return a {@link java.lang.String} object.
     */
    public String getSpecificField() {
        return specificField;
    }

    /**
     * <p>
     * Setter for the field <code>specificField</code>.
     * </p>
     *
     * @param specificField a {@link java.lang.String} object.
     */
    public void setSpecificField(String specificField) {
        this.specificField = specificField;
    }

    /** {@inheritDoc} */
    @Override
    public SubEntity getSubEntity() {
        return super.getSubEntity();
    }

    /** {@inheritDoc} */
    @Override
    protected void finalize() throws Throwable {
        super.finalize();
    }
}