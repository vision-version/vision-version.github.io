PACK:./clones/itext__split__itext7
commit 88c9cb7ec7befa096d83206419506ec5c7664912
Author: dmitry.radchuk <dmitry.radchuk@duallab.com>
Date:   Fri Jan 14 08:55:49 2022 +0300

    Change array parsing logic to prevent StackOverflowException
    
    DEVSIX-6259

diff --git a/kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java b/kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java
index dc59a1c1e..4baa1feb7 100644
--- a/kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java
+++ b/kernel/src/main/java/com/itextpdf/kernel/exceptions/KernelExceptionMessageConstant.java
@@ -309,10 +309,13 @@ public final class KernelExceptionMessageConstant {
     public static final String UNBALANCED_SAVE_RESTORE_STATE_OPERATORS = "Unbalanced save restore state operators.";
     public static final String UNEXPECTED_CHARACTER_FOUND_AFTER_ID_IN_INLINE_IMAGE = "Unexpected character {0} "
             + "found after ID in inline image.";
+    @Deprecated
     public static final String UNEXPECTED_CLOSE_BRACKET = "Unexpected close bracket.";
     public static final String UNEXPECTED_COLOR_SPACE = "Unexpected ColorSpace: {0}.";
     public static final String UNEXPECTED_END_OF_FILE = "Unexpected end of file.";
+    @Deprecated
     public static final String UNEXPECTED_GT_GT = "unexpected >>.";
+    public static final String UNEXPECTED_TOKEN = "unexpected {0} was encountered.";
     public static final String UNEXPECTED_SHADING_TYPE = "Unexpected shading type.";
     public static final String UNKNOWN_ENCRYPTION_TYPE_R = "Unknown encryption type R == {0}.";
     public static final String UNKNOWN_ENCRYPTION_TYPE_V = "Unknown encryption type V == {0}.";
diff --git a/kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java b/kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java
index 17adcb766..e1d429937 100644
--- a/kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java
+++ b/kernel/src/main/java/com/itextpdf/kernel/pdf/PdfReader.java
@@ -65,6 +65,7 @@ import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.HashSet;
+import java.nio.charset.StandardCharsets;
 import java.util.Map;
 
 import com.itextpdf.kernel.xmp.XMPException;
@@ -942,9 +943,11 @@ public class PdfReader implements Closeable {
             PdfObject obj = readObject(true, objStm);
             if (obj == null) {
                 if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)
-                    tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);
+                    tokens.throwError(MessageFormatUtil.
+                            format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, ">>"));
                 if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)
-                    tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_CLOSE_BRACKET);
+                    tokens.throwError(MessageFormatUtil.
+                            format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, "]"));
             }
             dic.put(name, obj);
         }
@@ -956,10 +959,10 @@ public class PdfReader implements Closeable {
         while (true) {
             PdfObject obj = readObject(true, objStm);
             if (obj == null) {
-                if (tokens.getTokenType() == PdfTokenizer.TokenType.EndArray)
-                    break;
-                if (tokens.getTokenType() == PdfTokenizer.TokenType.EndDic)
-                    tokens.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);
+                if (tokens.getTokenType() != PdfTokenizer.TokenType.EndArray) {
+                    processArrayReadError();
+                }
+                break;
             }
             array.add(obj);
         }
@@ -1320,6 +1323,17 @@ public class PdfReader implements Closeable {
         return memorySavingMode;
     }
 
+    private void processArrayReadError() {
+        final String error = MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN,
+                new String(tokens.getByteContent(), StandardCharsets.UTF_8));
+        if (StrictnessLevel.CONSERVATIVE.isStricter(this.getStrictnessLevel())) {
+            final Logger logger = LoggerFactory.getLogger(PdfReader.class);
+            logger.error(error);
+        } else {
+            tokens.throwError(error);
+        }
+    }
+
     private void readDecryptObj() {
         if (encrypted)
             return;
diff --git a/kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java b/kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java
index 12511b5ae..a6838fddd 100644
--- a/kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java
+++ b/kernel/src/main/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParser.java
@@ -43,6 +43,7 @@
  */
 package com.itextpdf.kernel.pdf.canvas.parser.util;
 
+import com.itextpdf.commons.utils.MessageFormatUtil;
 import com.itextpdf.kernel.exceptions.PdfException;
 import com.itextpdf.io.source.PdfTokenizer;
 import com.itextpdf.kernel.exceptions.KernelExceptionMessageConstant;
@@ -175,10 +176,12 @@ public class PdfCanvasParser {
         PdfArray array = new PdfArray();
         while (true) {
             PdfObject obj = readObject();
-            if (!obj.isArray() && tokeniser.getTokenType() == PdfTokenizer.TokenType.EndArray)
+            if (!obj.isArray() && tokeniser.getTokenType() == PdfTokenizer.TokenType.EndArray) {
                 break;
-            if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic && obj.getType() != PdfObject.DICTIONARY)
-                tokeniser.throwError(KernelExceptionMessageConstant.UNEXPECTED_GT_GT);
+            }
+            if (tokeniser.getTokenType() == PdfTokenizer.TokenType.EndDic && obj.getType() != PdfObject.DICTIONARY) {
+                tokeniser.throwError(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, ">>"));
+            }
             array.add(obj);
         }
         return array;
diff --git a/kernel/src/test/java/com/itextpdf/kernel/pdf/PdfReaderTest.java b/kernel/src/test/java/com/itextpdf/kernel/pdf/PdfReaderTest.java
index 701268469..bf76fe8c9 100644
--- a/kernel/src/test/java/com/itextpdf/kernel/pdf/PdfReaderTest.java
+++ b/kernel/src/test/java/com/itextpdf/kernel/pdf/PdfReaderTest.java
@@ -2073,6 +2073,151 @@ public class PdfReaderTest extends ExtendedITextTest {
             Assert.assertEquals(-1, pdfStream.read());
         }
     }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN)
+    })
+    public void endDicInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayEndDictToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    public void endArrayClosingBracketInsteadOfEndDicTest() {
+        String fileName = SOURCE_FOLDER + "endArrayClosingBracketInsteadOfEndDic.pdf";
+        Exception exception = Assert.assertThrows(com.itextpdf.io.exceptions.IOException.class,
+                () -> new PdfDocument(new PdfReader(fileName)));
+        Assert.assertEquals(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, "]"),
+                exception.getCause().getMessage());
+    }
+
+    @Test
+    public void endDicClosingBracketInsideTheDicTest() {
+        String fileName = SOURCE_FOLDER + "endDicClosingBracketInsideTheDic.pdf";
+        Exception exception = Assert.assertThrows(com.itextpdf.io.exceptions.IOException.class,
+                () -> new PdfDocument(new PdfReader(fileName)));
+        Assert.assertEquals(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, ">>"),
+                exception.getCause().getMessage());
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN)
+    })
+    public void eofInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayEOFToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN)
+    })
+    public void endObjInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayEndObjToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN),
+            @LogMessage(messageTemplate = IoLogMessageConstant.XREF_ERROR_WHILE_READING_TABLE_WILL_BE_REBUILT)
+    })
+    public void nameInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayNameToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN)
+    })
+    public void objInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayObjToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN)
+    })
+    public void refInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayRefToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN, count = 2)
+    })
+    public void startArrayInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayStartArrayToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    @LogMessages(messages = {
+            @LogMessage(messageTemplate = KernelExceptionMessageConstant.UNEXPECTED_TOKEN),
+            @LogMessage(messageTemplate = IoLogMessageConstant.XREF_ERROR_WHILE_READING_TABLE_WILL_BE_REBUILT)
+    })
+    public void stringInsteadOfArrayClosingBracketTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayStringToken.pdf";
+        PdfDocument document = new PdfDocument(new PdfReader(fileName));
+        PdfArray actual = (PdfArray) document.getPdfObject(4);
+        PdfArray expected = new PdfArray(new float[]{5, 10, 15, 20});
+        for (int i = 0; i < expected.size(); i++) {
+            Assert.assertEquals(expected.get(i), actual.get(i));
+        }
+    }
+
+    @Test
+    public void closingArrayBracketMissingConservativeTest() throws IOException {
+        String fileName = SOURCE_FOLDER + "invalidArrayObjToken.pdf";
+        PdfReader reader = new PdfReader(fileName);
+        reader.setStrictnessLevel(StrictnessLevel.CONSERVATIVE);
+        PdfDocument document = new PdfDocument(reader);
+        Exception exception = Assert.assertThrows(com.itextpdf.io.exceptions.IOException.class,
+                () -> document.getPdfObject(4));
+        Assert.assertEquals(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, "obj"),
+                exception.getCause().getMessage());
+    }
+
     private static File copyFileForTest(String fileName, String copiedFileName) throws IOException {
         File copiedFile = new File(copiedFileName);
         Files.copy(Paths.get(fileName), Paths.get(copiedFileName));
diff --git a/kernel/src/test/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParserTest.java b/kernel/src/test/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParserTest.java
index 2b23dd381..6e8ee23f6 100644
--- a/kernel/src/test/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParserTest.java
+++ b/kernel/src/test/java/com/itextpdf/kernel/pdf/canvas/parser/util/PdfCanvasParserTest.java
@@ -22,9 +22,11 @@
  */
 package com.itextpdf.kernel.pdf.canvas.parser.util;
 
+import com.itextpdf.commons.utils.MessageFormatUtil;
 import com.itextpdf.io.source.PdfTokenizer;
 import com.itextpdf.io.source.RandomAccessFileOrArray;
 import com.itextpdf.io.source.RandomAccessSourceFactory;
+import com.itextpdf.kernel.exceptions.KernelExceptionMessageConstant;
 import com.itextpdf.kernel.pdf.PdfArray;
 import com.itextpdf.kernel.pdf.PdfDictionary;
 import com.itextpdf.kernel.pdf.PdfDocument;
@@ -35,12 +37,11 @@ import com.itextpdf.kernel.pdf.PdfResources;
 import com.itextpdf.kernel.pdf.PdfString;
 import com.itextpdf.kernel.utils.CompareTool;
 import com.itextpdf.test.ExtendedITextTest;
+import com.itextpdf.test.annotations.type.IntegrationTest;
 
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-
-import com.itextpdf.test.annotations.type.IntegrationTest;
 import org.junit.Assert;
 import org.junit.Test;
 import org.junit.experimental.categories.Category;
@@ -79,4 +80,24 @@ public class PdfCanvasParserTest extends ExtendedITextTest {
         Assert.assertTrue(new CompareTool().compareArrays(cmpArray,
                 (((PdfDictionary) actual.get(1)).getAsArray(new PdfName("ColorantsDef")))));
     }
+
+    @Test
+    public void parseArrayTest() throws IOException {
+        String inputFileName = sourceFolder + "innerArraysInContentStreamWithEndDictToken.pdf";
+
+        PdfDocument pdfDocument = new PdfDocument(new PdfReader(inputFileName));
+
+        byte[] docInBytes = pdfDocument.getFirstPage().getContentBytes();
+
+        RandomAccessSourceFactory factory = new RandomAccessSourceFactory();
+
+        PdfTokenizer tokeniser = new PdfTokenizer(new RandomAccessFileOrArray(factory.createSource(docInBytes)));
+        PdfResources resources = pdfDocument.getPage(1).getResources();
+        PdfCanvasParser ps = new PdfCanvasParser(tokeniser, resources);
+
+         Exception exception = Assert.assertThrows(com.itextpdf.io.exceptions.IOException.class,
+                () -> ps.parse(null));
+        Assert.assertEquals(MessageFormatUtil.format(KernelExceptionMessageConstant.UNEXPECTED_TOKEN, ">>"),
+                exception.getCause().getMessage());
+    }
 }
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/parser/PdfCanvasParserTest/innerArraysInContentStreamWithEndDictToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/parser/PdfCanvasParserTest/innerArraysInContentStreamWithEndDictToken.pdf
new file mode 100644
index 000000000..d0ff90cba
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/parser/PdfCanvasParserTest/innerArraysInContentStreamWithEndDictToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endArrayClosingBracketInsteadOfEndDic.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endArrayClosingBracketInsteadOfEndDic.pdf
new file mode 100644
index 000000000..bbb86414a
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endArrayClosingBracketInsteadOfEndDic.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endDicClosingBracketInsideTheDic.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endDicClosingBracketInsideTheDic.pdf
new file mode 100644
index 000000000..2fa47427f
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/endDicClosingBracketInsideTheDic.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEOFToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEOFToken.pdf
new file mode 100644
index 000000000..1d36f6696
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEOFToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndDictToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndDictToken.pdf
new file mode 100644
index 000000000..10197e3f1
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndDictToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndObjToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndObjToken.pdf
new file mode 100644
index 000000000..2d406ebf2
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayEndObjToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayNameToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayNameToken.pdf
new file mode 100644
index 000000000..ca6d2d8bf
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayNameToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayObjToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayObjToken.pdf
new file mode 100644
index 000000000..97b45a6b9
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayObjToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayRefToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayRefToken.pdf
new file mode 100644
index 000000000..7f3e4beac
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayRefToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStartArrayToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStartArrayToken.pdf
new file mode 100644
index 000000000..c5e3f6ba9
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStartArrayToken.pdf differ
diff --git a/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStringToken.pdf b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStringToken.pdf
new file mode 100644
index 000000000..5277066a9
Binary files /dev/null and b/kernel/src/test/resources/com/itextpdf/kernel/pdf/PdfReaderTest/invalidArrayStringToken.pdf differ
