PACK:./clones/lukashinsch__split__spring-boot-actuator-logview
commit 760acbb939a8d1f7d1a7dfcd51ca848eea04e772
Author: Lukas Hinsch <lukas.hinsch@mindsmash.com>
Date:   Fri Jan 1 22:36:07 2021 +0100

    backport directory traversal vulnerability fix

diff --git a/.gitignore b/.gitignore
index ff415b3..2279dbe 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,3 +2,4 @@
 .idea
 *.iml
 build/
+out/
diff --git a/.travis.yml b/.travis.yml
index c6db5ba..2de67b2 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,6 +1,6 @@
 language: java
 jdk:
-  - oraclejdk8
+  - openjdk8
 
 after_success:
   - ./gradlew lib:jacocoTestReport lib:coveralls
\ No newline at end of file
diff --git a/lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java b/lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java
index 1bef7ce..493f07d 100644
--- a/lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java
+++ b/lib/src/main/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpoint.java
@@ -60,9 +60,9 @@ public class LogViewEndpoint implements MvcEndpoint{
                        @RequestParam(required = false, defaultValue = "FILENAME") SortBy sortBy,
                        @RequestParam(required = false, defaultValue = "false") boolean desc,
                        @RequestParam(required = false) String base) throws IOException, TemplateException {
-        securityCheck(base);
-
         Path currentFolder = loggingPath(base);
+        securityCheck(currentFolder, null);
+
 
         List<FileEntry> files = getFileProvider(currentFolder).getFileEntries(currentFolder);
         List<FileEntry> sortedFiles = sortFiles(files, sortBy, desc);
@@ -127,10 +127,10 @@ public class LogViewEndpoint implements MvcEndpoint{
                      @RequestParam(required = false) String base,
                      @RequestParam(required = false) Integer tailLines,
                      HttpServletResponse response) throws IOException {
-        securityCheck(filename);
-        response.setContentType(MediaType.TEXT_PLAIN_VALUE);
 
         Path path = loggingPath(base);
+        securityCheck(path, filename);
+        response.setContentType(MediaType.TEXT_PLAIN_VALUE);
         FileProvider fileProvider = getFileProvider(path);
         if (tailLines != null) {
             fileProvider.tailContent(path, filename, response.getOutputStream(), tailLines);
@@ -171,8 +171,15 @@ public class LogViewEndpoint implements MvcEndpoint{
         }
     }
 
-    private void securityCheck(String filename) {
-        Assert.doesNotContain(filename, "..");
+    private void securityCheck(Path base, String filename) {
+        try {
+            String canonicalLoggingPath = (filename != null ? new File(base.toFile().toString(), filename) : new File(base.toFile().toString())).getCanonicalPath();
+            String baseCanonicalPath = new File(loggingPath).getCanonicalPath();
+            String errorMessage = "File " + base.toString() + "/" + filename + " may not be located outside base path " + loggingPath;
+            Assert.isTrue(canonicalLoggingPath.startsWith(baseCanonicalPath), errorMessage);
+        } catch (IOException e) {
+            throw new IllegalStateException(e);
+        }
     }
 
     @Override
diff --git a/lib/src/test/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpointTest.java b/lib/src/test/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpointTest.java
index 0c73325..fbbb1c9 100644
--- a/lib/src/test/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpointTest.java
+++ b/lib/src/test/java/eu/hinsch/spring/boot/actuator/logview/LogViewEndpointTest.java
@@ -330,12 +330,22 @@ public class LogViewEndpointTest {
     public void shouldNotAllowToListFileOutsideRoot() throws Exception {
         // given
         expectedException.expect(IllegalArgumentException.class);
-        expectedException.expectMessage(containsString("this String argument must not contain the substring [..]"));
+        expectedException.expectMessage(containsString("may not be located outside base path"));
 
         // when
         logViewEndpoint.view("../somefile", null, null, null);
     }
 
+    @Test
+    public void shouldNotAllowToListWithBaseOutsideRoot() throws Exception {
+        // given
+        expectedException.expect(IllegalArgumentException.class);
+        expectedException.expectMessage(containsString("may not be located outside base path"));
+
+        // when
+        logViewEndpoint.view("somefile", "../otherdir", null, null);
+    }
+
     @Test
     public void shouldViewFile() throws Exception {
         // given
