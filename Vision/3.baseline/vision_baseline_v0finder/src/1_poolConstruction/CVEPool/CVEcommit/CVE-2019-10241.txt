PACK:./clones/eclipse__split__jetty.project
commit ca77bd384a2970cabbbdab25cf6251c6fb76cd21
Author: Joakim Erdfelt <joakim.erdfelt@gmail.com>
Date:   Wed Apr 3 16:28:26 2019 -0500

    Issue #3319 - Refactoring DefaultServlet Index/Listing
    
    + Now generates valid HTML5
    + Now allows column sort
    
    Signed-off-by: Joakim Erdfelt <joakim.erdfelt@gmail.com>

diff --git a/examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java b/examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java
index 3e1610b9c1..72c1c91596 100644
--- a/examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java
+++ b/examples/embedded/src/main/java/org/eclipse/jetty/embedded/FastFileServer.java
@@ -25,7 +25,6 @@ import java.nio.ByteBuffer;
 import java.nio.channels.FileChannel;
 import java.nio.channels.FileChannel.MapMode;
 import java.nio.file.StandardOpenOption;
-
 import javax.servlet.AsyncContext;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
@@ -115,7 +114,8 @@ public class FastFileServer
                 }
                 String listing = Resource.newResource(file).getListHTML(
                         request.getRequestURI(),
-                        request.getPathInfo().lastIndexOf("/") > 0);
+                        request.getPathInfo().lastIndexOf("/") > 0,
+                        request.getQueryString());
                 response.setContentType("text/html; charset=utf-8");
                 response.getWriter().println(listing);
                 return;
diff --git a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java
index 367958c7da..dcfc4bb107 100644
--- a/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java
+++ b/jetty-server/src/main/java/org/eclipse/jetty/server/handler/ResourceHandler.java
@@ -23,7 +23,6 @@ import java.io.OutputStream;
 import java.net.MalformedURLException;
 import java.nio.ByteBuffer;
 import java.nio.channels.ReadableByteChannel;
-
 import javax.servlet.AsyncContext;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletException;
@@ -589,7 +588,7 @@ public class ResourceHandler extends HandlerWrapper
     {
         if (_directory)
         {
-            String listing = resource.getListHTML(request.getRequestURI(),request.getPathInfo().lastIndexOf("/") > 0);
+            String listing = resource.getListHTML(request.getRequestURI(),request.getPathInfo().lastIndexOf("/") > 0, request.getQueryString());
             response.setContentType("text/html; charset=UTF-8");
             response.getWriter().println(listing);
         }
diff --git a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java
index fcd43db176..a4071e09ed 100644
--- a/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java
+++ b/jetty-servlet/src/main/java/org/eclipse/jetty/servlet/DefaultServlet.java
@@ -29,7 +29,6 @@ import java.util.ArrayList;
 import java.util.Enumeration;
 import java.util.List;
 import java.util.StringTokenizer;
-
 import javax.servlet.AsyncContext;
 import javax.servlet.RequestDispatcher;
 import javax.servlet.ServletContext;
@@ -845,7 +844,7 @@ public class DefaultServlet extends HttpServlet implements ResourceFactory
         else if (_contextHandler.getBaseResource() instanceof ResourceCollection)
             resource=_contextHandler.getBaseResource().addPath(pathInContext);
 
-        String dir = resource.getListHTML(base,pathInContext.length()>1);
+        String dir = resource.getListHTML(base,pathInContext.length()>1, request.getQueryString());
         if (dir==null)
         {
             response.sendError(HttpServletResponse.SC_FORBIDDEN,
diff --git a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DefaultServletTest.java b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DefaultServletTest.java
index fd3a81ea97..a2813ad4ef 100644
--- a/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DefaultServletTest.java
+++ b/jetty-servlet/src/test/java/org/eclipse/jetty/servlet/DefaultServletTest.java
@@ -18,8 +18,6 @@
 
 package org.eclipse.jetty.servlet;
 
-import static org.junit.Assert.assertTrue;
-
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -28,7 +26,6 @@ import java.nio.file.Files;
 import java.util.EnumSet;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
-
 import javax.servlet.DispatcherType;
 import javax.servlet.Filter;
 import javax.servlet.FilterChain;
@@ -54,6 +51,8 @@ import org.junit.Before;
 import org.junit.Rule;
 import org.junit.Test;
 
+import static org.junit.Assert.assertTrue;
+
 public class DefaultServletTest
 {
     @Rule
@@ -133,9 +132,14 @@ public class DefaultServletTest
         /* create some content in the docroot */
         File resBase = testdir.getFile("docroot");
         FS.ensureDirExists(resBase);
-        assertTrue(new File(resBase, "one").mkdir());
+        File one = new File(resBase, "one");
+        assertTrue(one.mkdir());
         assertTrue(new File(resBase, "two").mkdir());
         assertTrue(new File(resBase, "three").mkdir());
+
+        File alert = new File(one, "onmouseclick='alert(oops)'");
+        FS.touch(alert);
+
         if (!OS.IS_WINDOWS)
         {
             assertTrue("Creating dir 'f??r' (Might not work in Windows)", new File(resBase, "f??r").mkdir());
@@ -163,6 +167,15 @@ public class DefaultServletTest
         }
 
         assertResponseNotContains("<script>", response);
+
+
+        req1 = new StringBuffer();
+        req1.append("GET /context/one/;\"onmouseover='alert(document.location)' HTTP/1.0\n");
+        req1.append("\n");
+
+        response = connector.getResponses(req1.toString());
+
+        assertResponseNotContains("\"onmouseover", response);
     }
 
     @Test
diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java
index f56f541f40..13fe6253cf 100644
--- a/jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java
+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/Resource.java
@@ -32,16 +32,22 @@ import java.text.DateFormat;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Date;
+import java.util.List;
 
 import org.eclipse.jetty.util.B64Code;
 import org.eclipse.jetty.util.IO;
 import org.eclipse.jetty.util.Loader;
+import org.eclipse.jetty.util.MultiMap;
 import org.eclipse.jetty.util.StringUtil;
 import org.eclipse.jetty.util.URIUtil;
+import org.eclipse.jetty.util.UrlEncoded;
 import org.eclipse.jetty.util.log.Log;
 import org.eclipse.jetty.util.log.Logger;
 
+import static java.nio.charset.StandardCharsets.UTF_8;
+
 
 /* ------------------------------------------------------------ */
 /** 
@@ -492,65 +498,236 @@ public abstract class Resource implements ResourceFactory, Closeable
      * @param parent True if the parent directory should be included
      * @return String of HTML
      */
-    public String getListHTML(String base,boolean parent)
-        throws IOException
+    public String getListHTML(String base, boolean parent) throws IOException
+    {
+        return getListHTML(base, parent, null);
+    }
+
+    /** Get the resource list as a HTML directory listing.
+     * @param base The base URL
+     * @param parent True if the parent directory should be included
+     * @param query query params
+     * @return String of HTML
+     */
+    public String getListHTML(String base, boolean parent, String query) throws IOException
     {
         base=URIUtil.canonicalPath(base);
         if (base==null || !isDirectory())
             return null;
-        
+
         String[] ls = list();
-        if (ls==null)
+        if (ls == null)
+        {
             return null;
+        }
+
+        boolean sortOrderAscending = true;
+        String sortColumn = "N"; // name (or "M" for Last Modified, or "S" for Size)
+
+        // check for query
+        if (query != null)
+        {
+            MultiMap<String> params = new MultiMap<>();
+            byte[] rawQuery = query.getBytes(UTF_8);
+            UrlEncoded.decodeUtf8To(rawQuery, 0, query.length(), params);
+
+            String paramO = params.getString("O");
+            String paramC = params.getString("C");
+            if (StringUtil.isNotBlank(paramO))
+            {
+                if (paramO.equals("A"))
+                {
+                    sortOrderAscending = true;
+                }
+                else if (paramO.equals("D"))
+                {
+                    sortOrderAscending = false;
+                }
+            }
+            if (StringUtil.isNotBlank(paramC))
+            {
+                if (paramC.equals("N") || paramC.equals("M") || paramC.equals("S"))
+                {
+                    sortColumn = paramC;
+                }
+            }
+        }
+
+        // Gather up entries
+        List<Resource> items = new ArrayList<>();
+        for (int i=0 ; i< ls.length ; i++)
+        {
+            Resource item = addPath(ls[i]);
+            items.add(item);
+        }
+
+        // Perform sort
+        if (sortColumn.equals("M"))
+        {
+            Collections.sort(items, ResourceCollators.byLastModified(sortOrderAscending));
+        }
+        else if (sortColumn.equals("S"))
+        {
+            Collections.sort(items, ResourceCollators.bySize(sortOrderAscending));
+        }
+        else
+        {
+            Collections.sort(items, ResourceCollators.byName(sortOrderAscending));
+        }
+
         Arrays.sort(ls);
-        
+
         String decodedBase = URIUtil.decodePath(base);
-        String title = "Directory: "+deTag(decodedBase);
+        String title = "Directory: " + deTag(decodedBase);
 
-        StringBuilder buf=new StringBuilder(4096);
-        buf.append("<HTML><HEAD>");
-        buf.append("<LINK HREF=\"").append("jetty-dir.css").append("\" REL=\"stylesheet\" TYPE=\"text/css\"/><TITLE>");
-        buf.append(title);
-        buf.append("</TITLE></HEAD><BODY>\n<H1>");
+        StringBuilder buf = new StringBuilder(4096);
+
+        // Doctype Declaration (HTML5)
+        buf.append("<!DOCTYPE html>\n");
+        buf.append("<html lang=\"en\">\n");
+
+        // HTML Header
+        buf.append("<head>\n");
+        buf.append("<meta charset=\"utf-8\">\n");
+        buf.append("<link href=\"jetty-dir.css\" rel=\"stylesheet\" />\n");
+        buf.append("<title>");
         buf.append(title);
-        buf.append("</H1>\n<TABLE BORDER=0>\n");
-        
-        if (parent)
+        buf.append("</title>\n");
+        buf.append("</head>\n");
+
+        // HTML Body
+        buf.append("<body>\n");
+        buf.append("<h1 class=\"title\">").append(title).append("</h1>\n");
+
+        // HTML Table
+        final String ARROW_DOWN = "&nbsp; &#8681;";
+        final String ARROW_UP = "&nbsp; &#8679;";
+        String arrow;
+        String order;
+
+        buf.append("<table class=\"listing\">\n");
+        buf.append("<thead>\n");
+
+        arrow = "";
+        order = "A";
+        if (sortColumn.equals("N"))
         {
-            buf.append("<TR><TD><A HREF=\"");
-            buf.append(URIUtil.addPaths(base,"../"));
-            buf.append("\">Parent Directory</A></TD><TD></TD><TD></TD></TR>\n");
+            if(sortOrderAscending)
+            {
+                order = "D";
+                arrow = ARROW_UP;
+            }
+            else
+            {
+                order = "A";
+                arrow = ARROW_DOWN;
+            }
         }
-        
+
+        buf.append("<tr><th class=\"name\"><a href=\"?C=N&O=").append(order).append("\">");
+        buf.append("Name").append(arrow);
+        buf.append("</a></th>");
+
+        arrow = "";
+        order = "A";
+        if (sortColumn.equals("M"))
+        {
+            if(sortOrderAscending)
+            {
+                order = "D";
+                arrow = ARROW_UP;
+            }
+            else
+            {
+                order = "A";
+                arrow = ARROW_DOWN;
+            }
+        }
+
+        buf.append("<th class=\"lastmodified\"><a href=\"?C=M&O=").append(order).append("\">");
+        buf.append("Last Modified").append(arrow);
+        buf.append("</a></th>");
+
+        arrow = "";
+        order = "A";
+        if (sortColumn.equals("S"))
+        {
+            if(sortOrderAscending)
+            {
+                order = "D";
+                arrow = ARROW_UP;
+            }
+            else
+            {
+                order = "A";
+                arrow = ARROW_DOWN;
+            }
+        }
+        buf.append("<th class=\"size\"><a href=\"?C=S&O=").append(order).append("\">");
+        buf.append("Size").append(arrow);
+        buf.append("</a></th></tr>\n");
+        buf.append("</thead>\n");
+
+        buf.append("<tbody>\n");
+
         String encodedBase = hrefEncodeURI(base);
         
+        if (parent)
+        {
+            // Name
+            buf.append("<tr><td class=\"name\"><a href=\"");
+            buf.append(URIUtil.addPaths(encodedBase,"../"));
+            buf.append("\">Parent Directory</a></td>");
+            // Last Modified
+            buf.append("<td class=\"lastmodified\">-</td>");
+            // Size
+            buf.append("<td>-</td>");
+            buf.append("</tr>\n");
+        }
+
         DateFormat dfmt=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,
                                                        DateFormat.MEDIUM);
-        for (int i=0 ; i< ls.length ; i++)
+        for (Resource item: items)
         {
-            Resource item = addPath(ls[i]);
-            
-            buf.append("\n<TR><TD><A HREF=\"");
-            String path=URIUtil.addPaths(encodedBase,URIUtil.encodePath(ls[i]));
-            
+            String name = item.getName();
+            int slashIdx = name.lastIndexOf('/');
+            if (slashIdx != -1)
+            {
+                name = name.substring(slashIdx + 1);
+            }
+
+            // Name
+            buf.append("<tr><td class=\"name\"><a href=\"");
+            String path=URIUtil.addPaths(encodedBase,URIUtil.encodePath(name));
             buf.append(path);
-            
             if (item.isDirectory() && !path.endsWith("/"))
+            {
                 buf.append(URIUtil.SLASH);
+            }
             
-            // URIUtil.encodePath(buf,path);
             buf.append("\">");
-            buf.append(deTag(ls[i]));
+            buf.append(deTag(name));
+            if (item.isDirectory() && !path.endsWith("/"))
+            {
+                buf.append(URIUtil.SLASH);
+            }
             buf.append("&nbsp;");
-            buf.append("</A></TD><TD ALIGN=right>");
-            buf.append(item.length());
-            buf.append(" bytes&nbsp;</TD><TD>");
+            buf.append("</a></td>");
+
+            // Last Modified
+            buf.append("<td class=\"lastmodified\">");
             buf.append(dfmt.format(new Date(item.lastModified())));
-            buf.append("</TD></TR>");
+            buf.append("</td>");
+
+            // Size
+            buf.append("<td class=\"size\">");
+            buf.append(String.format("%,d", item.length()));
+            buf.append(" bytes&nbsp;</td></tr>\n");
         }
-        buf.append("</TABLE>\n");
-        buf.append("</BODY></HTML>\n");
-        
+        buf.append("</tbody>\n");
+        buf.append("</table>\n");
+        buf.append("</body></html>\n");
+
         return buf.toString();
     }
     
diff --git a/jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollators.java b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollators.java
new file mode 100644
index 0000000000..e73cd741ad
--- /dev/null
+++ b/jetty-util/src/main/java/org/eclipse/jetty/util/resource/ResourceCollators.java
@@ -0,0 +1,101 @@
+//
+//  ========================================================================
+//  Copyright (c) 1995-2018 Mort Bay Consulting Pty. Ltd.
+//  ------------------------------------------------------------------------
+//  All rights reserved. This program and the accompanying materials
+//  are made available under the terms of the Eclipse Public License v1.0
+//  and Apache License v2.0 which accompanies this distribution.
+//
+//      The Eclipse Public License is available at
+//      http://www.eclipse.org/legal/epl-v10.html
+//
+//      The Apache License v2.0 is available at
+//      http://www.opensource.org/licenses/apache2.0.php
+//
+//  You may elect to redistribute this code under either of these licenses.
+//  ========================================================================
+//
+
+package org.eclipse.jetty.util.resource;
+
+import java.util.Collections;
+import java.util.Comparator;
+
+public class ResourceCollators
+{
+    private static Comparator<? super Resource> BY_NAME_ASCENDING =
+            new Comparator<Resource>()
+            {
+                @Override
+                public int compare(Resource o1, Resource o2)
+                {
+                    return o1.getName().compareTo(o2.getName());
+                }
+            };
+
+    private static Comparator<? super Resource> BY_NAME_DESCENDING =
+            Collections.reverseOrder(BY_NAME_ASCENDING);
+
+    private static Comparator<? super Resource> BY_LAST_MODIFIED_ASCENDING =
+            new Comparator<Resource>()
+            {
+                @Override
+                public int compare(Resource o1, Resource o2)
+                {
+                    return (int) (o1.lastModified() - o2.lastModified());
+                }
+            };
+
+    private static Comparator<? super Resource> BY_LAST_MODIFIED_DESCENDING =
+            Collections.reverseOrder(BY_LAST_MODIFIED_ASCENDING);
+
+    private static Comparator<? super Resource> BY_SIZE_ASCENDING =
+            new Comparator<Resource>()
+            {
+                @Override
+                public int compare(Resource o1, Resource o2)
+                {
+                    return (int) (o1.length() - o2.length());
+                }
+            };
+
+    private static Comparator<? super Resource> BY_SIZE_DESCENDING =
+            Collections.reverseOrder(BY_SIZE_ASCENDING);
+
+
+    public static Comparator<? super Resource> byLastModified(boolean sortOrderAscending)
+    {
+        if (sortOrderAscending)
+        {
+            return BY_LAST_MODIFIED_ASCENDING;
+        }
+        else
+        {
+            return BY_LAST_MODIFIED_DESCENDING;
+        }
+    }
+
+    public static Comparator<? super Resource> byName(boolean sortOrderAscending)
+    {
+        if (sortOrderAscending)
+        {
+            return BY_NAME_ASCENDING;
+        }
+        else
+        {
+            return BY_NAME_DESCENDING;
+        }
+    }
+
+    public static Comparator<? super Resource> bySize(boolean sortOrderAscending)
+    {
+        if (sortOrderAscending)
+        {
+            return BY_SIZE_ASCENDING;
+        }
+        else
+        {
+            return BY_SIZE_DESCENDING;
+        }
+    }
+}
diff --git a/jetty-util/src/main/resources/jetty-dir.css b/jetty-util/src/main/resources/jetty-dir.css
index 1686813ff7..cbcc88d91a 100644
--- a/jetty-util/src/main/resources/jetty-dir.css
+++ b/jetty-util/src/main/resources/jetty-dir.css
@@ -1,19 +1,38 @@
-body 
-{
+body {
 	background-color: #FFFFFF;
 	margin: 10px;
 	padding: 5px;
+	font-family: sans-serif;
 }
 
-h1
-{
+h1.title {
 	text-shadow: #000000 -1px -1px 1px;
 	color: #FC390E;
 	font-weight: bold;
 }
 
-a
-{
+table.listing {
+	border: 0px;
+}
+
+thead a {
+	color: blue;
+}
+
+thead th {
+	border-bottom: black 1px solid;
+}
+
+.name, .lastmodified {
+	text-align: left;
+	padding-right: 15px;
+}
+
+.size {
+	text-align: right;
+}
+
+a {
 	color: #7036be;
 	font-weight: bold;
 	font-style: normal;
@@ -21,10 +40,9 @@ a
 	font-size:inherit;
 }
 
-td
-{
+td {
 	font-style: italic;
-	padding: 2px 15px 2px 0px;
+	padding: 2px;
 }
 
 
