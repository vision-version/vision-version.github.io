PACK:./clones/apache__split__pdfbox
commit 5c5a837140fbb4ef78bb5ef9f29ad537c872c83e
Author: Andreas Lehmk√ºhler <lehmi@apache.org>
Date:   Thu Feb 25 07:16:09 2021 +0000

    PDFBOX-4892: sync read/readFully code to get the same behaviour for all classes implementing the same interface
    
    git-svn-id: https://svn.apache.org/repos/asf/pdfbox/branches/2.0@1886911 13f79535-47bb-0310-9956-ffa450edef68

diff --git a/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java b/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java
index fa589396d..36fc1f254 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBuffer.java
@@ -16,6 +16,7 @@
  */
 package org.apache.pdfbox.io;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.util.ArrayList;
@@ -243,7 +244,7 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable
         checkClosed();
         if (pointer >= size)
         {
-            return 0;
+            return -1;
         }
         int bytesRead = readRemainingBytes(b, offset, length);
         while (bytesRead < length && available() > 0)
@@ -259,10 +260,6 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable
 
     private int readRemainingBytes(byte[] b, int offset, int length)
     {
-        if (pointer >= size)
-        {
-            return 0;
-        }
         int maxLength = (int) Math.min(length, size-pointer);
         int remainingBytes = chunkSize - currentBufferPointer;
         // no more bytes left
@@ -500,13 +497,18 @@ public class RandomAccessBuffer implements RandomAccess, Cloneable
     @Override
     public byte[] readFully(int length) throws IOException
     {
-        byte[] b = new byte[length];
-        int bytesRead = read(b);
-        while (bytesRead < length)
+        byte[] bytes = new byte[length];
+        int bytesRead = 0;
+        do
         {
-            bytesRead += read(b, bytesRead, length - bytesRead);
-        }
-        return b;
+            int count = read(bytes, bytesRead, length - bytesRead);
+            if (count < 0)
+            {
+                throw new EOFException();
+            }
+            bytesRead += count;
+        } while (bytesRead < length);
+        return bytes;
     }
 
     /**
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java b/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java
index 4957d9ca5..68cf9adbe 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/io/RandomAccessBufferedFileInputStream.java
@@ -16,6 +16,7 @@
  */
 package org.apache.pdfbox.io;
 
+import java.io.EOFException;
 import java.io.File;
 import java.io.FileOutputStream;
 import java.io.IOException;
@@ -336,13 +337,18 @@ extends InputStream implements RandomAccessRead
     @Override
     public byte[] readFully(int length) throws IOException
     {
-        byte[] b = new byte[length];
-        int bytesRead = read(b);
-        while(bytesRead < length)
+        byte[] bytes = new byte[length];
+        int bytesRead = 0;
+        do
         {
-            bytesRead += read(b, bytesRead, length-bytesRead);
-        }
-        return b;
+            int count = read(bytes, bytesRead, length - bytesRead);
+            if (count < 0)
+            {
+                throw new EOFException();
+            }
+            bytesRead += count;
+        } while (bytesRead < length);
+        return bytes;
     }
 
     @Override
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java b/pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java
index c076798aa..c43b80f24 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/io/ScratchFileBuffer.java
@@ -372,22 +372,20 @@ class ScratchFileBuffer implements RandomAccess
      * {@inheritDoc}
      */
     @Override
-    public byte[] readFully(int len) throws IOException
+    public byte[] readFully(int length) throws IOException
     {
-        byte[] b = new byte[len];
-
-        int n = 0;
+        byte[] bytes = new byte[length];
+        int bytesRead = 0;
         do
         {
-            int count = read(b, n, len - n);
+            int count = read(bytes, bytesRead, length - bytesRead);
             if (count < 0)
             {
                 throw new EOFException();
             }
-            n += count;
-        } while (n < len);
-
-        return b;
+            bytesRead += count;
+        } while (bytesRead < length);
+        return bytes;
     }
 
     /**
diff --git a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java
index 7eb06441b..10d4db1f2 100644
--- a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java
+++ b/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/InputStreamSource.java
@@ -17,6 +17,7 @@
 
 package org.apache.pdfbox.pdfparser;
 
+import java.io.EOFException;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.PushbackInputStream;
@@ -120,21 +121,16 @@ final class InputStreamSource implements SequentialSource
     public byte[] readFully(int length) throws IOException
     {
         byte[] bytes = new byte[length];
-        int off = 0;
-        int len = length;
-        while (len > 0)
+        int bytesRead = 0;
+        do
         {
-            int n = this.read(bytes, off, len);
-            if (n > 0)
+            int count = read(bytes, bytesRead, length - bytesRead);
+            if (count < 0)
             {
-                off += n;
-                len -= n;
+                throw new EOFException();
             }
-            else
-            {
-                break;
-            }
-        }
+            bytesRead += count;
+        } while (bytesRead < length);
         return bytes;
     }
 
diff --git a/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java b/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java
index ebcaff0cd..b14de0470 100644
--- a/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java
+++ b/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/InputStreamSourceTest.java
@@ -17,6 +17,7 @@
 package org.apache.pdfbox.pdfparser;
 
 import java.io.ByteArrayInputStream;
+import java.io.EOFException;
 import java.io.IOException;
 import org.junit.Assert;
 import org.junit.Test;
@@ -38,6 +39,16 @@ public class InputStreamSourceTest
         inputStreamSource.readFully(5);
         Assert.assertEquals(5, inputStreamSource.getPosition());
 
+        try
+        {
+            inputStreamSource.readFully(10);
+            Assert.fail("readFully beyond EOF should have triggered an EOFException");
+        }
+        catch(EOFException exception)
+        {
+
+        }
+
         inputStreamSource.close();
     }
 
diff --git a/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java b/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java
index f0327f153..10927dbed 100644
--- a/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java
+++ b/pdfbox/src/test/java/org/apache/pdfbox/pdfparser/RandomAccessSourceTest.java
@@ -17,6 +17,7 @@
 package org.apache.pdfbox.pdfparser;
 
 import java.io.ByteArrayInputStream;
+import java.io.EOFException;
 import java.io.IOException;
 
 import org.apache.pdfbox.io.RandomAccessBuffer;
@@ -41,6 +42,16 @@ public class RandomAccessSourceTest
         randomAccessSource.readFully(5);
         Assert.assertEquals(5, randomAccessSource.getPosition());
 
+        try
+        {
+            randomAccessSource.readFully(10);
+            Assert.fail("readFully beyond EOF should have triggered an EOFException");
+        }
+        catch (EOFException exception)
+        {
+
+        }
+
         randomAccessSource.close();
     }
 
