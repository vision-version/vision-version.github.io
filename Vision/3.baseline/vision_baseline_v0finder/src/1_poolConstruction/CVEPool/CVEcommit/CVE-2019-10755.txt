PACK:./clones/pac4j__split__pac4j
commit 34d5b1028a2db201ee81ec51b52a782fe073f609
Author: Jérôme LELEU <leleuj@gmail.com>
Date:   Fri Sep 20 08:12:53 2019 +0200

    Remove RandomStringUtils

diff --git a/pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java b/pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java
index 25abee2b8..5244b2147 100644
--- a/pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java
+++ b/pac4j-core/src/main/java/org/pac4j/core/util/CommonHelper.java
@@ -230,7 +230,11 @@ public final class CommonHelper {
      * @return the random size
      */
     public static String randomString(final int size) {
-        return java.util.UUID.randomUUID().toString().replace("-", "").substring(0, size);
+        StringBuffer sb = new StringBuffer("");
+        while (sb.length() < size) {
+            sb.append(java.util.UUID.randomUUID().toString().replace("-", ""));
+        }
+        return sb.toString().substring(0, size);
     }
 
     /**
diff --git a/pac4j-core/src/test/java/org/pac4j/core/util/CommonHelperTests.java b/pac4j-core/src/test/java/org/pac4j/core/util/CommonHelperTests.java
index 186e0f2d1..36bcddafa 100644
--- a/pac4j-core/src/test/java/org/pac4j/core/util/CommonHelperTests.java
+++ b/pac4j-core/src/test/java/org/pac4j/core/util/CommonHelperTests.java
@@ -190,7 +190,15 @@ public final class CommonHelperTests {
 
     @Test
     public void testRandomString() {
-        assertNotNull(CommonHelper.randomString(10));
+        for (int i = 0; i < 128; i++) {
+            internalTestRandomString(i);
+        }
+    }
+
+    private void internalTestRandomString(final int size) {
+        final String s = CommonHelper.randomString(size);
+        assertNotNull(s);
+        assertEquals(size, s.length());
     }
 
     @Test
diff --git a/pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java b/pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java
index d320ce44c..d8b6c621e 100644
--- a/pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java
+++ b/pac4j-saml/src/main/java/org/pac4j/saml/util/SAML2Utils.java
@@ -3,14 +3,14 @@ package org.pac4j.saml.util;
 import java.net.URI;
 import java.net.URISyntaxException;
 
-import org.apache.commons.lang.RandomStringUtils;
 import org.pac4j.core.context.HttpConstants;
+import org.pac4j.core.util.CommonHelper;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * SAML2 utilities.
- * 
+ *
  * @author jkacer
  * @since 1.8.0
  */
@@ -27,23 +27,23 @@ public final class SAML2Utils implements HttpConstants {
     }
 
     public static String generateID() {
-        return "_".concat(RandomStringUtils.randomAlphanumeric(39)).toLowerCase();
+        return "_".concat(CommonHelper.randomString(39)).toLowerCase();
     }
 
     /**
      * Compares two URIs for equality, ignoring default port numbers for selected protocols.
-     * 
+     *
      * By default, {@link URI#equals(Object)} doesn't take into account default port numbers, so http://server:80/resource is a different
      * URI than http://server/resource.
-     * 
+     *
      * And URLs should not be used for comparison, as written here:
      * http://stackoverflow.com/questions/3771081/proper-way-to-check-for-url-equality
-     * 
+     *
      * @param uri1
      *            URI 1 to be compared.
      * @param uri2
      *            URI 2 to be compared.
-     * 
+     *
      * @return True if both URIs are equal.
      */
     public static boolean urisEqualAfterPortNormalization(final URI uri1, final URI uri2) {
@@ -53,7 +53,7 @@ public final class SAML2Utils implements HttpConstants {
         if (uri1 == null || uri2 == null) {
             return false;
         }
-        
+
         try {
             URI normalizedUri1 = normalizePortNumbersInUri(uri1);
             URI normalizedUri2 = normalizePortNumbersInUri(uri2);
@@ -61,18 +61,18 @@ public final class SAML2Utils implements HttpConstants {
             return eq;
         } catch (URISyntaxException use) {
             logger.error("Cannot compare 2 URIs.", use);
-            return false;    
+            return false;
         }
     }
-    
+
     /**
      * Normalizes a URI. If it contains the default port for the used scheme, the method replaces the port with "default".
-     * 
+     *
      * @param uri
      *            The URI to normalize.
-     * 
+     *
      * @return A normalized URI.
-     * 
+     *
      * @throws URISyntaxException
      *             If a URI cannot be created because of wrong syntax.
      */
@@ -86,7 +86,7 @@ public final class SAML2Utils implements HttpConstants {
         if (SCHEME_HTTPS.equals(scheme) && port == DEFAULT_HTTPS_PORT) {
             port = -1;
         }
-        
+
         final URI result = new URI(scheme, uri.getUserInfo(), uri.getHost(), port, uri.getPath(), uri.getQuery(), uri.getFragment());
         return result;
     }
