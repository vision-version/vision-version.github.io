if(!jsontokentype.string.equals(token.gettype())&&!jsontokentype.unquoted_string.equals(token.gettype())&&!jsontokentype.regular_expression.equals(token.gettype()))returnnull;booleanisregularexpression=token.gettype().equals(jsontokentype.regular_expression);bindablevaluebindablevalue=newbindablevalue();stringtokenvalue=isregularexpression?token.getvalue(bsonregularexpression.class).getpattern():string.class.cast(token.getvalue());matchermatcher=parameter_binding_pattern.matcher(tokenvalue);if(token.gettype().equals(jsontokentype.unquoted_string))matcherregexmatcher=expression_binding_pattern.matcher(tokenvalue);if(regexmatcher.find())stringbinding=regexmatcher.group();stringexpression=binding.substring(3,binding.length()-1);matcherinspelmatcher=parameter_binding_pattern.matcher(expression);while(inspelmatcher.find())intindex=computeparameterindex(inspelmatcher.group());expression=expression.replace(inspelmatcher.group(),getbindablevalueforindex(index).tostring());objectvalue=evaluateexpression(expression);bindablevalue.setvalue(value);bindablevalue.settype(bsontypeforvalue(value));returnbindablevalue;if(matcher.find())intindex=computeparameterindex(matcher.group());bindablevalue.setvalue(getbindablevalueforindex(index));bindablevalue.settype(bsontypeforvalue(getbindablevalueforindex(index)));returnbindablevalue;bindablevalue.setvalue(tokenvalue);bindablevalue.settype(bsontype.string);returnbindablevalue;stringcomputedvalue=tokenvalue;matcherregexmatcher=expression_binding_pattern.matcher(computedvalue);while(regexmatcher.find())stringbinding=regexmatcher.group();stringexpression=binding.substring(3,binding.length()-1);matcherinspelmatcher=parameter_binding_pattern.matcher(expression);while(inspelmatcher.find())intindex=computeparameterindex(inspelmatcher.group());expression=expression.replace(inspelmatcher.group(),getbindablevalueforindex(index).tostring());computedvalue=computedvalue.replace(binding,nullsafetostring(evaluateexpression(expression)));bindablevalue.setvalue(computedvalue);bindablevalue.settype(bsontype.string);returnbindablevalue;while(matcher.find())stringgroup=matcher.group();intindex=computeparameterindex(group);computedvalue=computedvalue.replace(group,nullsafetostring(getbindablevalueforindex(index)));if(isregularexpression)bindablevalue.setvalue(newbsonregularexpression(computedvalue));bindablevalue.settype(bsontype.regular_expression);elsebindablevalue.setvalue(computedvalue);bindablevalue.settype(bsontype.string);returnbindablevalue;