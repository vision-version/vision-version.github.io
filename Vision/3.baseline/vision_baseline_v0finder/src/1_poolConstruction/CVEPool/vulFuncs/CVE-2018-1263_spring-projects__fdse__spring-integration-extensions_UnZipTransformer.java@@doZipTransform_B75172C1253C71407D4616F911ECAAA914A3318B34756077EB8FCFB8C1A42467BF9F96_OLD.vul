tryfinalobjectpayload=message.getpayload();finalobjectunzippeddata;inputstreaminputstream=null;tryif(payloadinstanceoffile)finalfilefilepayload=(file)payload;if(filepayload.isdirectory())thrownewunsupportedoperationexception(string.format("cannotunzipadirectory:'%s'",filepayload.getabsolutepath()));if(!springziputils.isvalid(filepayload))thrownewillegalstateexception(string.format("notazipfile:'%s'.",filepayload.getabsolutepath()));inputstream=newfileinputstream(filepayload);elseif(payloadinstanceofinputstream)inputstream=(inputstream)payload;elseif(payloadinstanceofbyte[])inputstream=newbytearrayinputstream((byte[])payload);elsethrownewillegalargumentexception(string.format("unsupportedpayloadtype'%s'."+"theonlysupportedpayloadtypesarejava.io.file,byte[]andjava.io.inputstream",payload.getclass().getsimplename()));finalsortedmap<string,object>uncompresseddata=newtreemap<string,object>();ziputil.iterate(inputstream,newzipentrycallback()@overridepublicvoidprocess(inputstreamzipentryinputstream,zipentryzipentry)throwsioexceptionfinalstringzipentryname=zipentry.getname();finallongzipentrytime=zipentry.gettime();finallongzipentrycompressedsize=zipentry.getcompressedsize();finalstringtype=zipentry.isdirectory()?"directory":"file";if(logger.isinfoenabled())logger.info(string.format("unpackingzipentry-name:'%s',time:'%s',"+"compressedsize:'%s',type:'%s'",zipentryname,zipentrytime,zipentrycompressedsize,type));if(zipresulttype.file.equals(zipresulttype))finalfiletempdir=newfile(workdirectory,message.getheaders().getid().tostring());tempdir.mkdirs();finalfiledestinationfile=newfile(tempdir,zipentryname);if(!destinationfile.getcanonicalpath().startswith(workdirectory.getcanonicalpath()))thrownewzipexception("thefile"+zipentryname+"istryingtoleavethetargetoutputdirectoryof"+workdirectory);if(zipentry.isdirectory())destinationfile.mkdirs();elsespringziputils.copy(zipentryinputstream,destinationfile);uncompresseddata.put(zipentryname,destinationfile);elseif(zipresulttype.byte_array.equals(zipresulttype))if(!zipentry.isdirectory())byte[]data=ioutils.tobytearray(zipentryinputstream);uncompresseddata.put(zipentryname,data);elsethrownewillegalstateexception("unsupportedzipresulttype"+zipresulttype););if(uncompresseddata.isempty())if(logger.iswarnenabled())logger.warn("nodataunzippedfrompayloadwithmessageid"+message.getheaders().getid());unzippeddata=null;elseif(this.expectsingleresult)if(uncompresseddata.size()==1)unzippeddata=uncompresseddata.values().iterator().next();elsethrownewmessagingexception(message,string.format("theunzipoperationextracted%s"+"resultobjectsbutexpectsingleresultwas'true'.",uncompresseddata.size()));elseunzippeddata=uncompresseddata;finallyioutils.closequietly(inputstream);if(payloadinstanceoffile&&this.deletefiles)finalfilefilepayload=(file)payload;if(!filepayload.delete()&&logger.iswarnenabled())if(logger.iswarnenabled())logger.warn("failedtodeletefile'"+filepayload+"'");returnunzippeddata;catch(exceptione)thrownewmessagehandlingexception(message,"failedtoapplyziptransformation.",e);