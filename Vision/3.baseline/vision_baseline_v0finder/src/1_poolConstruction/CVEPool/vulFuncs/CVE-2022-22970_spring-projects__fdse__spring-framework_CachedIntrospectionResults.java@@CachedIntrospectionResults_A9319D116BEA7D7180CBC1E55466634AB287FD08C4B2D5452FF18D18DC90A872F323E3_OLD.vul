tryif(logger.istraceenabled())logger.trace("gettingbeaninfoforclass["+beanclass.getname()+"]");this.beaninfo=getbeaninfo(beanclass);if(logger.istraceenabled())logger.trace("cachingpropertydescriptorsforclass["+beanclass.getname()+"]");this.propertydescriptors=newlinkedhashmap<>();set<string>readmethodnames=newhashset<>();propertydescriptor[]pds=this.beaninfo.getpropertydescriptors();for(propertydescriptorpd:pds)if(class.class==beanclass&&!("name".equals(pd.getname())||(pd.getname().endswith("name")&&string.class==pd.getpropertytype())))continue;if(pd.getwritemethod()==null&&pd.getpropertytype()!=null&&(classloader.class.isassignablefrom(pd.getpropertytype())||protectiondomain.class.isassignablefrom(pd.getpropertytype())))continue;if(logger.istraceenabled())logger.trace("foundbeanproperty'"+pd.getname()+"'"+(pd.getpropertytype()!=null?"oftype["+pd.getpropertytype().getname()+"]":"")+(pd.getpropertyeditorclass()!=null?";editor["+pd.getpropertyeditorclass().getname()+"]":""));pd=buildgenerictypeawarepropertydescriptor(beanclass,pd);this.propertydescriptors.put(pd.getname(),pd);methodreadmethod=pd.getreadmethod();if(readmethod!=null)readmethodnames.add(readmethod.getname());class<?>currclass=beanclass;while(currclass!=null&&currclass!=object.class)introspectinterfaces(beanclass,currclass,readmethodnames);currclass=currclass.getsuperclass();introspectplainaccessors(beanclass,readmethodnames);this.typedescriptorcache=newconcurrentreferencehashmap<>();catch(introspectionexceptionex)thrownewfatalbeanexception("failedtoobtainbeaninfoforclass["+beanclass.getname()+"]",ex);