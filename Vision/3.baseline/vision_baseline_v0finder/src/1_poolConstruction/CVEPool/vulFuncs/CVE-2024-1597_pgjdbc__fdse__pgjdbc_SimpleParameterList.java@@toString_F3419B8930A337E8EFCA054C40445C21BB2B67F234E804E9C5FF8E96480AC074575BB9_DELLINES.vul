      return "NULL";
          return Short.toString(s);
          return Integer.toString(i);
          return Long.toString(l);
            return "'NaN'::real";
          return Float.toString(f);
            return "'NaN'::double precision";
          return Double.toString(d);
            return "'NaN'::numeric";
          return "'" + uuid + "'::uuid";
          return "'" + pgPoint.toString() + "'::point";
          return "'" + pgBox.toString() + "'::box";

      // add room for quotes + potential escaping.
      StringBuilder p = new StringBuilder(3 + (param.length() + 10) / 10 * 11);

      // No E'..' here since escapeLiteral escapes all things and it does not use \123 kind of
      // escape codes
      p.append('\'');
      try {
        p = Utils.escapeLiteral(p, param, standardConformingStrings);
      } catch (SQLException sqle) {
        // This should only happen if we have an embedded null
        // and there's not much we can do if we do hit one.
        //
        // The goal of toString isn't to be sent to the server,
        // so we aren't 100% accurate (see StreamWrapper), put
        // the unescaped version of the data.
        //
        p.append(param);
      }
      p.append('\'');
        p.append("::timestamp");
        p.append("::timestamp with time zone");
        p.append("::time");
        p.append("::time with time zone");
        p.append("::date");
        p.append("::interval");
        p.append("::numeric");
      return p.toString();
