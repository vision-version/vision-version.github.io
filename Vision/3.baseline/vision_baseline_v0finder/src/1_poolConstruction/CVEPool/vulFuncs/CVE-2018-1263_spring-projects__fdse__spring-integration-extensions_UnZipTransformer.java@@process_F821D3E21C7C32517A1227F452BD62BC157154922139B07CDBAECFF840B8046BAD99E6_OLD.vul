finalstringzipentryname=zipentry.getname();finallongzipentrytime=zipentry.gettime();finallongzipentrycompressedsize=zipentry.getcompressedsize();finalstringtype=zipentry.isdirectory()?"directory":"file";if(logger.isinfoenabled())logger.info(string.format("unpackingzipentry-name:'%s',time:'%s',"+"compressedsize:'%s',type:'%s'",zipentryname,zipentrytime,zipentrycompressedsize,type));if(zipresulttype.file.equals(zipresulttype))finalfiletempdir=newfile(workdirectory,message.getheaders().getid().tostring());tempdir.mkdirs();finalfiledestinationfile=newfile(tempdir,zipentryname);if(!destinationfile.getcanonicalpath().startswith(workdirectory.getcanonicalpath()))thrownewzipexception("thefile"+zipentryname+"istryingtoleavethetargetoutputdirectoryof"+workdirectory);if(zipentry.isdirectory())destinationfile.mkdirs();elsespringziputils.copy(zipentryinputstream,destinationfile);uncompresseddata.put(zipentryname,destinationfile);elseif(zipresulttype.byte_array.equals(zipresulttype))if(!zipentry.isdirectory())byte[]data=ioutils.tobytearray(zipentryinputstream);uncompresseddata.put(zipentryname,data);elsethrownewillegalstateexception("unsupportedzipresulttype"+zipresulttype);