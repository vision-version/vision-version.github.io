PACK:/home/dellr740/dfs/data/Workspace/wss/GithubCache/spring-projects__fdse__spring-framework
commit dd011c991ce801660ec2be7979f3fc6462f29289
Merge: 59ecedea46 d616c6632d
Author: Rossen Stoyanchev <rstoyanchev@pivotal.io>
Date:   Mon Sep 7 21:41:30 2020 +0100

    Merge branch '5.2.x' into master

diff --git a/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java
index b9c4a4c301..40d74ae24f xxxxxx
--- a/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java
+++ b/spring-web/src/main/java/org/springframework/web/filter/ForwardedHeaderFilter.java
@@@ -235,11 -221,11 +226,11 @@@ public class ForwardedHeaderFilter exte
  		private final ForwardedPrefixExtractor forwardedPrefixExtractor;
  
  
- 		ForwardedHeaderExtractingRequest(HttpServletRequest servletRequest, UrlPathHelper pathHelper) {
 -		ForwardedHeaderExtractingRequest(HttpServletRequest request) {
 -			super(request);
++		ForwardedHeaderExtractingRequest(HttpServletRequest servletRequest) {
 +			super(servletRequest);
  
 -			HttpRequest httpRequest = new ServletServerHttpRequest(request);
 -			UriComponents uriComponents = UriComponentsBuilder.fromHttpRequest(httpRequest).build();
 +			ServerHttpRequest request = new ServletServerHttpRequest(servletRequest);
 +			UriComponents uriComponents = UriComponentsBuilder.fromHttpRequest(request).build();
  			int port = uriComponents.getPort();
  
  			this.scheme = uriComponents.getScheme();
@@@ -247,11 -233,9 +238,11 @@@
  			this.host = uriComponents.getHost();
  			this.port = (port == -1 ? (this.secure ? 443 : 80) : port);
  
 +			this.remoteAddress = UriComponentsBuilder.parseForwardedFor(request, request.getRemoteAddress());
 +
  			String baseUrl = this.scheme + "://" + this.host + (port == -1 ? "" : ":" + port);
  			Supplier<HttpServletRequest> delegateRequest = () -> (HttpServletRequest) getRequest();
- 			this.forwardedPrefixExtractor = new ForwardedPrefixExtractor(delegateRequest, pathHelper, baseUrl);
+ 			this.forwardedPrefixExtractor = new ForwardedPrefixExtractor(delegateRequest, baseUrl);
  		}
  
  
diff --git a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java
index 8e6118c1a5..fbeb51f3fe fbeb51f3fe
--- a/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java
+++ b/spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java
@@@ -168,55 -161,18 +175,66 @@@ public class UrlPathHelper 
  		return this.defaultEncoding;
  	}
  
+ 	/**
+ 	 * Switch to read-only mode where further configuration changes are not allowed.
+ 	 */
+ 	private void setReadOnly() {
+ 		this.readOnly = true;
+ 	}
+ 
+ 	private void checkReadOnly() {
+ 		Assert.isTrue(!this.readOnly, "This instance cannot be modified");
+ 	}
+ 
  
 +	/**
 +	 * {@link #getLookupPathForRequest Resolve} the lookupPath and cache it in a
 +	 * a request attribute with the key {@link #PATH_ATTRIBUTE} for subsequent
 +	 * access via {@link #getResolvedLookupPath(ServletRequest)}.
 +	 * @param request the current request
 +	 * @return the resolved path
 +	 * @since 5.3
 +	 */
 +	public String resolveAndCacheLookupPath(HttpServletRequest request) {
 +		String lookupPath = getLookupPathForRequest(request);
 +		request.setAttribute(PATH_ATTRIBUTE, lookupPath);
 +		return lookupPath;
 +	}
 +
 +	/**
 +	 * Return a previously {@link #getLookupPathForRequest resolved} lookupPath.
 +	 * @param request the current request
 +	 * @return the previously resolved lookupPath
 +	 * @throws IllegalArgumentException if the not found
 +	 * @since 5.3
 +	 */
 +	public static String getResolvedLookupPath(ServletRequest request) {
 +		String lookupPath = (String) request.getAttribute(PATH_ATTRIBUTE);
 +		Assert.notNull(lookupPath, "Expected lookupPath in request attribute \"" + PATH_ATTRIBUTE + "\".");
 +		return lookupPath;
 +	}
 +
 +	/**
 +	 * Variant of {@link #getLookupPathForRequest(HttpServletRequest)} that
 +	 * automates checking for a previously computed lookupPath saved as a
 +	 * request attribute. The attribute is only used for lookup purposes.
 +	 * @param request current HTTP request
 +	 * @param name the request attribute that holds the lookupPath
 +	 * @return the lookup path
 +	 * @since 5.2
 +	 * @deprecated as of 5.3 in favor of using
 +	 * {@link #resolveAndCacheLookupPath(HttpServletRequest)} and
 +	 * {@link #getResolvedLookupPath(ServletRequest)}.
 +	 */
 +	@Deprecated
 +	public String getLookupPathForRequest(HttpServletRequest request, @Nullable String name) {
 +		String result = null;
 +		if (name != null) {
 +			result = (String) request.getAttribute(name);
 +		}
 +		return (result != null ? result : getLookupPathForRequest(request));
 +	}
 +
  	/**
  	 * Return the mapping lookup path for the given request, within the current
  	 * servlet mapping if applicable, else within the web application.
@@@ -694,8 -649,9 +701,8 @@@
  	}
  
  
 -
  	/**
- 	 * Shared, read-only instance of {@code UrlPathHelper}. Uses default settings:
+ 	 * Shared, read-only instance with defaults. The following apply:
  	 * <ul>
  	 * <li>{@code alwaysUseFullPath=false}
  	 * <li>{@code urlDecode=true}
