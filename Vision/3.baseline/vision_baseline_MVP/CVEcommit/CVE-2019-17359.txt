commit ea6777cb3c667361d72d9048ace24d126f0ac2bc
Author: David Hook <dgh@cryptoworkshop.com>
Date:   Sat Sep 28 19:21:44 2019 +1000

    extra validation for ASN.1 parsing.
    javadoc update

diff --git a/core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java b/core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java
index 4a05b625a..baad01c26 100644
--- a/core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java
+++ b/core/src/main/java/org/bouncycastle/asn1/ASN1Integer.java
@@ -180,6 +180,17 @@ public int intValueExact()
         return intValue(bytes, start, SIGN_EXT_SIGNED); 
     }
 
+    public long longValueExact()
+    {
+        int count = bytes.length - start;
+        if (count > 8)
+        {
+            throw new ArithmeticException("ASN.1 Integer out of long range");
+        }
+
+        return longValue(bytes, start, SIGN_EXT_SIGNED);
+    }
+
     boolean isConstructed()
     {
         return false;
@@ -230,6 +241,19 @@ static int intValue(byte[] bytes, int start, int signExt)
         return val;
     }
 
+    static long longValue(byte[] bytes, int start, int signExt)
+    {
+        int length = bytes.length;
+        int pos = Math.max(start, length - 8);
+
+        long val = bytes[pos] & signExt;
+        while (++pos < length)
+        {
+            val = (val << 8) | (bytes[pos] & SIGN_EXT_UNSIGNED);
+        }
+        return val;
+    }
+
     /**
      * Apply the correct validation for an INTEGER primitive following the BER rules.
      *
diff --git a/core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java b/core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java
index 0de5fbb2d..a9d76605f 100644
--- a/core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java
+++ b/core/src/main/java/org/bouncycastle/asn1/ASN1StreamParser.java
@@ -169,6 +169,10 @@ public ASN1Encodable readObject()
         }
         else
         {
+            if (length >= _limit)   // after all we must have read at least 1 byte
+            {
+                throw new IOException("corrupted stream - out of bounds length found: " + length + " >= " + _limit);
+            }
             DefiniteLengthInputStream defIn = new DefiniteLengthInputStream(_in, length);
 
             if ((tag & BERTags.APPLICATION) != 0)
diff --git a/core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java b/core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java
index f247b11f0..d8f3ac45f 100644
--- a/core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java
+++ b/core/src/main/java/org/bouncycastle/asn1/ConstructedOctetStream.java
@@ -26,13 +26,19 @@ public int read(byte[] b, int off, int len) throws IOException
                 return -1;
             }
 
-            ASN1OctetStringParser s = (ASN1OctetStringParser)_parser.readObject();
-
-            if (s == null)
+            ASN1Encodable asn1Obj = _parser.readObject();
+            if (asn1Obj == null)
             {
                 return -1;
             }
 
+            if (!(asn1Obj instanceof ASN1OctetStringParser))
+            {
+                throw new IOException("unknown object encountered: " + asn1Obj.getClass());
+            }
+
+            ASN1OctetStringParser s = (ASN1OctetStringParser)asn1Obj;
+
             _first = false;
             _currentStream = s.getOctetStream();
         }
diff --git a/core/src/test/java/org/bouncycastle/asn1/test/InputStreamTest.java b/core/src/test/java/org/bouncycastle/asn1/test/InputStreamTest.java
index c9c03ef5a..fd39973a3 100644
--- a/core/src/test/java/org/bouncycastle/asn1/test/InputStreamTest.java
+++ b/core/src/test/java/org/bouncycastle/asn1/test/InputStreamTest.java
@@ -3,26 +3,34 @@
 import java.io.IOException;
 
 import org.bouncycastle.asn1.ASN1InputStream;
+import org.bouncycastle.asn1.ASN1Primitive;
+import org.bouncycastle.asn1.ASN1Sequence;
+import org.bouncycastle.util.encoders.Base64;
 import org.bouncycastle.util.test.SimpleTest;
 
-public class InputStreamTest 
+public class InputStreamTest
     extends SimpleTest
 {
-    private static final byte[] outOfBoundsLength = new byte[] { (byte)0x30, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff };
-    private static final byte[] negativeLength = new byte[] { (byte)0x30, (byte)0x84, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff };
-    private static final byte[] outsideLimitLength = new byte[] { (byte)0x30, (byte)0x83, (byte)0x0f, (byte)0xff, (byte)0xff };
-    
-    
+    private static final byte[] outOfBoundsLength = new byte[]{(byte)0x30, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff};
+    private static final byte[] negativeLength = new byte[]{(byte)0x30, (byte)0x84, (byte)0xff, (byte)0xff, (byte)0xff, (byte)0xff};
+    private static final byte[] outsideLimitLength = new byte[]{(byte)0x30, (byte)0x83, (byte)0x0f, (byte)0xff, (byte)0xff};
+
+    private static final byte[] classCast1 = Base64.decode("p1AkHmYAvfOEIrL4ESfrNg==");
+
+    private static final byte[] memoryError1 = Base64.decode("JICNbaBUTTq7uxj5mg==");
+    private static final byte[] memoryError2 = Base64.decode("vm66gOiEe+FV/NvujMwSkUp5Lffw5caQlaRU5sdMPC70IGWmyK2/");
+    private static final byte[] memoryError3 = Base64.decode("vm4ogOSEfVGsS3w+KTzb2A0ALYR8VBOQqQeuRwnsPC4AAGWEDLjd");
+
     public String getName()
     {
         return "InputStream";
     }
-    
-    public void performTest() 
+
+    public void performTest()
         throws Exception
     {
         ASN1InputStream aIn = new ASN1InputStream(outOfBoundsLength);
-        
+
         try
         {
             aIn.readObject();
@@ -35,9 +43,9 @@ public void performTest()
                 fail("wrong exception: " + e.getMessage());
             }
         }
-        
+
         aIn = new ASN1InputStream(negativeLength);
-        
+
         try
         {
             aIn.readObject();
@@ -50,9 +58,9 @@ public void performTest()
                 fail("wrong exception: " + e.getMessage());
             }
         }
-        
+
         aIn = new ASN1InputStream(outsideLimitLength);
-        
+
         try
         {
             aIn.readObject();
@@ -65,10 +73,38 @@ public void performTest()
                 fail("wrong exception: " + e.getMessage());
             }
         }
+
+        testWithByteArray(classCast1, "unknown object encountered: class org.bouncycastle.asn1.DLApplicationSpecific");
+
+        testWithByteArray(memoryError1, "corrupted stream - out of bounds length found: 109 >= 13");
+        testWithByteArray(memoryError2, "corrupted stream - out of bounds length found: 2078365180 >= 110");
+        testWithByteArray(memoryError3, "corrupted stream - out of bounds length found: 2102504523 >= 110");
+    }
+
+    private void testWithByteArray(byte[] data, String message)
+    {
+        try
+        {
+            ASN1InputStream input = new ASN1InputStream(data);
+
+            ASN1Primitive p;
+            while ((p = input.readObject()) != null)
+            {
+                ASN1Sequence asn1 = ASN1Sequence.getInstance(p);
+                for (int i = 0; i < asn1.size(); i++)
+                {
+                    asn1.getObjectAt(i);
+                }
+            }
+        }
+        catch (java.io.IOException e)
+        {
+            isEquals(e.getMessage(), message, e.getMessage());
+        }
     }
 
     public static void main(
-        String[]    args)
+        String[] args)
     {
         runTest(new InputStreamTest());
     }
diff --git a/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java b/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java
index 2450e1ee5..7c7cd7fa2 100644
--- a/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java
+++ b/pg/src/main/java/org/bouncycastle/openpgp/PGPSignatureGenerator.java
@@ -175,7 +175,7 @@ public void setUnhashedSubpackets(
     /**
      * Return the one pass header associated with the current signature.
      * 
-     * @param isNested
+     * @param isNested true if the signature is nested, false otherwise.
      * @return PGPOnePassSignature
      * @throws PGPException
      */
diff --git a/pkix/src/test/java/org/bouncycastle/openssl/test/ParserTest.java b/pkix/src/test/java/org/bouncycastle/openssl/test/ParserTest.java
index b58f993d2..7fe0cd691 100644
--- a/pkix/src/test/java/org/bouncycastle/openssl/test/ParserTest.java
+++ b/pkix/src/test/java/org/bouncycastle/openssl/test/ParserTest.java
@@ -254,9 +254,9 @@ public void performTest()
         doDudPasswordTest("b6cd8", 3, "DEF length 81 object truncated by 56");
         doDudPasswordTest("28ce09", 4, "DEF length 110 object truncated by 28");
         doDudPasswordTest("2ac3b9", 5, "DER length more than 4 bytes: 11");
-        doDudPasswordTest("2cba96", 6, "DEF length 100 object truncated by 35");
-        doDudPasswordTest("2e3354", 7, "DEF length 42 object truncated by 9");
-        doDudPasswordTest("2f4142", 8, "DER length more than 4 bytes: 14");
+        doDudPasswordTest("2cba96", 6, "corrupted stream - out of bounds length found: 100 >= 67");
+        doDudPasswordTest("2e3354", 7, "corrupted stream - out of bounds length found: 42 >= 35");
+        doDudPasswordTest("2f4142", 8, "corrupted stream - out of bounds length found: 127 >= 39");
         doDudPasswordTest("2fe9bb", 9, "DER length more than 4 bytes: 65");
         doDudPasswordTest("3ee7a8", 10, "DER length more than 4 bytes: 57");
         doDudPasswordTest("41af75", 11, "unknown tag 16 encountered");
@@ -505,7 +505,7 @@ private void doDudPasswordTest(String password, int index, String message)
         catch (IOException e)
         {
             if (e.getCause() != null && !e.getCause().getMessage().endsWith(message))
-            {
+            {              System.err.println(e.getCause().getMessage());
                fail("issue " + index + " exception thrown, but wrong message");
             }
             else if (e.getCause() == null && !e.getMessage().equals(message))
