commit 3cd79b23ed190ac2d51dd88fc0ce419f0daa4ac8
Author: Benoit Tellier <btellier@linagora.com>
Date:   Sun Aug 22 13:34:53 2021 +0700

    JAMES-3634 Prevent infinite loop for IMAP APPEND command parser

diff --git a/protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java b/protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java
index 9aa23fedac..a495de155c 100644
--- a/protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java
+++ b/protocols/imap/src/main/java/org/apache/james/imap/decode/ImapRequestLineReader.java
@@ -500,6 +500,10 @@ public abstract class ImapRequestLineReader {
         while (!nextWord.endsWith(")")) {
             DecoderUtils.setFlag(nextWord, flags);
             nextWord = consumeWord(validator);
+            if (nextWord.isEmpty()) {
+                // Throw to avoid an infinite loop...
+                throw new DecodingException(HumanReadableText.FAILED, "Empty word encountered");
+            }
         }
         // Got the closing ")", may be attached to a word.
         if (nextWord.length() > 1) {
diff --git a/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java b/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
index ae8cb2f4df..6f1fb3a90d 100644
--- a/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
+++ b/protocols/imap/src/test/java/org/apache/james/imap/decode/parser/AppendCommandParserTest.java
@@ -20,6 +20,7 @@
 package org.apache.james.imap.decode.parser;
 
 import static org.assertj.core.api.Assertions.assertThat;
+import static org.assertj.core.api.Assertions.assertThatThrownBy;
 import static org.mockito.Mockito.mock;
 
 import java.io.ByteArrayInputStream;
@@ -28,9 +29,14 @@ import java.nio.charset.StandardCharsets;
 import java.time.Clock;
 import java.time.Instant;
 import java.time.ZoneOffset;
+import java.util.Base64;
 
+import org.apache.james.imap.api.Tag;
 import org.apache.james.imap.api.message.response.StatusResponseFactory;
+import org.apache.james.imap.decode.DecodingException;
 import org.apache.james.imap.decode.ImapRequestStreamLineReader;
+import org.apache.james.imap.encode.FakeImapSession;
+import org.apache.james.imap.message.response.UnpooledStatusResponseFactory;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -45,6 +51,17 @@ class AppendCommandParserTest {
         testee = new AppendCommandParser(mock(StatusResponseFactory.class), CLOCK);
     }
 
+    @Test
+    void fuzzingInputShouldNotLoopInfinitely() {
+        String base64Input = "NHpzICgyWnoyWl8JEVt/XyAAMz0lLCwsLCwsLGUsLCwoKCgoKCgoKCgoKCgoKCgoKCgqKioqLDQgKClFMWQoKFstLQQtCX9zIChAKCg6fw==";
+        byte[] bytes = Base64.getDecoder().decode(base64Input);
+
+        assertThatThrownBy(() -> new AppendCommandParser(new UnpooledStatusResponseFactory(), CLOCK)
+            .decode(new ImapRequestStreamLineReader(new ByteArrayInputStream(bytes),
+                new ByteArrayOutputStream()), new Tag("AEA"), new FakeImapSession()))
+            .isInstanceOf(DecodingException.class);
+    }
+
     @Test
     void parseDateTimeShouldReturnNowWhenNotADate() throws Exception {
         ImapRequestStreamLineReader request = toRequest("any\n");
