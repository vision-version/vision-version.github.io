package org.springframework.data.web;
import java.io.IOException;
import java.util.Map;
import javax.annotation.Nullable;
import org.springframework.core.ResolvableType;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.http.HttpInputMessage;
import org.springframework.http.HttpOutputMessage;
import org.springframework.http.MediaType;
import org.springframework.http.converter.AbstractHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.HttpMessageNotReadableException;
import org.springframework.http.converter.HttpMessageNotWritableException;
import org.springframework.util.ConcurrentReferenceHashMap;
import org.xmlbeam.XBProjector;
public class XmlBeamHttpMessageConverter extends AbstractHttpMessageConverter<Object> {
	private final XBProjector projectionFactory;
	private final Map<Class<?>, Boolean> supportedTypesCache = new ConcurrentReferenceHashMap<>();
	 public XmlBeamHttpMessageConverter() {
		super(MediaType.APPLICATION_XML, MediaType.parseMediaType("application/*+xml"));
		this.projectionFactory = new XBProjector();
	}
	
	protected boolean supports(Class<?> type) {
		Class<?> rawType = ResolvableType.forType(type).resolve(Object.class);
		Boolean result = supportedTypesCache.get(rawType);
		if (result != null) {
			return result;
		}
		
		result = rawType.isInterface() && AnnotationUtils.findAnnotation(rawType, ProjectedPayload.class) != null;
		supportedTypesCache.put(rawType, result);
		return result;
	}
	
	public boolean canWrite(Class<?> clazz, @Nullable MediaType mediaType) {
		return false;
	}
	
	protected Object readInternal(Class<? extends Object> clazz, HttpInputMessage inputMessage) throws IOException, HttpMessageNotReadableException {
		return projectionFactory.io().stream(inputMessage.getBody()).read(clazz);
	}
	
	protected void writeInternal(Object t, HttpOutputMessage outputMessage) throws IOException, HttpMessageNotWritableException {}
}


