package org.jboss.netty.handler.codec.http.cookie;
import org.jboss.netty.handler.codec.http.HttpHeaderDateFormat;
import java.text.ParsePosition;
import java.util.Date;
public final class ClientCookieDecoder extends CookieDecoder {
    public static final ClientCookieDecoder STRICT = new ClientCookieDecoder(true);
    public static final ClientCookieDecoder LAX = new ClientCookieDecoder(false);
    private ClientCookieDecoder(boolean strict) {
        super(strict);
    }
    
    public Cookie decode(String header) {
        if (header == null) {
            throw new NullPointerException("header");
        }
        
        final int headerLen = header.length();
        if (headerLen == 0) {
            return null;
        }
        
        CookieBuilder cookieBuilder = null;
        loop: for (int i = 0;;) {
            for (;;) {
                if (i == headerLen) {
                    break loop;
                }
                
                char c = header.charAt(i);
                if (c == ',') {
                    break loop;
                }
                 else if (c == '\t' || c == '\n' || c == 0x0b || c == '\f' || c == '\r' || c == ' ' || c == ';') {
                    i++;
                    continue;
                }
                
                break;
            }
            
            int nameBegin = i;
            int nameEnd = i;
            int valueBegin = -1;
            int valueEnd = -1;
            if (i != headerLen) {
                keyValLoop: for (;;) {
                    char curChar = header.charAt(i);
                    if (curChar == ';') {
                        nameEnd = i;
                        valueBegin = valueEnd = -1;
                        break keyValLoop;
                    }
                     else if (curChar == '=') {
                        nameEnd = i;
                        i++;
                        if (i == headerLen) {
                            valueBegin = valueEnd = 0;
                            break keyValLoop;
                        }
                        
                        valueBegin = i;
                        int semiPos = header.indexOf(';', i);
                        valueEnd = i = semiPos > 0 ? semiPos : headerLen;
                        break keyValLoop;
                    }
                     else {
                        i++;
                    }
                    
                    if (i == headerLen) {
                        nameEnd = headerLen;
                        valueBegin = valueEnd = -1;
                        break;
                    }
                    
                }
                
            }
            
            if (valueEnd > 0 && header.charAt(valueEnd - 1) == ',') {
                valueEnd--;
            }
            
            if (cookieBuilder == null) {
                DefaultCookie cookie = initCookie(header, nameBegin, nameEnd, valueBegin, valueEnd);
                if (cookie == null) {
                    return null;
                }
                
                cookieBuilder = new CookieBuilder(cookie);
            }
             else {
                String attrValue = valueBegin == -1 ? null : header.substring(valueBegin, valueEnd);
                cookieBuilder.appendAttribute(header, nameBegin, nameEnd, attrValue);
            }
            
        }
        
        return cookieBuilder.cookie();
    }
    
    private static class CookieBuilder {
        private final DefaultCookie cookie;
        private String domain;
        private String path;
        private long maxAge = Long.MIN_VALUE;
        private String expires;
        private boolean secure;
        private boolean httpOnly;
        public CookieBuilder(DefaultCookie cookie) {
            this.cookie = cookie;
        }
        
        private long mergeMaxAgeAndExpire(long maxAge, String expires) {
            if (maxAge != Long.MIN_VALUE) {
                return maxAge;
            }
             else if (expires != null) {
                Date expiresDate = HttpHeaderDateFormat.get().parse(expires, new ParsePosition(0));
                if (expiresDate != null) {
                    long maxAgeMillis = expiresDate.getTime() - System.currentTimeMillis();
                    return maxAgeMillis / 1000 + (maxAgeMillis % 1000 != 0 ? 1 : 0);
                }
                
            }
            
            return Long.MIN_VALUE;
        }
        
        public Cookie cookie() {
            cookie.setDomain(domain);
            cookie.setPath(path);
            cookie.setMaxAge(mergeMaxAgeAndExpire(maxAge, expires));
            cookie.setSecure(secure);
            cookie.setHttpOnly(httpOnly);
            return cookie;
        }
        
        public void appendAttribute(String header, int keyStart, int keyEnd, String value) {
            setCookieAttribute(header, keyStart, keyEnd, value);
        }
        
        private void setCookieAttribute(String header, int keyStart, int keyEnd, String value) {
            int length = keyEnd - keyStart;
            if (length == 4) {
                parse4(header, keyStart, value);
            }
             else if (length == 6) {
                parse6(header, keyStart, value);
            }
             else if (length == 7) {
                parse7(header, keyStart, value);
            }
             else if (length == 8) {
                parse8(header, keyStart, value);
            }
            
        }
        
        private void parse4(String header, int nameStart, String value) {
            if (header.regionMatches(true, nameStart, CookieHeaderNames.PATH, 0, 4)) {
                path = value;
            }
            
        }
        
        private void parse6(String header, int nameStart, String value) {
            if (header.regionMatches(true, nameStart, CookieHeaderNames.DOMAIN, 0, 5)) {
                domain = value.length() > 0 ? value.toString() : null;
            }
             else if (header.regionMatches(true, nameStart, CookieHeaderNames.SECURE, 0, 5)) {
                secure = true;
            }
            
        }
        
        private void setExpire(String value) {
            expires = value;
        }
        
        private void setMaxAge(String value) {
            try {
                maxAge = Math.max(Long.valueOf(value), 0L);
            }
             catch (NumberFormatException e1) {
            }
            
        }
        
        private void parse7(String header, int nameStart, String value) {
            if (header.regionMatches(true, nameStart, CookieHeaderNames.EXPIRES, 0, 7)) {
                setExpire(value);
            }
             else if (header.regionMatches(true, nameStart, CookieHeaderNames.MAX_AGE, 0, 7)) {
                setMaxAge(value);
            }
            
        }
        
        private void parse8(String header, int nameStart, String value) {
            if (header.regionMatches(true, nameStart, CookieHeaderNames.HTTPONLY, 0, 8)) {
                httpOnly = true;
            }
            
        }
        
    }
    
}


