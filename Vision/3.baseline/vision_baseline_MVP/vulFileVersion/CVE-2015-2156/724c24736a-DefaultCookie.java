package org.jboss.netty.handler.codec.http;
import java.util.Collections;
import java.util.Set;
import java.util.TreeSet;
public class DefaultCookie extends org.jboss.netty.handler.codec.http.cookie.DefaultCookie implements Cookie {
    private String comment;
    private String commentUrl;
    private boolean discard;
    private Set<Integer> ports = Collections.emptySet();
    private Set<Integer> unmodifiablePorts = ports;
    private int version;
    public DefaultCookie(String name, String value) {
        super(name, value);
    }
    
    public String getName() {
        return name();
    }
    
    public String getValue() {
        return value();
    }
    
    public String getDomain() {
        return domain();
    }
    
    public String getPath() {
        return path();
    }
    
    public String getComment() {
        return comment();
    }
    
    public String comment() {
        return comment;
    }
    
    public void setComment(String comment) {
        this.comment = validateValue("comment", comment);
    }
    
    public String getCommentUrl() {
        return commentUrl();
    }
    
    public String commentUrl() {
        return commentUrl;
    }
    
    public void setCommentUrl(String commentUrl) {
        this.commentUrl = validateValue("commentUrl", commentUrl);
    }
    
    public boolean isDiscard() {
        return discard;
    }
    
    public void setDiscard(boolean discard) {
        this.discard = discard;
    }
    
    public Set<Integer> getPorts() {
        return ports();
    }
    
    public Set<Integer> ports() {
        if (unmodifiablePorts == null) {
            unmodifiablePorts = Collections.unmodifiableSet(ports);
        }
        
        return unmodifiablePorts;
    }
    
    public void setPorts(int... ports) {
        if (ports == null) {
            throw new NullPointerException("ports");
        }
        
        int[] portsCopy = ports.clone();
        if (portsCopy.length == 0) {
            unmodifiablePorts = this.ports = Collections.emptySet();
        }
         else {
            Set<Integer> newPorts = new TreeSet<Integer>();
            for (int p: portsCopy) {
                if (p <= 0 || p > 65535) {
                    throw new IllegalArgumentException("port out of range: " + p);
                }
                
                newPorts.add(Integer.valueOf(p));
            }
            
            this.ports = newPorts;
            unmodifiablePorts = null;
        }
        
    }
    
    public void setPorts(Iterable<Integer> ports) {
        Set<Integer> newPorts = new TreeSet<Integer>();
        for (int p: ports) {
            if (p <= 0 || p > 65535) {
                throw new IllegalArgumentException("port out of range: " + p);
            }
            
            newPorts.add(Integer.valueOf(p));
        }
        
        if (newPorts.isEmpty()) {
            unmodifiablePorts = this.ports = Collections.emptySet();
        }
         else {
            this.ports = newPorts;
            unmodifiablePorts = null;
        }
        
    }
    
    public long getMaxAge() {
        return maxAge();
    }
    
    public int getVersion() {
        return version();
    }
    
    public int version() {
        return version;
    }
    
    public void setVersion(int version) {
        this.version = version;
    }
    
}


