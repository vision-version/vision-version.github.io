package org.torpedoquery.jpa.internal.conditions;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.atomic.AtomicInteger;
import org.torpedoquery.jpa.internal.Condition;
import org.torpedoquery.jpa.internal.Parameter;
import org.torpedoquery.jpa.internal.Selector;
public class LikeCondition implements Condition {
	public static enum Type {
		ANY {
			public String wrap(String toMatch) {
				return "%" + toMatch + "%";
			}
			
		}, STARTSWITH {
			public String wrap(String toMatch) {
				return toMatch + "%";
			}
			
		}, ENDSWITH {
			public String wrap(String toMatch) {
				return "%" + toMatch;
			}
			
		}, UNKNOW {
			public String wrap(String toMatch) {
				return toMatch;
			}
			
		};
		public abstract String wrap(String toMatch);
	}
	
	private final String toMatch;
	private final Type type;
	private final Selector selector;
	 public LikeCondition(Type type, Selector selector, String toMatch) {
		this.type = type;
		this.selector = selector;
		this.toMatch = toMatch;
	}
	
	public String createQueryFragment(AtomicInteger incrementor) {
		return selector.createQueryFragment(incrementor) + " " + getLike() + " '" + type.wrap(toMatch) + "' ";
	}
	
	 protected String getLike() {
		return "like";
	}
	
	public List<Parameter> getParameters() {
		return Collections.emptyList();
	}
	
}


