package org.springframework.data.mongodb.util.json;
import java.util.function.Function;
import java.util.function.Supplier;
import org.springframework.data.mapping.model.SpELExpressionEvaluator;
import org.springframework.data.spel.ExpressionDependencies;
import org.springframework.data.util.Lazy;
import org.springframework.expression.EvaluationContext;
import org.springframework.expression.Expression;
import org.springframework.expression.ExpressionParser;
import org.springframework.expression.spel.standard.SpelExpressionParser;
import org.springframework.lang.Nullable;
public class ParameterBindingContext {
	private final ValueProvider valueProvider;
	private final SpELExpressionEvaluator expressionEvaluator;
	 public ParameterBindingContext(ValueProvider valueProvider, SpelExpressionParser expressionParser, EvaluationContext evaluationContext) {
		this(valueProvider, expressionParser, () -> evaluationContext);
	}
	
	 public ParameterBindingContext(ValueProvider valueProvider, ExpressionParser expressionParser, Supplier<EvaluationContext> evaluationContext) {
		this(valueProvider, new SpELExpressionEvaluator() {
			public <T> T evaluate(String expressionString) {
				return (T) expressionParser.parseExpression(expressionString).getValue(evaluationContext.get(), Object.class);
			}
			
		}
		
);
	}
	
	 public ParameterBindingContext(ValueProvider valueProvider, SpELExpressionEvaluator expressionEvaluator) {
		this.valueProvider = valueProvider;
		this.expressionEvaluator = expressionEvaluator;
	}
	
	 public static ParameterBindingContext forExpressions(ValueProvider valueProvider, ExpressionParser expressionParser, Function<ExpressionDependencies, EvaluationContext> contextFunction) {
		return new ParameterBindingContext(valueProvider, new SpELExpressionEvaluator() {
			public <T> T evaluate(String expressionString) {
				Expression expression = expressionParser.parseExpression(expressionString);
				ExpressionDependencies dependencies = ExpressionDependencies.discover(expression);
				EvaluationContext evaluationContext = contextFunction.apply(dependencies);
				return (T) expression.getValue(evaluationContext, Object.class);
			}
			
		}
		
);
	}
	
	public Object bindableValueForIndex(int index) {
		return valueProvider.getBindableValue(index);
	}
	
	public Object evaluateExpression(String expressionString) {
		return expressionEvaluator.evaluate(expressionString);
	}
	
	public ValueProvider getValueProvider() {
		return valueProvider;
	}
	
}


