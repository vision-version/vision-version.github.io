package org.springframework.amqp.core;
import java.io.ByteArrayInputStream;
import java.io.Serializable;
import java.nio.charset.Charset;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import org.springframework.amqp.utils.SerializationUtils;
import org.springframework.util.Assert;
import org.springframework.util.ClassUtils;
public class Message implements Serializable {
	private static final long serialVersionUID = -7177590352110605597L;
	private static final String DEFAULT_ENCODING = Charset.defaultCharset().name();
	private static final Set<String> ALLOWED_LIST_PATTERNS = new LinkedHashSet<>(Arrays.asList("java.util.*", "java.lang.*"));
	private static String bodyEncoding = DEFAULT_ENCODING;
	private final MessageProperties messageProperties;
	private final byte[] body;
	 public Message(byte[] body) {
		this(body, new MessageProperties());
	}
	
	 public Message(byte[] body, MessageProperties messageProperties) { 
		Assert.notNull(body, "'body' cannot be null");
		Assert.notNull(messageProperties, "'messageProperties' cannot be null");
		this.body = body; 
		this.messageProperties = messageProperties;
	}
	
	 public static void addAllowedListPatterns(String... patterns) {
		Assert.notNull(patterns, "'patterns' cannot be null");
		ALLOWED_LIST_PATTERNS.addAll(Arrays.asList(patterns));
	}
	
	 public static void setDefaultEncoding(String encoding) {
		Assert.notNull(encoding, "'encoding' cannot be null");
		bodyEncoding = encoding;
	}
	
	public byte[] getBody() {
		return this.body; 
	}
	
	public MessageProperties getMessageProperties() {
		return this.messageProperties;
	}
	
	public String toString() {
		StringBuilder buffer = new StringBuilder();
		buffer.append("(");
		buffer.append("Body:'").append(this.getBodyContentAsString()).append("'");
		buffer.append(" ").append(this.messageProperties.toString());
		buffer.append(")");
		return buffer.toString();
	}
	
	private String getBodyContentAsString() {
		try {
			String contentType = this.messageProperties.getContentType();
			if (MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT.equals(contentType)) {
				return SerializationUtils.deserialize(new ByteArrayInputStream(this.body), ALLOWED_LIST_PATTERNS, ClassUtils.getDefaultClassLoader()).toString();
			}
			
			String encoding = encoding();
			if (MessageProperties.CONTENT_TYPE_TEXT_PLAIN.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON.equals(contentType) || MessageProperties.CONTENT_TYPE_JSON_ALT.equals(contentType) || MessageProperties.CONTENT_TYPE_XML.equals(contentType)) {
				return new String(this.body, encoding);
			}
			
		}
		
		catch (Exception e) {
			 }
			 
		 return this.body.toString() + "(byte[" + this.body.length + "])"; 
	}
	
	private String encoding() {
		String encoding = this.messageProperties.getContentEncoding();
		if (encoding == null) {
			encoding = bodyEncoding;
		}
		
		return encoding;
	}
	
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Arrays.hashCode(this.body);
		result = prime * result + ((this.messageProperties == null) ? 0 : this.messageProperties.hashCode());
		return result;
	}
	
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		
		if (obj == null) {
			return false;
		}
		
		if (getClass() != obj.getClass()) {
			return false;
		}
		
		Message other = (Message) obj;
		if (!Arrays.equals(this.body, other.body)) {
			return false;
		}
		
		if (this.messageProperties == null) {
			if (other.messageProperties != null) {
				return false;
			}
			
		}
		
		else if (!this.messageProperties.equals(other.messageProperties)) {
			return false;
		}
		
		return true;
	}
	
}


