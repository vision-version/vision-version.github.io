package org.apache.dolphinscheduler.dao.datasource;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import org.apache.dolphinscheduler.common.enums.DbType;
import org.apache.dolphinscheduler.common.utils.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public abstract class BaseDataSource {
  private static final Logger logger = LoggerFactory.getLogger(BaseDataSource.class);
  private String user;
  private String password;
  private String address;
  private String database;
  private String other;
  private String principal;
  public String getPrincipal() {
    return principal;
  }
  
  public void setPrincipal(String principal) {
    this.principal = principal;
  }
  
  public abstract String driverClassSelector();
  public abstract DbType dbTypeSelector();
  public String getJdbcUrl() {
    StringBuilder jdbcUrl = new StringBuilder(getAddress());
    appendDatabase(jdbcUrl);
    appendPrincipal(jdbcUrl);
    appendOther(jdbcUrl);
    return jdbcUrl.toString();
  }
  
  private void appendDatabase(StringBuilder jdbcUrl) {
    if (dbTypeSelector() == DbType.SQLSERVER) {
      jdbcUrl.append(";databaseName=").append(getDatabase());
    }
     else {
      if (getAddress().lastIndexOf('/') != (jdbcUrl.length() - 1)) {
        jdbcUrl.append("/");
      }
      
      jdbcUrl.append(getDatabase());
    }
    
  }
  
  private void appendPrincipal(StringBuilder jdbcUrl) {
    boolean tag = dbTypeSelector() == DbType.HIVE || dbTypeSelector() == DbType.SPARK;
    if (tag && StringUtils.isNotEmpty(getPrincipal())) {
      jdbcUrl.append(";principal=").append(getPrincipal());
    }
    
  }
  
  private void appendOther(StringBuilder jdbcUrl) {
    if (StringUtils.isNotEmpty(getOther())) {
      String separator = "";
      switch (dbTypeSelector()) {
        case CLICKHOUSE:
        case MYSQL:
        case ORACLE:
        case POSTGRESQL:
          separator = "?";
          break;
        case DB2:
          separator = ":";
          break;
        case HIVE:
        case SPARK:
        case SQLSERVER:
          separator = ";";
          break;
        default: logger.error("Db type mismatch!");
      }
      
      jdbcUrl.append(separator).append(getOther());
    }
    
  }
  
  public void isConnectable() {
    Connection con = null;
    try {
      Class.forName(driverClassSelector());
      con = DriverManager.getConnection(getJdbcUrl(), getUser(), getPassword());
    }
     catch (ClassNotFoundException | SQLException e) {
      logger.error("Get connection error: {}", e.getMessage());
    }
     finally {
      if (con != null) {
        try {
          con.close();
        }
         catch (SQLException e) {
          logger.error(e.getMessage(), e);
        }
        
      }
      
    }
    
  }
  
  public String getUser() {
    return user;
  }
  
  public void setUser(String user) {
    this.user = user;
  }
  
  public String getPassword() {
    return password;
  }
  
  public void setPassword(String password) {
    this.password = password;
  }
  
  public void setAddress(String address) {
    this.address = address;
  }
  
  public String getAddress() {
    return address;
  }
  
  public String getDatabase() {
    return database;
  }
  
  public void setDatabase(String database) {
    this.database = database;
  }
  
  public String getOther() {
    return other;
  }
  
  public void setOther(String other) {
    this.other = other;
  }
  
}


