package com.erudika.para.core;
import com.erudika.para.core.annotations.Email;
import com.erudika.para.core.annotations.Locked;
import com.erudika.para.core.annotations.Stored;
import com.erudika.para.core.i18n.CurrencyUtils;
import com.erudika.para.core.utils.Config;
import com.erudika.para.core.utils.CoreUtils;
import com.erudika.para.core.utils.Pager;
import com.erudika.para.core.utils.Para;
import com.erudika.para.core.utils.ParaObjectUtils;
import com.erudika.para.core.utils.Utils;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import javax.validation.constraints.Max;
import javax.validation.constraints.NotBlank;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
public class User implements ParaObject {
	private static final long serialVersionUID = 1L;
	private static Logger logger = LoggerFactory.getLogger(User.class);
	 public static final int MAX_PASSWORD_LENGTH = 5000;
	@Stored @Locked private String id;
	@Stored @Locked private Long timestamp;
	@Stored @Locked private String type;
	@Stored @Locked private String appid;
	@Stored @Locked private String parentid;
	@Stored @Locked private String creatorid;
	@Stored private Long updated;
	@Stored private String name;
	@Stored private List<String> tags;
	@Stored private Integer votes;
	@Stored private Long version;
	@Stored private Boolean stored;
	@Stored private Boolean indexed;
	@Stored private Boolean cached;
	@Stored @NotBlank private String identifier;
	@Stored @Locked @NotBlank private String groups;
	@Stored private Boolean active;
	@Stored private Boolean twoFA;
	@Stored private String twoFAkey;
	@Stored private String twoFAbackupKeyHash;
	@Stored @NotBlank @Email private String email;
	@Stored private String currency;
	@Stored private String picture;
	@Stored @Locked private String tokenSecret;
	@Stored private String idpIdToken;
	@Stored private String idpAccessToken;
	@Stored private String idpRefreshToken;
	private transient @Max(MAX_PASSWORD_LENGTH) String password;
	 public User() {
		this(null);
	}
	
	 public User(String id) {
		setId(id);
		setName(getName());
		this.groups = Groups.USERS.toString();
	}
	
	public String getTokenSecret() {
		if (tokenSecret == null) {
			resetTokenSecret();
		}
		
		return tokenSecret;
	}
	
	 public void setTokenSecret(String tokenSecret) {
		this.tokenSecret = tokenSecret;
	}
	
	 public String getPicture() {
		return StringUtils.isBlank(picture) ? "https://www.gravatar.com/avatar?d=mm&size=400" : picture;
	}
	
	 public void setPicture(String picture) {
		this.picture = picture;
	}
	
	 public Boolean getActive() {
		if (active == null) {
			active = false;
		}
		
		return active;
	}
	
	 public void setActive(Boolean active) {
		this.active = active;
	}
	
	 public Boolean getTwoFA() {
		if (twoFA == null) {
			twoFA = false;
		}
		
		return twoFA;
	}
	
	 public void setTwoFA(Boolean twoFA) {
		this.twoFA = twoFA;
	}
	
	public String getTwoFAkey() {
		return twoFAkey;
	}
	
	 public void setTwoFAkey(String twoFAkey) {
		this.twoFAkey = twoFAkey;
	}
	
	public String getTwoFAbackupKeyHash() {
		return twoFAbackupKeyHash;
	}
	
	 public void setTwoFAbackupKeyHash(String twoFAbackupKeyHash) {
		this.twoFAbackupKeyHash = twoFAbackupKeyHash;
	}
	
	 public String getGroups() {
		return groups;
	}
	
	 public void setGroups(String groups) {
		this.groups = groups;
	}
	
	 public String getIdentifier() {
		return identifier;
	}
	
	 public void setIdentifier(String identifier) {
		this.identifier = identifier;
	}
	
	 public String getEmail() {
		return StringUtils.lowerCase(email);
	}
	
	 public void setEmail(String email) {
		this.email = email;
	}
	
	 public String getCurrency() {
		return currency;
	}
	
	 public void setCurrency(String currency) {
		currency = StringUtils.upperCase(currency);
		if (!CurrencyUtils.getInstance().isValidCurrency(currency)) {
			currency = "EUR";
		}
		
		this.currency = currency;
	}
	
	 public void resetTokenSecret() {
		tokenSecret = Utils.generateSecurityToken();
	}
	
	 public boolean canModify(ParaObject obj) {
		if (obj == null || id == null) {
			return false;
		}
		 else {
			boolean isCreatedByMe = obj.getCreatorid() != null && (obj.getCreatorid().startsWith(id + Para.getConfig().separator()) || id.equals(obj.getCreatorid()));
			boolean mine = isCreatedByMe || id.equals(obj.getId()) || id.equals(obj.getParentid());
			return (mine || isAdmin());
		}
		
	}
	
	public String create() {
		if (StringUtils.isBlank(getIdentifier())) {
			logger.warn("Failed to create user - identifier not set.");
			return null;
		}
		
		if (!StringUtils.isBlank(getPassword()) && getPassword().length() < Para.getConfig().minPasswordLength()) {
			logger.warn("Failed to create user - password too short.");
			return null;
		}
		
		if (readUserForIdentifier(this) != null) {
			logger.warn("Failed to create user - user with identifier '{}' already exists.", getIdentifier());
			return null;
		}
		
		 if (!Para.getConfig().adminIdentifier().isEmpty() && Para.getConfig().adminIdentifier().equals(getIdentifier())) {
			logger.info("Creating new user '{}' ({}) with admin privileges.", getName(), getIdentifier());
			setGroups(User.Groups.ADMINS.toString());
		}
		
		if (StringUtils.isBlank(getGroups())) {
			setGroups(User.Groups.USERS.toString());
		}
		
		setGravatarPicture();
		if (StringUtils.isBlank(tokenSecret)) {
			resetTokenSecret();
		}
		
		if (CoreUtils.getInstance().getDao().create(getAppid(), this) != null) {
			createIdentifier(getIdentifier(), getPassword());
		}
		 else {
			logger.warn("Failed to create user - dao.create() returned null.");
		}
		
		return getId();
	}
	
	public void delete() {
		if (getId() != null) {
			CoreUtils.getInstance().getDao().deleteAll(getAppid(), getIdentifiers());
			CoreUtils.getInstance().getDao().delete(getAppid(), this);
		}
		
	}
	
	 private List<Sysprop> getIdentifiers() {
		return CoreUtils.getInstance().getSearch().findTerms(getAppid(), Utils.type(Sysprop.class), Collections.singletonMap(Config._CREATORID, getId()), true);
	}
	
	 public void attachIdentifier(String identifier) {
		if (this.exists()) {
			createIdentifier(identifier, Utils.generateSecurityToken());
		}
		
	}
	
	 public void detachIdentifier(String identifier) {
		if (!StringUtils.equals(identifier, getIdentifier())) {
			Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
			if (s != null && StringUtils.equals(getId(), s.getCreatorid())) {
				deleteIdentifier(identifier);
			}
			
		}
		
	}
	
	public boolean isFacebookUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.FB_PREFIX);
	}
	
	public boolean isGooglePlusUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.GPLUS_PREFIX);
	}
	
	public boolean isLinkedInUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.LINKEDIN_PREFIX);
	}
	
	public boolean isTwitterUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.TWITTER_PREFIX);
	}
	
	public boolean isGitHubUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.GITHUB_PREFIX);
	}
	
	public boolean isMicrosoftUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.MICROSOFT_PREFIX);
	}
	
	public boolean isSlackUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.SLACK_PREFIX);
	}
	
	public boolean isMattermostUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.MATTERMOST_PREFIX);
	}
	
	public boolean isAmazonUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.AMAZON_PREFIX);
	}
	
	public boolean isLDAPUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.LDAP_PREFIX);
	}
	
	public boolean isSAMLUser() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.SAML_PREFIX);
	}
	
	public boolean isOAuth2User() {
		return StringUtils.startsWithIgnoreCase(identifier, Config.OAUTH2_PREFIX) || StringUtils.startsWithIgnoreCase(identifier, Config.OAUTH2_SECOND_PREFIX) || StringUtils.startsWithIgnoreCase(identifier, Config.OAUTH2_THIRD_PREFIX);
	}
	
	public boolean isAdmin() {
		return StringUtils.equalsIgnoreCase(this.groups, Groups.ADMINS.toString());
	}
	
	public boolean isModerator() {
		return isAdmin() ? true : StringUtils.equalsIgnoreCase(this.groups, Groups.MODS.toString());
	}
	
	 public String getIdentityProvider() {
		if (isFacebookUser()) {
			return "facebook";
		}
		 else if (isGooglePlusUser()) {
			return "google";
		}
		 else if (isGitHubUser()) {
			return "github";
		}
		 else if (isTwitterUser()) {
			return "twitter";
		}
		 else if (isLinkedInUser()) {
			return "linkedin";
		}
		 else if (isMicrosoftUser()) {
			return "microsoft";
		}
		 else if (isSlackUser()) {
			return "slack";
		}
		 else if (isMattermostUser()) {
			return "mattermost";
		}
		 else if (isAmazonUser()) {
			return "amazon";
		}
		 else if (isLDAPUser()) {
			return "ldap";
		}
		 else if (isSAMLUser()) {
			return "saml";
		}
		 else if (isOAuth2User()) {
			return "oauth2";
		}
		 else {
			return "generic";
		}
		
	}
	
	public String getPassword() {
		return password;
	}
	
	 public void setPassword(String password) {
		this.password = password;
	}
	
	 public String getIdpIdToken() {
		return idpIdToken;
	}
	
	 public void setIdpIdToken(String idpIdToken) {
		this.idpIdToken = idpIdToken;
	}
	
	 public String getIdpAccessToken() {
		return idpAccessToken;
	}
	
	 public void setIdpAccessToken(String idpAccessToken) {
		this.idpAccessToken = idpAccessToken;
	}
	
	 public String getIdpRefreshToken() {
		return idpRefreshToken;
	}
	
	 public void setIdpRefreshToken(String idpRefreshToken) {
		this.idpRefreshToken = idpRefreshToken;
	}
	
	public String getIdpIdTokenPayload() {
		return StringUtils.substringBetween(idpIdToken, ".");
	}
	
	public String getIdpAccessTokenPayload() {
		return StringUtils.substringBetween(idpAccessToken, ".");
	}
	
	 public static final User readUserForIdentifier(final User u) {
		if (u == null || StringUtils.isBlank(u.getIdentifier())) {
			return null;
		}
		
		User user = null;
		String password = null;
		String identifier = u.getIdentifier();
		 Sysprop s = CoreUtils.getInstance().getDao().read(u.getAppid(), identifier);
		if (s != null && s.getCreatorid() != null) {
			user = CoreUtils.getInstance().getDao().read(u.getAppid(), s.getCreatorid());
			password = (String) s.getProperty(Config._PASSWORD);
		}
		
		 if (user == null && !StringUtils.isBlank(u.getEmail())) {
			HashMap<String, Object> terms = new HashMap<>(2);
			terms.put(Config._EMAIL, u.getEmail());
			terms.put(Config._APPID, u.getAppid());
			Pager p = new Pager(1);
			List<User> users = CoreUtils.getInstance().getSearch().findTerms(u.getAppid(), u.getType(), terms, true, p);
			if (!users.isEmpty()) {
				user = users.get(0);
				 password = Utils.generateSecurityToken();
				user.createIdentifier(u.getIdentifier(), password);
				if (p.getCount() > 1) {
					logger.warn("{} user objects exist with the same email {}", p.getCount(), user.getEmail());
				}
				
			}
			
		}
		
		if (user != null) {
			if (password != null) {
				 user.setPassword(password);
			}
			
			if (!identifier.equals(user.getIdentifier())) {
				logger.info("Identifier changed for user '{}', from {} to {}.", user.getId(), user.getIdentifier(), identifier);
				 user.setIdentifier(identifier);
				CoreUtils.getInstance().getDao().update(user.getAppid(), user);
			}
			
			return user;
		}
		
		logger.debug("User not found for identifier {}/{}, {}.", u.getAppid(), identifier, u.getId());
		return null;
	}
	
	 public static final boolean passwordMatches(User u) {
		if (u == null) {
			return false;
		}
		
		String password = u.getPassword();
		String identifier = u.getIdentifier();
		if (StringUtils.isBlank(password) || StringUtils.isBlank(identifier)) {
			return false;
		}
		
		ParaObject s = CoreUtils.getInstance().getDao().read(u.getAppid(), identifier);
		if (s != null) {
			if (s instanceof Sysprop) {
				String storedHash = (String) ((Sysprop) s).getProperty(Config._PASSWORD);
				return Utils.bcryptMatches(password, storedHash);
			}
			 else {
				LoggerFactory.getLogger(User.class). warn(Utils.formatMessage("Failed to read auth object for user '{}' using identifier '{}'.", u.getId(), identifier));
			}
			
		}
		
		return false;
	}
	
	 public final String generatePasswordResetToken() {
		if (StringUtils.isBlank(identifier)) {
			return "";
		}
		
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		if (s != null) {
			String token = Utils.generateSecurityToken(42, true);
			s.addProperty(Config._RESET_TOKEN, token);
			CoreUtils.getInstance().getDao().update(getAppid(), s);
			return token;
		}
		
		return "";
	}
	
	 public final boolean resetPassword(String token, String newpass) {
		if (StringUtils.isBlank(newpass) || StringUtils.isBlank(token) || newpass.length() < Para.getConfig().minPasswordLength()) {
			return false;
		}
		
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		if (isValidToken(s, Config._RESET_TOKEN, token)) {
			s.removeProperty(Config._RESET_TOKEN);
			String hashed = Utils.bcrypt(newpass);
			s.addProperty(Config._PASSWORD, hashed);
			setPassword(hashed);
			CoreUtils.getInstance().getDao().update(getAppid(), s);
			return true;
		}
		
		return false;
	}
	
	 private boolean createIdentifier(String newIdent, String password) {
		if (StringUtils.isBlank(getId()) || StringUtils.isBlank(newIdent)) {
			return false;
		}
		
		Sysprop s = new Sysprop();
		s.setId(newIdent);
		s.setName(Config._IDENTIFIER);
		s.setCreatorid(getId());
		if (!StringUtils.isBlank(password)) {
			String hashed = Utils.bcrypt(password);
			s.addProperty(Config._PASSWORD, hashed);
			setPassword(hashed);
		}
		
		return CoreUtils.getInstance().getDao().create(getAppid(), s) != null;
	}
	
	 private void deleteIdentifier(String ident) {
		if (!StringUtils.isBlank(ident)) {
			CoreUtils.getInstance().getDao().delete(getAppid(), new Sysprop(ident));
		}
		
	}
	
	 public String generateEmailConfirmationToken() {
		if (StringUtils.isBlank(identifier)) {
			return "";
		}
		
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		if (s != null) {
			String token = Utils.base64encURL(Utils.generateSecurityToken().getBytes());
			s.addProperty(Config._EMAIL_TOKEN, token);
			CoreUtils.getInstance().getDao().update(getAppid(), s);
			return token;
		}
		
		return "";
	}
	
	 public final boolean activateWithEmailToken(String token) {
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		if (isValidToken(s, Config._EMAIL_TOKEN, token)) {
			s.removeProperty(Config._EMAIL_TOKEN);
			CoreUtils.getInstance().getDao().update(getAppid(), s);
			setActive(true);
			update();
			return true;
		}
		
		return false;
	}
	
	 public final boolean isValidPasswordResetToken(String token) {
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		return isValidToken(s, Config._RESET_TOKEN, token);
	}
	
	 public final boolean isValidEmailConfirmationToken(String token) {
		Sysprop s = CoreUtils.getInstance().getDao().read(getAppid(), identifier);
		return isValidToken(s, Config._EMAIL_TOKEN, token);
	}
	
	private boolean isValidToken(Sysprop s, String key, String token) {
		if (StringUtils.isBlank(token)) {
			return false;
		}
		
		if (s != null && s.hasProperty(key)) {
			String storedToken = (String) s.getProperty(key);
			 long timeout = (long) Para.getConfig().passwordResetTimeoutSec() * 1000L;
			if (StringUtils.equals(storedToken, token) && (s.getUpdated() + timeout) > Utils.timestamp()) {
				return true;
			}
			
		}
		
		return false;
	}
	
	 private void setGravatarPicture() {
		if (StringUtils.isBlank(picture)) {
			if (email != null) {
				String emailHash = Utils.md5(email.toLowerCase());
				setPicture("https://www.gravatar.com/avatar/" + emailHash + "?size=400&d=mm&r=pg");
			}
			 else {
				setPicture("https://www.gravatar.com/avatar?d=mm&size=400");
			}
			
		}
		
	}
	
	 public enum Groups {
		 USERS, MODS, ADMINS;
		public String toString() {
			return this.name().toLowerCase();
		}
		
	}
	
	 public enum Roles {
		 USER, MOD, ADMIN;
		public String toString() {
			return "ROLE_".concat(this.name());
		}
		
	}
	
	public final String getId() {
		return id;
	}
	
	public final void setId(String id) {
		this.id = id;
	}
	
	public final String getType() {
		type = (type == null) ? Utils.type(this.getClass()) : type;
		return type;
	}
	
	public final void setType(String type) {
		this.type = type;
	}
	
	public String getAppid() {
		appid = (appid == null) ? Para.getConfig().getRootAppIdentifier() : appid;
		return appid;
	}
	
	public void setAppid(String appid) {
		this.appid = appid;
	}
	
	public String getObjectURI() {
		return CoreUtils.getInstance().getObjectURI(this);
	}
	
	public List<String> getTags() {
		return tags;
	}
	
	public void setTags(List<String> tags) {
		this.tags = tags;
	}
	
	public Boolean getStored() {
		if (stored == null) {
			stored = true;
		}
		
		return stored;
	}
	
	public void setStored(Boolean stored) {
		this.stored = stored;
	}
	
	public Boolean getIndexed() {
		if (indexed == null) {
			indexed = true;
		}
		
		return indexed;
	}
	
	public void setIndexed(Boolean indexed) {
		this.indexed = indexed;
	}
	
	public Boolean getCached() {
		if (cached == null) {
			cached = true;
		}
		
		return cached;
	}
	
	public void setCached(Boolean cached) {
		this.cached = cached;
	}
	
	public Long getTimestamp() {
		return (timestamp != null && timestamp != 0) ? timestamp : null;
	}
	
	public void setTimestamp(Long timestamp) {
		this.timestamp = timestamp;
	}
	
	public String getCreatorid() {
		return creatorid;
	}
	
	public void setCreatorid(String creatorid) {
		this.creatorid = creatorid;
	}
	
	public final String getName() {
		return CoreUtils.getInstance().getName(name, id);
	}
	
	public final void setName(String name) {
		this.name = (name == null || !name.isEmpty()) ? name : this.name;
	}
	
	public String getPlural() {
		return Utils.singularToPlural(getType());
	}
	
	public String getParentid() {
		return parentid;
	}
	
	public void setParentid(String parentid) {
		this.parentid = parentid;
	}
	
	public Long getUpdated() {
		return (updated != null && updated != 0) ? updated : null;
	}
	
	public void setUpdated(Long updated) {
		this.updated = updated;
	}
	
	public void update() {
		CoreUtils.getInstance().getDao().update(getAppid(), this);
	}
	
	public boolean exists() {
		return CoreUtils.getInstance().getDao().read(getAppid(), getId()) != null;
	}
	
	public boolean voteUp(String userid) {
		return CoreUtils.getInstance().vote(this, userid, VoteValue.UP);
	}
	
	public boolean voteDown(String userid) {
		return CoreUtils.getInstance().vote(this, userid, VoteValue.DOWN);
	}
	
	public Integer getVotes() {
		return (votes == null) ? 0 : votes;
	}
	
	public void setVotes(Integer votes) {
		this.votes = votes;
	}
	
	public Long getVersion() {
		return (version == null) ? 0 : version;
	}
	
	public void setVersion(Long version) {
		this.version = version;
	}
	
	public Long countLinks(String type2) {
		return CoreUtils.getInstance().countLinks(this, type2);
	}
	
	public List<Linker> getLinks(String type2, Pager... pager) {
		return CoreUtils.getInstance().getLinks(this, type2, pager);
	}
	
	public <P extends ParaObject> List<P> getLinkedObjects(String type, Pager... pager) {
		return CoreUtils.getInstance().getLinkedObjects(this, type, pager);
	}
	
	public <P extends ParaObject> List<P> findLinkedObjects(String type, String field, String query, Pager... pager) {
		return CoreUtils.getInstance().findLinkedObjects(this, type, field, query, pager);
	}
	
	public boolean isLinked(String type2, String id2) {
		return CoreUtils.getInstance().isLinked(this, type2, id2);
	}
	
	public boolean isLinked(ParaObject toObj) {
		return CoreUtils.getInstance().isLinked(this, toObj);
	}
	
	public String link(String id2) {
		return CoreUtils.getInstance().link(this, id2);
	}
	
	public void unlink(String type, String id2) {
		CoreUtils.getInstance().unlink(this, type, id2);
	}
	
	public void unlinkAll() {
		CoreUtils.getInstance().unlinkAll(this);
	}
	
	public Long countChildren(String type) {
		return CoreUtils.getInstance().countChildren(this, type);
	}
	
	public <P extends ParaObject> List<P> getChildren(String type, Pager... pager) {
		return CoreUtils.getInstance().getChildren(this, type, pager);
	}
	
	public <P extends ParaObject> List<P> getChildren(String type, String field, String term, Pager... pager) {
		return CoreUtils.getInstance().getChildren(this, type, field, term, pager);
	}
	
	public <P extends ParaObject> List<P> findChildren(String type, String query, Pager... pager) {
		return CoreUtils.getInstance().findChildren(this, type, query, pager);
	}
	
	public void deleteChildren(String type) {
		CoreUtils.getInstance().deleteChildren(this, type);
	}
	
	public int hashCode() {
		int hash = 7;
		hash = 67 * hash + Objects.hashCode(this.id) + Objects.hashCode(this.name);
		return hash;
	}
	
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		
		if (getClass() != obj.getClass()) {
			return false;
		}
		
		final ParaObject other = (ParaObject) obj;
		if (!Objects.equals(this.id, other.getId())) {
			return false;
		}
		
		return true;
	}
	
	public String toString() {
		return ParaObjectUtils.toJSON(this);
	}
	
}


