commit cb714f4cee45ce2807320ded38ed0bee846f2397
Author: Josh Cummings <josh.cummings@gmail.com>
Date:   Tue May 28 10:36:40 2019 -0600

    Simplify Default Configuration
    
    Switching off matchSubdomains by default for a simpler initial
    configuration.

diff --git a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
index eb1dcb94..c5f68130 100644
--- a/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
+++ b/spring-security-oauth2/src/main/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolver.java
@@ -43,7 +43,7 @@ public class DefaultRedirectResolver implements RedirectResolver {
 
 	private Collection<String> redirectGrantTypes = Arrays.asList("implicit", "authorization_code");
 
-	private boolean matchSubdomains = true;
+	private boolean matchSubdomains = false;
 
 	private boolean matchPorts = true;
 
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
index 0f2f3719..0265cae2 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/code/SubdomainRedirectResolverTests.java
@@ -7,6 +7,7 @@ import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
 
+import org.junit.Before;
 import org.junit.Test;
 import org.springframework.security.oauth2.common.exceptions.RedirectMismatchException;
 import org.springframework.security.oauth2.provider.client.BaseClientDetails;
@@ -14,17 +15,22 @@ import org.springframework.security.oauth2.provider.endpoint.DefaultRedirectReso
 
 public class SubdomainRedirectResolverTests
 {
-	private final DefaultRedirectResolver resolver = new DefaultRedirectResolver();
+	private DefaultRedirectResolver resolver;
 	private final BaseClientDetails client = new BaseClientDetails();
 
 	{
 		client.setAuthorizedGrantTypes(Collections.singleton("authorization_code"));
 	}
 
+	@Before
+	public void setup() {
+		resolver = new DefaultRedirectResolver();
+	}
 
 	@Test
 	public void testRedirectMatch() throws Exception
 	{
+		resolver.setMatchSubdomains(true);
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http://watchdox.com"));
 		client.setRegisteredRedirectUri(redirectUris);
 		String requestedRedirect = "http://anywhere.watchdox.com";
diff --git a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java
index 8d823606..fda7d8ea 100644
--- a/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java
+++ b/spring-security-oauth2/src/test/java/org/springframework/security/oauth2/provider/endpoint/DefaultRedirectResolverTests.java
@@ -135,12 +135,20 @@ public class DefaultRedirectResolverTests {
 	// gh-747
 	@Test
 	public void testRedirectMatchingSubdomain() throws Exception {
+		resolver.setMatchSubdomains(true);
 		Set<String> redirectUris = new HashSet<String>(Arrays.asList("http://anywhere.com/foo"));
 		String requestedRedirect = "http://2.anywhere.com/foo";
 		client.setRegisteredRedirectUri(redirectUris);
 		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
 	}
 
+	@Test(expected = RedirectMismatchException.class)
+	public void testRedirectMatchSubdomainsDefaultsFalse() {
+		Set<String> redirectUris = new HashSet<String>(Arrays.asList("https://anywhere.com"));
+		client.setRegisteredRedirectUri(redirectUris);
+		resolver.resolveRedirect("https://2.anywhere.com", client);
+	}
+
 	// gh-746
 	@Test(expected = RedirectMismatchException.class)
 	public void testRedirectNotMatchingPort() throws Exception {
@@ -286,4 +294,4 @@ public class DefaultRedirectResolverTests {
 		String requestedRedirect = "http://anywhere.com/?p1&p2=v2";
 		assertEquals(requestedRedirect, resolver.resolveRedirect(requestedRedirect, client));
 	}
-}
\ No newline at end of file
+}
